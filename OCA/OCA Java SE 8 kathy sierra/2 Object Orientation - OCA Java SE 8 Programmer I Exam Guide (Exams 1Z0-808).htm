<!DOCTYPE html>
<!-- saved from url=(0082)https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html -->
<html class=" js flexbox flexboxlegacy no-touch websqldatabase indexeddb history csscolumns csstransforms localstorage sessionstorage applicationcache svg inlinesvg zoom" lang="en" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#" itemscope="" itemtype="http://schema.org/Book http://schema.org/ItemPage" "="" data-login-url="/accounts/login/" data-offline-url="/" data-url="/library/view/oca-java-se/9781260011388/cover.html" data-csrf-cookie="csrfsafari" data-highlight-privacy="" data-user-id="2360587" data-user-uuid="bece7dd7-9327-4cc1-a1c8-17e84b9a1059" data-username="haridave" data-account-type="Trial" data-activated-trial-date="12/18/2017" data-archive="9781260011388" data-publishers="McGraw-Hill" data-htmlfile-name="cover.html" data-epub-title="OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)" data-debug="0" data-testing="0" style=""><!--<![endif]--><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><meta name="author" content="Safari Books Online"><meta name="format-detection" content="telephone=no"><meta http-equiv="cleartype" content="on"><meta name="HandheldFriendly" content="True"><meta name="MobileOptimized" content="320"><meta name="apple-itunes-app" content="app-id=881697395, app-argument=safaridetail://9781260011388"><meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0, maximum-scale=1.0"><meta property="twitter:account_id" content="4503599627559754"><script type="text/javascript" src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/510f1a6865"></script><script src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/nr-spa-1071.min.js"></script><script src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/1732687426968531" async=""></script><script async="" src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/fbevents.js"></script><script type="text/javascript" async="" src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/bat.js"></script><script type="text/javascript" async="" src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/conversion_async.js"></script><script type="text/javascript" async="" src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/insight.min.js"></script><script type="text/javascript" async="" src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/conversion_async.js"></script><script type="text/javascript" async="" src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/linkid.js"></script><script async="" src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/gtm.js"></script><script async="" src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/analytics.js"></script><script type="text/javascript">(window.NREUM||(NREUM={})).loader_config={xpid:"VQQDUVVVGwACU1RUAQA="};window.NREUM||(NREUM={}),__nr_require=function(t,e,n){function r(n){if(!e[n]){var o=e[n]={exports:{}};t[n][0].call(o.exports,function(e){var o=t[n][1][e];return r(o||e)},o,o.exports)}return e[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(t,e,n){function r(t){try{c.console&&console.log(t)}catch(e){}}var o,i=t("ee"),a=t(20),c={};try{o=localStorage.getItem("__nr_flags").split(","),console&&"function"==typeof console.log&&(c.console=!0,o.indexOf("dev")!==-1&&(c.dev=!0),o.indexOf("nr_dev")!==-1&&(c.nrDev=!0))}catch(s){}c.nrDev&&i.on("internal-error",function(t){r(t.stack)}),c.dev&&i.on("fn-err",function(t,e,n){r(n.stack)}),c.dev&&(r("NR AGENT IN DEVELOPMENT MODE"),r("flags: "+a(c,function(t,e){return t}).join(", ")))},{}],2:[function(t,e,n){function r(t,e,n,r,c){try{h?h-=1:o(c||new UncaughtException(t,e,n),!0)}catch(f){try{i("ierr",[f,s.now(),!0])}catch(d){}}return"function"==typeof u&&u.apply(this,a(arguments))}function UncaughtException(t,e,n){this.message=t||"Uncaught error with no additional information",this.sourceURL=e,this.line=n}function o(t,e){var n=e?null:s.now();i("err",[t,n])}var i=t("handle"),a=t(21),c=t("ee"),s=t("loader"),f=t("gos"),u=window.onerror,d=!1,p="nr@seenError",h=0;s.features.err=!0,t(1),window.onerror=r;try{throw new Error}catch(l){"stack"in l&&(t(13),t(12),"addEventListener"in window&&t(6),s.xhrWrappable&&t(14),d=!0)}c.on("fn-start",function(t,e,n){d&&(h+=1)}),c.on("fn-err",function(t,e,n){d&&!n[p]&&(f(n,p,function(){return!0}),this.thrown=!0,o(n))}),c.on("fn-end",function(){d&&!this.thrown&&h>0&&(h-=1)}),c.on("internal-error",function(t){i("ierr",[t,s.now(),!0])})},{}],3:[function(t,e,n){t("loader").features.ins=!0},{}],4:[function(t,e,n){function r(){M++,S=y.hash,this[u]=b.now()}function o(){M--,y.hash!==S&&i(0,!0);var t=b.now();this[l]=~~this[l]+t-this[u],this[d]=t}function i(t,e){E.emit("newURL",[""+y,e])}function a(t,e){t.on(e,function(){this[e]=b.now()})}var c="-start",s="-end",f="-body",u="fn"+c,d="fn"+s,p="cb"+c,h="cb"+s,l="jsTime",m="fetch",v="addEventListener",w=window,y=w.location,b=t("loader");if(w[v]&&b.xhrWrappable){var g=t(10),x=t(11),E=t(8),P=t(6),O=t(13),R=t(7),T=t(14),L=t(9),j=t("ee"),N=j.get("tracer");t(15),b.features.spa=!0;var S,M=0;j.on(u,r),j.on(p,r),j.on(d,o),j.on(h,o),j.buffer([u,d,"xhr-done","xhr-resolved"]),P.buffer([u]),O.buffer(["setTimeout"+s,"clearTimeout"+c,u]),T.buffer([u,"new-xhr","send-xhr"+c]),R.buffer([m+c,m+"-done",m+f+c,m+f+s]),E.buffer(["newURL"]),g.buffer([u]),x.buffer(["propagate",p,h,"executor-err","resolve"+c]),N.buffer([u,"no-"+u]),L.buffer(["new-jsonp","cb-start","jsonp-error","jsonp-end"]),a(T,"send-xhr"+c),a(j,"xhr-resolved"),a(j,"xhr-done"),a(R,m+c),a(R,m+"-done"),a(L,"new-jsonp"),a(L,"jsonp-end"),a(L,"cb-start"),E.on("pushState-end",i),E.on("replaceState-end",i),w[v]("hashchange",i,!0),w[v]("load",i,!0),w[v]("popstate",function(){i(0,M>1)},!0)}},{}],5:[function(t,e,n){function r(t){}if(window.performance&&window.performance.timing&&window.performance.getEntriesByType){var o=t("ee"),i=t("handle"),a=t(13),c=t(12),s="learResourceTimings",f="addEventListener",u="resourcetimingbufferfull",d="bstResource",p="resource",h="-start",l="-end",m="fn"+h,v="fn"+l,w="bstTimer",y="pushState",b=t("loader");b.features.stn=!0,t(8);var g=NREUM.o.EV;o.on(m,function(t,e){var n=t[0];n instanceof g&&(this.bstStart=b.now())}),o.on(v,function(t,e){var n=t[0];n instanceof g&&i("bst",[n,e,this.bstStart,b.now()])}),a.on(m,function(t,e,n){this.bstStart=b.now(),this.bstType=n}),a.on(v,function(t,e){i(w,[e,this.bstStart,b.now(),this.bstType])}),c.on(m,function(){this.bstStart=b.now()}),c.on(v,function(t,e){i(w,[e,this.bstStart,b.now(),"requestAnimationFrame"])}),o.on(y+h,function(t){this.time=b.now(),this.startPath=location.pathname+location.hash}),o.on(y+l,function(t){i("bstHist",[location.pathname+location.hash,this.startPath,this.time])}),f in window.performance&&(window.performance["c"+s]?window.performance[f](u,function(t){i(d,[window.performance.getEntriesByType(p)]),window.performance["c"+s]()},!1):window.performance[f]("webkit"+u,function(t){i(d,[window.performance.getEntriesByType(p)]),window.performance["webkitC"+s]()},!1)),document[f]("scroll",r,{passive:!0}),document[f]("keypress",r,!1),document[f]("click",r,!1)}},{}],6:[function(t,e,n){function r(t){for(var e=t;e&&!e.hasOwnProperty(u);)e=Object.getPrototypeOf(e);e&&o(e)}function o(t){c.inPlace(t,[u,d],"-",i)}function i(t,e){return t[1]}var a=t("ee").get("events"),c=t(23)(a,!0),s=t("gos"),f=XMLHttpRequest,u="addEventListener",d="removeEventListener";e.exports=a,"getPrototypeOf"in Object?(r(document),r(window),r(f.prototype)):f.prototype.hasOwnProperty(u)&&(o(window),o(f.prototype)),a.on(u+"-start",function(t,e){var n=t[1],r=s(n,"nr@wrapped",function(){function t(){if("function"==typeof n.handleEvent)return n.handleEvent.apply(n,arguments)}var e={object:t,"function":n}[typeof n];return e?c(e,"fn-",null,e.name||"anonymous"):n});this.wrapped=t[1]=r}),a.on(d+"-start",function(t){t[1]=this.wrapped||t[1]})},{}],7:[function(t,e,n){function r(t,e,n){var r=t[e];"function"==typeof r&&(t[e]=function(){var t=r.apply(this,arguments);return o.emit(n+"start",arguments,t),t.then(function(e){return o.emit(n+"end",[null,e],t),e},function(e){throw o.emit(n+"end",[e],t),e})})}var o=t("ee").get("fetch"),i=t(20);e.exports=o;var a=window,c="fetch-",s=c+"body-",f=["arrayBuffer","blob","json","text","formData"],u=a.Request,d=a.Response,p=a.fetch,h="prototype";u&&d&&p&&(i(f,function(t,e){r(u[h],e,s),r(d[h],e,s)}),r(a,"fetch",c),o.on(c+"end",function(t,e){var n=this;e?e.clone().arrayBuffer().then(function(t){n.rxSize=t.byteLength,o.emit(c+"done",[null,e],n)}):o.emit(c+"done",[t],n)}))},{}],8:[function(t,e,n){var r=t("ee").get("history"),o=t(23)(r);e.exports=r,o.inPlace(window.history,["pushState","replaceState"],"-")},{}],9:[function(t,e,n){function r(t){function e(){s.emit("jsonp-end",[],p),t.removeEventListener("load",e,!1),t.removeEventListener("error",n,!1)}function n(){s.emit("jsonp-error",[],p),s.emit("jsonp-end",[],p),t.removeEventListener("load",e,!1),t.removeEventListener("error",n,!1)}var r=t&&"string"==typeof t.nodeName&&"script"===t.nodeName.toLowerCase();if(r){var o="function"==typeof t.addEventListener;if(o){var a=i(t.src);if(a){var u=c(a),d="function"==typeof u.parent[u.key];if(d){var p={};f.inPlace(u.parent,[u.key],"cb-",p),t.addEventListener("load",e,!1),t.addEventListener("error",n,!1),s.emit("new-jsonp",[t.src],p)}}}}}function o(){return"addEventListener"in window}function i(t){var e=t.match(u);return e?e[1]:null}function a(t,e){var n=t.match(p),r=n[1],o=n[3];return o?a(o,e[r]):e[r]}function c(t){var e=t.match(d);return e&&e.length>=3?{key:e[2],parent:a(e[1],window)}:{key:t,parent:window}}var s=t("ee").get("jsonp"),f=t(23)(s);if(e.exports=s,o()){var u=/[?&](?:callback|cb)=([^&#]+)/,d=/(.*)\.([^.]+)/,p=/^(\w+)(\.|$)(.*)$/,h=["appendChild","insertBefore","replaceChild"];f.inPlace(HTMLElement.prototype,h,"dom-"),f.inPlace(HTMLHeadElement.prototype,h,"dom-"),f.inPlace(HTMLBodyElement.prototype,h,"dom-"),s.on("dom-start",function(t){r(t[0])})}},{}],10:[function(t,e,n){var r=t("ee").get("mutation"),o=t(23)(r),i=NREUM.o.MO;e.exports=r,i&&(window.MutationObserver=function(t){return this instanceof i?new i(o(t,"fn-")):i.apply(this,arguments)},MutationObserver.prototype=i.prototype)},{}],11:[function(t,e,n){function r(t){var e=a.context(),n=c(t,"executor-",e),r=new f(n);return a.context(r).getCtx=function(){return e},a.emit("new-promise",[r,e],e),r}function o(t,e){return e}var i=t(23),a=t("ee").get("promise"),c=i(a),s=t(20),f=NREUM.o.PR;e.exports=a,f&&(window.Promise=r,["all","race"].forEach(function(t){var e=f[t];f[t]=function(n){function r(t){return function(){a.emit("propagate",[null,!o],i),o=o||!t}}var o=!1;s(n,function(e,n){Promise.resolve(n).then(r("all"===t),r(!1))});var i=e.apply(f,arguments),c=f.resolve(i);return c}}),["resolve","reject"].forEach(function(t){var e=f[t];f[t]=function(t){var n=e.apply(f,arguments);return t!==n&&a.emit("propagate",[t,!0],n),n}}),f.prototype["catch"]=function(t){return this.then(null,t)},f.prototype=Object.create(f.prototype,{constructor:{value:r}}),s(Object.getOwnPropertyNames(f),function(t,e){try{r[e]=f[e]}catch(n){}}),a.on("executor-start",function(t){t[0]=c(t[0],"resolve-",this),t[1]=c(t[1],"resolve-",this)}),a.on("executor-err",function(t,e,n){t[1](n)}),c.inPlace(f.prototype,["then"],"then-",o),a.on("then-start",function(t,e){this.promise=e,t[0]=c(t[0],"cb-",this),t[1]=c(t[1],"cb-",this)}),a.on("then-end",function(t,e,n){this.nextPromise=n;var r=this.promise;a.emit("propagate",[r,!0],n)}),a.on("cb-end",function(t,e,n){a.emit("propagate",[n,!0],this.nextPromise)}),a.on("propagate",function(t,e,n){this.getCtx&&!e||(this.getCtx=function(){if(t instanceof Promise)var e=a.context(t);return e&&e.getCtx?e.getCtx():this})}),r.toString=function(){return""+f})},{}],12:[function(t,e,n){var r=t("ee").get("raf"),o=t(23)(r),i="equestAnimationFrame";e.exports=r,o.inPlace(window,["r"+i,"mozR"+i,"webkitR"+i,"msR"+i],"raf-"),r.on("raf-start",function(t){t[0]=o(t[0],"fn-")})},{}],13:[function(t,e,n){function r(t,e,n){t[0]=a(t[0],"fn-",null,n)}function o(t,e,n){this.method=n,this.timerDuration=isNaN(t[1])?0:+t[1],t[0]=a(t[0],"fn-",this,n)}var i=t("ee").get("timer"),a=t(23)(i),c="setTimeout",s="setInterval",f="clearTimeout",u="-start",d="-";e.exports=i,a.inPlace(window,[c,"setImmediate"],c+d),a.inPlace(window,[s],s+d),a.inPlace(window,[f,"clearImmediate"],f+d),i.on(s+u,r),i.on(c+u,o)},{}],14:[function(t,e,n){function r(t,e){d.inPlace(e,["onreadystatechange"],"fn-",c)}function o(){var t=this,e=u.context(t);t.readyState>3&&!e.resolved&&(e.resolved=!0,u.emit("xhr-resolved",[],t)),d.inPlace(t,y,"fn-",c)}function i(t){b.push(t),l&&(x?x.then(a):v?v(a):(E=-E,P.data=E))}function a(){for(var t=0;t<b.length;t++)r([],b[t]);b.length&&(b=[])}function c(t,e){return e}function s(t,e){for(var n in t)e[n]=t[n];return e}t(6);var f=t("ee"),u=f.get("xhr"),d=t(23)(u),p=NREUM.o,h=p.XHR,l=p.MO,m=p.PR,v=p.SI,w="readystatechange",y=["onload","onerror","onabort","onloadstart","onloadend","onprogress","ontimeout"],b=[];e.exports=u;var g=window.XMLHttpRequest=function(t){var e=new h(t);try{u.emit("new-xhr",[e],e),e.addEventListener(w,o,!1)}catch(n){try{u.emit("internal-error",[n])}catch(r){}}return e};if(s(h,g),g.prototype=h.prototype,d.inPlace(g.prototype,["open","send"],"-xhr-",c),u.on("send-xhr-start",function(t,e){r(t,e),i(e)}),u.on("open-xhr-start",r),l){var x=m&&m.resolve();if(!v&&!m){var E=1,P=document.createTextNode(E);new l(a).observe(P,{characterData:!0})}}else f.on("fn-end",function(t){t[0]&&t[0].type===w||a()})},{}],15:[function(t,e,n){function r(t){var e=this.params,n=this.metrics;if(!this.ended){this.ended=!0;for(var r=0;r<d;r++)t.removeEventListener(u[r],this.listener,!1);if(!e.aborted){if(n.duration=a.now()-this.startTime,4===t.readyState){e.status=t.status;var i=o(t,this.lastSize);if(i&&(n.rxSize=i),this.sameOrigin){var s=t.getResponseHeader("X-NewRelic-App-Data");s&&(e.cat=s.split(", ").pop())}}else e.status=0;n.cbTime=this.cbTime,f.emit("xhr-done",[t],t),c("xhr",[e,n,this.startTime])}}}function o(t,e){var n=t.responseType;if("json"===n&&null!==e)return e;var r="arraybuffer"===n||"blob"===n||"json"===n?t.response:t.responseText;return l(r)}function i(t,e){var n=s(e),r=t.params;r.host=n.hostname+":"+n.port,r.pathname=n.pathname,t.sameOrigin=n.sameOrigin}var a=t("loader");if(a.xhrWrappable){var c=t("handle"),s=t(16),f=t("ee"),u=["load","error","abort","timeout"],d=u.length,p=t("id"),h=t(19),l=t(18),m=window.XMLHttpRequest;a.features.xhr=!0,t(14),f.on("new-xhr",function(t){var e=this;e.totalCbs=0,e.called=0,e.cbTime=0,e.end=r,e.ended=!1,e.xhrGuids={},e.lastSize=null,h&&(h>34||h<10)||window.opera||t.addEventListener("progress",function(t){e.lastSize=t.loaded},!1)}),f.on("open-xhr-start",function(t){this.params={method:t[0]},i(this,t[1]),this.metrics={}}),f.on("open-xhr-end",function(t,e){"loader_config"in NREUM&&"xpid"in NREUM.loader_config&&this.sameOrigin&&e.setRequestHeader("X-NewRelic-ID",NREUM.loader_config.xpid)}),f.on("send-xhr-start",function(t,e){var n=this.metrics,r=t[0],o=this;if(n&&r){var i=l(r);i&&(n.txSize=i)}this.startTime=a.now(),this.listener=function(t){try{"abort"===t.type&&(o.params.aborted=!0),("load"!==t.type||o.called===o.totalCbs&&(o.onloadCalled||"function"!=typeof e.onload))&&o.end(e)}catch(n){try{f.emit("internal-error",[n])}catch(r){}}};for(var c=0;c<d;c++)e.addEventListener(u[c],this.listener,!1)}),f.on("xhr-cb-time",function(t,e,n){this.cbTime+=t,e?this.onloadCalled=!0:this.called+=1,this.called!==this.totalCbs||!this.onloadCalled&&"function"==typeof n.onload||this.end(n)}),f.on("xhr-load-added",function(t,e){var n=""+p(t)+!!e;this.xhrGuids&&!this.xhrGuids[n]&&(this.xhrGuids[n]=!0,this.totalCbs+=1)}),f.on("xhr-load-removed",function(t,e){var n=""+p(t)+!!e;this.xhrGuids&&this.xhrGuids[n]&&(delete this.xhrGuids[n],this.totalCbs-=1)}),f.on("addEventListener-end",function(t,e){e instanceof m&&"load"===t[0]&&f.emit("xhr-load-added",[t[1],t[2]],e)}),f.on("removeEventListener-end",function(t,e){e instanceof m&&"load"===t[0]&&f.emit("xhr-load-removed",[t[1],t[2]],e)}),f.on("fn-start",function(t,e,n){e instanceof m&&("onload"===n&&(this.onload=!0),("load"===(t[0]&&t[0].type)||this.onload)&&(this.xhrCbStart=a.now()))}),f.on("fn-end",function(t,e){this.xhrCbStart&&f.emit("xhr-cb-time",[a.now()-this.xhrCbStart,this.onload,e],e)})}},{}],16:[function(t,e,n){e.exports=function(t){var e=document.createElement("a"),n=window.location,r={};e.href=t,r.port=e.port;var o=e.href.split("://");!r.port&&o[1]&&(r.port=o[1].split("/")[0].split("@").pop().split(":")[1]),r.port&&"0"!==r.port||(r.port="https"===o[0]?"443":"80"),r.hostname=e.hostname||n.hostname,r.pathname=e.pathname,r.protocol=o[0],"/"!==r.pathname.charAt(0)&&(r.pathname="/"+r.pathname);var i=!e.protocol||":"===e.protocol||e.protocol===n.protocol,a=e.hostname===document.domain&&e.port===n.port;return r.sameOrigin=i&&(!e.hostname||a),r}},{}],17:[function(t,e,n){function r(){}function o(t,e,n){return function(){return i(t,[f.now()].concat(c(arguments)),e?null:this,n),e?void 0:this}}var i=t("handle"),a=t(20),c=t(21),s=t("ee").get("tracer"),f=t("loader"),u=NREUM;"undefined"==typeof window.newrelic&&(newrelic=u);var d=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit","addRelease"],p="api-",h=p+"ixn-";a(d,function(t,e){u[e]=o(p+e,!0,"api")}),u.addPageAction=o(p+"addPageAction",!0),u.setCurrentRouteName=o(p+"routeName",!0),e.exports=newrelic,u.interaction=function(){return(new r).get()};var l=r.prototype={createTracer:function(t,e){var n={},r=this,o="function"==typeof e;return i(h+"tracer",[f.now(),t,n],r),function(){if(s.emit((o?"":"no-")+"fn-start",[f.now(),r,o],n),o)try{return e.apply(this,arguments)}catch(t){throw s.emit("fn-err",[arguments,this,t],n),t}finally{s.emit("fn-end",[f.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(t,e){l[e]=o(h+e)}),newrelic.noticeError=function(t){"string"==typeof t&&(t=new Error(t)),i("err",[t,f.now()])}},{}],18:[function(t,e,n){e.exports=function(t){if("string"==typeof t&&t.length)return t.length;if("object"==typeof t){if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer&&t.byteLength)return t.byteLength;if("undefined"!=typeof Blob&&t instanceof Blob&&t.size)return t.size;if(!("undefined"!=typeof FormData&&t instanceof FormData))try{return JSON.stringify(t).length}catch(e){return}}}},{}],19:[function(t,e,n){var r=0,o=navigator.userAgent.match(/Firefox[\/\s](\d+\.\d+)/);o&&(r=+o[1]),e.exports=r},{}],20:[function(t,e,n){function r(t,e){var n=[],r="",i=0;for(r in t)o.call(t,r)&&(n[i]=e(r,t[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;e.exports=r},{}],21:[function(t,e,n){function r(t,e,n){e||(e=0),"undefined"==typeof n&&(n=t?t.length:0);for(var r=-1,o=n-e||0,i=Array(o<0?0:o);++r<o;)i[r]=t[e+r];return i}e.exports=r},{}],22:[function(t,e,n){e.exports={exists:"undefined"!=typeof window.performance&&window.performance.timing&&"undefined"!=typeof window.performance.timing.navigationStart}},{}],23:[function(t,e,n){function r(t){return!(t&&t instanceof Function&&t.apply&&!t[a])}var o=t("ee"),i=t(21),a="nr@original",c=Object.prototype.hasOwnProperty,s=!1;e.exports=function(t,e){function n(t,e,n,o){function nrWrapper(){var r,a,c,s;try{a=this,r=i(arguments),c="function"==typeof n?n(r,a):n||{}}catch(f){p([f,"",[r,a,o],c])}u(e+"start",[r,a,o],c);try{return s=t.apply(a,r)}catch(d){throw u(e+"err",[r,a,d],c),d}finally{u(e+"end",[r,a,s],c)}}return r(t)?t:(e||(e=""),nrWrapper[a]=t,d(t,nrWrapper),nrWrapper)}function f(t,e,o,i){o||(o="");var a,c,s,f="-"===o.charAt(0);for(s=0;s<e.length;s++)c=e[s],a=t[c],r(a)||(t[c]=n(a,f?c+o:o,i,c))}function u(n,r,o){if(!s||e){var i=s;s=!0;try{t.emit(n,r,o,e)}catch(a){p([a,n,r,o])}s=i}}function d(t,e){if(Object.defineProperty&&Object.keys)try{var n=Object.keys(t);return n.forEach(function(n){Object.defineProperty(e,n,{get:function(){return t[n]},set:function(e){return t[n]=e,e}})}),e}catch(r){p([r])}for(var o in t)c.call(t,o)&&(e[o]=t[o]);return e}function p(e){try{t.emit("internal-error",e)}catch(n){}}return t||(t=o),n.inPlace=f,n.flag=a,n}},{}],ee:[function(t,e,n){function r(){}function o(t){function e(t){return t&&t instanceof r?t:t?s(t,c,i):i()}function n(n,r,o,i){if(!p.aborted||i){t&&t(n,r,o);for(var a=e(o),c=l(n),s=c.length,f=0;f<s;f++)c[f].apply(a,r);var d=u[y[n]];return d&&d.push([b,n,r,a]),a}}function h(t,e){w[t]=l(t).concat(e)}function l(t){return w[t]||[]}function m(t){return d[t]=d[t]||o(n)}function v(t,e){f(t,function(t,n){e=e||"feature",y[n]=e,e in u||(u[e]=[])})}var w={},y={},b={on:h,emit:n,get:m,listeners:l,context:e,buffer:v,abort:a,aborted:!1};return b}function i(){return new r}function a(){(u.api||u.feature)&&(p.aborted=!0,u=p.backlog={})}var c="nr@context",s=t("gos"),f=t(20),u={},d={},p=e.exports=o();p.backlog=u},{}],gos:[function(t,e,n){function r(t,e,n){if(o.call(t,e))return t[e];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,e,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return t[e]=r,r}var o=Object.prototype.hasOwnProperty;e.exports=r},{}],handle:[function(t,e,n){function r(t,e,n,r){o.buffer([t],r),o.emit(t,e,n)}var o=t("ee").get("handle");e.exports=r,r.ee=o},{}],id:[function(t,e,n){function r(t){var e=typeof t;return!t||"object"!==e&&"function"!==e?-1:t===window?0:a(t,i,function(){return o++})}var o=1,i="nr@id",a=t("gos");e.exports=r},{}],loader:[function(t,e,n){function r(){if(!x++){var t=g.info=NREUM.info,e=p.getElementsByTagName("script")[0];if(setTimeout(u.abort,3e4),!(t&&t.licenseKey&&t.applicationID&&e))return u.abort();f(y,function(e,n){t[e]||(t[e]=n)}),s("mark",["onload",a()+g.offset],null,"api");var n=p.createElement("script");n.src="https://"+t.agent,e.parentNode.insertBefore(n,e)}}function o(){"complete"===p.readyState&&i()}function i(){s("mark",["domContent",a()+g.offset],null,"api")}function a(){return E.exists&&performance.now?Math.round(performance.now()):(c=Math.max((new Date).getTime(),c))-g.offset}var c=(new Date).getTime(),s=t("handle"),f=t(20),u=t("ee"),d=window,p=d.document,h="addEventListener",l="attachEvent",m=d.XMLHttpRequest,v=m&&m.prototype;NREUM.o={ST:setTimeout,SI:d.setImmediate,CT:clearTimeout,XHR:m,REQ:d.Request,EV:d.Event,PR:d.Promise,MO:d.MutationObserver};var w=""+location,y={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-spa-1071.min.js"},b=m&&v&&v[h]&&!/CriOS/.test(navigator.userAgent),g=e.exports={offset:c,now:a,origin:w,features:{},xhrWrappable:b};t(17),p[h]?(p[h]("DOMContentLoaded",i,!1),d[h]("load",r,!1)):(p[l]("onreadystatechange",o),d[l]("onload",r)),s("mark",["firstbyte",c],null,"api");var x=0,E=t(22)},{}]},{},["loader",2,15,5,3,4]);</script><link rel="apple-touch-icon" href="https://www.safaribooksonline.com/static/images/apple-touch-icon.0c29511d2d72.png"><link rel="shortcut icon" href="https://www.safaribooksonline.com/favicon.ico" type="image/x-icon"><link href="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/css" rel="stylesheet" type="text/css"><title>2&nbsp;Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)</title><link rel="stylesheet" href="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/b8d25f1a9a05.css" type="text/css"><link rel="stylesheet" type="text/css" href="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/annotator.ef38b0457d7b.css"><link rel="stylesheet" href="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/font-awesome.min.css"><style type="text/css" title="ibis-book">@page{margin:1.5em}#sbo-rt-content div{margin:0 .5em 0 .5em}#sbo-rt-content svg{height:98%;width:100%}#sbo-rt-content img{max-height:100%;max-width:100%}#sbo-rt-content a{text-decoration:none}#sbo-rt-content .dedi1{margin-top:8em;margin-bottom:.4em;text-align:center}#sbo-rt-content .dedi{margin-top:1em;margin-bottom:.4em;text-align:center}#sbo-rt-content .copyright{margin-top:1em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .copyrightt{margin-top:1.5em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .h2{font-size:1.8em;margin-top:.5em;margin-bottom:.5em;text-indent:.1em}#sbo-rt-content .h2a{font-size:1.5em;margin-top:.2em;margin-bottom:2.5em;text-indent:.1em}#sbo-rt-content .h2d{font-size:130%;color:#fff;background-color:#000;padding:.2em;margin-right:40%;margin-top:2em;margin-bottom:2em;text-indent:1em}#sbo-rt-content .code{margin-top:1em;margin-bottom:1em;margin-left:5em}#sbo-rt-content .code1{margin-top:1em;margin-bottom:1em;margin-left:1.3em}#sbo-rt-content .codea{margin-top:1em;margin-bottom:1em;margin-left:.1em}#sbo-rt-content .code2{margin-top:1em;margin-bottom:1em;margin-left:2.5em}#sbo-rt-content .code2a{margin-top:1em;margin-bottom:1em;margin-left:3.5em}#sbo-rt-content .toc-chap{margin-top:1em;margin-bottom:.5em;margin-left:1em;text-indent:.01em}#sbo-rt-content .toc{margin-top:.1em;margin-bottom:.1em;margin-left:1.8em;text-indent:.01em}#sbo-rt-content .tocs{margin-top:.6em;margin-bottom:.6em;margin-left:1.2em;text-indent:.01em}#sbo-rt-content .tocs1{margin-top:.6em;margin-bottom:.4em;margin-left:3em;text-indent:.01em}#sbo-rt-content .noindentd{font-size:1.2em;color:#fff;background-color:#000;padding:.2em;margin-right:50%;margin-top:1em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .icon{margin-top:1em;margin-bottom:1em;text-indent:.01em}#sbo-rt-content .noindent{margin-top:.1em;margin-bottom:.1em;text-indent:.01em}#sbo-rt-content .noindentl{margin-top:1em;margin-bottom:.1em;margin-left:2.5em;text-indent:.01em}#sbo-rt-content .indent{margin-top:.1em;margin-bottom:.1em;text-indent:1.2em}#sbo-rt-content .indentt{margin-top:1em;margin-bottom:.1em;text-indent:1.2em}#sbo-rt-content .indenttb{margin-top:1em;margin-bottom:1em;text-indent:1.2em}#sbo-rt-content .h3{font-size:160%;margin-top:1.2em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .h3n{font-size:160%;margin-top:.5em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .h3s{font-size:120%;margin-top:.2em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .h3a{font-size:120%;color:#fff;background-color:#000;padding:.2em;margin-right:40%;margin-top:1.2em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .h3a1{font-size:120%;color:#fff;background-color:#000;padding:.2em;margin-right:65%;margin-top:1.2em;margin-bottom:.001em;text-indent:1em}#sbo-rt-content .line{margin-top:.1em;margin-bottom:.001em;border:0;border-bottom:solid black .1em}#sbo-rt-content .h4s{font-size:120%;margin-top:.5em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .h4{font-size:140%;margin-top:1.2em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .h4a{font-size:120%;margin-top:1.2em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .noindentt{margin-top:1em;margin-bottom:.1em;text-indent:.01em}#sbo-rt-content .indentb{margin-top:.1em;margin-bottom:1.2em;text-indent:1.2em}#sbo-rt-content .imagef{margin-top:1em;margin-bottom:1em;text-align:center}#sbo-rt-content .imagel{margin-top:1em;margin-bottom:1em;text-indent:.1em}#sbo-rt-content .imagel1{margin-top:1em;margin-bottom:1em;margin-left:1em;text-indent:.1em}#sbo-rt-content .images{margin-top:1em;margin-bottom:1em;text-align:center}#sbo-rt-content .inline{text-decoration:middle}#sbo-rt-content .imaget{margin-top:.5em;margin-bottom:.5em;text-indent:.1em}#sbo-rt-content .right{margin-top:.1em;margin-bottom:.1em;text-align:right}#sbo-rt-content .figs{background-color:#000;color:#fff;padding:.2em}#sbo-rt-content .bull{margin-top:.3em;margin-bottom:.1em;margin-left:3.5em;text-indent:-1.5em}#sbo-rt-content .tick{margin-top:.5em;margin-bottom:.1em;text-indent:-2em;margin-left:4em}#sbo-rt-content .drop{font-size:4em;margin:-.2em .01em -.2em .01em;text-indent:.01em;float:left}#sbo-rt-content .tick1{margin-top:.5em;margin-bottom:.1em;text-indent:-2em;margin-left:3em}#sbo-rt-content .noindenttop{margin-top:4em;margin-bottom:.2em;text-indent:.01em}#sbo-rt-content .bulletxlb{margin-top:.4em;margin-bottom:.4em;margin-left:5.7em;text-indent:-1.4em}#sbo-rt-content .bulletxlb1{margin-top:.4em;margin-bottom:.4em;margin-left:7em;text-indent:-1.4em}#sbo-rt-content .bulletxl{margin-top:.4em;margin-bottom:.4em;margin-left:5.7em;text-indent:-5.3em}#sbo-rt-content .bulletxla{margin-top:.4em;margin-bottom:.4em;margin-left:5.7em;text-indent:-3.2em}#sbo-rt-content .bulletxls{margin-top:.4em;margin-bottom:.4em;margin-left:4em;text-indent:-1.4em}#sbo-rt-content .bulletxt{margin-top:1em;margin-bottom:.1em;margin-left:2.6em;text-indent:-1.4em}#sbo-rt-content .bulletxn{margin-top:1em;margin-bottom:.1em;margin-left:2.6em;text-indent:.01em}#sbo-rt-content .bulletx{margin-top:.4em;margin-bottom:.1em;margin-left:2.6em;text-indent:-1.4em}#sbo-rt-content .bulletxs{margin-top:.4em;margin-bottom:.1em;margin-left:4.2em;text-indent:-1.5em}#sbo-rt-content .bulletxsa{margin-top:.4em;margin-bottom:.1em;margin-left:1.6em;text-indent:-1.4em}#sbo-rt-content .bulletxb{margin-top:.3em;margin-bottom:1em;margin-left:2.6em;text-indent:-1.4em}#sbo-rt-content .sidebar{margin-top:1em;margin-bottom:-.1em;border:solid #b2b3b6 .2em;background-color:#666769;padding:.5em;text-indent:.01em}#sbo-rt-content .sidebar1{margin-top:.001em;margin-bottom:1em;border:solid #b2b3b6 .2em;background-color:#e7e7e8;padding:.5em;text-indent:.01em}#sbo-rt-content .sideh{font-size:1.4em;color:#fff;margin-top:.5em;margin-bottom:.5em;text-align:center}#sbo-rt-content .sidehl{font-size:1.2em;margin-top:.5em;margin-bottom:.5em;text-indent:.1em}#sbo-rt-content .side-exam{margin-top:1em;margin-bottom:1em;text-indent:.01em;border:solid .1em;background-color:#eeefef;padding:1em}#sbo-rt-content .Text-icon-exam1{font-weight:bold;margin-top:1em;margin-bottom:.2em;text-indent:.01em}#sbo-rt-content .Text-icon-exam{font-weight:bold;margin-top:.5em;margin-bottom:.2em;text-indent:.01em}#sbo-rt-content .Text-icon-exami{font-weight:bold;margin-top:.5em;margin-bottom:.2em;text-indent:1.2em}#sbo-rt-content .under{text-decoration:underline}#sbo-rt-content .hanga{margin-top:.1em;margin-bottom:.6em;margin-left:2.5em;text-indent:-1.5em}#sbo-rt-content .hangai{margin-top:.1em;margin-bottom:.1em;margin-left:2.5em;text-indent:1.2em}#sbo-rt-content .hangan{margin-top:.1em;margin-bottom:.1em;margin-left:2.5em;text-indent:.1em}#sbo-rt-content .hanga1{margin-top:.1em;margin-bottom:.6em;margin-left:2.5em;text-indent:-2em}#sbo-rt-content .bqt{font-size:.9em;margin-top:1em;margin-bottom:.5em;margin-left:1em;text-indent:.01em}#sbo-rt-content .bq{font-size:.9em;margin-top:.5em;margin-bottom:.5em;margin-left:1.5em;text-indent:.01em}#sbo-rt-content .bqs{font-size:.9em;margin-top:.5em;margin-bottom:.5em;margin-left:2em;text-indent:.01em}#sbo-rt-content .noindentb{margin-top:.1em;margin-bottom:1em;text-indent:.01em}#sbo-rt-content .noindentb1{margin-top:.1em;margin-bottom:2em;text-indent:.01em}#sbo-rt-content .toc-lev1{margin-top:.1em;margin-bottom:.1em;margin-left:3em;text-indent:-1.2em}#sbo-rt-content .toc-lev2{margin-top:.1em;margin-bottom:.1em;margin-left:6.5em;text-indent:-1.2em}#sbo-rt-content .toc-lev3{margin-top:.1em;margin-bottom:.1em;margin-left:1.8em;text-indent:.01em}#sbo-rt-content .toc-lev3a{margin-top:.1em;margin-bottom:.1em;margin-left:5.4em;text-indent:.01em}#sbo-rt-content .toc-index{margin-top:2em;margin-bottom:.1em;margin-left:2em;text-indent:.01em}#sbo-rt-content .numst{margin-top:1em;margin-bottom:.1em;margin-left:2.3em;text-indent:-1.4em}#sbo-rt-content .numst1{margin-top:1em;margin-bottom:.1em;margin-left:1.8em;text-indent:-1.4em}#sbo-rt-content .numsn{margin-top:1em;margin-bottom:.1em;margin-left:2.3em;text-indent:.1em}#sbo-rt-content .numsb{margin-top:.1em;margin-bottom:1em;margin-left:2.3em;text-indent:-1.3em}#sbo-rt-content .nums{margin-top:.3em;margin-bottom:.3em;margin-left:2.3em;text-indent:-1.3em}#sbo-rt-content .figcap{margin-top:.1em;margin-bottom:1.5em;text-indent:.01em}#sbo-rt-content .tabcap{margin-top:1.5em;margin-bottom:.8em;text-indent:.01em}#sbo-rt-content .ash{color:#939598}#sbo-rt-content .ash1{font-size:1.3em;color:#939598}#sbo-rt-content .fonts{font-size:1.2em}#sbo-rt-content .num{margin-top:.1em;margin-bottom:.1em;margin-left:1.6em;text-indent:-1em}#sbo-rt-content .numn{margin-top:.4em;margin-bottom:.1em;margin-left:1.7em;text-indent:.1em}#sbo-rt-content .numin{margin-top:.1em;margin-bottom:.1em;margin-left:1.6em;text-indent:1.2em}#sbo-rt-content .numa{margin-top:.1em;margin-bottom:.4em;margin-left:3.9em;text-indent:-1.7em}#sbo-rt-content .numl{margin-top:.4em;margin-bottom:.1em;margin-left:3.6em;text-indent:-1em}#sbo-rt-content .numln{margin-top:.4em;margin-bottom:.1em;margin-left:3.6em;text-indent:.1em}#sbo-rt-content .bqi{font-size:.9em;margin-top:.5em;margin-bottom:.5em;margin-left:5em;text-indent:1.2em}#sbo-rt-content .noindenttop1{margin-top:4em;margin-bottom:1em;text-indent:.01em}#sbo-rt-content .coden{margin-top:.8em;margin-bottom:.8em;margin-left:1.5em}#sbo-rt-content .numlist{margin-top:.1em;margin-bottom:.1em;margin-left:2.5em;text-indent:-1.5em}#sbo-rt-content .noindent1{margin-top:1em;margin-bottom:1em;text-indent:.01em}#sbo-rt-content .noindentn{margin-top:.1em;margin-bottom:.1em;margin-left:.1em;text-indent:.01em}#sbo-rt-content .image-t{margin-top:.2em;margin-bottom:1.5em;text-indent:.01em}#sbo-rt-content .image-f{margin-top:1em;margin-bottom:.5em;text-align:center}#sbo-rt-content .code-n{margin-top:.5em;margin-bottom:.5em;margin-left:2.3em}#sbo-rt-content .hr{margin-top:.5em;margin-bottom:1.5em;border-bottom:solid #939598 .2em}#sbo-rt-content .bqn{font-size:.9em;margin-top:.8em;margin-bottom:.8em;margin-left:1.3em;text-indent:.01em}#sbo-rt-content .code-n1{margin-top:.7em;margin-bottom:.7em;margin-left:2.8em}#sbo-rt-content .numlistk{margin-top:.1em;margin-bottom:.1em;margin-left:2.2em;text-indent:-1.6em}#sbo-rt-content .numlistk1{margin-top:.5em;margin-bottom:.1em;margin-left:1.9em;text-indent:-1.6em}#sbo-rt-content .code-1{margin-top:.5em;margin-bottom:.5em;margin-left:2.5em}#sbo-rt-content .numlist-n{margin-top:.3em;margin-bottom:.3em;margin-left:2.2em;text-indent:.01em}#sbo-rt-content .num-k{margin-top:.3em;margin-bottom:.3em;margin-left:4em;text-indent:-1.6em}#sbo-rt-content .hang-a{margin-top:.1em;margin-bottom:.5em;margin-left:2.4em;text-indent:.01em}#sbo-rt-content .h5{font-size:120%;margin-top:1.5em;margin-bottom:.3em;text-indent:.01em}#sbo-rt-content .indenta{margin-top:.3em;margin-bottom:.3em;margin-left:1.5em;text-indent:.01em}#sbo-rt-content .indent-a{margin-top:.5em;margin-bottom:.5em;margin-left:1.2em;text-indent:.01em}#sbo-rt-content .indexmain{margin-top:.1em;margin-bottom:.1em;margin-left:1em;text-indent:-1em}#sbo-rt-content .indexhead{margin-top:.7em;margin-bottom:.3em;width:20%;font-size:1.3em;margin-left:1.5em;text-indent:.5em;background-color:#6d6e71;color:#fff;padding:.2em}#sbo-rt-content .indexsub{margin-top:.1em;margin-bottom:.1em;margin-left:2.6em;text-indent:-1em}#sbo-rt-content .h2-n{font-size:1.3em;margin-top:2em;margin-bottom:2em;text-indent:2em;background-color:#231f20;color:#fff;width:30%;padding:.2em}#sbo-rt-content .image-n{margin-top:.1em;margin-bottom:.1em;text-align:center}#sbo-rt-content .imagea{margin-top:2em;margin-bottom:.5em;text-align:left}</style><script> // <![CDATA[
    var g = {
      position_cache: {
        
          "chapter": "/api/v1/book/9781260011388/chapter/cover.html",
          "book_id": "9781260011388",
          "chapter_uri": "cover.html",
          "position": 0,
          "user_uuid": "bece7dd7-9327-4cc1-a1c8-17e84b9a1059",
          "next_chapter_uri": "/library/view/oca-java-se/9781260011388/title.html"
        
      },
      title: "OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0\u002D808)",
      author_list: "Bert Bates, Kathy Sierra",
      format: "book",
      source: "application/epub+zip",
      is_system_book: true,
      is_public: false,
      loaded_from_server: true,
      allow_scripts: false,
      has_mathml: false,
      show_ios_app_teaser: false
    };
    // ]]></script><script src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/modernizr.js"></script><script>
    
      
        

        

        
          
            window.PUBLIC_ANNOTATIONS = true;
          
        

      

      
        window.MOBILE_PUBLIC_ANNOTATIONS = false;
      

    

    
      window.PRIVACY_CONTROL_OVERRIDE = false;
    

    
      window.PRIVACY_CONTROL_SWITCH = true;
    

    
      window.PUBLISHER_PAGES = true;
    

      window.SBO = {
        "constants": {
          "SITB_ENDPOINT": "https://www.safaribooksonline.com/api/v2/sitb/",
          "SEARCH_SELECT_ENDPOINT": "https://www.safaribooksonline.com/api/v2/search/select/",
          "ENABLE_ONLINE_TRAINING": true
        }
      };
  </script><link rel="canonical" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html"><meta name="description" content=" "><meta property="og:title" content="Cover Page"><meta itemprop="isPartOf" content="/library/view/oca-java-se/9781260011388/"><meta itemprop="name" content="Cover Page"><meta property="og:url" itemprop="url" content="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html"><meta property="og:site_name" content="Safari"><meta property="og:image" itemprop="thumbnailUrl" content="https://www.safaribooksonline.com/library/cover/9781260011388/"><meta property="og:description" itemprop="description" content=" "><meta itemprop="inLanguage" content="en"><meta itemprop="publisher" content="McGraw-Hill"><meta property="og:type" content="book"><meta property="og:book:isbn" itemprop="isbn" content="9781260011388"><meta property="og:book:author" itemprop="author" content="Bert Bates"><meta property="og:book:author" itemprop="author" content="Kathy Sierra"><meta property="og:book:tag" itemprop="about" content="Certification"><meta property="og:book:tag" itemprop="about" content="Java"><meta name="twitter:card" content="summary"><meta name="twitter:site" content="@safari"><style type="text/css" id="font-styles" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }"></style><style type="text/css" id="font-family" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }"></style><style type="text/css" id="column-width" data-template="#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }"></style><noscript>&lt;meta http-equiv="refresh" content="0; url=/library/no-js/" /&gt;</noscript><script type="text/javascript">
  (function(i,s,o,g,r,a,m) {
    i['GoogleAnalyticsObject']=r;
    i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();
    a=s.createElement(o),m=s.getElementsByTagName(o)[0];
    a.async=1;
    a.src=g;
    m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  var matches = document.cookie.match(/BrowserCookie\s*=\s*([a-f0-9\-]{36})/),
      user_uuid = null;

  if (matches && matches.length === 2) {
    user_uuid = matches[1];
  }


  ga('create', 'UA-39299553-7', {'userId': 'bece7dd7-9327-4cc1-a1c8-17e84b9a1059' });



  
    ga('set', 'dimension1', 'Trial');
  


ga('set', 'dimension6', user_uuid);


  ga('set', 'dimension2', 'bece7dd7-9327-4cc1-a1c8-17e84b9a1059');
  






//enable enhanced link tracking
ga('require', 'linkid', 'linkid.js');

// reading interface will track pageviews itself
if (document.location.pathname.indexOf("/library/view") !== 0) {
  ga('send', 'pageview');
}
</script><script>
    (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    '//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-5P4V6Z');
  </script><script defer="" src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/vendor.4bb90b301ddb.js"></script><script defer="" src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/reader.7bc20c923d74.js"></script><script src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource"></script><script src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(1)"></script><script async="" src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/MathJax.js"></script><style id="annotator-dynamic-style">.annotator-adder, .annotator-outer, .annotator-notice {
  z-index: 100019;
}
.annotator-filter {
  z-index: 100009;
}</style></head>


<body class="reading sidenav  scalefonts subscribe-panel library nav-collapsed">

    
  
  <noscript> 
    &lt;iframe src="//www.googletagmanager.com/ns.html?id=GTM-5P4V6Z"
            height="0" width="0"
            style="display:none;visibility:hidden"&gt;
    &lt;/iframe&gt;
  </noscript>
  



    
      <div class="hide working" role="status">
        <div class="working-image"></div>
      </div>
      <div class="sbo-site-nav">
        





<a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#container" class="skip">Skip to content</a><header class="topbar t-topbar"><nav role="navigation" class="js-site-nav"><ul class="topnav"><li class="t-logo"><a href="https://www.safaribooksonline.com/home/" class="l0 None safari-home nav-icn js-keyboard-nav-home"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>Safari Home Icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M4 9.9L4 9.9 4 18 16 18 16 9.9 10 4 4 9.9ZM2.6 8.1L2.6 8.1 8.7 1.9 10 0.5 11.3 1.9 17.4 8.1 18 8.7 18 9.5 18 18.1 18 20 16.1 20 3.9 20 2 20 2 18.1 2 9.5 2 8.7 2.6 8.1Z"></path><rect x="10" y="12" width="3" height="7"></rect><rect transform="translate(18.121320, 10.121320) rotate(-315.000000) translate(-18.121320, -10.121320) " x="16.1" y="9.1" width="4" height="2"></rect><rect transform="translate(2.121320, 10.121320) scale(-1, 1) rotate(-315.000000) translate(-2.121320, -10.121320) " x="0.1" y="9.1" width="4" height="2"></rect></g></svg><span>Safari Home</span></a></li><li><a href="https://www.safaribooksonline.com/r/" class="t-recommendations-nav l0 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>recommendations icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M50 25C50 18.2 44.9 12.5 38.3 11.7 37.5 5.1 31.8 0 25 0 18.2 0 12.5 5.1 11.7 11.7 5.1 12.5 0 18.2 0 25 0 31.8 5.1 37.5 11.7 38.3 12.5 44.9 18.2 50 25 50 31.8 50 37.5 44.9 38.3 38.3 44.9 37.5 50 31.8 50 25ZM25 3.1C29.7 3.1 33.6 6.9 34.4 11.8 30.4 12.4 26.9 15.1 25 18.8 23.1 15.1 19.6 12.4 15.6 11.8 16.4 6.9 20.3 3.1 25 3.1ZM34.4 15.6C33.6 19.3 30.7 22.2 27.1 22.9 27.8 19.2 30.7 16.3 34.4 15.6ZM22.9 22.9C19.2 22.2 16.3 19.3 15.6 15.6 19.3 16.3 22.2 19.2 22.9 22.9ZM3.1 25C3.1 20.3 6.9 16.4 11.8 15.6 12.4 19.6 15.1 23.1 18.8 25 15.1 26.9 12.4 30.4 11.8 34.4 6.9 33.6 3.1 29.7 3.1 25ZM22.9 27.1C22.2 30.7 19.3 33.6 15.6 34.4 16.3 30.7 19.2 27.8 22.9 27.1ZM25 46.9C20.3 46.9 16.4 43.1 15.6 38.2 19.6 37.6 23.1 34.9 25 31.3 26.9 34.9 30.4 37.6 34.4 38.2 33.6 43.1 29.7 46.9 25 46.9ZM27.1 27.1C30.7 27.8 33.6 30.7 34.4 34.4 30.7 33.6 27.8 30.7 27.1 27.1ZM38.2 34.4C37.6 30.4 34.9 26.9 31.3 25 34.9 23.1 37.6 19.6 38.2 15.6 43.1 16.4 46.9 20.3 46.9 25 46.9 29.7 43.1 33.6 38.2 34.4Z"></path></g></svg><span>Recommended</span></a></li><li><a href="https://www.safaribooksonline.com/s/" class="t-queue-nav l0 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>queue icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 29.2C25.4 29.2 25.8 29.1 26.1 28.9L48.7 16.8C49.5 16.4 50 15.5 50 14.6 50 13.7 49.5 12.8 48.7 12.4L26.1 0.3C25.4-0.1 24.6-0.1 23.9 0.3L1.3 12.4C0.5 12.8 0 13.7 0 14.6 0 15.5 0.5 16.4 1.3 16.8L23.9 28.9C24.2 29.1 24.6 29.2 25 29.2ZM7.3 14.6L25 5.2 42.7 14.6 25 24 7.3 14.6ZM48.7 22.4L47.7 21.9 25 34.2 2.3 21.9 1.3 22.4C0.5 22.9 0 23.7 0 24.7 0 25.6 0.5 26.5 1.3 26.9L23.9 39.3C24.2 39.5 24.6 39.6 25 39.6 25.4 39.6 25.8 39.5 26.1 39.3L48.7 26.9C49.5 26.5 50 25.6 50 24.7 50 23.7 49.5 22.9 48.7 22.4ZM48.7 32.8L47.7 32.3 25 44.6 2.3 32.3 1.3 32.8C0.5 33.3 0 34.1 0 35.1 0 36 0.5 36.9 1.3 37.3L23.9 49.7C24.2 49.9 24.6 50 25 50 25.4 50 25.8 49.9 26.1 49.7L48.7 37.3C49.5 36.9 50 36 50 35.1 50 34.1 49.5 33.3 48.7 32.8Z"></path></g></svg><span>
                  Queue
              </span></a></li><li class="search"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#" class="t-search-nav trigger nav-icn l0" data-dropdown-selector=".searchbox"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>search icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M31.3 0C20.9 0 12.5 8.4 12.5 18.8 12.5 22.5 13.6 25.9 15.4 28.8L1.2 42.9C-0.4 44.5-0.4 47.2 1.2 48.8 2 49.6 3.1 50 4.2 50 5.2 50 6.3 49.6 7.1 48.8L21.2 34.6C24.1 36.5 27.5 37.5 31.3 37.5 41.6 37.5 50 29.1 50 18.8 50 8.4 41.6 0 31.3 0ZM31.3 31.3C24.4 31.3 18.8 25.6 18.8 18.8 18.8 11.9 24.4 6.3 31.3 6.3 38.1 6.3 43.8 11.9 43.8 18.8 43.8 25.6 38.1 31.3 31.3 31.3Z"></path></g></svg><span>Search</span></a></li><li class="usermenu dropdown"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#" class="trigger l0 nav-icn nav-dropdown"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>navigation arrow</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M0.1 12.5L9.7 3.1C9.8 3 9.9 3 10 3 10.1 3 10.2 3 10.3 3.1L19.9 12.5C20 12.5 20 12.6 20 12.8 20 12.9 20 13 19.9 13L17 15.9C16.9 16 16.8 16 16.7 16 16.5 16 16.4 16 16.4 15.9L10 9.7 3.6 15.9C3.6 16 3.5 16 3.3 16 3.2 16 3.1 16 3 15.9L0.1 13C0 12.9 0 12.8 0 12.7 0 12.7 0 12.6 0.1 12.5Z"></path></g></svg><span>Expand Nav</span></a><div class="drop-content"><ul><li><a href="https://www.safaribooksonline.com/history/" class="t-recent-nav l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>recent items icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 0C11.2 0 0 11.2 0 25 0 38.8 11.2 50 25 50 38.8 50 50 38.8 50 25 50 11.2 38.8 0 25 0ZM6.3 25C6.3 14.6 14.6 6.3 25 6.3 35.4 6.3 43.8 14.6 43.8 25 43.8 35.4 35.4 43.8 25 43.8 14.6 43.8 6.3 35.4 6.3 25ZM31.8 31.5C32.5 30.5 32.4 29.2 31.6 28.3L27.1 23.8 27.1 12.8C27.1 11.5 26.2 10.4 25 10.4 23.9 10.4 22.9 11.5 22.9 12.8L22.9 25.7 28.8 31.7C29.2 32.1 29.7 32.3 30.2 32.3 30.8 32.3 31.3 32 31.8 31.5Z"></path></g></svg><span>History</span></a></li><li><a href="https://www.safaribooksonline.com/topics" class="t-topics-link l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 55" width="20" height="20" version="1.1" fill="#4A3C31"><desc>topics icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 55L50 41.262 50 13.762 25 0 0 13.762 0 41.262 25 55ZM8.333 37.032L8.333 17.968 25 8.462 41.667 17.968 41.667 37.032 25 46.538 8.333 37.032Z"></path></g></svg><span>Topics</span></a></li><li><a href="https://www.safaribooksonline.com/tutorials/" class="l1 nav-icn t-tutorials-nav js-toggle-menu-item None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>tutorials icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M15.8 18.2C15.8 18.2 15.9 18.2 16 18.2 16.1 18.2 16.2 18.2 16.4 18.2 16.5 18.2 16.7 18.1 16.9 18 17 17.9 17.1 17.8 17.2 17.7 17.3 17.6 17.4 17.5 17.4 17.4 17.5 17.2 17.6 16.9 17.6 16.7 17.6 16.6 17.6 16.5 17.6 16.4 17.5 16.2 17.5 16.1 17.4 15.9 17.3 15.8 17.2 15.6 17 15.5 16.8 15.3 16.6 15.3 16.4 15.2 16.2 15.2 16 15.2 15.8 15.2 15.7 15.2 15.5 15.3 15.3 15.4 15.2 15.4 15.1 15.5 15 15.7 14.9 15.8 14.8 15.9 14.7 16 14.7 16.1 14.6 16.3 14.6 16.4 14.6 16.5 14.6 16.6 14.6 16.6 14.6 16.7 14.6 16.9 14.6 17 14.6 17.1 14.7 17.3 14.7 17.4 14.8 17.6 15 17.7 15.1 17.9 15.2 18 15.3 18 15.5 18.1 15.5 18.1 15.6 18.2 15.7 18.2 15.7 18.2 15.7 18.2 15.8 18.2L15.8 18.2ZM9.4 11.5C9.5 11.5 9.5 11.5 9.6 11.5 9.7 11.5 9.9 11.5 10 11.5 10.2 11.5 10.3 11.4 10.5 11.3 10.6 11.2 10.8 11.1 10.9 11 10.9 10.9 11 10.8 11.1 10.7 11.2 10.5 11.2 10.2 11.2 10 11.2 9.9 11.2 9.8 11.2 9.7 11.2 9.5 11.1 9.4 11 9.2 10.9 9.1 10.8 8.9 10.6 8.8 10.5 8.7 10.3 8.6 10 8.5 9.9 8.5 9.7 8.5 9.5 8.5 9.3 8.5 9.1 8.6 9 8.7 8.8 8.7 8.7 8.8 8.6 9 8.5 9.1 8.4 9.2 8.4 9.3 8.2 9.5 8.2 9.8 8.2 10 8.2 10.1 8.2 10.2 8.2 10.3 8.2 10.5 8.3 10.6 8.4 10.7 8.5 10.9 8.6 11.1 8.7 11.2 8.9 11.3 9 11.4 9.1 11.4 9.2 11.4 9.3 11.5 9.3 11.5 9.3 11.5 9.4 11.5 9.4 11.5L9.4 11.5ZM3 4.8C3.1 4.8 3.1 4.8 3.2 4.8 3.4 4.8 3.5 4.8 3.7 4.8 3.8 4.8 4 4.7 4.1 4.6 4.3 4.5 4.4 4.4 4.5 4.3 4.6 4.2 4.6 4.1 4.7 4 4.8 3.8 4.8 3.5 4.8 3.3 4.8 3.1 4.8 3 4.8 2.9 4.7 2.8 4.7 2.6 4.6 2.5 4.5 2.3 4.4 2.2 4.2 2.1 4 1.9 3.8 1.9 3.6 1.8 3.5 1.8 3.3 1.8 3.1 1.8 2.9 1.8 2.7 1.9 2.6 2 2.4 2.1 2.3 2.2 2.2 2.3 2.1 2.4 2 2.5 2 2.6 1.8 2.8 1.8 3 1.8 3.3 1.8 3.4 1.8 3.5 1.8 3.6 1.8 3.8 1.9 3.9 2 4 2.1 4.2 2.2 4.4 2.4 4.5 2.5 4.6 2.6 4.7 2.7 4.7 2.8 4.7 2.9 4.8 2.9 4.8 3 4.8 3 4.8 3 4.8L3 4.8ZM13.1 15.2C13.2 15.1 13.2 15.1 13.2 15.1 13.3 14.9 13.4 14.7 13.6 14.5 13.8 14.2 14.1 14 14.4 13.8 14.7 13.6 15.1 13.5 15.5 13.4 15.9 13.4 16.3 13.4 16.7 13.5 17.2 13.5 17.6 13.7 17.9 13.9 18.2 14.1 18.5 14.4 18.7 14.7 18.9 15 19.1 15.3 19.2 15.6 19.3 15.9 19.4 16.1 19.4 16.4 19.4 17 19.3 17.5 19.1 18.1 19 18.3 18.9 18.5 18.7 18.7 18.5 19 18.3 19.2 18 19.4 17.7 19.6 17.3 19.8 16.9 19.9 16.6 20 16.3 20 16 20 15.8 20 15.6 20 15.4 19.9 15.4 19.9 15.4 19.9 15.4 19.9 15.2 19.9 15 19.8 14.9 19.8 14.8 19.7 14.7 19.7 14.6 19.7 14.4 19.6 14.3 19.5 14.1 19.3 13.7 19.1 13.4 18.7 13.2 18.4 13.1 18.1 12.9 17.8 12.9 17.5 12.8 17.3 12.8 17.1 12.8 16.9L3.5 14.9C3.3 14.9 3.1 14.8 3 14.8 2.7 14.7 2.4 14.5 2.1 14.3 1.7 14 1.4 13.7 1.2 13.3 1 13 0.9 12.6 0.8 12.3 0.7 12 0.7 11.7 0.7 11.4 0.7 11 0.8 10.5 1 10.1 1.1 9.8 1.3 9.5 1.6 9.2 1.8 8.9 2.1 8.7 2.4 8.5 2.8 8.3 3.2 8.1 3.6 8.1 3.9 8 4.2 8 4.5 8 4.6 8 4.8 8 4.9 8.1L6.8 8.5C6.8 8.4 6.8 8.4 6.8 8.4 6.9 8.2 7.1 8 7.2 7.8 7.5 7.5 7.7 7.3 8 7.1 8.4 6.9 8.7 6.8 9.1 6.7 9.5 6.7 10 6.7 10.4 6.8 10.8 6.8 11.2 7 11.5 7.2 11.8 7.5 12.1 7.7 12.4 8 12.6 8.3 12.7 8.6 12.8 8.9 12.9 9.2 13 9.4 13 9.7 13 9.7 13 9.8 13 9.8 13.6 9.9 14.2 10.1 14.9 10.2 15 10.2 15 10.2 15.1 10.2 15.3 10.2 15.4 10.2 15.6 10.2 15.8 10.1 16 10 16.2 9.9 16.4 9.8 16.5 9.6 16.6 9.5 16.8 9.2 16.9 8.8 16.9 8.5 16.9 8.3 16.9 8.2 16.8 8 16.8 7.8 16.7 7.7 16.6 7.5 16.5 7.3 16.3 7.2 16.2 7.1 16 7 15.9 6.9 15.8 6.9 15.7 6.9 15.6 6.8 15.5 6.8L6.2 4.8C6.2 5 6 5.2 5.9 5.3 5.7 5.6 5.5 5.8 5.3 6 4.9 6.2 4.5 6.4 4.1 6.5 3.8 6.6 3.5 6.6 3.2 6.6 3 6.6 2.8 6.6 2.7 6.6 2.6 6.6 2.6 6.5 2.6 6.5 2.5 6.5 2.3 6.5 2.1 6.4 1.8 6.3 1.6 6.1 1.3 6 1 5.7 0.7 5.4 0.5 5 0.3 4.7 0.2 4.4 0.1 4.1 0 3.8 0 3.6 0 3.3 0 2.8 0.1 2.2 0.4 1.7 0.5 1.5 0.7 1.3 0.8 1.1 1.1 0.8 1.3 0.6 1.6 0.5 2 0.3 2.3 0.1 2.7 0.1 3.1 0 3.6 0 4 0.1 4.4 0.2 4.8 0.3 5.1 0.5 5.5 0.8 5.7 1 6 1.3 6.2 1.6 6.3 1.9 6.4 2.3 6.5 2.5 6.6 2.7 6.6 3 6.6 3 6.6 3.1 6.6 3.1 9.7 3.8 12.8 4.4 15.9 5.1 16.1 5.1 16.2 5.2 16.4 5.2 16.7 5.3 16.9 5.5 17.2 5.6 17.5 5.9 17.8 6.2 18.1 6.5 18.3 6.8 18.4 7.2 18.6 7.5 18.6 7.9 18.7 8.2 18.7 8.6 18.7 9 18.6 9.4 18.4 9.8 18.3 10.1 18.2 10.3 18 10.6 17.8 10.9 17.5 11.1 17.3 11.3 16.9 11.6 16.5 11.8 16 11.9 15.7 12 15.3 12 15 12 14.8 12 14.7 12 14.5 11.9 13.9 11.8 13.3 11.7 12.6 11.5 12.5 11.7 12.4 11.9 12.3 12 12.1 12.3 11.9 12.5 11.7 12.7 11.3 12.9 10.9 13.1 10.5 13.2 10.2 13.3 9.9 13.3 9.6 13.3 9.4 13.3 9.2 13.3 9 13.2 9 13.2 9 13.2 9 13.2 8.8 13.2 8.7 13.2 8.5 13.1 8.2 13 8 12.8 7.7 12.6 7.4 12.4 7.1 12 6.8 11.7 6.7 11.4 6.6 11.1 6.5 10.8 6.4 10.6 6.4 10.4 6.4 10.2 5.8 10.1 5.2 9.9 4.5 9.8 4.4 9.8 4.4 9.8 4.3 9.8 4.1 9.8 4 9.8 3.8 9.8 3.6 9.9 3.4 10 3.2 10.1 3 10.2 2.9 10.4 2.8 10.5 2.6 10.8 2.5 11.1 2.5 11.5 2.5 11.6 2.5 11.8 2.6 12 2.6 12.1 2.7 12.3 2.8 12.5 2.9 12.6 3.1 12.8 3.2 12.9 3.3 13 3.5 13.1 3.6 13.1 3.7 13.1 3.8 13.2 3.9 13.2L13.1 15.2 13.1 15.2Z"></path></g></svg><span>Tutorials</span></a></li><li class="nav-offers flyout-parent"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#" class="l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>offers icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M35.9 20.6L27 15.5C26.1 15 24.7 15 23.7 15.5L14.9 20.6C13.9 21.1 13.2 22.4 13.2 23.4L13.2 41.4C13.2 42.4 13.9 43.7 14.9 44.2L23.3 49C24.2 49.5 25.6 49.5 26.6 49L35.9 43.6C36.8 43.1 37.6 41.8 37.6 40.8L37.6 23.4C37.6 22.4 36.8 21.1 35.9 20.6L35.9 20.6ZM40 8.2C39.1 7.6 37.6 7.6 36.7 8.2L30.2 11.9C29.3 12.4 29.3 13.2 30.2 13.8L39.1 18.8C40 19.4 40.7 20.6 40.7 21.7L40.7 39C40.7 40.1 41.4 40.5 42.4 40L48.2 36.6C49.1 36.1 49.8 34.9 49.8 33.8L49.8 15.6C49.8 14.6 49.1 13.3 48.2 12.8L40 8.2 40 8.2ZM27 10.1L33.6 6.4C34.5 5.9 34.5 5 33.6 4.5L26.6 0.5C25.6 0 24.2 0 23.3 0.5L16.7 4.2C15.8 4.7 15.8 5.6 16.7 6.1L23.7 10.1C24.7 10.6 26.1 10.6 27 10.1ZM10.1 21.7C10.1 20.6 10.8 19.4 11.7 18.8L20.6 13.8C21.5 13.2 21.5 12.4 20.6 11.9L13.6 7.9C12.7 7.4 11.2 7.4 10.3 7.9L1.6 12.8C0.7 13.3 0 14.6 0 15.6L0 33.8C0 34.9 0.7 36.1 1.6 36.6L8.4 40.5C9.3 41 10.1 40.6 10.1 39.6L10.1 21.7 10.1 21.7Z"></path></g></svg><span>Offers &amp; Deals</span></a><ul class="flyout"><li><a href="https://www.safaribooksonline.com/oreilly-newsletters/" class="l2 nav-icn"><span>Newsletters</span></a></li></ul></li><li class="nav-highlights"><a href="https://www.safaribooksonline.com/u/0011N00001As6t6QAB/" class="t-highlights-nav l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 35" width="20" height="20" version="1.1" fill="#4A3C31"><desc>highlights icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M13.325 18.071L8.036 18.071C8.036 11.335 12.36 7.146 22.5 5.594L22.5 0C6.37 1.113 0 10.632 0 22.113 0 29.406 3.477 35 10.403 35 15.545 35 19.578 31.485 19.578 26.184 19.578 21.556 17.211 18.891 13.325 18.071L13.325 18.071ZM40.825 18.071L35.565 18.071C35.565 11.335 39.86 7.146 50 5.594L50 0C33.899 1.113 27.5 10.632 27.5 22.113 27.5 29.406 30.977 35 37.932 35 43.045 35 47.078 31.485 47.078 26.184 47.078 21.556 44.74 18.891 40.825 18.071L40.825 18.071Z"></path></g></svg><span>Highlights</span></a></li><li><a href="https://www.safaribooksonline.com/u/" class="t-settings-nav l1 js-settings nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 53" width="20" height="20" version="1.1" fill="#4A3C31"><desc>settings icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M44.6 29.6C44.7 28.6 44.8 27.5 44.8 26.5 44.8 25.5 44.7 24.4 44.6 23.4L49.6 19C50 18.8 50.1 18.3 49.9 17.9 48.9 14.7 47.1 11.7 44.9 9.1 44.6 8.8 44.2 8.7 43.8 8.8L37.4 11.1C35.8 9.8 34 8.7 32.1 8L30.9 1.4C30.8 0.9 30.4 0.6 30 0.5 26.7-0.2 23.3-0.2 20 0.5 19.6 0.6 19.2 0.9 19.1 1.4L17.9 8C16 8.7 14.1 9.8 12.6 11.1L6.2 8.8C5.8 8.7 5.4 8.8 5.1 9.1 2.9 11.7 1.1 14.7 0.1 17.9 -0.1 18.3 0 18.8 0.4 19L5.4 23.4C5.3 24.4 5.2 25.5 5.2 26.5 5.2 27.5 5.3 28.6 5.4 29.6L0.4 34C0 34.2-0.1 34.7 0.1 35.1 1.1 38.3 2.9 41.4 5.1 43.9 5.4 44.2 5.8 44.4 6.2 44.2L12.6 42C14.1 43.2 16 44.3 17.9 45L19.1 51.7C19.2 52.1 19.6 52.5 20 52.5 21.6 52.8 23.3 53 25 53 26.7 53 28.4 52.8 30 52.5 30.4 52.5 30.8 52.1 30.9 51.7L32.1 45C34 44.3 35.8 43.2 37.4 42L43.8 44.2C44.2 44.4 44.6 44.2 44.9 43.9 47.1 41.4 48.9 38.3 49.9 35.1 50.1 34.7 50 34.2 49.6 34L44.6 29.6ZM25 36.4C19.6 36.4 15.2 32 15.2 26.5 15.2 21 19.6 16.6 25 16.6 30.4 16.6 34.8 21 34.8 26.5 34.8 32 30.4 36.4 25 36.4Z"></path></g></svg><span>Settings</span></a></li><li><a href="https://www.safaribooksonline.com/public/support" class="l1 no-icon">Support</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l1 no-icon">Sign Out</a></li></ul><ul class="profile"><li><a href="https://www.safaribooksonline.com/u/" class="l2 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 53" width="20" height="20" version="1.1" fill="#4A3C31"><desc>settings icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M44.6 29.6C44.7 28.6 44.8 27.5 44.8 26.5 44.8 25.5 44.7 24.4 44.6 23.4L49.6 19C50 18.8 50.1 18.3 49.9 17.9 48.9 14.7 47.1 11.7 44.9 9.1 44.6 8.8 44.2 8.7 43.8 8.8L37.4 11.1C35.8 9.8 34 8.7 32.1 8L30.9 1.4C30.8 0.9 30.4 0.6 30 0.5 26.7-0.2 23.3-0.2 20 0.5 19.6 0.6 19.2 0.9 19.1 1.4L17.9 8C16 8.7 14.1 9.8 12.6 11.1L6.2 8.8C5.8 8.7 5.4 8.8 5.1 9.1 2.9 11.7 1.1 14.7 0.1 17.9 -0.1 18.3 0 18.8 0.4 19L5.4 23.4C5.3 24.4 5.2 25.5 5.2 26.5 5.2 27.5 5.3 28.6 5.4 29.6L0.4 34C0 34.2-0.1 34.7 0.1 35.1 1.1 38.3 2.9 41.4 5.1 43.9 5.4 44.2 5.8 44.4 6.2 44.2L12.6 42C14.1 43.2 16 44.3 17.9 45L19.1 51.7C19.2 52.1 19.6 52.5 20 52.5 21.6 52.8 23.3 53 25 53 26.7 53 28.4 52.8 30 52.5 30.4 52.5 30.8 52.1 30.9 51.7L32.1 45C34 44.3 35.8 43.2 37.4 42L43.8 44.2C44.2 44.4 44.6 44.2 44.9 43.9 47.1 41.4 48.9 38.3 49.9 35.1 50.1 34.7 50 34.2 49.6 34L44.6 29.6ZM25 36.4C19.6 36.4 15.2 32 15.2 26.5 15.2 21 19.6 16.6 25 16.6 30.4 16.6 34.8 21 34.8 26.5 34.8 32 30.4 36.4 25 36.4Z"></path></g></svg><span>Settings</span></a><span class="l2 t-nag-notification" id="nav-nag"><strong class="trial-green">7</strong> days left in your trial.
  
  

  
    
      

<a class="" href="https://www.safaribooksonline.com/subscribe/">Subscribe</a>.


    
  

  

</span></li><li><a href="https://www.safaribooksonline.com/public/support" class="l2">Support</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l2">Sign Out</a></li></ul></div></li></ul></nav></header>


      </div>
      <div id="container" class="application" style="height: auto;">
        
          <div class="nav-container clearfix">
            


            
            
          </div>

          

  <div class="js-toc">
    
      <div class="sbo-reading-menu sbo-menu-top"><section class="sbo-toc-container toc-menu"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#" class="sbo-toc-thumb"><span class="sbo-title ss-list"><h1><div class="visuallyhidden">Table of Contents for </div>
      
      OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)
      
    </h1></span></a><div class="toc-contents"></div></section></div>

    

    <div class="interface-controls interface-controls-top">
      <ul class="interface-control-btns js-bitlist js-reader">
        <li class="js-search-in-archive search-in-archive t-search-in-archive"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#" title="Search in archive" class="js-search-controls search-controls"><span class="icon">Search in book...</span></a><form class="search-archive-bar js-search-form"><input type="search" name="query" placeholder="Search inside this book..." autocomplete="off"></form><div class="search-archive-results"><div class="js-sitb-results-region"></div></div></li><li class="queue-control"><button type="button" class="rec-fav ss-queue js-queue js-current-chapter-queue" data-queue-endpoint="/api/v1/book/9781260011388/chapter/ch02.html" data-for-analytics="9781260011388:ch02.html" aria-label="Add to Queue"><span>Add to Queue</span></button></li><li class="js-font-control-panel font-control-activator"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#" data-push-state="false" id="font-controls" title="Change font size" aria-label="Change font size"><span class="icon">Toggle Font Controls</span></a></li><li class="dropdown sharing-controls"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#" class="trigger" data-push-state="false" title="Share" aria-label="Share"><i class="fa fa-share"></i></a><ul class="social-sharing dropdown-menu"><li><a class="twitter share-button t-twitter" target="_blank" aria-label="Share this section on Twitter" title="Share this section on Twitter" href="https://twitter.com/share?url=https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html&amp;text=OCA%20Java%20SE%208%20Programmer%20I%20Exam%20Guide%20%28Exams%201Z0-808%29&amp;via=safari"><span>Twitter</span></a></li><li><a class="facebook share-button t-facebook" target="_blank" aria-label="Share this section on Facebook" title="Share this section on Facebook" href="https://www.facebook.com/sharer/sharer.php?u=https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html"><span>Facebook</span></a></li><li><a class="googleplus share-button t-googleplus" target="_blank" aria-label="Share this secton on Google Plus" title="Share this secton on Google Plus" href="https://plus.google.com/share?url=https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html"><span>Google Plus</span></a></li><li><a class="email share-button t-email" aria-label="Share this section via email" title="Share this section via email" href="mailto:?subject=Safari:%20Cover%20Page&amp;body=https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html%0D%0Afrom%20OCA%20Java%20SE%208%20Programmer%20I%20Exam%20Guide%20%28Exams%201Z0-808%29%0D%0A"><span>Email</span></a></li></ul></li>
      </ul>
    </div>

    <section role="document">
	  <div class="t-sbo-prev sbo-prev sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">1&nbsp;Declarations and Access Control</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">3&nbsp;Assignments</div>
        </a>
    
  
  </div>



<div id="sbo-rt-content"><div class="annotator-wrapper"><p class="imagea"><img class="inline" src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/common.jpg" alt="Images" width="500" height="252" data-mfp-src="/library/view/oca-java-se/9781260011388/common.jpg"></p>
<h2 class="h2" id="ch2"><a id="page_85"></a>2</h2>
<h2 class="h2a">Object Orientation</h2>
<p class="noindentd">CERTIFICATION OBJECTIVES</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Describe Encapsulation</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Implement Inheritance</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use IS-A and HAS-A Relationships (OCP)</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use Polymorphism</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use Overriding and Overloading</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Understand Casting</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use Interfaces</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Understand and Use Return Types</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Develop Constructors</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use static Members</p>
<p class="tick"><img class="inline" src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/tic.jpg" alt="Images" width="12" height="13" data-mfp-src="/library/view/oca-java-se/9781260011388/tic.jpg">&nbsp;&nbsp;&nbsp;Two-Minute Drill</p>
<p class="tick1"><strong>Q&amp;A</strong>&nbsp;Self Test</p>
<p class="noindenttop"><a id="page_86"></a><span class="drop">B</span>eing an Oracle Certified Associate (OCA) 8 means you must be at one with the object-oriented aspects of Java. You must dream of inheritance hierarchies; the power of polymorphism must flow through you; and encapsulation must become second nature to you. (Coupling, cohesion, composition, and design patterns will become your bread and butter when you’re an Oracle Certified Professional [OCP] 8.) This chapter will prepare you for all the object-oriented objectives and questions you’ll encounter on the exam. We have heard of many experienced Java programmers who haven’t really become fluent with the object-oriented tools that Java provides, so we’ll start at the beginning.</p>
<h3 class="h3a">CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch02lev1sec1"></a>Encapsulation (OCA Objectives 6.1 and 6.5)</h3>
<p class="noindent"><em>6.1 Create methods with arguments and return values; including overloaded methods.</em></p>
<p class="noindent"><em>6.5 Apply encapsulation principles to a class.</em></p>
<p class="indentt">Imagine you wrote the code for a class and another dozen programmers from your company all wrote programs that used your class. Now imagine that later on, you didn’t like the way the class behaved, because some of its instance variables were being set (by the other programmers from within their code) to values you hadn’t anticipated. <em>Their</em> code brought out errors in <em>your</em> code. (Relax, this is just hypothetical.) Well, it is a Java program, so you should be able to ship out a newer version of the class, which they could replace in their programs without changing any of their own code.</p>
<p class="indent">This scenario highlights two of the promises/benefits of an object-oriented (OO) language: flexibility and maintainability. But those benefits don’t come automatically. You have to do something. You have to write your classes and code in a way that supports flexibility and maintainability. So what if Java supports OO? It can’t design your code for you. For example, imagine you made your class with <code>public</code> instance variables, and those other programmers were setting the instance variables directly, as the following code demonstrates:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0088-01.jpg" alt="images" width="189" height="72" data-mfp-src="/library/view/oca-java-se/9781260011388/p0088-01.jpg"></p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0089-01.jpg" alt="images" width="417" height="135" data-mfp-src="/library/view/oca-java-se/9781260011388/p0089-01.jpg"></p>
<p class="indent"><a id="page_87"></a>And now you’re in trouble. How are you going to change the class in a way that lets you handle the issues that come up when somebody changes the <code>size</code> variable to a value that causes problems? Your only choice is to go back in and write method code to adjust <code>size</code> (a <code>setSize(int a)</code> method, for example) and then insulate the <code>size</code> variable with, say, a private access modifier. But as soon as you make that change to your code, you break everyone else’s!</p>
<p class="indent">The ability to make changes in your implementation code without breaking the code of others who use your code is a key benefit of encapsulation. You want to hide implementation details behind a public programming interface. By <em>interface</em>, we mean the set of accessible methods your code makes available for other code to call—in other words, your code’s API. By hiding implementation details, you can rework your method code (perhaps also altering the way variables are used by your class) without forcing a change in the code that calls your changed method.</p>
<p class="indent">If you want maintainability, flexibility, and extensibility (and, of course, you do), your design must include encapsulation. How do you do that?</p>
<p class="bulletxt"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Keep instance variables hidden (with an access modifier, often <code>private</code>).</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Make <code>public</code> accessor methods, and force calling code to use those methods rather than directly accessing the instance variable. These so-called accessor methods allow users of your class to <strong>set</strong> a variable’s value or <strong>get</strong> a variable’s value.</p>
<p class="bulletxb"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;For these accessor methods, use the most common naming convention of <code>set&lt;SomeProperty&gt;</code> and <code>get&lt;SomeProperty&gt;</code>.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2fig1">Figure 2-1</a> illustrates the idea that encapsulation forces callers of our code to go through methods rather than accessing variables directly.</p>
<p class="images"><a id="ch2fig1"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0090-01.jpg" alt="images" width="881" height="687" data-mfp-src="/library/view/oca-java-se/9781260011388/f0090-01.jpg"></p>
<p class="figcap"><a id="page_88"></a><span class="figs"><strong>FIGURE 2-1</strong></span>&nbsp;&nbsp;&nbsp;The nature of encapsulation</p>
<p class="indent">We call the access methods <em>getters</em> and <em>setters</em>, although some prefer the fancier terms <em>accessors</em> and <em>mutators</em>. (Personally, we don’t like the word “mutate.”) Regardless of what you call them, they’re methods that other programmers must go through in order to access your instance variables. They look simple, and you’ve probably been using them forever:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0090-01.jpg" alt="images" width="467" height="155" data-mfp-src="/library/view/oca-java-se/9781260011388/p0090-01.jpg"></p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0091-01.jpg" alt="images" width="338" height="75" data-mfp-src="/library/view/oca-java-se/9781260011388/p0091-01.jpg"></p>
<p class="indent"><a id="page_89"></a>Wait a minute. How useful is the previous code? It doesn’t even do any validation or processing. What benefit can there be from having getters and setters that add no functionality? The point is, you can change your mind later and add more code to your methods without breaking your API. Even if today you don’t think you really need validation or processing of the data, good OO design dictates that you plan for the future. To be safe, force calling code to go through your methods rather than going directly to instance variables. <em>Always</em>. Then you’re free to rework your method implementations later, without risking the wrath of those dozen programmers who know where you live.</p>
<p class="indent">Note: In <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html">Chapter 6</a> we’ll revisit the topic of encapsulation as it applies to instance variables that are also reference variables. It’s trickier than you might think, so stay tuned! (Also, we’ll wait until <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html">Chapter 6</a> to challenge you with encapsulation-themed mock questions.)</p>
<div class="side-exam">
<p class="imaget"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>Look out for code that appears to be asking about the behavior of a method, when the problem is actually a lack of encapsulation. Look at the following example, and see if you can figure out what’s going on:</em></strong></p>
<p class="imagel"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0091-01.jpg" alt="images" width="403" height="185" data-mfp-src="/library/view/oca-java-se/9781260011388/f0091-01.jpg"></p>
<p class="Text-icon-exam"><strong><em>Now consider this question: Is the value of right always going to be one-third the value of left? It looks like it will, until you realize that users of the <code>Foo</code> class don’t need to use the <code>setLeft()</code> method! They can simply go straight to the instance variables and change them to any arbitrary int value.</em></strong></p>
</div>
<h3 class="h3a"><a id="page_90"></a>CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch02lev1sec2"></a>Inheritance and Polymorphism (OCA Objectives 7.1 and 7.2)</h3>
<p class="noindent"><em>7.1 Describe inheritance and its benefits.</em></p>
<p class="noindent"><em>7.2 Develop code that demonstrates the use of polymorphism; including overriding and object type versus reference type (sic).</em></p>
<p class="indentt">Inheritance is everywhere in Java. It’s safe to say that it’s almost (almost?) impossible to write even the tiniest Java program without using inheritance. To explore this topic, we’re going to use the <code>instanceof</code> operator, which we’ll discuss in more detail in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html">Chapter 4</a>. For now, just remember that <code>instanceof</code> returns <code>true</code> if the reference variable being tested is of the type being compared to. This code</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0092-01.jpg" alt="images" width="435" height="194" data-mfp-src="/library/view/oca-java-se/9781260011388/p0092-01.jpg"></p>
<p class="noindent">produces this output:</p>
<p class="code1"><code>they’re not equal<br>t1’s an Object</code></p>
<p class="indent">Where did that <code>equals</code> method come from? The reference variable <code>t1</code> is of type <code>Test</code>, and there’s no <code>equals</code> method in the <code>Test</code> class. Or is there? The second <code>if</code> test asks whether <code>t1</code> is an instance of class <code>Object</code>, and because it <em>is</em> (more on that soon), the <code>if</code> test succeeds.</p>
<p class="indent">Hold on…how can <code>t1</code> be an instance of type <code>Object</code>, when we just said it was of type <code>Test</code>? I’m sure you’re way ahead of us here, but it turns out that every class in Java is a subclass of class <code>Object</code> (except, of course, class <code>Object</code> itself). In other words, every class you’ll ever use or ever write will inherit from class <code>Object</code>. You’ll always have an <code>equals</code> method, a <code>clone</code> method, <code>notify</code>, <code>wait</code>, and others available to use. Whenever you create a class, you automatically inherit all of class <code>Object</code>’s methods.</p>
<p class="indent"><a id="page_91"></a>Why? Let’s look at that <code>equals</code> method for instance. Java’s creators correctly assumed that it would be very common for Java programmers to want to compare instances of their classes to check for equality. If class <code>Object</code> didn’t have an <code>equals</code> method, you’d have to write one yourself—you and every other Java programmer. That one <code>equals</code> method has been inherited billions of times. (To be fair, <code>equals</code> has also been <em>overridden</em> billions of times, but we’re getting ahead of ourselves.)</p>
<h4 class="h4"><a id="ch02lev2sec1"></a>The Evolution of Inheritance</h4>
<p class="noindent">Up until Java 8, when the topic of inheritance was discussed, it usually revolved around subclasses inheriting methods from their superclasses. While this simplification was never perfectly correct, it became less correct with the new features available in Java 8. As the following table shows, it’s now possible to inherit concrete methods from interfaces. This is a big change. For the rest of the chapter, when we talk about inheritance generally, we will tend to use the terms “subtypes” and “supertypes” to acknowledge that both classes and interfaces need to be accounted for. We will tend to use the terms “subclass” and “superclass” when we’re discussing a specific example that’s under discussion. Inheritance is a key aspect of most of the topics we’ll be discussing in this chapter, so be prepared for LOTS of discussion about the interactions between supertypes and subtypes!</p>
<p class="indent">As you study the following table, you’ll notice that as of Java 8 interfaces can contain two types of concrete methods, <code>static</code> and <code>default</code>. We’ll discuss these important additions later in this chapter.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2tab1">Table 2-1</a> summarizes the elements of classes and interfaces relative to inheritance.</p>
<p class="tabcap"><span class="figs"><strong>TABLE 2-1</strong></span>&nbsp;&nbsp;&nbsp;Inheritable Elements of Classes and Interfaces</p>
<p class="image-t"><a id="ch2tab1"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/t0093-01.jpg" alt="images" width="992" height="315" data-mfp-src="/library/view/oca-java-se/9781260011388/t0093-01.jpg"></p>
<p class="indent"><a id="page_92"></a>For the exam, you’ll need to know that you can create inheritance relationships in Java by <em>extending</em> a class or by implementing an interface. It’s also important to understand that the two most common reasons to use inheritance are</p>
<p class="bulletxt"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;To promote code reuse</p>
<p class="bulletxb"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;To use polymorphism</p>
<p class="indent">Let’s start with reuse. A common design approach is to create a fairly generic version of a class with the intention of creating more specialized subclasses that inherit from it. For example:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0094-01.jpg" alt="images" width="417" height="433" data-mfp-src="/library/view/oca-java-se/9781260011388/p0094-01.jpg"></p>
<p class="noindent">outputs:</p>
<p class="code1"><code>displaying shape<br>moving game piece</code></p>
<p class="indent">Notice that the <code>PlayerPiece</code> class inherits the generic <code>displayShape()</code> method from the less-specialized class <code>GameShape</code> and also adds its own method, <code>movePiece()</code>. Code reuse through inheritance means that methods with generic functionality—such as <code>displayShape()</code>, which could apply to a wide range of different kinds of shapes in a game—don’t have to be reimplemented. That means all specialized subclasses of <code>GameShape</code> are guaranteed to have the capabilities of the <a id="page_93"></a>more general superclass. You don’t want to have to rewrite the <code>displayShape()</code> code in each of your specialized components of an online game.</p>
<p class="indent">But you knew that. You’ve experienced the pain of duplicate code when you make a change in one place and have to track down all the other places where that same (or very similar) code exists.</p>
<p class="indent">The second (and related) use of inheritance is to allow your classes to be accessed polymorphically—a capability provided by interfaces as well, but we’ll get to that in a minute. Let’s say that you have a <code>GameLauncher</code> class that wants to loop through a list of different kinds of <code>GameShape</code> objects and invoke <code>displayShape()</code> on each of them. At the time you write this class, you don’t know every possible kind of <code>GameShape</code> subclass that anyone else will ever write. And you sure don’t want to have to redo <em>your</em> code just because somebody decided to build a dice shape six months later.</p>
<p class="indent">The beautiful thing about polymorphism (“many forms”) is that you can treat any <em>subclass</em> of <code>GameShape</code> as a <code>GameShape</code>. In other words, you can write code in your <code>GameLauncher</code> class that says, “I don’t care what kind of object you are as long as you inherit from (extend) <code>GameShape</code>. And as far as I’m concerned, if you extend <code>GameShape</code>, then you’ve definitely got a <code>displayShape()</code> method, so I know I can call it.”</p>
<p class="indent">Imagine we now have two specialized subclasses that extend the more generic <code>GameShape</code> class, <code>PlayerPiece</code> and <code>TilePiece</code>:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0095-01.jpg" alt="images" width="464" height="393" data-mfp-src="/library/view/oca-java-se/9781260011388/p0095-01.jpg"></p>
<p class="indent"><a id="page_94"></a>Now imagine a test class has a method with a declared argument type of <code>GameShape</code>, which means it can take any kind of <code>GameShape</code>. In other words, any subclass of <code>GameShape</code> can be passed to a method with an argument of type <code>GameShape</code>. This code</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0096-01.jpg" alt="images" width="455" height="234" data-mfp-src="/library/view/oca-java-se/9781260011388/p0096-01.jpg"></p>
<p class="noindent">outputs:</p>
<p class="code1"><code>displaying shape<br>displaying shape</code></p>
<p class="indent">The key point is that the <code>doShapes()</code> method is declared with a <code>GameShape</code> argument but can be passed any subtype (in this example, a subclass) of <code>GameShape</code>. The method can then invoke any method of <code>GameShape</code>, without any concern for the actual runtime class type of the object passed to the method. There are implications, though. The <code>doShapes()</code> method knows only that the objects are a type of <code>GameShape</code> since that’s how the parameter is declared. And using a reference variable declared as type <code>GameShape</code>—regardless of whether the variable is a method parameter, local variable, or instance variable—means that <em>only</em> the methods of <code>GameShape</code> can be invoked on it. The methods you can call on a reference are totally dependent on the <em>declared</em> type of the variable, no matter what the actual object is, that the reference is referring to. That means you can’t use a <code>GameShape</code> variable to call, say, the <code>getAdjacent()</code> method even if the object passed in <em>is</em> of type <code>TilePiece</code>. (We’ll see this again when we look at interfaces.)</p>
<h4 class="h4"><a id="ch02lev2sec2"></a>IS-A and HAS-A Relationships</h4>
<p class="noindent">Note: As of Winter 2017, the OCA 8 exam won’t ask you <strong>directly</strong> about IS-A and HAS-A relationships. But understanding IS-A and HAS-A relationships will help OCA 8 candidates with many of the questions on the exam.</p>
<h4 class="h4a"><a id="page_95"></a>IS-A</h4>
<p class="noindent">In OO, the concept of IS-A is based on inheritance (or interface implementation). IS-A is a way of saying, “This thing is a type of that thing.” For example, a Mustang is a type of Horse, so in OO terms we can say, “Mustang IS-A Horse.” Subaru IS-A Car. Broccoli IS-A Vegetable (not a very fun one, but it still counts). You express the IS-A relationship in Java through the keywords <code>extends</code> (for <em>class</em> inheritance) and <code>implements</code> (for <em>interface</em> implementation).</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0097-01.jpg" alt="images" width="592" height="174" data-mfp-src="/library/view/oca-java-se/9781260011388/p0097-01.jpg"></p>
<p class="indent">A Car is a type of Vehicle, so the inheritance tree might start from the <code>Vehicle</code> class as follows:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0097-02.jpg" alt="images" width="380" height="55" data-mfp-src="/library/view/oca-java-se/9781260011388/p0097-02.jpg"></p>
<p class="indent">In OO terms, you can say the following:</p>
<p class="code1"><code>Vehicle is the superclass of Car.<br>Car is the subclass of Vehicle.<br>Car is the superclass of Subaru.<br>Subaru is the subclass of Vehicle.<br>Car inherits from Vehicle.<br>Subaru inherits from both Vehicle and Car.<br>Subaru is derived from Car.<br>Car is derived from Vehicle.<br>Subaru is derived from Vehicle.<br>Subaru is a subtype of both Vehicle and Car.</code></p>
<p class="indent">Returning to our IS-A relationship, the following statements are true:</p>
<p class="code1"><code>“Car extends Vehicle” means “Car IS-A Vehicle.”<br>“Subaru extends Car” means “Subaru IS-A Car.”</code></p>
<p class="noindent">And we can also say:</p>
<p class="indentt">“Subaru IS-A Vehicle”</p>
<p class="noindent"><a id="page_96"></a>because a class is said to be “a type of” anything further up in its inheritance tree. If the expression (<code>Foo instanceof Bar)</code> is <code>true</code>, then class <code>Foo</code> IS-A <code>Bar</code>, even if <code>Foo</code> doesn’t directly extend <code>Bar</code>, but instead extends some other class that is a subclass of <code>Bar</code>. <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2fig2">Figure 2-2</a> illustrates the inheritance tree for <code>Vehicle</code>, <code>Car</code>, and <code>Subaru</code>. The arrows move from the subclass to the superclass. In other words, a class’s arrow points toward the class from which it extends.</p>
<p class="images"><a id="ch2fig2"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0098-01.jpg" alt="images" width="380" height="687" data-mfp-src="/library/view/oca-java-se/9781260011388/f0098-01.jpg"></p>
<p class="figcap"><span class="figs"><strong>FIGURE 2-2</strong></span>&nbsp;&nbsp;&nbsp;Inheritance tree for <code>Vehicle, Car, Subaru</code></p>
<h4 class="h4a">HAS-A</h4>
<p class="noindent">HAS-A relationships are based on use, rather than inheritance. In other words, class A HAS-A B if code in class A has a reference to an instance of class B. For example, you can say the following:</p>
<p class="code1"><code>A <code>Horse</code> IS-A <code>Animal</code>. A <code>Horse</code> HAS-A <code>Halter</code>.</code></p>
<p class="noindent">The code might look like this:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0098-01.jpg" alt="images" width="332" height="75" data-mfp-src="/library/view/oca-java-se/9781260011388/p0098-01.jpg"></p>
<p class="noindent">In this code, the <code>Horse</code> class has an instance variable of type <code>Halter</code> (a halter is a piece of gear you might have if you have a horse), so you can say that a “<code>Horse</code> HAS-A <code>Halter</code>.” In other words, <code>Horse</code> has a reference to a <code>Halter</code>. <code>Horse</code> code can use that <code>Halter</code> reference to invoke methods on the <code>Halter</code> and get <code>Halter</code> behavior without having <code>Halter</code>-related code (methods) in the <code>Horse</code> class itself. <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2fig3">Figure 2-3</a> illustrates the HAS-A relationship between <code>Horse</code> and <code>Halter</code>.</p>
<p class="images"><a id="ch2fig3"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0099-01.jpg" alt="images" width="1125" height="687" data-mfp-src="/library/view/oca-java-se/9781260011388/f0099-01.jpg"></p>
<p class="figcap"><a id="page_97"></a><span class="figs"><strong>FIGURE 2-3</strong></span>&nbsp;&nbsp;&nbsp;HAS-A relationship between <code>Horse</code> and <code>Halter</code></p>
<p class="indent">HAS-A relationships allow you to design classes that follow good OO practices by not having monolithic classes that do a gazillion different things. Classes (and their resulting objects) should be specialists. As our friend Andrew says, “Specialized classes can actually help reduce bugs.” The more specialized the class, the more likely it is that you can reuse the class in other applications. If you put all the <code>Halter</code>-related code directly into the <code>Horse</code> class, you’ll end up duplicating code in the <code>Cow</code> class, <code>UnpaidIntern</code> class, and any other class that might need <code>Halter</code> behavior. By keeping the <code>Halter</code> code in a separate, specialized <code>Halter</code> class, you have the chance to reuse the <code>Halter</code> class in multiple applications.</p>
<p class="indent">Users of the <code>Horse</code> class (that is, code that calls methods on a <code>Horse</code> instance) think that the <code>Horse</code> class has <code>Halter</code> behavior. The <code>Horse</code> class might have a <code>tie(LeadRope rope)</code> method, for example. Users of the <code>Horse</code> class should never have to know that when they invoke the <code>tie()</code> method, the <code>Horse</code> object turns around and delegates the call to its <code>Halter</code> class by invoking <code>myHalter.tie(rope)</code>. The scenario just described might look like this:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0099-01.jpg" alt="images" width="534" height="234" data-mfp-src="/library/view/oca-java-se/9781260011388/p0099-01.jpg"></p>
<p class="indent"><a id="page_98"></a>In OO, we don’t want callers to worry about which class or object is actually doing the real work. To make that happen, the <code>Horse</code> class hides implementation details from <code>Horse</code> users. <code>Horse</code> users ask the <code>Horse</code> object to do things (in this case, tie itself up), and the <code>Horse</code> will either do it or, as in this example, ask something else (like perhaps an inherited <code>Animal</code> class method) to do it. To the caller, though, it always appears that the <code>Horse</code> object takes care of itself. Users of a <code>Horse</code> should not even need to know that there is such a thing as a <code>Halter</code> class.</p>
<div class="sidebar">
<p class="sideh"><strong>FROM THE CLASSROOM</strong></p>
</div>
<div class="sidebar1">
<p class="sidehl"><strong>Object-Oriented Design</strong></p>
<p class="noindent">IS-A and HAS-A relationships and encapsulation are just the tip of the iceberg when it comes to OO design. Many books and graduate theses have been dedicated to this topic. The reason for the emphasis on proper design is simple: money. The cost to deliver a software application has been estimated to be as much as ten times more expensive for poorly designed programs.</p>
<p class="indent">Even the best OO designers (often called "architects") make mistakes. It is difficult to visualize the relationships between hundreds, or even thousands, of classes. When mistakes are discovered during the implementation (code writing) phase of a project, the amount of code that must be rewritten can sometimes mean programming teams have to start over from scratch.</p>
<p class="indent">The software industry has evolved to aid the designer. Visual object modeling languages, such as the Unified Modeling Language (UML), allow designers to design and easily modify classes without having to write code first because OO components are represented graphically. This allows designers to create a map of the class relationships and helps them recognize errors before coding begins. Another innovation in OO design is design patterns. Designers noticed that many OO designs apply consistently from project to project and that it was useful to apply the same designs because it reduced the potential to introduce new design errors. OO designers then started to share these designs with each other. Now there are many catalogs of these design patterns both on the Internet and in book form.</p>
<p class="indent">Although passing the Java certification exam does not require you to understand OO design this thoroughly, hopefully this background information will help you better appreciate why the test writers chose to include encapsulation and IS-A and HAS-A relationships on the exam.</p>
<p class="right"><em>—Jonathan Meeks,<br>Sun Certified Java Programmer</em></p>
</div>
<h3 class="h3a"><a id="page_99"></a>CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch02lev1sec3"></a>Polymorphism (OCA Objective 7.2)</h3>
<p class="noindentb"><em>7.2 Develop code that demonstrates the use of polymorphism; including overriding and object type versus reference type (sic).</em></p>
<p class="indent">Remember that any Java object that can pass more than one IS-A test can be considered polymorphic. Other than objects of type <code>Object</code>, <em>all</em> Java objects are polymorphic in that they pass the IS-A test for their own type and for class <code>Object</code>.</p>
<p class="indent">Remember, too, that the only way to access an object is through a reference variable. There are a few key things you should know about references:</p>
<p class="bulletxt"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;A reference variable can be of only one type, and once declared, that type can never be changed (although the object it references can change).</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;A reference is a variable, so it can be reassigned to other objects (unless the reference is declared <code>final</code>).</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;A reference variable’s type determines the methods that can be invoked on the object the variable is referencing.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;A reference variable can refer to any object of the same type as the declared reference, or—this is the big one—<strong>it can refer to any</strong> <em>subtype</em> <strong>of the declared type!</strong></p>
<p class="bulletxb"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;A reference variable can be declared as a class type or an interface type. If the variable is declared as an interface type, it can reference any object of any class that <em>implements</em> the interface.</p>
<p class="indent">Earlier we created a <code>GameShape</code> class that was extended by two other classes, <code>PlayerPiece</code> and <code>TilePiece</code>. Now imagine you want to animate some of the shapes on the gameboard. But not <em>all</em> shapes are able to be animated, so what do you do with class inheritance?</p>
<p class="indent">Could we create a class with an <code>animate()</code> method and have only <em>some</em> of the <code>GameShape</code> subclasses inherit from that class? If we can, then we could have <code>PlayerPiece</code>, for example, extend <em>both</em> the <code>GameShape</code> class and <code>Animatable</code> class, whereas the <code>TilePiece</code> would extend only <code>GameShape</code>. But no, this won’t work! <a id="page_100"></a>Java supports only single class inheritance! That means a class can have only one immediate superclass. In other words, if <code>PlayerPiece</code> is a class, there is no way to say something like this:</p>
<p class="code1"><code>class PlayerPiece extends GameShape, Animatable { // NO!<br>&nbsp;&nbsp;// more code<br>}</code></p>
<p class="indent">A <em>class</em> cannot <em>extend</em> more than one class: that means one parent per class. A class <em>can</em> have multiple ancestors, however, since class B could extend class A, and class C could extend class B, and so on. So any given class might have multiple classes up its inheritance tree, but that’s not the same as saying a class directly extends two classes.</p>
<p class="imagel"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/icon.jpg" alt="images" width="50" height="35" data-mfp-src="/library/view/oca-java-se/9781260011388/icon.jpg"></p>
<p class="icon"><strong><em>Some languages (such as C++) allow a class to extend more than one other class. This capability is known as “multiple inheritance.” The reason that Java’s creators chose not to allow multiple class inheritance is that it can become quite messy. In a nutshell, the problem is that if a class extended two other classes, and both superclasses had, say, a doStuff() method, which version of doStuff() would the subclass inherit? This issue can lead to a scenario known as the “Deadly Diamond of Death,” because of the shape of the class diagram that can be created in a multiple inheritance design. The diamond is formed when classes B and C both extend A, and both B and C inherit a method from A. If class D extends both B and C, and both B and C have overridden the method in A, class D has, in theory, inherited two different implementations of the same method. Drawn as a class diagram, the shape of the four classes looks like a diamond.</em></strong></p>
<p class="indent">So if that doesn’t work, what else could you do? You could simply put the <code>animate()</code> code in <code>GameShape</code>, and then disable the method in classes that can’t be animated. But that’s a bad design choice for many reasons—it’s more error prone; it makes the <code>GameShape</code> class less cohesive; and it means the <code>GameShape</code> API “advertises” that all shapes can be animated when, in fact, that’s not true since only some of the <code>GameShape</code> subclasses will be able to run the <code>animate()</code> method successfully.</p>
<div class="side-exam">
<p class="imaget"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>To reiterate, as of Java 8, interfaces can have concrete methods (called default methods). This allows for a form of multiple interhance, which we’ll discuss later in the chapter.</em></strong></p>
</div>
<p class="indent"><a id="page_101"></a>So what <em>else</em> could you do? You already know the answer—create an <code>Animatable</code> <em>interface</em>, and have only the <code>GameShape</code> subclasses that can be animated implement that interface. Here’s the interface:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0103-01.jpg" alt="images" width="274" height="55" data-mfp-src="/library/view/oca-java-se/9781260011388/p0103-01.jpg"></p>
<p class="indent">And here’s the modified <code>PlayerPiece</code> class that implements the interface:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0103-02.jpg" alt="images" width="559" height="175" data-mfp-src="/library/view/oca-java-se/9781260011388/p0103-02.jpg"></p>
<p class="indent">So now we have a <code>PlayerPiece</code> that passes the IS-A test for both the <code>GameShape</code> class and the <code>Animatable</code> interface. That means a <code>PlayerPiece</code> can be treated polymorphically as one of four things at any given time, depending on the declared type of the reference variable:</p>
<p class="bulletxt"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;An <code>Object</code> (since any object inherits from <code>Object</code>)</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;A <code>GameShape</code> (since <code>PlayerPiece</code> extends <code>GameShape</code>)</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;A <code>PlayerPiece</code> (since that’s what it really is)</p>
<p class="bulletxb"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;An <code>Animatable</code> (since <code>PlayerPiece</code> implements <code>Animatable</code>)</p>
<p class="indent">The following are all legal declarations. Look closely:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0103-03.jpg" alt="images" width="369" height="73" data-mfp-src="/library/view/oca-java-se/9781260011388/p0103-03.jpg"></p>
<p class="indent">There’s only one object here—an instance of type <code>PlayerPiece</code>—but there are four different types of reference variables, all referring to that one object on the heap. Pop quiz: Which of the preceding reference variables can invoke the <code>displayShape()</code> method? Hint: Only two of the four declarations can be used to invoke the <code>displayShape()</code> method.</p>
<p class="indent">Remember that method invocations allowed by the compiler are based solely on the declared type of the reference, regardless of the object type. So looking <a id="page_102"></a>at the four reference types again—<code>Object</code>, <code>GameShape</code>, <code>PlayerPiece</code>, and <code>Animatable</code>—which of these four types know about the <code>displayShape()</code> method?</p>
<p class="indent">You guessed it—both the <code>GameShape</code> class and the <code>PlayerPiece</code> class are known (by the compiler) to have a <code>displayShape()</code> method, so either of those reference types can be used to invoke <code>displayShape()</code>. Remember that to the compiler, a <code>PlayerPiece</code> IS-A <code>GameShape</code>, so the compiler says, “I see that the declared type is <code>PlayerPiece</code>, and since <code>PlayerPiece</code> extends <code>GameShape</code>, that means <code>PlayerPiece</code> inherited the <code>displayShape()</code> method. Therefore, <code>PlayerPiece</code> can be used to invoke the <code>displayShape()</code> method.”</p>
<p class="indent">Which methods can be invoked when the <code>PlayerPiece</code> object is being referred to using a reference declared as type <code>Animatable</code>? Only the <code>animate()</code> method. Of course, the cool thing here is that any class from any inheritance tree can also implement <code>Animatable</code>, so that means if you have a method with an argument declared as type <code>Animatable</code>, you can pass in <code>PlayerPiece</code> objects, <code>SpinningLogo</code> objects, and anything else that’s an instance of a class that implements <code>Animatable</code>. And you can use that parameter (of type <code>Animatable</code>) to invoke the <code>animate()</code> method, but not the <code>displayShape()</code> method (which it might not even have), or anything other than what is known to the compiler based on the reference type. The compiler always knows, though, that you can invoke the methods of class <code>Object</code> on any object, so those are safe to call regardless of the reference—class or interface—used to refer to the object.</p>
<p class="indent">We’ve left out one big part of all this, which is that even though the compiler only knows about the declared reference type, the Java Virtual Machine (JVM) at runtime knows what the object really is. And that means that even if the <code>PlayerPiece</code> object’s <code>displayShape()</code> method is called using a <code>GameShape</code> reference variable, if the <code>PlayerPiece</code> overrides the <code>displayShape()</code> method, the JVM will invoke the <code>PlayerPiece</code> version! The JVM looks at the real object at the other end of the reference, “sees” that it has overridden the method of the declared reference variable type, and invokes the method of the object’s actual class. But there is one other thing to keep in mind:</p>
<p class="bqt"><strong>Polymorphic method invocations apply only to</strong> <strong><em>instance methods.</em></strong> <strong>You can always refer to an object with a more general reference variable type (a superclass or interface), but at runtime, the ONLY things that are dynamically selected based on the actual</strong> <strong><em>object</em></strong> <strong>(rather than the</strong> <strong><em>reference</em></strong> <strong>type) are instance methods. Not</strong> <strong><em>static</em></strong> <strong>methods. Not</strong> <strong><em>variables</em></strong><strong>. Only overridden instance methods are dynamically invoked based on the real object’s type.</strong></p>
<p class="noindent"><a id="page_103"></a>Because this definition depends on a clear understanding of overriding and the distinction between static methods and instance methods, we’ll cover those later in the chapter.</p>
<h3 class="h3a">CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch02lev1sec4"></a>Overriding/Overloading (OCA Objectives 6.1 and 7.2)</h3>
<p class="noindent"><em>6.1 Create methods with arguments and return values; including overloaded methods.</em></p>
<p class="noindent"><em>7.2 Develop code that demonstrates the use of polymorphism; including overriding and object type versus reference type (sic).</em></p>
<p class="indentt">The exam will use overridden and overloaded methods on many, many questions. These two concepts are often confused (perhaps because they have similar names?), but each has its own unique and complex set of rules. It’s important to get really clear about which “over” uses which rules!</p>
<h4 class="h4"><a id="ch02lev2sec3"></a>Overridden Methods</h4>
<p class="noindent">Any time a type inherits a method from a supertype, you have the opportunity to override the method (unless, as you learned earlier, the method is marked <code>final</code>). The key benefit of overriding is the ability to define behavior that’s specific to a particular subtype. The following example demonstrates a <code>Horse</code> subclass of <code>Animal</code> overriding the <code>Animal</code> version of the <code>eat()</code> method:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0105-01.jpg" alt="images" width="569" height="214" data-mfp-src="/library/view/oca-java-se/9781260011388/p0105-01.jpg"></p>
<p class="indent"><a id="page_104"></a>For abstract methods you inherit from a supertype, you have no choice: You <em>must</em> implement the method in the subtype <strong><em>unless the subtype is also abstract.</em></strong> Abstract methods must be <em>implemented</em> by the first concrete subclass, but this is a lot like saying the concrete subclass <em>overrides</em> the abstract methods of the supertype(s). So you could think of abstract methods as methods you’re forced to override—eventually.</p>
<p class="indent">The <code>Animal</code> class creator might have decided that for the purposes of polymorphism, all <code>Animal</code> subtypes should have an <code>eat()</code> method defined in a unique way. Polymorphically, when an <code>Animal</code> reference refers not to an <code>Animal</code> instance, but to an <code>Animal</code> subclass instance, the caller should be able to invoke <code>eat()</code> on the <code>Animal</code> reference, but the actual runtime object (say, a <code>Horse</code> instance) will run its own specific <code>eat()</code> method. Marking the <code>eat()</code> method abstract is the <code>Animal</code> programmer’s way of saying to all subclass developers, “It doesn’t make any sense for your new subtype to use a generic <code>eat()</code> method, so you have to come up with your <em>own</em> <code>eat()</code> method implementation!” A (nonabstract) example of using polymorphism looks like this:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0106-01.jpg" alt="images" width="591" height="393" data-mfp-src="/library/view/oca-java-se/9781260011388/p0106-01.jpg"></p>
<p class="indent">In the preceding code, the test class uses an <code>Animal</code> reference to invoke a method on a <code>Horse</code> object. Remember, the compiler will allow only methods in class <code>Animal</code> to be invoked when using a reference to an <code>Animal</code>. The following would not be legal given the preceding code:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0106-02.jpg" alt="images" width="487" height="52" data-mfp-src="/library/view/oca-java-se/9781260011388/p0106-02.jpg"></p>
<p class="indent"><a id="page_105"></a>To reiterate, the compiler looks only at the reference type, not the instance type. Polymorphism lets you use a more abstract supertype (including an interface) reference to one of its subtypes (including interface implementers).</p>
<p class="indent">The overriding method cannot have a more restrictive access modifier than the method being overridden (for example, you can’t override a method marked <code>public</code> and make it <code>protected</code>). Think about it: If the <code>Animal</code> class advertises a <code>public eat()</code> method and someone has an <code>Animal</code> reference (in other words, a reference declared as type <code>Animal</code>), that someone will assume it’s safe to call <code>eat()</code> on the <code>Animal</code> reference regardless of the actual instance that the <code>Animal</code> reference is referring to. If a subtype were allowed to sneak in and change the access modifier on the overriding method, then suddenly at runtime—when the JVM invokes the true object’s (<code>Horse</code>) version of the method rather than the reference type’s (<code>Animal</code>) version—the program would die a horrible death. (Not to mention the emotional distress for the one who was betrayed by the rogue subtype.)</p>
<p class="indent">Let’s modify the polymorphic example we saw earlier in this section:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0107-01.jpg" alt="images" width="607" height="373" data-mfp-src="/library/view/oca-java-se/9781260011388/p0107-01.jpg"></p>
<p class="indent">If this code compiled (which it doesn’t), the following would fail at runtime:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0107-02.jpg" alt="images" width="486" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0107-02.jpg"></p>
<p class="indent">The variable <code>b</code> is of type <code>Animal</code>, which has a <code>public eat()</code> method. But remember that at runtime, Java uses virtual method invocation to dynamically select the actual version of the method that will run, based on the actual instance. An <code>Animal</code> reference can always refer to a <code>Horse</code> instance, because <code>Horse</code> IS-A(n) <code>Animal</code>. <a id="page_106"></a>What makes that supertype reference to a subtype instance possible is that the subtype is guaranteed to be able to do everything the supertype can do. Whether the <code>Horse</code> instance overrides the inherited methods of <code>Animal</code> or simply inherits them, anyone with an <code>Animal</code> reference to a <code>Horse</code> instance is free to call all accessible <code>Animal</code> methods. For that reason, an overriding method must fulfill the contract of the superclass.</p>
<p class="indent">Note: In <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html">Chapter 5</a> we will explore exception handling in detail. Once you’ve studied <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html">Chapter 5</a>, you’ll appreciate this single handy list of overriding rules. The rules for overriding a method are as follows:</p>
<p class="bulletxt"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The argument list must exactly match that of the overridden method. If they don’t match, you can end up with an overloaded method you didn’t intend.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The return type must be the same as, or a subtype of, the return type declared in the original overridden method in the superclass. (More on this in a few pages when we discuss covariant returns.)</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The access level can’t be more restrictive than that of the overridden method.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The access level CAN be less restrictive than that of the overridden method.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Instance methods can be overridden only if they are inherited by the subtype. A subtype within the same package as the instance’s supertype can override any supertype method that is not marked <code>private</code> or <code>final</code>. A subtype in a different package can override only those non<code>final</code> methods marked <code>public</code> or <code>protected</code> (since <code>protected</code> methods are inherited by the subtype).</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The overriding method CAN throw any unchecked (runtime) exception, regardless of whether the overridden method declares the exception. (More in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html">Chapter 5</a>.)</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The overriding method must NOT throw checked exceptions that are new or broader than those declared by the overridden method. For example, a method that declares a <code>FileNotFoundException</code> cannot be overridden by a method that declares a <code>SQLException</code>, <code>Exception</code>, or any other nonruntime exception unless it’s a subclass of <code>FileNotFoundException</code>.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The overriding method can throw narrower or fewer exceptions. Just because an overridden method “takes risks” doesn’t mean that the overriding subtype’s exception takes the same risks. Bottom line: an overriding method doesn’t have to declare any exceptions that it will never throw, regardless of what the overridden method declares.</p>
<p class="bulletx"><a id="page_107"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;You cannot override a method marked <code>final</code>.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;You cannot override a method marked <code>static</code>. We’ll look at an example in a few pages when we discuss <code>static</code> methods in more detail.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;If a method can’t be inherited, you cannot override it. Remember that overriding implies that you’re reimplementing a method you inherited! For example, the following code is not legal, and even if you added an <code>eat()</code> method to <code>Horse</code>, it wouldn’t be an override of <code>Animal</code>’s <code>eat()</code> method:</p>
<p class="code2"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0109-01.jpg" alt="images" width="569" height="234" data-mfp-src="/library/view/oca-java-se/9781260011388/p0109-01.jpg"></p>
<h4 class="h4a">Invoking a Supertype Version of an Overridden Method</h4>
<p class="noindent">Often, you’ll want to take advantage of some of the code in the supertype version of a method, yet still override it to provide some additional specific behavior. It’s like saying, “Run the supertype version of the method, and then come back down here and finish with my subtype additional method code.” (Note that there’s no requirement that the supertype version run before the subtype code.) It’s easy to do in code using the keyword <code>super</code> as follows:</p>
<p class="code2"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0109-02.jpg" alt="images" width="534" height="294" data-mfp-src="/library/view/oca-java-se/9781260011388/p0109-02.jpg"></p>
<p class="indent"><a id="page_108"></a>In a similar way, you can access an interface’s overridden method with the syntax:</p>
<p class="code1"><code>InterfaceX.super.doStuff();</code></p>
<p class="noindent">Note: Using <code>super</code> to invoke an overridden method applies only to instance methods. (Remember that <code>static</code> methods can’t be overridden.) And you can use <code>super</code> only to access a method in a type’s supertype, not the supertype of the supertype—that is, you <strong>cannot</strong> say <code>super.super.doStuff()</code> and you <strong>cannot</strong> say: InterfaceX.<code>super.super.doStuff()</code>.</p>
<div class="side-exam">
<p class="imaget"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>If a method is overridden but you use a polymorphic (supertype) reference to refer to the subtype object with the overriding method, the compiler assumes you’re calling the supertype version of the method. If the supertype version declares a checked exception, but the overriding subtype method does not, the compiler still thinks you are calling a method that declares an exception (more in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html">Chapter 5</a>). Let’s look at an example:</em></strong></p>
<p class="imagel"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0110-01.jpg" alt="images" width="430" height="300" data-mfp-src="/library/view/oca-java-se/9781260011388/f0110-01.jpg"></p>
<p class="Text-icon-exam"><strong><em>This code will not compile because of the exception declared on the <code>Animal eat()</code> method. This happens even though, at runtime, the <code>eat()</code> method used would be the <code>Dog</code> version, which does not declare the exception.</em></strong></p>
</div>
<h4 class="h4a">Examples of Illegal Method Overrides</h4>
<p class="noindent">Let’s take a look at overriding the <code>eat()</code> method of <code>Animal</code>:</p>
<p class="code1"><code>public class Animal {<br>&nbsp;&nbsp;public void eat() { }<br>}</code></p>
<p class="indent"><a id="page_109"></a><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2tab2">Table 2-2</a> lists examples of illegal overrides of the <code>Animal eat()</code> method, given the preceding version of the <code>Animal</code> class.</p>
<p class="tabcap"><span class="figs"><strong>TABLE 2-2</strong></span>&nbsp;&nbsp;&nbsp;Examples of Illegal Overrides</p>
<p class="image-t"><a id="ch2tab2"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/t0111-01.jpg" alt="images" width="992" height="284" data-mfp-src="/library/view/oca-java-se/9781260011388/t0111-01.jpg"></p>
<h4 class="h4"><a id="ch02lev2sec4"></a>Overloaded Methods</h4>
<p class="noindent">Over<em>loaded</em> methods let you reuse the same method name in a class, but with different arguments (and, optionally, a different return type). Overloading a method often means you’re being a little nicer to those who call your methods because your code takes on the burden of coping with different argument types rather than forcing the caller to do conversions prior to invoking your method. The rules aren’t too complex:</p>
<p class="bulletxt"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Overloaded methods MUST change the argument list.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Overloaded methods CAN change the return type.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Overloaded methods CAN change the access modifier.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Overloaded methods CAN declare new or broader checked exceptions.</p>
<p class="bulletxb"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;A method can be overloaded in the <em>same</em> type or in a <em>subtype</em>. In other words, if class A defines a <code>doStuff(int i)</code> method, the subclass B could define a <code>doStuff(String s)</code> method without overriding the superclass version that takes an <code>int</code>. So two methods with the same name but in different types can still be considered overloaded if the subtype inherits one version of the method and then declares another overloaded version in its type definition.</p>
<div class="side-exam">
<p class="imaget"><a id="page_110"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>Less experienced Java developers are often confused about the subtle differences between overloaded and overridden methods. Be careful to recognize when a method is overloaded rather than overridden. You might see a method that appears to be violating a rule for overriding, but that is actually a legal overload, as follows:</em></strong></p>
<p class="imagel"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0112-01.jpg" alt="images" width="560" height="145" data-mfp-src="/library/view/oca-java-se/9781260011388/f0112-01.jpg"></p>
<p class="Text-icon-exam"><strong><em>It’s tempting to see the <code>IOException</code> as the problem because the overridden <code>doStuff()</code> method doesn’t declare an exception and <code>IOException</code> is checked by the compiler. But the <code>doStuff()</code> method is not overridden! Subclass Bar overloads the <code>doStuff()</code> method by varying the argument list, so the <code>IOException</code> is fine.</em></strong></p>
</div>
<h4 class="h4a">Legal Overloads</h4>
<p class="noindent">Let’s look at a method we want to overload:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0112-01.jpg" alt="images" width="638" height="151" data-mfp-src="/library/view/oca-java-se/9781260011388/p0112-01.jpg"></p>
<h4 class="h4a">Invoking Overloaded Methods</h4>
<p class="noindent">In <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html">Chapter 6</a> we will look at how boxing and var-args impact overloading. (You still have to pay attention to what’s covered here, however.)</p>
<p class="indent">When a method is invoked, more than one method of the same name might exist for the object type you’re invoking a method on. For example, the <code>Horse</code> class might have three methods with the same name but with different argument lists, which means the method is overloaded.</p>
<p class="indent"><a id="page_111"></a>Deciding which of the matching methods to invoke is based on the arguments. If you invoke the method with a <code>String</code> argument, the overloaded version that takes a <code>String</code> is called. If you invoke a method of the same name but pass it a <code>float</code>, the overloaded version that takes a <code>float</code> will run. If you invoke the method of the same name but pass it a <code>Foo</code> object, and there isn’t an overloaded version that takes a <code>Foo</code>, then the compiler will complain that it can’t find a match. The following are examples of invoking overloaded methods:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0113-01.jpg" alt="images" width="625" height="372" data-mfp-src="/library/view/oca-java-se/9781260011388/p0113-01.jpg"></p>
<p class="noindent">In this <code>TestAdder</code> code, the first call to <code>a.addThem(b,c)</code> passes two <code>int</code>s to the method, so the first version of <code>addThem()</code>—the overloaded version that takes two <code>int</code> arguments—is called. The second call to <code>a.addThem(22.5, 9.3)</code> passes two <code>double</code>s to the method, so the second version of <code>addThem()</code>—the overloaded version that takes two double arguments—is called.</p>
<p class="indent">Invoking overloaded methods that take object references rather than primitives is a little more interesting. Say you have an overloaded method such that one version takes an <code>Animal</code> and one takes a <code>Horse</code> (subclass of <code>Animal</code>). If you pass a <code>Horse</code> object in the method invocation, you’ll invoke the overloaded version that takes a <code>Horse</code>. Or so it looks at first glance:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0113-02.jpg" alt="images" width="454" height="115" data-mfp-src="/library/view/oca-java-se/9781260011388/p0113-02.jpg"></p>
<p class="code1"><a id="page_112"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0114-01.jpg" alt="images" width="443" height="215" data-mfp-src="/library/view/oca-java-se/9781260011388/p0114-01.jpg"></p>
<p class="indent">The output is what you expect:</p>
<p class="code1"><code>In the Animal version<br>In the Horse version</code></p>
<p class="indent">But what if you use an <code>Animal</code> reference to a <code>Horse</code> object?</p>
<p class="code1"><code>Animal animalRefToHorse = new Horse();<br>&nbsp;&nbsp;ua.doStuff(animalRefToHorse);</code></p>
<p class="noindent">Which of the overloaded versions is invoked? You might want to answer, “The one that takes a <code>Horse</code> since it’s a <code>Horse</code> object at runtime that’s being passed to the method.” But that’s not how it works. The preceding code would actually print this:</p>
<p class="code1"><code>in the Animal version</code></p>
<p class="noindent">Even though the actual object at runtime is a <code>Horse</code> and not an <code>Animal</code>, the choice of which overloaded method to call (in other words, the signature of the method) is NOT dynamically decided at runtime.</p>
<p class="indent">Just remember that the <em>reference</em> type (not the object type) determines which overloaded method is invoked!</p>
<p class="indent"><strong>To summarize, which over</strong><strong><em>ridden</em></strong> <strong>version of the method to call (in other words, from which class in the inheritance tree) is decided at</strong> <strong><em>runtime</em></strong> <strong>based on</strong> <strong><em>object</em></strong> <strong>type, but which over</strong><strong><em>loaded</em></strong> <strong>version of the method to call is based on the</strong> <strong><em>reference</em></strong> <strong>type of the argument passed at</strong> <strong><em>compile</em></strong> <strong>time.</strong></p>
<p class="indent">If you invoke a method passing it an <code>Animal</code> reference to a <code>Horse</code> object, the compiler knows only about the <code>Animal</code>, so it chooses the overloaded version of the method that takes an <code>Animal</code>. It does not matter that, at runtime, a <code>Horse</code> is actually being passed.</p>
<div class="side-exam">
<p class="imaget"><a id="page_113"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>Can <code>main()</code> be overloaded?</em></strong></p>
<p class="imagel"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0115-01.jpg" alt="images" width="425" height="163" data-mfp-src="/library/view/oca-java-se/9781260011388/f0115-01.jpg"></p>
<p class="Text-icon-exam"><strong><em>Absolutely! But the only <code>main()</code> with JVM superpowers is the one with the signature you’ve seen about 100 times already in this book.</em></strong></p>
</div>
<p class="noindentt"><span class="fonts"><strong>Polymorphism in Overloaded and Overridden Methods</strong></span> How does polymorphism work with overloaded methods? From what we just looked at, it doesn’t appear that polymorphism matters when a method is overloaded. If you pass an <code>Animal</code> reference, the overloaded method that takes an <code>Animal</code> will be invoked, even if the actual object passed is a <code>Horse</code>. Once the <code>Horse</code> masquerading as <code>Animal</code> gets in to the method, however, the <code>Horse</code> object is still a <code>Horse</code> despite being passed into a method expecting an <code>Animal</code>. So it’s true that polymorphism doesn’t determine which overloaded version is called; however, polymorphism does come into play when the decision is about which overridden version of a method is called. But sometimes a method is both overloaded and overridden. Imagine that the <code>Animal</code> and <code>Horse</code> classes look like this:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0115-01.jpg" alt="images" width="569" height="254" data-mfp-src="/library/view/oca-java-se/9781260011388/p0115-01.jpg"></p>
<p class="indent"><a id="page_114"></a>Notice that the <code>Horse</code> class has both overloaded and overridden the <code>eat()</code> method. <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2tab3">Table 2-3</a> shows which version of the three <code>eat()</code> methods will run depending on how they are invoked.</p>
<p class="tabcap"><span class="figs"><strong>TABLE 2-3</strong></span>&nbsp;&nbsp;&nbsp;Examples of Legal and Illegal Overrides</p>
<p class="image-t"><a id="ch2tab3"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/t0116-01.jpg" alt="images" width="991" height="494" data-mfp-src="/library/view/oca-java-se/9781260011388/t0116-01.jpg"></p>
<div class="side-exam">
<p class="imaget"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>Don’t be fooled by a method that’s overloaded but not overridden by a subclass. It’s perfectly legal to do the following:</em></strong></p>
<p class="imagel"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0116-01.jpg" alt="images" width="300" height="127" data-mfp-src="/library/view/oca-java-se/9781260011388/f0116-01.jpg"></p>
<p class="Text-icon-exam"><strong><em>The <code>Bar</code> class has two <code>doStuff()</code> methods: the no-arg version it inherits from <code>Foo</code> (and does not override) and the overloaded <code>doStuff(String s)</code> defined in the <code>Bar</code> class. Code with a reference to a <code>Foo</code> can invoke only the no-arg version, but code with a reference to a <code>Bar</code> can invoke either of the overloaded versions.</em></strong></p>
</div>
<p class="indent"><a id="page_115"></a><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2tab4">Table 2-4</a> summarizes the difference between overloaded and overridden methods.</p>
<p class="tabcap"><span class="figs"><strong>TABLE 2-4</strong></span>&nbsp;&nbsp;&nbsp;Differences Between Overloaded and Overridden Methods</p>
<p class="image-t"><a id="ch2tab4"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/t0117-01.jpg" alt="images" width="991" height="512" data-mfp-src="/library/view/oca-java-se/9781260011388/t0117-01.jpg"></p>
<p class="indent">We’ll cover constructor overloading later in the chapter, where we’ll also cover the other constructor-related topics that are on the exam. <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2fig4">Figure 2-4</a> illustrates the way overloaded and overridden methods appear in class relationships.</p>
<p class="images"><a id="ch2fig4"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0117-01.jpg" alt="images" width="1732" height="687" data-mfp-src="/library/view/oca-java-se/9781260011388/f0117-01.jpg"></p>
<p class="figcap"><span class="figs"><strong>FIGURE 2-4</strong></span>&nbsp;&nbsp;&nbsp;Overloaded and overridden methods in class relationships</p>
<h3 class="h3a"><a id="page_116"></a>CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch02lev1sec5"></a>Casting (OCA Objectives 2.2 and 7.3)</h3>
<p class="noindent"><em>2.2 Differentiate between object reference variables and primitive variables.</em></p>
<p class="noindent"><em>7.3 Determine when casting is necessary.</em></p>
<p class="indentt">You’ve seen how it’s both possible and common to use general reference variable types to refer to more specific object types. It’s at the heart of polymorphism. For example, this line of code should be second nature by now:</p>
<p class="code1"><code>Animal animal = new Dog();</code></p>
<p class="indent">But what happens when you want to use that <code>animal</code> reference variable to invoke a method that only class <code>Dog</code> has? You know it’s referring to a <code>Dog</code>, and you want to do a <code>Dog</code>-specific thing? In the following code, we’ve got an array of <code>Animal</code>s, and whenever we find a <code>Dog</code> in the array, we want to do a special <code>Dog</code> thing. Let’s agree for now that all this code is okay, except that we’re not sure about the line of code that invokes the <code>playDead</code> method.</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0118-01.jpg" alt="images" width="580" height="372" data-mfp-src="/library/view/oca-java-se/9781260011388/p0118-01.jpg"></p>
<p class="indent">When we try to compile this code, the compiler says something like this:</p>
<p class="code1"><code>cannot find symbol</code></p>
<p class="noindent"><a id="page_117"></a>The compiler is saying, “Hey, class <code>Animal</code> doesn’t have a <code>playDead()</code> method.” Let’s modify the <code>if</code> code block:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0119-01.jpg" alt="images" width="335" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/p0119-01.jpg"></p>
<p class="indent">The new and improved code block contains a cast, which in this case is sometimes called a <em>downcast</em>, because we’re casting down the inheritance tree to a more specific class. Now the compiler is happy. Before we try to invoke <code>playDead</code>, we cast the <code>animal</code> variable to type <code>Dog</code>. What we’re saying to the compiler is, “We know it’s really referring to a <code>Dog</code> object, so it’s okay to make a new <code>Dog</code> reference variable to refer to that object.” In this case we’re safe, because before we ever try the cast, we do an <code>instanceof</code> test to make sure.</p>
<p class="indent">It’s important to know that the compiler is forced to trust us when we do a downcast, even when we screw up:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0119-02.jpg" alt="images" width="591" height="155" data-mfp-src="/library/view/oca-java-se/9781260011388/p0119-02.jpg"></p>
<p class="noindent">It can be maddening! This code compiles! But when we try to run it, we’ll get an exception, something like this:</p>
<p class="code1"><code>java.lang.ClassCastException</code></p>
<p class="indent">Why can’t we trust the compiler to help us out here? Can’t it see that <code>animal</code> is of type <code>Animal</code>? All the compiler can do is verify that the two types are in the same inheritance tree, so that depending on whatever code might have come before the downcast, it’s possible that <code>animal</code> is of type <code>Dog</code>. The compiler must allow things that might possibly work at runtime. However, if the compiler knows with certainty that the cast could not possibly work, compilation will fail. The following replacement code block will NOT compile:</p>
<p class="code1"><code>Animal animal = new Animal();<br>Dog d = (Dog) animal;<br><strong>String s = (String) animal; // animal can’t EVER be a String</strong></code></p>
<p class="noindent">In this case, you’ll get an error like this:</p>
<p class="code1"><code>inconvertible types</code></p>
<p class="indent"><a id="page_118"></a>Unlike downcasting, <em>upcasting</em> (casting <em>up</em> the inheritance tree to a more general type) works implicitly (that is, you don’t have to type in the cast) because when you upcast you’re implicitly restricting the number of methods you can invoke, as opposed to <em>down</em>casting, which implies that later on, you might want to invoke a more <em>specific</em> method. Here’s an example:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0120-01.jpg" alt="images" width="600" height="195" data-mfp-src="/library/view/oca-java-se/9781260011388/p0120-01.jpg"></p>
<p class="indent">Both of the previous upcasts will compile and run without exception because a <code>Dog</code> IS-A(n) <code>Animal</code>, which means that anything an <code>Animal</code> can do, a <code>Dog</code> can do. A <code>Dog</code> can do more, of course, but the point is that anyone with an <code>Animal</code> reference can safely call <code>Animal</code> methods on a <code>Dog</code> instance. The <code>Animal</code> methods may have been overridden in the <code>Dog</code> class, but all we care about now is that a <code>Dog</code> can always do at least everything an <code>Animal</code> can do. The compiler and JVM know it, too, so the implicit upcast is always legal for assigning an object of a subtype to a reference of one of its supertype classes (or interfaces). If <code>Dog</code> implements <code>Pet</code> and <code>Pet</code> defines <code>beFriendly()</code>, then a <code>Dog</code> can be implicitly cast to a <code>Pet</code>, but the only <code>Dog</code> method you can invoke then is <code>beFriendly()</code>, which <code>Dog</code> was forced to implement because <code>Dog</code> implements the <code>Pet</code> interface.</p>
<p class="indent">One more thing…if <code>Dog</code> implements <code>Pet</code>, then, if <code>Beagle</code> extends <code>Dog</code> but <code>Beagle</code> does not <em>declare</em> that it implements <code>Pet</code>, <code>Beagle</code> is still a <code>Pet</code>! <code>Beagle</code> is a <code>Pet</code> simply because it extends <code>Dog</code>, and <code>Dog</code>’s already taken care of the <code>Pet</code> parts for itself and for all its children. The <code>Beagle</code> class can always override any method it inherits from <code>Dog</code>, including methods that <code>Dog</code> implemented to fulfill its interface contract.</p>
<p class="indent">And just one more thing…if <code>Beagle</code> does declare that it implements <code>Pet</code>, just so that others looking at the <code>Beagle</code> class API can easily see that <code>Beagle</code> IS-A <code>Pet</code> <a id="page_119"></a>without having to look at <code>Beagle</code>’s superclasses, <code>Beagle</code> still doesn’t need to implement the <code>beFriendly()</code> method if the <code>Dog</code> class (<code>Beagle</code>’s superclass) has already taken care of that. In other words, if <code>Beagle</code> IS-A <code>Dog</code>, and <code>Dog</code> IS-A <code>Pet</code>, then <code>Beagle</code> IS-A <code>Pet</code> and has already met its <code>Pet</code> obligations for implementing the <code>beFriendly()</code> method since it inherits the <code>beFriendly()</code> method. The compiler is smart enough to say, “I know <code>Beagle</code> already IS a <code>Dog</code>, but it’s okay to make it more obvious by adding a cast.”</p>
<p class="indent">So don’t be fooled by code that shows a concrete class that declares it implements an interface but doesn’t implement the <em>methods</em> of the interface. Before you can tell whether the code is legal, you must know what the supertypes of this implementing class have declared. If any supertype in its inheritance tree has already provided concrete (that is, nonabstract) method implementations, then regardless of whether the supertype declares that it implements the interface, the subclass is under no obligation to reimplement (override) those methods.</p>
<div class="side-exam">
<p class="imaget"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>The exam creators will tell you that they’re forced to jam tons of code into little spaces "because of the exam engine." Although that’s partially true, they ALSO like to obfuscate. The following code</em></strong></p>
<p class="imagel"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0121-01.jpg" alt="images" width="247" height="61" data-mfp-src="/library/view/oca-java-se/9781260011388/f0121-01.jpg"></p>
<p class="Text-icon-exam"><strong><em>can be replaced with this easy-to-read bit of fun:</em></strong></p>
<p class="imagel"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0121-02.jpg" alt="images" width="264" height="41" data-mfp-src="/library/view/oca-java-se/9781260011388/f0121-02.jpg"></p>
<p class="Text-icon-exam"><strong><em>In this case the compiler needs all those parentheses; otherwise, it thinks it’s been handed an incomplete statement.</em></strong></p>
</div>
<h3 class="h3a"><a id="page_120"></a>CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch02lev1sec6"></a>Implementing an Interface (OCA Objective 7.5)</h3>
<p class="noindent"><em>7.5 Use abstract classes and interfaces.</em></p>
<p class="indentt">When you implement an interface, you’re agreeing to adhere to the contract defined in the interface. That means you’re agreeing to provide legal implementations for every abstract method defined in the interface, and that anyone who knows what the interface methods look like (not how they’re implemented, but how they can be called and what they return) can rest assured that they can invoke those methods on an instance of your implementing class.</p>
<p class="indent">For example, if you create a class that implements the <code>Runnable</code> interface (so that your code can be executed by a specific thread), you must provide the <code>public void run()</code> method. Otherwise, the poor thread could be told to go execute your <code>Runnable</code> object’s code and—surprise, surprise—the thread then discovers the object has no <code>run()</code> method! (At which point, the thread would blow up and the JVM would crash in a spectacular yet horrible explosion.) Thankfully, Java prevents this meltdown from occurring by running a compiler check on any class that claims to implement an interface. If the class says it’s implementing an interface, it darn well better have an implementation for each abstract method in the interface (with a few exceptions that we’ll look at in a moment).</p>
<p class="indent">Assuming an interface <code>Bounceable</code> with two methods, <code>bounce()</code> and <code>setBounceFactor()</code>, the following class will compile:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0122-01.jpg" alt="images" width="550" height="95" data-mfp-src="/library/view/oca-java-se/9781260011388/p0122-01.jpg"></p>
<p class="noindent">Okay, we know what you’re thinking: “This has got to be the worst implementation class in the history of implementation classes.” It compiles, though. And it runs. The interface contract guarantees that a class will have the method (in other words, others can call the method subject to access control), but it never guaranteed a good implementation—or even any actual implementation code in the body of the method. (Keep in mind, though, that if the interface declares that a method is NOT void, your class’s implementation code has to include a return statement.) The compiler will <a id="page_121"></a>never say, “Um, excuse me, but did you really mean to put nothing between those curly braces? HELLO. This is a method after all, so shouldn’t it do something?”</p>
<p class="indent">Implementation classes must adhere to the same rules for method implementation as a class extending an <code>abstract</code> class. To be a legal implementation class, a nonabstract implementation class must do the following:</p>
<p class="bulletxt"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Provide concrete (nonabstract) implementations for all abstract methods from the declared interface.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Follow all the rules for legal overrides, such as the following:</p>
<p class="bulletxls"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Declare no checked exceptions on implementation methods other than those declared by the interface method or subclasses of those declared by the interface method.</p>
<p class="bulletxls"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Maintain the signature of the interface method, and maintain the same return type (or a subtype). (But it does not have to declare the exceptions declared in the interface method declaration.)</p>
<p class="indentt">But wait, there’s more! An implementation class can itself be <code>abstract</code>! For example, the following is legal for a class <code>Ball</code> implementing <code>Bounceable</code>:</p>
<p class="code1"><code>abstract class Ball implements Bounceable { }</code></p>
<p class="indent">Notice anything missing? We never provided the implementation methods. And that’s okay. If the implementation class is <code>abstract</code>, it can simply pass the buck to its first concrete subclass. For example, if class <code>BeachBall</code> extends <code>Ball</code>, and <code>BeachBall</code> is not <code>abstract</code>, then <code>BeachBall</code> has to provide an implementation for all the abstract methods from <code>Bounceable</code>:</p>
<div class="side-exam">
<p class="imaget"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>Implementation classes are NOT required to implement an interface’s static or default methods. We’ll discuss this in more depth later in the chapter.</em></strong></p>
</div>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0123-01.jpg" alt="images" width="609" height="274" data-mfp-src="/library/view/oca-java-se/9781260011388/p0123-01.jpg"></p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0124-01.jpg" alt="images" width="452" height="75" data-mfp-src="/library/view/oca-java-se/9781260011388/p0124-01.jpg"></p>
<p class="indent"><a id="page_122"></a>Look for classes that claim to implement an interface but don’t provide the correct method implementations. Unless the implementing class is abstract, the implementing class must provide implementations for all abstract methods defined in the interface.</p>
<p class="indent">You need to know two more rules, and then we can put this topic to sleep (or put you to sleep; we always get those two confused):</p>
<p class="numst">1.&nbsp;&nbsp;&nbsp;A class can implement more than one interface. It’s perfectly legal to say, for example, the following:</p>
<p class="code2"><code>public class Ball implements Bounceable, Serializable, Runnable { ... }</code></p>
<p class="numsn">You can extend only one class, but you can implement many interfaces (which, as of Java 8, means a form of multiple inheritance, which we’ll discuss shortly). In other words, subclassing defines who and what you are, whereas implementing defines a role you can play or a hat you can wear, despite how different you might be from some other class implementing the same interface (but from a different inheritance tree). For example, a Person extends HumanBeing (although for some, that’s debatable). But a Person may also implement Programmer, Snowboarder, Employee, Parent, or PersonCrazyEnoughToTakeThisExam.</p>
<p class="numst">2.&nbsp;&nbsp;&nbsp;An interface can itself extend another interface. The following code is perfectly legal:</p>
<p class="code2"><code>public interface Bounceable extends Moveable { } // ok!</code></p>
<p class="indentt">What does that mean? The first concrete (nonabstract) implementation class of <code>Bounceable</code> must implement all the abstract methods of <code>Bounceable</code>, plus all the abstract methods of <code>Moveable</code>! The subinterface, as we call it, simply adds more requirements to the contract of the superinterface. You’ll see this concept applied in many areas of Java, especially Java EE, where you’ll often have to build your own interface that extends one of the Java EE interfaces.</p>
<p class="indent">Hold on, though, because here’s where it gets strange. An interface can extend more than one interface! Think about that for a moment. You know that when we’re talking about classes, the following is illegal:</p>
<p class="code1"><code>public class Programmer extends Employee, Geek { } // Illegal!</code></p>
<p class="noindent"><a id="page_123"></a>As we mentioned earlier, a class is not allowed to extend multiple classes in Java. An interface, however, is free to extend multiple interfaces:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0125-01.jpg" alt="images" width="559" height="194" data-mfp-src="/library/view/oca-java-se/9781260011388/p0125-01.jpg"></p>
<p class="indent">In the next example, <code>Ball</code> is required to implement <code>Bounceable</code>, plus all abstract methods from the interfaces that <code>Bounceable</code> extends (including any interfaces those interfaces extend, and so on, until you reach the top of the stack—or is it the bottom of the stack?). So <code>Ball</code> would need to look like the following:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0125-02.jpg" alt="images" width="685" height="174" data-mfp-src="/library/view/oca-java-se/9781260011388/p0125-02.jpg"></p>
<p class="indent">If class <code>Ball</code> fails to implement any of the abstract methods from <code>Bounceable</code>, <code>Moveable</code>, or <code>Spherical</code>, the compiler will jump up and down wildly, red in the face, until it does. Unless, that is, class <code>Ball</code> is marked <code>abstract</code>. In that case, <code>Ball</code> could choose to implement any, all, or none of the abstract methods from any of the interfaces, thus leaving the rest of the implementations to a concrete subclass of <code>Ball</code>, as follows:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0125-03.jpg" alt="images" width="571" height="153" data-mfp-src="/library/view/oca-java-se/9781260011388/p0125-03.jpg"></p>
<p class="code1"><a id="page_124"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0126-01.jpg" alt="images" width="579" height="115" data-mfp-src="/library/view/oca-java-se/9781260011388/p0126-01.jpg"></p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2fig5">Figure 2-5</a> compares concrete and <code>abstract</code> examples of extends and implements for both classes and interfaces.</p>
<p class="images"><a id="ch2fig5"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0126-01.jpg" alt="images" width="1068" height="687" data-mfp-src="/library/view/oca-java-se/9781260011388/f0126-01.jpg"></p>
<p class="figcap"><span class="figs"><strong>FIGURE 2-5</strong></span>&nbsp;&nbsp;&nbsp;Comparing concrete and <code>abstract</code> examples of extends and implements</p>
<h4 class="h4"><a id="ch02lev2sec5"></a>Java 8—Now with Multiple Inheritance!</h4>
<p class="noindent">It might have already occurred to you that since interfaces can now have concrete methods and classes can implement multiple interfaces, the spectre of multiple inheritance and the Deadly Diamond of Death can rear its ugly head! Well, you’re partly correct. A class CAN implement interfaces with duplicate, concrete method signatures! But the good news is that the compiler’s got your back, and if you DO want to implement both interfaces, you’ll have to provide an overriding method in your class. Let’s look at the following code:</p>
<div class="side-exam">
<p class="imaget"><a id="page_125"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>Look for illegal uses of extends and implements. The following shows examples of legal and illegal class and interface declarations:</em></strong></p>
<p class="imagel"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0127-01.jpg" alt="images" width="759" height="442" data-mfp-src="/library/view/oca-java-se/9781260011388/f0127-01.jpg"></p>
<p class="Text-icon-exam"><strong><em>Burn these in, and watch for abuses in the questions you get on the exam. Regardless of what the question appears to be testing, the real problem might be the class or interface declaration. Before you get caught up in, say, tracing a complex threading flow, check to see if the code will even compile. (Just that tip alone may be worth your putting us in your will!) (You’ll be impressed by the effort the exam developers put into distracting you from the real problem.) (How did people manage to write anything before parentheses were invented?)</em></strong></p>
</div>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0127-01.jpg" alt="images" width="350" height="115" data-mfp-src="/library/view/oca-java-se/9781260011388/p0127-01.jpg"></p>
<p class="code1"><a id="page_126"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0128-01.jpg" alt="images" width="601" height="215" data-mfp-src="/library/view/oca-java-se/9781260011388/p0128-01.jpg"></p>
<p class="noindent">As the code stands, it WILL NOT COMPILE because it’s not clear which version of <code>doStuff()</code> should be used. In order to make the code compile, you need to override <code>doStuff()</code> in the class. Uncommenting the class’s <code>doStuff()</code> method would allow the code to compile and when run produce the following output:</p>
<p class="code1"><code>3</code></p>
<h3 class="h3a">CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch02lev1sec7"></a>Legal Return Types (OCA Objectives 2.2 and 6.1)</h3>
<p class="noindent"><em>2.2 Differentiate between object reference variables and primitive variables.</em></p>
<p class="noindent"><em>6.1 Create methods with arguments and return values; including overloaded methods.</em></p>
<p class="indentt">This section covers two aspects of return types: what you can declare as a return type, and what you can actually return as a value. What you can and cannot declare is pretty straightforward, but it all depends on whether you’re overriding an inherited method or simply declaring a new method (which includes overloaded methods). We’ll take just a quick look at the difference between return type rules for overloaded and overriding methods, because we’ve already covered that in this chapter. We’ll cover a small bit of new ground, though, when we look at polymorphic return types and the rules for what is and is not legal to actually return.</p>
<h4 class="h4"><a id="ch02lev2sec6"></a><a id="page_127"></a>Return Type Declarations</h4>
<p class="noindent">This section looks at what you’re allowed to declare as a return type, which depends primarily on whether you are overriding, overloading, or declaring a new method.</p>
<h4 class="h4a">Return Types on Overloaded Methods</h4>
<p class="noindent">Remember that method overloading is not much more than name reuse. The overloaded method is a completely different method from any other method of the same name. So if you inherit a method but overload it in a subtype, you’re not subject to the restrictions of overriding, which means you can declare any return type you like. What you can’t do is change <em>only</em> the return type. To overload a method, remember, you must change the argument list. The following code shows an overloaded method:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0129-01.jpg" alt="images" width="284" height="155" data-mfp-src="/library/view/oca-java-se/9781260011388/p0129-01.jpg"></p>
<p class="indent">Notice that the <code>Bar</code> version of the method uses a different return type. That’s perfectly fine. As long as you’ve changed the argument list, you’re overloading the method, so the return type doesn’t have to match that of the supertype version. What you’re NOT allowed to do is this:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0129-02.jpg" alt="images" width="601" height="155" data-mfp-src="/library/view/oca-java-se/9781260011388/p0129-02.jpg"></p>
<h4 class="h4a">Overriding and Return Types and Covariant Returns</h4>
<p class="noindent">When a subtype wants to change the method implementation of an inherited method (an override), the subtype must define a method that matches the inherited version exactly. Or, since Java 5, you’re allowed to change the return type in the <a id="page_128"></a>overriding method as long as the new return type is a <em>subtype</em> of the declared return type of the overridden (superclass) method.</p>
<p class="indent">Let’s look at a covariant return in action:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0130-01.jpg" alt="images" width="580" height="195" data-mfp-src="/library/view/oca-java-se/9781260011388/p0130-01.jpg"></p>
<p class="noindent">Since Java 5, this code compiles. If you were to attempt to compile this code with a 1.4 compiler or with the source flag as follows,</p>
<p class="code1"><code>javac -source 1.4 Beta.java</code></p>
<p class="noindent">you would get a compiler error like this:</p>
<p class="code1"><code>attempting to use incompatible return type</code></p>
<p class="indent">Other rules apply to overriding, including those for access modifiers and declared exceptions, but those rules aren’t relevant to the return type discussion.</p>
<div class="side-exam">
<p class="imaget"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>For the exam, be sure you know that overloaded methods can change the return type, but overriding methods can do so only within the bounds of covariant returns. Just that knowledge alone will help you through a wide range of exam questions.</em></strong></p>
</div>
<h4 class="h4"><a id="ch02lev2sec7"></a>Returning a Value</h4>
<p class="noindent">You have to remember only six rules for returning a value:</p>
<p class="numst">1.&nbsp;&nbsp;&nbsp;You can return <code>null</code> in a method with an object reference return type.</p>
<p class="code2"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0130-02.jpg" alt="images" width="236" height="55" data-mfp-src="/library/view/oca-java-se/9781260011388/p0130-02.jpg"></p>
<p class="numst"><a id="page_129"></a>2.&nbsp;&nbsp;&nbsp;An array is a perfectly legal return type.</p>
<p class="code2"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0131-01.jpg" alt="images" width="474" height="55" data-mfp-src="/library/view/oca-java-se/9781260011388/p0131-01.jpg"></p>
<p class="numst">3.&nbsp;&nbsp;&nbsp;In a method with a primitive return type, you can return any value or variable that can be implicitly converted to the declared return type.</p>
<p class="code2"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0131-02.jpg" alt="images" width="410" height="75" data-mfp-src="/library/view/oca-java-se/9781260011388/p0131-02.jpg"></p>
<p class="numst">4.&nbsp;&nbsp;&nbsp;In a method with a primitive return type, you can return any value or variable that can be explicitly cast to the declared return type.</p>
<p class="code2"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0131-03.jpg" alt="images" width="169" height="75" data-mfp-src="/library/view/oca-java-se/9781260011388/p0131-03.jpg"></p>
<p class="numst">5.&nbsp;&nbsp;&nbsp;You must <em>not</em> return anything from a method with a void return type.</p>
<p class="code2"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0131-04.jpg" alt="images" width="360" height="55" data-mfp-src="/library/view/oca-java-se/9781260011388/p0131-04.jpg"></p>
<p class="numst">6.&nbsp;&nbsp;&nbsp;In a method with an object reference return type, you can return any object type that can be implicitly cast to the declared return type.</p>
<p class="code2"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0131-05.jpg" alt="images" width="580" height="352" data-mfp-src="/library/view/oca-java-se/9781260011388/p0131-05.jpg"></p>
<div class="side-exam">
<p class="imaget"><a id="page_130"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>Watch for methods that declare an abstract class or interface return type, and know that any object that passes the IS-A test (in other words, would test true using the <code>instanceof</code> operator) can be returned from that method. For example:</em></strong></p>
<p class="imagel"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0132-01.jpg" alt="images" width="485" height="141" data-mfp-src="/library/view/oca-java-se/9781260011388/f0132-01.jpg"></p>
<p class="Text-icon-exam"><strong><em>This code will compile, and the return value is a subtype.</em></strong></p>
</div>
<h3 class="h3a">CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch02lev1sec8"></a>Constructors and Instantiation<br>(OCA Objectives 6.3 and 7.4)</h3>
<p class="noindent"><em>6.3 Create and overload constructors; including impact on default constructors (sic)</em></p>
<p class="noindent"><em>7.4 Use super and this to access objects and constructors.</em></p>
<p class="indentt">Objects are constructed. You CANNOT make a new object without invoking a constructor. In fact, you can’t make a new object without invoking not just the constructor of the object’s actual class type, but also the constructor of each of its superclasses! Constructors are the code that runs whenever you use the keyword <code>new</code>. (Okay, to be a bit more accurate, there can also be initialization blocks that run when you say <code>new</code>, and we’re going to cover <code>init</code> blocks and their static initialization counterparts after we discuss constructors.) We’ve got plenty to talk about here—we’ll look at how constructors are coded, who codes them, and how they work at runtime. So grab your hardhat and a hammer, and let’s do some object building.</p>
<h4 class="h4"><a id="ch02lev2sec8"></a><a id="page_131"></a>Constructor Basics</h4>
<p class="noindent">Every class, <em>including abstract classes</em>, MUST have a constructor. Burn that into your brain. But just because a class must have a constructor doesn’t mean the programmer has to type it. A constructor looks like this:</p>
<p class="code1"><code>class Foo {<br>&nbsp;&nbsp;<strong>Foo() { } // The constructor for the Foo class<br></strong>}</code></p>
<p class="noindent">Notice what’s missing? There’s no return type! Two key points to remember about constructors are that they have no return type, and their names must exactly match the class name. Typically, constructors are used to initialize the instance variable state, as follows:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0133-01.jpg" alt="images" width="283" height="154" data-mfp-src="/library/view/oca-java-se/9781260011388/p0133-01.jpg"></p>
<p class="indent">In the preceding code example, the <code>Foo</code> class does not have a no-arg constructor. That means the following will fail to compile:</p>
<p class="code1"><code>Foo f = new Foo(); // Won’t compile, no matching constructor</code></p>
<p class="noindent">but the following will compile:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0133-02.jpg" alt="images" width="381" height="22" data-mfp-src="/library/view/oca-java-se/9781260011388/p0133-02.jpg"></p>
<p class="indent">So it’s very common (and desirable) for a class to have a no-arg constructor, regardless of how many other overloaded constructors are in the class (yes, constructors can be overloaded). You can’t always make that work for your classes; occasionally you have a class where it makes no sense to create an instance without supplying information to the constructor. A <code>java.awt.Color</code> object, for example, can’t be created by calling a no-arg constructor, because that would be like saying to the JVM, “Make me a new Color object, and I really don’t care what color it is…you pick.” Do you seriously want the JVM making your style decisions?</p>
<h4 class="h4"><a id="ch02lev2sec9"></a><a id="page_132"></a>Constructor Chaining</h4>
<p class="noindent">We know that constructors are invoked at runtime when you say <code>new</code> on some class type as follows:</p>
<p class="code1"><code>Horse h = new Horse();</code></p>
<p class="noindent">But what <em>really</em> happens when you say <code>new Horse()</code>? (Assume <code>Horse</code> extends <code>Animal</code> and <code>Animal</code> extends <code>Object</code>.)</p>
<p class="numst">1.&nbsp;&nbsp;&nbsp;The <code>Horse</code> constructor is invoked. Every constructor invokes the constructor of its superclass with an (implicit) call to <code>super()</code>, unless the constructor invokes an overloaded constructor of the same class (more on that in a minute).</p>
<p class="nums">2.&nbsp;&nbsp;&nbsp;The <code>Animal</code> constructor is invoked (<code>Animal</code> is the superclass of <code>Horse</code>).</p>
<p class="nums">3.&nbsp;&nbsp;&nbsp;The <code>Object</code> constructor is invoked (<code>Object</code> is the ultimate superclass of all classes, so class <code>Animal</code> extends <code>Object</code> even though you don’t actually type “extends Object” into the <code>Animal</code> class declaration; it’s implicit.) At this point we’re on the top of the stack.</p>
<p class="nums">4.&nbsp;&nbsp;&nbsp;If class <code>Object</code> had any instance variables, then they would be given their explicit values. By <em>explicit</em> values, we mean values that are assigned at the time the variables are declared, such as <code>int x = 27</code>, where <code>27</code> is the explicit value (as opposed to the default value) of the instance variable.</p>
<p class="nums">5.&nbsp;&nbsp;&nbsp;The <code>Object</code> constructor completes.</p>
<p class="nums">6.&nbsp;&nbsp;&nbsp;The <code>Animal</code> instance variables are given their explicit values (if any).</p>
<p class="nums">7.&nbsp;&nbsp;&nbsp;The <code>Animal</code> constructor completes.</p>
<p class="nums">8.&nbsp;&nbsp;&nbsp;The <code>Horse</code> instance variables are given their explicit values (if any).</p>
<p class="numsb">9.&nbsp;&nbsp;&nbsp;The <code>Horse</code> constructor completes.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2fig6">Figure 2-6</a> shows how constructors work on the call stack.</p>
<p class="images"><a id="ch2fig6"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0134-01.jpg" alt="images" width="315" height="183" data-mfp-src="/library/view/oca-java-se/9781260011388/f0134-01.jpg"></p>
<p class="figcap"><span class="figs"><strong>FIGURE 2-6</strong></span>&nbsp;&nbsp;&nbsp;Constructors on the call stack</p>
<h4 class="h4"><a id="ch02lev2sec10"></a><a id="page_133"></a>Rules for Constructors</h4>
<p class="noindent">The following list summarizes the rules you’ll need to know for the exam (and to understand the rest of this section). You MUST remember these, so be sure to study them more than once.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Constructors can use any access modifier, including <code>private</code>. (A <code>private</code> constructor means only code within the class itself can instantiate an object of that type, so if the <code>private</code> constructor class wants to allow an instance of the class to be used, the class must provide a static method or variable that allows access to an instance created from within the class.)</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The constructor name must match the name of the class.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Constructors must not have a return type.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;It’s legal (but stupid) to have a method with the same name as the class, but that doesn’t make it a constructor. If you see a return type, it’s a method rather than a constructor. In fact, you could have both a method and a constructor with the same name—the name of the class—in the same class, and that’s not a problem for Java. Be careful not to mistake a method for a constructor—be sure to look for a return type.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;If you don’t type a constructor into your class code, a default constructor will be automatically generated by the compiler.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The default constructor is ALWAYS a no-arg constructor.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;If you want a no-arg constructor and you’ve typed any other constructor(s) into your class code, the compiler won’t provide the no-arg constructor (or any other constructor) for you. In other words, if you’ve typed in a constructor with arguments, you won’t have a no-arg constructor unless you typed it in yourself!</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Every constructor has, as its first statement, either a call to an overloaded constructor (<code>this()</code>) or a call to the superclass constructor (<code>super()</code>), although remember that this call can be inserted by the compiler.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;If you do type in a constructor (as opposed to relying on the compiler-generated default constructor), and you do not type in the call to <code>super()</code> or a call to <code>this()</code>, the compiler will insert a no-arg call to <code>super()</code> for you as the very first statement in the constructor.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;A call to <code>super()</code> can either be a no-arg call or can include arguments passed to the super constructor.</p>
<p class="bulletx"><a id="page_134"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;A no-arg constructor is not necessarily the default (that is, compiler-supplied) constructor, although the default constructor is always a no-arg constructor. The default constructor is the one the compiler provides! Although the default constructor is always a no-arg constructor, you’re free to put in your own no-arg constructor.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;You cannot make a call to an instance method or access an instance variable until after the super constructor runs.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Only static variables and methods can be accessed as part of the call to <code>super()</code> or <code>this()</code>. (Example: <code>super(Animal.NAME)</code> is OK, because <code>NAME</code> is declared as a static variable.)</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Abstract classes have constructors, and those constructors are always called when a concrete subclass is instantiated.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Interfaces do not have constructors. Interfaces are not part of an object’s inheritance tree.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The only way a constructor can be invoked is from within another constructor. In other words, you can’t write code that actually calls a constructor as follows:</p>
<p class="code2a"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0136-01.jpg" alt="images" width="483" height="115" data-mfp-src="/library/view/oca-java-se/9781260011388/p0136-01.jpg"></p>
<h4 class="h4"><a id="ch02lev2sec11"></a>Determine Whether a Default Constructor Will Be Created</h4>
<p class="noindent">The following example shows a <code>Horse</code> class with two constructors:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0136-02.jpg" alt="images" width="226" height="75" data-mfp-src="/library/view/oca-java-se/9781260011388/p0136-02.jpg"></p>
<p class="noindent">Will the compiler put in a default constructor for this class? No!</p>
<p class="indent">How about for the following variation of the class?</p>
<p class="code1"><code>class Horse {<br>&nbsp;&nbsp;&nbsp;Horse(String name) { }<br>}</code></p>
<p class="noindent">Now will the compiler insert a default constructor? No!</p>
<p class="indent"><a id="page_135"></a>What about this class?</p>
<p class="code1"><code>class Horse { }</code></p>
<p class="noindent">Now we’re talking. The compiler will generate a default constructor for this class because the class doesn’t have any constructors defined.</p>
<p class="indent">Okay, what about this class?</p>
<p class="code1"><code>class Horse {<br>&nbsp;&nbsp;&nbsp;void Horse() { }<br>}</code></p>
<p class="noindent">It might look like the compiler won’t create a constructor, since one is already in the <code>Horse</code> class. Or is it? Take another look at the preceding <code>Horse</code> class.</p>
<p class="indent">What’s wrong with the <code>Horse()</code> constructor? It isn’t a constructor at all! It’s simply a method that happens to have the same name as the class. Remember, the return type is a dead giveaway that we’re looking at a method, not a constructor.</p>
<p class="noindentt"><span class="fonts"><strong>How do you know for sure whether a default constructor will be created?</strong></span> Because you didn’t write any constructors in your class.</p>
<p class="noindentt"><span class="fonts"><strong>How do you know what the default constructor will look like?</strong></span> Because...</p>
<p class="bulletxt"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The default constructor has the same access modifier as the class.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The default constructor has no arguments.</p>
<p class="bulletxb"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The default constructor includes a no-arg call to the super constructor (<code>super()</code>).</p>
<p class="noindent"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2tab5">Table 2-5</a> shows what the compiler will (or won’t) generate for your class.</p>
<p class="tabcap"><a id="page_136"></a><span class="figs"><strong>TABLE 2-5</strong></span>&nbsp;&nbsp;&nbsp;Compiler-Generated Constructor Code</p>
<p class="image-t"><a id="ch2tab5"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/t0138-01.jpg" alt="images" width="991" height="864" data-mfp-src="/library/view/oca-java-se/9781260011388/t0138-01.jpg"></p>
<p class="noindentt"><span class="fonts"><strong>What happens if the super constructor has arguments?</strong></span> Constructors can have arguments just as methods can, and if you try to invoke a method that takes, say, an <code>int</code>, but you don’t pass anything to the method, the compiler will complain as follows:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0137-01.jpg" alt="images" width="572" height="195" data-mfp-src="/library/view/oca-java-se/9781260011388/p0137-01.jpg"></p>
<p class="indent">The compiler will complain that you can’t invoke <code>takeInt()</code> without passing an <code>int</code>. Of course, the compiler enjoys the occasional riddle, so the message it spits out on some versions of the JVM (your mileage may vary) is less than obvious:</p>
<p class="code1"><code>UseBar.java:7: takeInt(int) in Bar cannot be applied to ()<br>&nbsp;&nbsp;&nbsp;b.takeInt();<br>&nbsp;&nbsp;&nbsp;^</code></p>
<p class="noindent"><a id="page_137"></a>But you get the idea. The bottom line is that there must be a match for the method. And by match, we mean the argument types must be able to accept the values or variables you’re passing and in the order you’re passing them. Which brings us back to constructors (and here you were thinking we’d never get there), which work exactly the same way.</p>
<p class="indent">So if your super constructor (that is, the constructor of your immediate superclass/parent) has arguments, you must type in the call to <code>super()</code>, supplying the appropriate arguments. Crucial point: if your superclass does not have a no-arg constructor, you must type a constructor in your class (the subclass) because you need a place to put in the call to <code>super()</code> with the appropriate arguments.</p>
<p class="indent">The following is an example of the problem:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0139-01.jpg" alt="images" width="264" height="174" data-mfp-src="/library/view/oca-java-se/9781260011388/p0139-01.jpg"></p>
<p class="noindent">And once again the compiler treats us with stunning lucidity:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0139-02.jpg" alt="images" width="332" height="82" data-mfp-src="/library/view/oca-java-se/9781260011388/p0139-02.jpg"></p>
<p class="indent">If you’re lucky (and it’s a full moon), <em>your</em> compiler might be a little more explicit. But again, the problem is that there just isn’t a match for what we’re trying to invoke with <code>super()</code>—an <code>Animal</code> constructor with no arguments.</p>
<p class="indent">Another way to put this is that if your superclass does <em>not</em> have a no-arg constructor, then in your subclass you will not be able to use the default constructor supplied by the compiler. It’s that simple. Because the compiler can <em>only</em> put in a call to a no-arg <code>super()</code>, you won’t even be able to compile something like this:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0139-03.jpg" alt="images" width="312" height="75" data-mfp-src="/library/view/oca-java-se/9781260011388/p0139-03.jpg"></p>
<p class="indent"><a id="page_138"></a>Trying to compile this code gives us exactly the same error we got when we put a constructor in the subclass with a call to the no-arg version of <code>super()</code>:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0140-01.jpg" alt="images" width="361" height="82" data-mfp-src="/library/view/oca-java-se/9781260011388/p0140-01.jpg"></p>
<p class="indent">In fact, the preceding <code>Clothing</code> and <code>TShirt</code> code is implicitly the same as the following code, where we’ve supplied a constructor for <code>TShirt</code> that’s identical to the default constructor supplied by the compiler:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0140-02.jpg" alt="images" width="610" height="215" data-mfp-src="/library/view/oca-java-se/9781260011388/p0140-02.jpg"></p>
<p class="indent">One last point on the whole default constructor thing (and it’s probably very obvious, but we have to say it or we’ll feel guilty for years), <strong><em>constructors are never inherited</em></strong>. They aren’t methods. They can’t be overridden (because they aren’t methods, and only instance methods can be overridden). So the type of constructor(s) your superclass has in no way determines the type of default constructor you’ll get. Some folks mistakenly believe that the default constructor somehow matches the super constructor, either by the arguments the default constructor will have (remember, the default constructor is always a no-arg) or by the arguments used in the compiler-supplied call to <code>super()</code>.</p>
<p class="indent">So although constructors can’t be overridden, you’ve already seen that they can be overloaded, and typically are.</p>
<h4 class="h4"><a id="ch02lev2sec12"></a>Overloaded Constructors</h4>
<p class="noindent">Overloading a constructor means typing in multiple versions of the constructor, each having a different argument list, like the following examples:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0140-03.jpg" alt="images" width="179" height="75" data-mfp-src="/library/view/oca-java-se/9781260011388/p0140-03.jpg"></p>
<p class="indent"><a id="page_139"></a>The preceding <code>Foo</code> class has two overloaded constructors: one that takes a string, and one with no arguments. Because there’s no code in the no-arg version, it’s actually identical to the default constructor the compiler supplies—but remember, since there’s already a constructor in this class (the one that takes a string), the compiler won’t supply a default constructor. If you want a no-arg constructor to overload the with-args version you already have, you’re going to have to type it yourself, just as in the <code>Foo</code> example.</p>
<p class="indent">Overloading a constructor is typically used to provide alternate ways for clients to instantiate objects of your class. For example, if a client knows the animal name, they can pass that to an <code>Animal</code> constructor that takes a string. But if they don’t know the name, the client can call the no-arg constructor, and that constructor can supply a default name. Here’s what it looks like:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0141-01.jpg" alt="images" width="501" height="491" data-mfp-src="/library/view/oca-java-se/9781260011388/p0141-01.jpg"></p>
<p class="indent">Running the code four times produces this output:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0141-02.jpg" alt="images" width="123" height="50" data-mfp-src="/library/view/oca-java-se/9781260011388/p0141-02.jpg"></p>
<p class="code1"><a id="page_140"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0142-01.jpg" alt="images" width="123" height="209" data-mfp-src="/library/view/oca-java-se/9781260011388/p0142-01.jpg"></p>
<p class="indent">There’s a lot going on in the preceding code. <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2fig7">Figure 2-7</a> shows the call stack for constructor invocations when a constructor is overloaded.</p>
<p class="images"><a id="ch2fig7"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0142-01.jpg" alt="images" width="524" height="183" data-mfp-src="/library/view/oca-java-se/9781260011388/f0142-01.jpg"></p>
<p class="figcap"><span class="figs"><strong>FIGURE 2-7</strong></span>&nbsp;&nbsp;&nbsp;Overloaded constructors on the call stack</p>
<p class="indent">Take a look at the call stack, and then let’s walk through the code straight from the top.</p>
<p class="bulletxt"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>L</strong><strong>ine 2</strong> Declare a <code>String</code> instance variable name.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>L</strong><strong>ines 3–5</strong> Constructor that takes a <code>String</code> and assigns it to instance variable name.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>L</strong><strong>ine 7</strong> Here’s where it gets fun. Assume every animal needs a name, but the client (calling code) might not always know what the name should be, so the <code>Animal</code> class will assign a random name. The no-arg constructor generates a name by invoking the <code>makeRandomName()</code> method.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>L</strong><strong>ine 8</strong> The no-arg constructor invokes its own overloaded constructor that takes a <code>String</code>, in effect calling it the same way it would be called if client code were doing a <code>new</code> to instantiate an object, passing it a <code>String</code> for the name. The overloaded invocation uses the keyword <code>this</code>, but uses it as though it were a method named <code>this()</code>. So line 8 is simply calling the constructor on line 3, passing it a randomly selected <code>String</code> rather than a client-code chosen name.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>L</strong><strong>ine 11</strong> Notice that the <code>makeRandomName()</code> method is marked <code>static</code>! That’s because you cannot invoke an instance (in other words, nonstatic) <a id="page_141"></a>method (or access an instance variable) until after the <code>super</code> constructor has run. And since the <code>super</code> constructor will be invoked from the constructor on line 3, rather than from the one on line 7, line 8 can use only a static method to generate the name. If we wanted all <code>animal</code>s not specifically named by the caller to have the same default name, say, “Fred,” then line 8 could have read <code>this(“Fred”);</code> rather than calling a method that returns a string with the randomly chosen name.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>L</strong><strong>ine 12</strong> This doesn’t have anything to do with constructors, but since we’re all here to learn, it generates a random integer between 0 and 4.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>L</strong><strong>ine 13</strong> Weird syntax, we know. We’re creating a new <code>String</code> object (just a single <code>String</code> instance), but we want the string to be selected randomly from a list. Except we don’t have the list, so we need to make it. So in that one line of code we</p>
<p class="numl">1. Declare a <code>String</code> variable name.</p>
<p class="numl">2. Create a <code>String</code> array (anonymously—we don’t assign the array itself to a variable).</p>
<p class="numl">3. Retrieve the string at index <code>[x]</code> (x being the random number generated on line 12) of the newly created <code>String</code> array.</p>
<p class="numl">4. Assign the string retrieved from the array to the declared instance variable name. We could have made it much easier to read if we’d just written</p>
<p class="code2a"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0143-01.jpg" alt="images" width="530" height="75" data-mfp-src="/library/view/oca-java-se/9781260011388/p0143-01.jpg"></p>
<p class="numln">But where’s the fun in that? Throwing in unusual syntax (especially for code wholly unrelated to the real question) is in the spirit of the exam. Don’t be startled! (Okay, be startled, but then just say to yourself, “Whoa!” and get on with it.)</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>L</strong><strong>ine 18</strong> We’re invoking the no-arg version of the constructor (causing a random name from the list to be passed to the other constructor).</p>
<p class="bulletxb"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>L</strong><strong>ine 20</strong> We’re invoking the overloaded constructor that takes a string representing the name.</p>
<p class="indent">The key point to get from this code example is in line 8. Rather than calling <code>super()</code>, we’re calling <code>this()</code>, and <code>this()</code> always means a call to another constructor in the same class. Okay, fine, but what happens after the call to <code>this()</code>? <a id="page_142"></a>Sooner or later the <code>super()</code> constructor gets called, right? Yes, indeed. A call to <code>this()</code> just means you’re delaying the inevitable. Some constructor, somewhere, must make the call to <code>super()</code>.</p>
<p class="bqt"><strong>Key Rule: The first line in a constructor must be a call to</strong> <code><strong>super()</strong></code><strong>or a call to</strong> <code><strong>this()</strong></code>.</p>
<p class="noindent">No exceptions. If you have neither of those calls in your constructor, the compiler will insert the no-arg call to <code>super()</code>. In other words, if constructor <code>A()</code> has a call to <code>this()</code>, the compiler knows that constructor <code>A()</code> will not be the one to invoke <code>super()</code>.</p>
<p class="indent">The preceding rule means a constructor can never have both a call to <code>super()</code> and a call to <code>this()</code>. Because each of those calls must be the first statement in a constructor, you can’t legally use both in the same constructor. That also means the compiler will not put a call to <code>super()</code> in any constructor that has a call to <code>this()</code>.</p>
<p class="indent">Thought question: What do you think will happen if you try to compile the following code?</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0144-01.jpg" alt="images" width="149" height="155" data-mfp-src="/library/view/oca-java-se/9781260011388/p0144-01.jpg"></p>
<p class="indent">Your compiler may not actually catch the problem (it varies depending on your compiler, but most won’t catch the problem). It assumes you know what you’re doing. Can you spot the flaw? Given that a <code>super</code> constructor must always be called, where would the call to <code>super()</code> go? Remember, the compiler won’t put in a default constructor if you’ve already got one or more constructors in your class. And when the compiler doesn’t put in a default constructor, it still inserts a call to <code>super()</code> in any constructor that doesn’t explicitly have a call to the <code>super</code> constructor—unless, that is, the constructor already has a call to <code>this()</code>. So in the preceding code, where can <code>super()</code> go? The only two constructors in the class both have calls to <code>this()</code>, and, in fact, you’ll get exactly what you’d get if you typed the following method code:</p>
<p class="code1"><code>public void go() {<br>&nbsp;&nbsp;&nbsp;doStuff();<br>}<br><br>public void doStuff() {<br>&nbsp;&nbsp;&nbsp;go();<br>}</code></p>
<p class="indent"><a id="page_143"></a>Now can you see the problem? Of course you can. The stack explodes! It gets higher and higher and higher until it just bursts open and method code goes spilling out, oozing out of the JVM right onto the floor. Two overloaded constructors both calling <code>this()</code> are two constructors calling each other—over and over and over, resulting in this:</p>
<p class="code1"><code>% java A<br>Exception in thread “main” java.lang.StackOverflowError</code></p>
<p class="indent">The benefit of having overloaded constructors is that you offer flexible ways to instantiate objects from your class. The benefit of having one constructor invoke another overloaded constructor is to avoid code duplication. In the <code>Animal</code> example, there wasn’t any code other than setting the name, but imagine if after line 4 there was still more work to be done in the constructor. By putting all the other constructor work in just one constructor, and then having the other constructors invoke it, you don’t have to write and maintain multiple versions of that other important constructor code. Basically, each of the other not-the-real-one overloaded constructors will call another overloaded constructor, passing it whatever data it needs (data the client code didn’t supply).</p>
<p class="indent">Constructors and instantiation become even more exciting (just when you thought it was safe) when you get to inner classes, but we know you can stand to have only so much fun in one chapter, and besides, you don’t have to deal with inner classes until you tackle the OCP exam.</p>
<h3 class="h3a">CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch02lev1sec9"></a>Initialization Blocks (OCA Objectives 1.2 and 6.3-ish)</h3>
<p class="noindent"><em>1.2 Define the structure of a Java class</em></p>
<p class="noindent"><em>6.3 Create and overload constructors; including impact on default constructors</em></p>
<p class="indentt">We’ve talked about two places in a class where you can put code that performs operations: methods and constructors. Initialization blocks are the third place in a Java program where operations can be performed. Static initialization blocks run <a id="page_144"></a>when the class is first loaded, and instance initialization blocks run whenever an instance is created (a bit similar to a constructor). Let’s look at an example:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0146-01.jpg" alt="images" width="465" height="135" data-mfp-src="/library/view/oca-java-se/9781260011388/p0146-01.jpg"></p>
<p class="indent">As you can see, the syntax for initialization blocks is pretty terse. They don’t have names, they can’t take arguments, and they don’t return anything. A <em>static</em> initialization block runs <em>once</em> when the class is first loaded. An <em>instance</em> initialization block runs once <em>every time a new instance is created</em>. Remember when we talked about the order in which constructor code executed? Instance <code>init</code> block code runs right after the call to <code>super()</code> in a constructor—in other words, after all <code>super</code> constructors have run.</p>
<p class="indent">You can have many initialization blocks in a class. It is important to note that unlike methods or constructors, <em>the order in which initialization blocks appear in a class matters</em>. When it’s time for initialization blocks to run, if a class has more than one, they will run in the order in which they appear in the class file—in other words, from the top down. Based on the rules we just discussed, can you determine the output of the following program?</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0146-02.jpg" alt="images" width="493" height="254" data-mfp-src="/library/view/oca-java-se/9781260011388/p0146-02.jpg"></p>
<p class="indent">To figure this out, remember these rules:</p>
<p class="bulletxt"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code>i</code><code>nit</code> blocks execute in the order in which they appear.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Static <code>init</code> blocks run once, when the class is first loaded.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Instance <code>init</code> blocks run every time a class instance is created.</p>
<p class="bulletxb"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Instance <code>init</code> blocks run after the constructor’s call to <code>super()</code>.</p>
<p class="indent"><a id="page_145"></a>With those rules in mind, the following output should make sense:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0147-01.jpg" alt="images" width="161" height="153" data-mfp-src="/library/view/oca-java-se/9781260011388/p0147-01.jpg"></p>
<p class="indent">As you can see, the instance <code>init</code> blocks each ran twice. Instance <code>init</code> blocks are often used as a place to put code that all the constructors in a class should share. That way, the code doesn’t have to be duplicated across constructors.</p>
<p class="indent">Finally, if you make a mistake in your static <code>init</code> block, the JVM can throw an <code>ExceptionInInitializerError</code>. Let’s look at an example:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0147-02.jpg" alt="images" width="492" height="95" data-mfp-src="/library/view/oca-java-se/9781260011388/p0147-02.jpg"></p>
<p class="noindent">It produces something like this:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0147-03.jpg" alt="images" width="610" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0147-03.jpg"></p>
<div class="side-exam">
<p class="imaget"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>By convention, <code>init</code> blocks usually appear near the top of the class file, somewhere around the constructors. However, this is the OCA exam we’re talking about. Don’t be surprised if you find an <code>init</code> block tucked in between a couple of methods, looking for all the world like a compiler error waiting to happen!</em></strong></p>
</div>
<h3 class="h3a"><a id="page_146"></a>CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch02lev1sec10"></a>Statics (OCA Objective 6.2)</h3>
<p class="noindent"><em>6.2 Apply the static keyword to methods and fields.</em></p>
<h4 class="h4"><a id="ch02lev2sec13"></a>Static Variables and Methods</h4>
<p class="noindent">The <code>static</code> modifier has such a profound impact on the behavior of a method or variable that we’re treating it as a concept entirely separate from the other modifiers. To understand the way a <code>static</code> member works, we’ll look first at a reason for using one. Imagine you’ve got a utility class or interface with a method that always runs the same way; its sole function is to return, say, a random number. It wouldn’t matter which instance of the class performed the method—it would always behave exactly the same way. In other words, the method’s behavior has no dependency on the state (instance variable values) of an object. So why, then, do you need an object when the method will never be instance-specific? Why not just ask the type itself to run the method?</p>
<p class="indent">Let’s imagine another scenario: Suppose you want to keep a running count of all instances instantiated from a particular class. Where do you actually keep that variable? It won’t work to keep it as an instance variable within the class whose instances you’re tracking, because the count will just be initialized back to a default value with each new instance. The answer to both the utility-method-always-runs-the-same scenario and the keep-a-running-total-of-instances scenario is to use the <code>static</code> modifier. Variables and methods marked <code>static</code> belong to the type, rather than to any particular instance. In fact, for classes, you can use a <code>static</code> method or variable without having any instances of that class at all. You need only have the type available to be able to invoke a <code>static</code> method or access a <code>static</code> variable. <code>static</code> variables, too, can be accessed without having an instance of a class. But if there are instances, a <code>static</code> variable of a class will be shared by all instances of that class; there is only one copy.</p>
<p class="indent">The following code declares and uses a <code>static</code> counter variable:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0148-01.jpg" alt="images" width="638" height="115" data-mfp-src="/library/view/oca-java-se/9781260011388/p0148-01.jpg"></p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0149-01.jpg" alt="images" width="538" height="135" data-mfp-src="/library/view/oca-java-se/9781260011388/p0149-01.jpg"></p>
<p class="indent"><a id="page_147"></a>In the preceding code, the <code>static frogCount</code> variable is set to zero when the <code>Frog</code> class is first loaded by the JVM, before any <code>Frog</code> instances are created! (By the way, you don’t actually need to initialize a static variable to zero; static variables get the same default values instance variables get.) Whenever a <code>Frog</code> instance is created, the <code>Frog</code> constructor runs and increments the <code>static</code> <code>frogCount</code> variable. When this code executes, three <code>Frog</code> instances are created in <code>main()</code>, and the result is</p>
<p class="code1"><code>Frog count is now 3</code></p>
<p class="indent">Now imagine what would happen if <code>frogCount</code> were an instance variable (in other words, nonstatic):</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0149-02.jpg" alt="images" width="572" height="254" data-mfp-src="/library/view/oca-java-se/9781260011388/p0149-02.jpg"></p>
<p class="noindent">When this code executes, it should still create three <code>Frog</code> instances in <code>main()</code>, but the result is…a compiler error! We can’t get this code to compile, let alone run.</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0149-03.jpg" alt="images" width="600" height="90" data-mfp-src="/library/view/oca-java-se/9781260011388/p0149-03.jpg"></p>
<p class="indent">The JVM doesn’t know which Frog object’s <code>frogCount</code> you’re trying to access. The problem is that <code>main()</code> is itself a <code>static</code> method and thus isn’t running against any particular instance of the class; instead it’s running on the class itself. A <code>static</code> method can’t access a nonstatic (instance) variable because there is no <a id="page_148"></a>instance! That’s not to say there aren’t instances of the class alive on the heap, but rather that even if there are, the <code>static</code> method doesn’t know anything about them. The same applies to instance methods; a <code>static</code> method can’t directly invoke a nonstatic method. Think static = class, nonstatic = instance. Making the method called by the JVM (<code>main()</code>) a <code>static</code> method means the JVM doesn’t have to create an instance of your class just to start running code.</p>
<div class="side-exam">
<p class="imaget"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>One of the mistakes most often made by new Java programmers is attempting to access an instance variable (which means nonstatic variable) from the static <code>main()</code> method (which doesn’t know anything about any instances, so it can’t access the variable). The following code is an example of illegal access of a nonstatic variable from a <code>static</code> method:</em></strong></p>
<p class="imagel"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0150-01.jpg" alt="images" width="443" height="124" data-mfp-src="/library/view/oca-java-se/9781260011388/f0150-01.jpg"></p>
<p class="Text-icon-exam"><strong><em>Understand that this code will never compile, because you can’t access a nonstatic (instance) variable from a <code>static</code> method. Just think of the compiler saying, “Hey, I have no idea which <code>Foo</code> object’s <code>x</code> variable you’re trying to print!” Remember, it’s the class running the <code>main()</code> method, not an instance of the class.</em></strong></p>
<p class="indent"><strong><em>Of course, the tricky part for the exam is that the question won’t look as obvious as the preceding code. The problem you’re being tested for—accessing a nonstatic variable from a <code>static</code> method—will be buried in code that might appear to be testing something else. For example, the preceding code would be more likely to appear as</em></strong></p>
<p class="imagel"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0150-02.jpg" alt="images" width="457" height="159" data-mfp-src="/library/view/oca-java-se/9781260011388/f0150-02.jpg"></p>
<p class="Text-icon-exam"><strong><em>So while you’re trying to follow the logic, the real issue is that x and y can’t be used within <code>main()</code> because <code>x</code> and <code>y</code> are instance, not static, variables! The same applies for accessing nonstatic methods from a <code>static</code> method. The rule is, a static method of a class can’t access a nonstatic (instance) method or variable of its own class.</em></strong></p>
</div>
<h4 class="h4a"><a id="page_149"></a>Accessing Static Methods and Variables</h4>
<p class="noindent">Since you don’t need to have an instance in order to invoke a static method or access a static variable, how do you invoke or use a <code>static</code> member? What’s the syntax? We know that with a regular old instance method, you use the dot operator on a reference to an instance:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0151-01.jpg" alt="images" width="562" height="274" data-mfp-src="/library/view/oca-java-se/9781260011388/p0151-01.jpg"></p>
<p class="indent">In the preceding code, we instantiate a <code>Frog</code>, assign it to the reference variable <code>f</code>, and then use that <code>f</code> reference to invoke a method on the <code>Frog</code> instance we just created. In other words, the <code>getFrogSize()</code> method is being invoked on a specific <code>Frog</code> object on the heap.</p>
<p class="indent">But this approach (using a reference to an object) isn’t appropriate for accessing a <code>static</code> method, because there might not be any instances of the class at all! So the way we access a <code>static</code> method (or <code>static</code> variable) is to use the dot operator on the type name, as opposed to using it on a reference to an instance, as follows:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0151-02.jpg" alt="images" width="616" height="307" data-mfp-src="/library/view/oca-java-se/9781260011388/p0151-02.jpg"></p>
<p class="code1"><a id="page_150"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0152-01.jpg" alt="images" width="640" height="144" data-mfp-src="/library/view/oca-java-se/9781260011388/p0152-01.jpg"></p>
<p class="noindent">which produces the output:</p>
<p class="code1"><code>from static 3<br>from instance 4<br>use ref var 5</code></p>
<p class="indent">But just to make it really confusing, the Java language also allows you to use an object reference variable to access a <code>static</code> member. Did you catch the last line of <code>main()</code>? It included this invocation:</p>
<p class="code1"><code><strong>f.getCount();</strong> // Access a static using an instance variable</code></p>
<p class="indent">In the preceding code, we instantiate a <code>Frog</code>, assign the new <code>Frog</code> object to the reference variable <code>f</code>, and then use the <code>f</code> reference to invoke a <code>static</code> method! But even though we are using a specific <code>Frog</code> instance to access the <code>static</code> method, the rules haven’t changed. This is merely a syntax trick to let you use an object reference variable (but not the object it refers to) to get to a <code>static</code> method or variable, but the <code>static</code> member is still unaware of the particular instance used to invoke the <code>static</code> member. In the <code>Frog</code> example, the compiler knows that the reference variable <code>f</code> is of type <code>Frog</code>, and so the <code>Frog</code> class <code>static</code> method is run with no awareness or concern for the <code>Frog</code> instance at the other end of the <code>f</code> reference. In other words, the compiler cares only that reference variable <code>f</code> is declared as type <code>Frog</code>.</p>
<p class="indent">Invoking static methods from interfaces is almost the same as invoking static methods from classes, except the “instance variable syntax trick” just discussed works only for static methods in classes. The following code demonstrates how interface static methods can and cannot be invoked:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0152-02.jpg" alt="images" width="618" height="196" data-mfp-src="/library/view/oca-java-se/9781260011388/p0152-02.jpg"></p>
<p class="code1"><a id="page_151"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0153-01.jpg" alt="images" width="639" height="165" data-mfp-src="/library/view/oca-java-se/9781260011388/p0153-01.jpg"></p>
<p class="indent">Let’s review the code:</p>
<p class="bulletxt"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>L</strong><strong>ine 1</strong> is a legal invocation of an interface’s <code>default</code> method.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>L</strong><strong>ine 2</strong> is an <strong>illegal</strong> attempt to invoke an interface’s <code>static</code> method.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>L</strong><strong>ine 3</strong> is THE legal way to invoke an interface’s <code>static</code> method.</p>
<p class="bulletxb"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>L</strong><strong>ine 4</strong> is another <strong>illegal</strong> attempt to invoke an interface’s <code>static</code> method.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2fig8">Figure 2-8</a> illustrates the effects of the <code>static</code> modifier on methods and variables.</p>
<p class="images"><a id="ch2fig8"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0153-01.jpg" alt="images" width="502" height="687" data-mfp-src="/library/view/oca-java-se/9781260011388/f0153-01.jpg"></p>
<p class="figcap"><span class="figs"><strong>FIGURE 2-8</strong></span>&nbsp;&nbsp;&nbsp;The effects of <code>static</code> on methods and variables</p>
<p class="indent"><a id="page_152"></a>Finally, remember that <code><em>static</em></code> <em>methods can’t be overridden</em>! This doesn’t mean they can’t be redefined in a subclass, but redefining and overriding aren’t the same thing. Let’s look at an example of a redefined (remember, not overridden) <code>static</code> method:</p>
<p class="code1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0154-01.jpg" alt="images" width="628" height="353" data-mfp-src="/library/view/oca-java-se/9781260011388/p0154-01.jpg"></p>
<p class="indent">Running this code produces this output:</p>
<p class="code1"><code>a a a d</code></p>
<p class="indent">Remember, the syntax a <code>[x].doStuff()</code> is just a shortcut (the syntax trick)—the compiler is going to substitute something like <code>Animal.doStuff()</code> instead. Notice also that you can invoke a <code>static</code> method by using the class name.</p>
<p class="indent">Notice that we didn’t use the <em>enhanced</em> for <em>loop</em> here (covered in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html">Chapter 5</a>), even though we could have. Expect to see a mix of both Java 1.4 and Java 5–8 coding styles and practices on the exam.</p>
<h3 class="h3"><a id="ch02lev1sec11"></a><span class="under">CERTIFICATION SUMMARY</span></h3>
<p class="noindent">We started the chapter by discussing the importance of encapsulation in good OO design, and then we talked about how good encapsulation is implemented: with private instance variables and public getters and setters.</p>
<p class="indent">Next, we covered the importance of inheritance, so that you can grasp overriding, overloading, polymorphism, reference casting, return types, and constructors.</p>
<p class="indent"><a id="page_153"></a>We covered IS-A and HAS-A. IS-A is implemented using inheritance, and HAS-A is implemented by using instance variables that refer to other objects.</p>
<p class="indent">Polymorphism was next. Although a reference variable’s type can’t be changed, it can be used to refer to an object whose type is a subtype of its own. We learned how to determine what methods are invocable for a given reference variable.</p>
<p class="indent">We looked at the difference between overridden and overloaded methods, learning that an overridden method occurs when a subtype inherits a method from a supertype and then reimplements the method to add more specialized behavior. We learned that, at runtime, the JVM will invoke the subtype version on an instance of a subtype and the supertype version on an instance of the supertype. <code>Abstract</code> methods must be “overridden” (technically, <code>abstract</code> methods must be implemented, as opposed to overridden, since there really isn’t anything to override).</p>
<p class="indent">We saw that overriding methods must declare the same argument list and return type or they can return a subtype of the declared return type of the supertype’s overridden method), and that the access modifier can’t be more restrictive. The overriding method also can’t throw any new or broader checked exceptions that weren’t declared in the overridden method. You also learned that the overridden method can be invoked using the syntax <code>super.doSomething();</code>.</p>
<p class="indent">Overloaded methods let you reuse the same method name in a class, but with different arguments (and, optionally, a different return type). Whereas overriding methods must not change the argument list, overloaded methods must. But unlike overriding methods, overloaded methods are free to vary the return type, access modifier, and declared exceptions any way they like.</p>
<p class="indent">We learned the mechanics of casting (mostly downcasting) reference variables and when it’s necessary to do so.</p>
<p class="indent">Implementing interfaces came next. An interface describes a <em>contract</em> that the implementing class must follow. The rules for implementing an interface are similar to those for extending an <code>abstract</code> class. As of Java 8, interfaces can have concrete methods, which are labeled <code>default</code>. Also, remember that a class can implement more than one interface and that interfaces can extend another interface.</p>
<p class="indent">We also looked at method return types and saw that you can declare any return type you like (assuming you have access to a class for an object reference return type), unless you’re overriding a method. Barring a covariant return, an overriding method must have the same return type as the overridden method of the superclass. We saw that, although overriding methods must not change the return type, overloaded methods can (as long as they also change the argument list).</p>
<p class="indent">Finally, you learned that it is legal to return any value or variable that can be implicitly converted to the declared return type. So, for example, a <code>short</code> can <a id="page_154"></a>be returned when the return type is declared as an <code>int</code>. And (assuming <code>Horse</code> extends <code>Animal</code>), a <code>Horse</code> reference can be returned when the return type is declared an <code>Animal</code>.</p>
<p class="indent">We covered constructors in detail, learning that if you don’t provide a constructor for your class, the compiler will insert one. The compiler-generated constructor is called the default constructor, and it is always a no-arg constructor with a no-arg call to <code>super()</code>. The default constructor will never be generated if even a single constructor exists in your class (regardless of the arguments of that constructor); so if you need more than one constructor in your class and you want a no-arg constructor, you’ll have to write it yourself. We also saw that constructors are not inherited and that you can be confused by a method that has the same name as the class (which is legal). The return type is the giveaway that a method is not a constructor because constructors do not have return types.</p>
<p class="indent">We saw how all the constructors in an object’s inheritance tree will always be invoked when the object is instantiated using <code>new</code>. We also saw that constructors can be overloaded, which means defining constructors with different argument lists. A constructor can invoke another constructor of the same class using the keyword <code>this()</code>, as though the constructor were a method named <code>this()</code>. We saw that every constructor must have either <code>this()</code> or <code>super()</code> as the first statement (although the compiler can insert it for you).</p>
<p class="indent">After constructors, we discussed the two kinds of initialization blocks and how and when their code runs.</p>
<p class="indent">We looked at <code>static</code> methods and variables. <code>static</code> members are tied to the class or interface, not an instance, so there is only one copy of any <code>static</code> member. A common mistake is to attempt to reference an instance variable from a <code>static</code> method. Use the respective class or interface name with the dot operator to access <code>static</code> members.</p>
<p class="indent">And, once again, you learned that the exam includes tricky questions designed largely to test your ability to recognize just how tricky the questions can be.</p>
<h3 class="h3"><a id="ch02lev1sec12"></a><a id="page_155"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/tic1.jpg" alt="images" width="25" height="28" data-mfp-src="/library/view/oca-java-se/9781260011388/tic1.jpg"> TWO-MINUTE DRILL</h3>
<p class="noindent">Here are some of the key points from each certification objective in this chapter.</p>
<h4 class="h4a">Encapsulation, IS-A, HAS-A* (OCA Objective 6.5)</h4>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Encapsulation helps hide implementation behind an interface (or API).</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Encapsulated code has two features:</p>
<p class="bulletxs"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Instance variables are kept protected (usually with the <code>private</code> modifier).</p>
<p class="bulletxs"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Getter and setter methods provide access to instance variables.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;IS-A refers to inheritance or implementation.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;IS-A is expressed with the keyword <code>extends</code> or <code>implements</code>.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;IS-A, “inherits from,” and “is a subtype of” are all equivalent expressions.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;HAS-A means an instance of one class “has a” reference to an instance of another class or another instance of the same class. *HAS-A is NOT on the exam, but it’s good to know.</p>
<h4 class="h4a">Inheritance (OCA Objective 7.1)</h4>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Inheritance allows a type to be a subtype of a supertype and thereby inherit <code>public</code> and <code>protected</code> variables and methods of the supertype.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Inheritance is a key concept that underlies IS-A, polymorphism, overriding, overloading, and casting.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;All classes (except class <code>Object</code>) are subclasses of type <code>Object</code>, and therefore they inherit <code>Object</code>’s methods.</p>
<h4 class="h4a">Polymorphism (OCA Objective 7.2)</h4>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Polymorphism means “many forms.”</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;A reference variable is always of a single, unchangeable type, but it can refer to a subtype object.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;A single object can be referred to by reference variables of many different types—as long as they are the same type or a supertype of the object.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The reference variable’s type (not the object’s type) determines which methods can be called!</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Polymorphic method invocations apply only to overridden <em>instance</em> methods.</p>
<h4 class="h4a"><a id="page_156"></a>Overriding and Overloading (OCA Objectives 6.1 and 7.2)</h4>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Methods can be overridden or overloaded; constructors can be overloaded but not overridden.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;With respect to the method it overrides, the overriding method</p>
<p class="bulletxs"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Must have the same argument list</p>
<p class="bulletxs"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Must have the same return type or a subclass (known as a covariant return)</p>
<p class="bulletxs"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Must not have a more restrictive access modifier</p>
<p class="bulletxs"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;May have a less restrictive access modifier</p>
<p class="bulletxs"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Must not throw new or broader checked exceptions</p>
<p class="bulletxs"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;May throw fewer or narrower checked exceptions, or any unchecked exception</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;<code>f</code><code>inal</code> methods cannot be overridden.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Only inherited methods may be overridden, and remember that private methods are not inherited.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;A subclass uses <code>super.overriddenMethodName()</code> to call the superclass version of an overridden method.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;A subclass uses <code>MyInterface.super.overriddenMethodName()</code> to call the super interface version on an overridden method.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Overloading means reusing a method name but with different arguments.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Overloaded methods</p>
<p class="bulletxs"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Must have different argument lists</p>
<p class="bulletxs"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;May have different return types, if argument lists are also different</p>
<p class="bulletxs"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;May have different access modifiers</p>
<p class="bulletxs"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;May throw different exceptions</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Methods from a supertype can be overloaded in a subtype.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Polymorphism applies to overriding, not to overloading.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Object type (not the reference variable’s type) determines which overridden method is used at runtime.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Reference type determines which overloaded method will be used at compile time.</p>
<h4 class="h4a"><a id="page_157"></a>Reference Variable Casting (OCA Objective 7.3)</h4>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;There are two types of reference variable casting: downcasting and upcasting.</p>
<p class="bulletxs"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;<strong>D</strong><strong>owncasting</strong> If you have a reference variable that refers to a subtype object, you can assign it to a reference variable of the subtype. You must make an explicit cast to do this, and the result is that you can access the subtype’s members with this new reference variable.</p>
<p class="bulletxs"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;<strong>U</strong><strong>pcasting</strong> You can assign a reference variable to a supertype reference variable explicitly or implicitly. This is an inherently safe operation because the assignment restricts the access capabilities of the new variable.</p>
<h4 class="h4a">Implementing an Interface (OCA Objective 7.5)</h4>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;When you implement an interface, you are fulfilling its contract.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;You implement an interface by properly and concretely implementing all the abstract methods defined by the interface.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;A single class can implement many interfaces.</p>
<h4 class="h4a">Return Types (OCA Objectives 7.2 and 7.5)</h4>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Overloaded methods can change return types; overridden methods cannot, except in the case of covariant returns.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Object reference return types can accept <code>null</code> as a return value.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;An array is a legal return type, both to declare and return as a value.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;For methods with primitive return types, any value that can be implicitly converted to the return type can be returned.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Nothing can be returned from a <code>void</code>, but you can return nothing. You’re allowed to simply say <code>return</code> in any method with a <code>void</code> return type to bust out of a method early. But you can’t return nothing from a method with a non-<code>void</code> return type.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Methods with an object reference return type can return a subtype.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Methods with an interface return type can return any implementer.</p>
<h4 class="h4a"><a id="page_158"></a>Constructors and Instantiation (OCA Objectives 6.3 and 7.4)</h4>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;A constructor is always invoked when a new object is created.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Each superclass in an object’s inheritance tree will have a constructor called.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Every class, even an abstract class, has at least one constructor.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Constructors must have the same name as the class.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Constructors don’t have a return type. If you see code with a return type, it’s a method with the same name as the class; it’s not a constructor.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Typical constructor execution occurs as follows:</p>
<p class="bulletxs"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The constructor calls its superclass constructor, which calls its superclass constructor, and so on all the way up to the <code>Object</code> constructor.</p>
<p class="bulletxs"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The <code>Object</code> constructor executes and then returns to the calling constructor, which runs to completion and then returns to its calling constructor, and so on back down to the completion of the constructor of the actual instance being created.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Constructors can use any access modifier (even <code>private</code>!).</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The compiler will create a default constructor if you don’t create any constructors in your class.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The default constructor is a no-arg constructor with a no-arg call to <code>super()</code>.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The first statement of every constructor must be a call either to <code>this()</code> (an overloaded constructor) or to <code>super()</code>.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The compiler will add a call to <code>super()</code> unless you have already put in a call to <code>this()</code> or <code>super()</code>.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Instance members are accessible only after the <code>super</code> constructor runs.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;<code>A</code><code>bstract</code> classes have constructors that are called when a concrete subclass is instantiated.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Interfaces do not have constructors.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;If your superclass does not have a no-arg constructor, you must create a constructor and insert a call to <code>super()</code> with arguments matching those of the superclass constructor.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Constructors are never inherited; thus they cannot be overridden.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;A constructor can be directly invoked only by another constructor (using a call to <code>super()</code> or <code>this()</code>).</p>
<p class="bulletx"><a id="page_159"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Regarding issues with calls to <code>this()</code>:</p>
<p class="bulletxs"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;They may appear only as the first statement in a constructor.</p>
<p class="bulletxs"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The argument list determines which overloaded constructor is called.</p>
<p class="bulletxs"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Constructors can call constructors, and so on, but sooner or later one of them better call <code>super()</code> or the stack will explode.</p>
<p class="bulletxs"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Calls to <code>this()</code> and <code>super()</code> cannot be in the same constructor. You can have one or the other, but never both.</p>
<h4 class="h4a">Initialization Blocks (OCA Objective 1.2 and 6.3-ish)</h4>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Use <code>static init</code> blocks—<code>static { /* code here */ }</code>—for code you want to have run once, when the class is first loaded. Multiple blocks run from the top down.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Use normal <code>init</code> blocks—<code>{ /* code here }</code>—for code you want to have run for every new instance, right after all the super constructors have run. Again, multiple blocks run from the top of the class down.</p>
<h4 class="h4a">Statics (OCA Objective 6.2)</h4>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Use <code>static</code> methods to implement behaviors that are not affected by the state of any instances.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Use <code>static</code> variables to hold data that is class specific as opposed to instance specific—there will be only one copy of a <code>static</code> variable.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;All <code>static</code> members belong to the class, not to any instance.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;A <code>static</code> method can’t access an instance variable directly.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Use the dot operator to access <code>static</code> members, but remember that using a reference variable with the dot operator is really a syntax trick, and the compiler will substitute the class name for the reference variable; for instance:</p>
<p class="code2"><code>d.doStuff();</code></p>
<p class="noindentl">becomes</p>
<p class="code2"><code>Dog.doStuff();</code></p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;To invoke an interface’s static method use <code>MyInterface.doStuff()</code> syntax.</p>
<p class="bulletx"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;<code>static</code> methods can’t be overridden, but they can be redefined.</p>
<h3 class="h3"><a id="ch02lev1sec13"></a><a id="page_160"></a>SELF TEST</h3>
<p class="numlistk"><a id="ich2q1" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2q1"><strong>1.</strong></a>&nbsp;Given:</p>
<p class="code2a"><code>public abstract interface Frobnicate { public void twiddle(String s); }</code></p>
<p class="numn">Which is a correct class? (Choose all that apply.)</p>
<p class="numsn"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0162-01.jpg" alt="images" width="519" height="289" data-mfp-src="/library/view/oca-java-se/9781260011388/p0162-01.jpg"></p>
<p class="numlistk"><a id="ich2q2" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2q2"><strong>2.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0162-02.jpg" alt="images" width="504" height="194" data-mfp-src="/library/view/oca-java-se/9781260011388/p0162-02.jpg"></p>
<p class="numlist-n">What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>BD</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>DB</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>BDC</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;<code>DBC</code></p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numlistk"><a id="page_161"></a><a id="ich2q3" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2q3"><strong>3.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0163-01.jpg" alt="images" width="618" height="169" data-mfp-src="/library/view/oca-java-se/9781260011388/p0163-01.jpg"></p>
<p class="numlist-n">What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>Cli</code><code>dlet</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>Cli</code><code>dder</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>Cli</code><code>dder<br>&nbsp;&nbsp;&nbsp;&nbsp;Clidlet</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;<code>Cli</code><code>dlet<br>&nbsp;&nbsp;&nbsp;&nbsp;Clidder</code></p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numin"><strong>Special Note:</strong> The next question crudely simulates a style of question known as “drag-and-drop.” Up through the SCJP 6 exam, drag-and-drop questions were included on the exam. As of spring 2014, Oracle DOES NOT include any drag-and-drop questions on its Java exams, but just in case Oracle’s policy changes, we left a few in the book.</p>
<p class="numlistk"><a id="ich2q4" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2q4"><strong>4.</strong></a>&nbsp;&nbsp;&nbsp;Using the <strong>fragments</strong> below, complete the following <strong>code</strong> so it compiles. Note that you may not have to fill in all of the slots.</p>
<p class="numlist-n">Code:</p>
<p class="code-1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0163-02.jpg" alt="images" width="659" height="234" data-mfp-src="/library/view/oca-java-se/9781260011388/p0163-02.jpg"></p>
<p class="numlist-n"><a id="page_162"></a><strong>Fragments:</strong> Use the following fragments zero or more times:</p>
<p class="numlist-n"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0164-01.jpg" alt="images" width="373" height="102" data-mfp-src="/library/view/oca-java-se/9781260011388/f0164-01.jpg"></p>
<p class="numlistk"><a id="ich2q5" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2q5"><strong>5.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0164-01.jpg" alt="images" width="436" height="334" data-mfp-src="/library/view/oca-java-se/9781260011388/p0164-01.jpg"></p>
<p class="numlist-n">What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>pre</code> <code>b1 b2 r3 r2 hawk</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>pre</code> <code>b2 b1 r2 r3 hawk</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>pre</code> <code>b2 b1 r2 r3 hawk r1 r4</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;<code>r1</code> <code>r4 pre b1 b2 r3 r2 hawk</code></p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;<code>r1</code> <code>r4 pre b2 b1 r2 r3 hawk</code></p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;<code>pre</code> <code>r1 r4 b1 b2 r3 r2 hawk</code></p>
<p class="num-k">G.&nbsp;&nbsp;&nbsp;<code>pre</code> <code>r1 r4 b2 b1 r2 r3 hawk</code></p>
<p class="num-k">H.&nbsp;&nbsp;&nbsp;The order of output cannot be predicted</p>
<p class="num-k">&nbsp;&nbsp;I.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="num-k">Note: You’ll probably never see this many choices on the real exam!</p>
<p class="numlistk"><a id="ich2q6" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2q6"><strong>6.</strong></a>&nbsp;&nbsp;&nbsp;Given the following:</p>
<p class="code-1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0164-03.jpg" alt="images" width="436" height="114" data-mfp-src="/library/view/oca-java-se/9781260011388/p0164-03.jpg"></p>
<p class="code-1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0165-01.jpg" alt="images" width="256" height="74" data-mfp-src="/library/view/oca-java-se/9781260011388/p0165-01.jpg"></p>
<p class="numlist-n"><a id="page_163"></a>Which of the following, inserted at line 9, will compile? (Choose all that apply.)</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>x2.</code><code>do2();</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>(Y)</code><code>x2.do2();</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>((Y</code><code>)x2).do2();</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;None of the above statements will compile</p>
<p class="numlistk"><a id="ich2q7" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2q7"><strong>7.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0165-03.jpg" alt="images" width="398" height="195" data-mfp-src="/library/view/oca-java-se/9781260011388/p0165-03.jpg"></p>
<p class="numlist-n">What is the result? (Choose all that apply.)</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>2</code> will be included in the output</p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>3</code> will be included in the output</p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>hi</code> will be included in the output</p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;An exception is thrown at runtime</p>
<p class="numlistk"><a id="ich2q8" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2q8"><strong>8.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0165-04.jpg" alt="images" width="645" height="294" data-mfp-src="/library/view/oca-java-se/9781260011388/p0165-04.jpg"></p>
<p class="numlist-n"><a id="page_164"></a>What is the result? (Choose all that apply.)</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>how</code><code>l howl sniff</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>how</code><code>l woof sniff</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>how</code><code>l howl</code> followed by an exception</p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;<code>how</code><code>l woof</code> followed by an exception</p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;Compilation fails with an error at line 14</p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;Compilation fails with an error at line 15</p>
<p class="numlistk"><a id="ich2q9" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2q9"><strong>9.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0166-01.jpg" alt="images" width="463" height="274" data-mfp-src="/library/view/oca-java-se/9781260011388/p0166-01.jpg"></p>
<p class="numlist-n">What is the result? (Choose all that apply.)</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;An exception is thrown at runtime</p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;The code compiles and runs with no output</p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;Compilation fails with an error at line 8</p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;Compilation fails with an error at line 9</p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;Compilation fails with an error at line 12</p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;Compilation fails with an error at line 13</p>
<p class="numlistk1"><a id="ich2q10" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2q10"><strong>10.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0166-02.jpg" alt="images" width="616" height="175" data-mfp-src="/library/view/oca-java-se/9781260011388/p0166-02.jpg"></p>
<p class="numlist-n"><a id="page_165"></a>What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>fa</code> <code>fa</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>fa</code> <code>la</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>la</code> <code>la</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;An exception is thrown at runtime</p>
<p class="numlistk1"><a id="ich2q11" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2q11"><strong>11.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0167-01.jpg" alt="images" width="445" height="274" data-mfp-src="/library/view/oca-java-se/9781260011388/p0167-01.jpg"></p>
<p class="numlist-n">What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>sub</code><code>sub</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>sub</code> <code>subsub</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>alp</code><code>ha subsub</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;<code>alp</code><code>ha sub subsub</code></p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;An exception is thrown at runtime</p>
<p class="numlistk1"><a id="ich2q12" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2q12"><strong>12.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0167-01.jpg" alt="images" width="445" height="274" data-mfp-src="/library/view/oca-java-se/9781260011388/p0167-01.jpg"></p>
<p class="numlist-n"><a id="page_166"></a>What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>h h</code><code>n x</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>hn</code> <code>x h</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>b h</code> <code>hn x</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;<code>b h</code><code>n x h</code></p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;<code>bn</code> <code>x h hn x</code></p>
<p class="num-k">F.&nbsp;&nbsp; <code>b b</code><code>n x h hn x</code></p>
<p class="num-k">G.&nbsp;&nbsp; <code>bn</code> <code>x b h hn x</code></p>
<p class="num-k">H.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numlistk1"><a id="ich2q13" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2q13"><strong>13.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0168-01.jpg" alt="images" width="664" height="294" data-mfp-src="/library/view/oca-java-se/9781260011388/p0168-01.jpg"></p>
<p class="numlist-n">What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>fur</code><code>ry bray</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>str</code><code>ipes bray</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>fur</code><code>ry generic noise</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;<code>str</code><code>ipes generic noise</code></p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;An exception is thrown at runtime</p>
<p class="numlistk1"><a id="ich2q14" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2q14"><strong>14.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0168-02.jpg" alt="images" width="455" height="95" data-mfp-src="/library/view/oca-java-se/9781260011388/p0168-02.jpg"></p>
<p class="code-1"><a id="page_167"></a><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0169-01.jpg" alt="images" width="530" height="252" data-mfp-src="/library/view/oca-java-se/9781260011388/p0169-01.jpg"></p>
<p class="numlist-n">What is the result? (Choose all that apply.)</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>hop</code><code>ping 212</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 2</p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 5</p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 12</p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 13</p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 14</p>
<p class="num-k">G.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 16</p>
<p class="numlistk1"><a id="ich2q15" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2q15"><strong>15.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0169-02.jpg" alt="images" width="398" height="334" data-mfp-src="/library/view/oca-java-se/9781260011388/p0169-02.jpg"></p>
<p class="numlist-n"><a id="page_168"></a>What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>1</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>2</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>3</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;The output is unpredictable</p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;An exception is thrown at runtime</p>
<p class="numlistk1"><a id="ich2q16" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ch2q16"><strong>16.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0170-01.jpg" alt="images" width="446" height="314" data-mfp-src="/library/view/oca-java-se/9781260011388/p0170-01.jpg"></p>
<p class="numlist-n">Which line(s) of code, inserted independently at // INSERT CODE HERE, will allow the code to compile? (Choose all that apply.)</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>Sys</code><code>tem.out.println(“class: ” + doStuff());</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>Sys</code><code>tem.out.println(“iface: ” + super.doStuff());</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>Sys</code><code>tem.out.println(“iface: ” + MyInterface.super.doStuff());</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;<code>Sys</code><code>tem.out.println(“iface: ” + MyInterface.doStuff());</code></p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;<code>Sys</code><code>tem.out.println(“iface: ” + super.MyInterface.doStuff());</code></p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;None of the lines, A–E will allow the code to compile</p>
<h3 class="h3"><a id="ch02lev1sec14"></a><a id="page_169"></a>SELF TEST ANSWERS</h3>
<p class="hanga"><a id="ch2q1" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ich2q1"><strong>1.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>B</strong> and <strong>E</strong> are correct. B is correct because an <code>abstract</code> class need not implement any or all of an interface’s methods. E is correct because the class implements the interface method and additionally overloads the <code>twiddle()</code> method.<br><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, C,</strong> and <strong>D</strong> are incorrect. A is incorrect because <code>abstract</code> methods have no body. C is incorrect because classes implement interfaces; they don’t extend them. D is incorrect because overloading a method is not implementing it. (OCA Objectives 7.1 and 7.5)</p>
<p class="hanga"><a id="ch2q2" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ich2q2"><strong>2.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>E</strong> is correct. The implied <code>super()</code> call in <code>Bottom2</code>’s constructor cannot be satisfied because there is no no-arg constructor in <code>Top</code>. A default, no-arg constructor is generated by the compiler only if the class has no constructor defined explicitly.<br><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, B, C,</strong> and <strong>D</strong> are incorrect based on the above. (OCA Objective 6.3)</p>
<p class="hanga"><a id="ch2q3" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ich2q3"><strong>3.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>A</strong> is correct. Although a <code>final</code> method cannot be overridden, in this case, the method is private and, therefore, hidden. The effect is that a new, accessible, method flipper is created. Therefore, no polymorphism occurs in this example, the method invoked is simply that of the child class, and no error occurs.<br><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>B, C, D,</strong> and <strong>E</strong> are incorrect based on the preceding. (OCA Objective 7.2)</p>
<p class="hangai"><strong>Special Note:</strong> This next question crudely simulates a style of question known as “drag-and-drop.” Up through the SCJP 6 exam, drag-and-drop questions were included on the exam. As of spring 2014, Oracle DOES NOT include any drag-and-drop questions on its Java exams, but just in case Oracle’s policy changes, we left a few in the book.</p>
<p class="hanga"><a id="ch2q4" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ich2q4"><strong>4.</strong></a>&nbsp;Here is the answer:</p>
<p class="code"><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0171-01.jpg" alt="images" width="332" height="195" data-mfp-src="/library/view/oca-java-se/9781260011388/p0171-01.jpg"></p>
<p class="hangan"><a id="page_170"></a>As there is no droppable tile for the variable <code>x</code> and the parentheses (in the <code>Kinder</code> constructor) are already in place and empty, there is no way to construct a call to the superclass constructor that takes an argument. Therefore, the only remaining possibility is to create a call to the no-arg superclass constructor. This is done as <code>super();</code>. The line cannot be left blank, as the parentheses are already in place. Further, since the superclass constructor called is the no-arg version, this constructor must be created. It will not be created by the compiler because another constructor is already present. (OCA Objectives 6.3 and 7.4) Note: As you can see, many questions test for OCA Objective 7.1, we’re going to stop mentioning objective 7.1.</p>
<p class="hanga"><a id="ch2q5" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ich2q5"><strong>5.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>D</strong> is correct. Static <code>init</code> blocks are executed at class loading time; instance <code>init</code> blocks run right after the call to <code>super()</code> in a constructor. When multiple <code>init</code> blocks of a single type occur in a class, they run in order, from the top down.<br><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, B, C, E, F, G, H,</strong> and <strong>I</strong> are incorrect based on the above. Note: You’ll probably never see this many choices on the real exam! (OCA Objective 6.3)</p>
<p class="hanga"><a id="ch2q6" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ich2q6"><strong>6.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>C</strong> is correct. Before you can invoke <code>Y</code>’s <code>do2</code> method, you have to cast <code>x2</code> to be of type <code>Y</code>.<br><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, B,</strong> and <strong>D</strong> are incorrect based on the preceding. B looks like a proper cast, but without the second set of parentheses, the compiler thinks it’s an incomplete statement. (OCA Objective 7.3)</p>
<p class="hanga"><a id="ch2q7" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ich2q7"><strong>7.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>A</strong> is correct. It’s legal to overload <code>main()</code>. Since no instances of <code>Locomotive</code> are created, the constructor does not run and the overloaded version of <code>main()</code> does not run.<br><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>B, C, D,</strong> and <strong>E</strong> are incorrect based on the preceding. (OCA Objectives 1.3 and 6.3)</p>
<p class="hanga"><a id="ch2q8" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ich2q8"><strong>8.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>F</strong> is correct. Class <code>Dog</code> doesn’t have a <code>sniff</code> method.<br><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, B, C, D,</strong> and <strong>E</strong> are incorrect based on the above information. (OCA Objectives 7.2 and 7.3)</p>
<p class="hanga"><a id="ch2q9" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ich2q9"><strong>9.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>A</strong> is correct. A <code>ClassCastException</code> will be thrown when the code attempts to downcast a <code>Tree</code> to a <code>Redwood</code>.<br><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>B, C, D, E,</strong> and <strong>F</strong> are incorrect based on the above information. (OCA Objective 7.3)</p>
<p class="hanga1"><a id="ch2q10" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ich2q10"><strong>10.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>B</strong> is correct. The code is correct, but polymorphism doesn’t apply to <code>static</code> methods.<br><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, C, D,</strong> and <strong>E</strong> are incorrect based on the above information. (OCA Objectives 6.2 and 7.2)</p>
<p class="hanga1"><a id="ch2q11" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ich2q11"><strong>11.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>C</strong> is correct. Watch out, because <code>SubSubAlpha</code> extends <code>Alpha</code>! Because the code doesn’t attempt to make a <code>SubAlpha</code>, the private constructor in <code>SubAlpha</code> is okay.<br><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, B, D, E,</strong> and <strong>F</strong> are incorrect based on the above information. (OCA Objectives 6.3 and 7.2)</p>
<p class="hanga1"><a id="page_171"></a><a id="ch2q12" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ich2q12"><strong>12.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>C</strong> is correct. Remember that constructors call their superclass constructors, which execute first, and that constructors can be overloaded.<br><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, B, D, E, F, G,</strong> and <strong>H</strong> are incorrect based on the above information. (OCA Objectives 6.3 and 7.4)</p>
<p class="hanga1"><a id="ch2q13" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ich2q13"><strong>13.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>A</strong> is correct. Polymorphism is only for instance methods, not instance variables.<br><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>B, C, D, E,</strong> and <strong>F</strong> are incorrect based on the above information. (OCA Objective 6.3)</p>
<p class="hanga1"><a id="ch2q14" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ich2q14"><strong>14.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>E</strong> and <strong>G</strong> are correct. Neither of these lines of code uses the correct syntax to invoke an interface’s static method.<br><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, B, C, D,</strong> and <strong>F</strong> are incorrect based on the above information. (OCP Objectives 6.2 and 7.5)</p>
<p class="hanga1"><a id="ch2q15" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ich2q15"><strong>15.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>E</strong> is correct. This is kind of a trick question; the implementing method must be marked <code>public</code>. If it was, all the other code is legal, and the output would be 3. If you understood all the multiple inheritance rules and just missed the access modifier, give yourself half credit.<br><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, B, C, D,</strong> and <strong>F</strong> are incorrect based on the above information. (OCP Objective 7.5)</p>
<p class="hanga1"><a id="ch2q16" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#ich2q16"><strong>16.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>A</strong> and <strong>C</strong> are correct. A uses correct syntax to invoke the class’s method, and C uses the correct syntax to invoke the interface’s overloaded <code>default</code> method.<br><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>B, D, E,</strong> and <strong>F</strong> are incorrect. (OCP Objective 7.5)<a id="page_172"></a></p>
<div class="annotator-outer annotator-viewer viewer annotator-hide">
  <ul class="annotator-widget annotator-listing"></ul>
</div><div class="annotator-modal-wrapper annotator-editor-modal annotator-editor annotator-hide">
	<div class="annotator-outer editor">
		<h2 class="title">Highlight</h2>
		<form class="annotator-widget">
			<ul class="annotator-listing">
			<li class="annotator-item"><textarea id="annotator-field-12" placeholder="Add a note using markdown (optional)" class="js-editor" maxlength="750"></textarea></li></ul>
			<div class="annotator-controls">
				<a class="link-to-markdown" href="https://daringfireball.net/projects/markdown/basics" target="_blank">?</a>
				<ul>
					<li class="delete annotator-hide"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#delete" class="annotator-delete-note button positive">Delete Note</a></li>
					<li class="save"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#save" class="annotator-save annotator-focus button positive">Save Note</a></li>
					<li class="cancel"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#cancel" class="annotator-cancel button">Cancel</a></li>
				</ul>
			</div>
		</form>
	</div>
</div><div class="annotator-modal-wrapper annotator-delete-confirm-modal" style="display: none;">
  <div class="annotator-outer">
    <h2 class="title">Highlight</h2>
      <a class="js-close-delete-confirm annotator-cancel close" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#close">Close</a>
      <div class="annotator-widget">
         <div class="delete-confirm">
            Are you sure you want to permanently delete this note?
         </div>
         <div class="annotator-controls">
            <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#cancel" class="annotator-cancel button js-cancel-delete-confirm">No, I changed my mind</a>
            <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#delete" class="annotator-delete button positive js-delete-confirm">Yes, delete it</a>
         </div>
       </div>
   </div>
</div><div class="annotator-adder" style="display: none;">
	<ul class="adders ">
		
		<li class="copy"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#">Copy</a></li>
		
		<li class="add-highlight"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#">Add Highlight</a></li>
		<li class="add-note"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#">
			
				Add Note
			
		</a></li>
		
	</ul>
</div></div></div>



  <div class="t-sbo-prev sbo-prev sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">1&nbsp;Declarations and Access Control</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">3&nbsp;Assignments</div>
        </a>
    
  
  </div>

</section>
  </div>
<section class="sbo-saved-archives"></section>



          
          
  




    
    
      <div id="js-subscribe-nag" class="subscribe-nag clearfix trial-panel t-subscribe-nag collapsed slideUp">
        
        
          
          

          
            <p>You have 7 days left in your trial, Haridave. Subscribe today. <a href="https://www.safaribooksonline.com/subscribe/" class="ga-active-trial-subscribe-nag">See pricing options.</a></p>
          
        
        

      </div>

    
    



        
      </div>
      




  <footer class="pagefoot t-pagefoot" style="padding-bottom: 69px;">
    <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#" class="icon-up" style="display: block;"><div class="visuallyhidden">Back to top</div></a>
    <ul class="js-footer-nav">
      
        <li><a class="t-recommendations-footer" href="https://www.safaribooksonline.com/r/">Recommended</a></li>
      
      <li>
      
      <a class="t-queue-footer" href="https://www.safaribooksonline.com/s/">Queue</a>
      
      </li>
      
        <li><a class="t-recent-footer" href="https://www.safaribooksonline.com/history/">History</a></li>
        <li><a class="t-topics-footer" href="https://www.safaribooksonline.com/topics?q=*&amp;limit=21">Topics</a></li>
      
      
        <li><a class="t-tutorials-footer" href="https://www.safaribooksonline.com/tutorials/">Tutorials</a></li>
      
      <li><a class="t-settings-footer js-settings" href="https://www.safaribooksonline.com/u/">Settings</a></li>
      <li class="full-support"><a href="https://www.safaribooksonline.com/public/support">Support</a></li>
      <li><a href="https://www.safaribooksonline.com/apps/">Get the App</a></li>
      <li><a href="https://www.safaribooksonline.com/accounts/logout/">Sign Out</a></li>
    </ul>
    <span class="copyright">© 2017 <a href="https://www.safaribooksonline.com/" target="_blank">Safari</a>.</span>
    <a href="https://www.safaribooksonline.com/terms/">Terms of Service</a> /
    <a href="https://www.safaribooksonline.com/privacy/">Privacy Policy</a>
  </footer>

<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","queueTime":0,"licenseKey":"510f1a6865","errorBeacon":"bam.nr-data.net","agent":"","applicationTime":579,"applicationID":"3275661","transactionName":"YgdaZ0NSW0cEB0RdWltNfkZfUEFdCgofXFBHDVYdR1pQQxZeRl1QQj1aWkU="}</script>


    

    <script src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(2)" charset="utf-8"></script>
    <script src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(3)" charset="utf-8"></script><script type="text/javascript" id="">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","https://connect.facebook.net/en_US/fbevents.js");fbq("init","1732687426968531");fbq("track","PageView");</script>
<noscript>&lt;img height="1" width="1" style="display:none" src="https://www.facebook.com/tr?id=1732687426968531&amp;amp;ev=PageView&amp;amp;noscript=1"&gt;</noscript><div style="width:0px; height:0px; display:none; visibility:hidden;" id="batBeacon0.79713329937001"><img style="width:0px; height:0px; display:none; visibility:hidden;" id="batBeacon0.9495598444101674" width="0" height="0" alt="" src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/0"></div>
  

<script src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(4)" type="text/javascript"></script><script src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(5)" type="text/javascript"></script><div class="annotator-notice">Sorry we could not read the annotations from the store</div><div class="font-flyout" style="top: 200.003px; left: 1288px;"><div class="font-controls-panel">
	<div class="nightmodes">
		<ul>
			<li class="day"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#" id="day-mode" title="Day Mode">
				<i class="fa fa-sun-o"></i>
				<span>Day Mode</span></a></li>
			<li class="cloudy"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#" id="cloudy-mode" title="Cloudy Mode">
				<i class="fa fa-cloud"></i>
				<span>Cloud Mode</span>
			</a></li>
			<li class="night"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#" id="night-mode" title="Night Mode">
				<i class="fa fa-moon-o"></i>
				<span>Night Mode</span>
			</a></li>
		</ul>
	</div>

	<div class="font-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-font left"></i>
			<span class="filler" style="width: 50%;"></span>
			<div id="js-font-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle" style="position: relative; left: 80px;"></div>
			<i class="fa fa-font right"></i>
		</div>
	</div>

	<div class="column-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-compress left"></i>
			<span class="filler" style="width: 50%;"></span>
			<div id="js-column-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle" style="position: relative; left: 80px;"></div>
			<i class="fa fa-expand right"></i>
		</div>
	</div>

	<a id="reset" class="button" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html#">Reset</a>
</div>
</div><img src="./2 Object Orientation - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/seg" width="1" height="1" border="0" alt="" style="display: none;"></body></html>