<!DOCTYPE html>
<!-- saved from url=(0082)https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html -->
<html class=" js flexbox flexboxlegacy no-touch websqldatabase indexeddb history csscolumns csstransforms localstorage sessionstorage applicationcache svg inlinesvg zoom" lang="en" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#" itemscope="" itemtype="http://schema.org/Book http://schema.org/ItemPage" "="" data-login-url="/accounts/login/" data-offline-url="/" data-url="/library/view/oca-java-se/9781260011388/cover.html" data-csrf-cookie="csrfsafari" data-highlight-privacy="" data-user-id="2360587" data-user-uuid="bece7dd7-9327-4cc1-a1c8-17e84b9a1059" data-username="haridave" data-account-type="Trial" data-activated-trial-date="12/18/2017" data-archive="9781260011388" data-publishers="McGraw-Hill" data-htmlfile-name="cover.html" data-epub-title="OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)" data-debug="0" data-testing="0" style=""><!--<![endif]--><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><meta name="author" content="Safari Books Online"><meta name="format-detection" content="telephone=no"><meta http-equiv="cleartype" content="on"><meta name="HandheldFriendly" content="True"><meta name="MobileOptimized" content="320"><meta name="apple-itunes-app" content="app-id=881697395, app-argument=safaridetail://9781260011388"><meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0, maximum-scale=1.0"><meta property="twitter:account_id" content="4503599627559754"><script type="text/javascript" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/510f1a6865"></script><script src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/nr-spa-1071.min.js"></script><script src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/1732687426968531" async=""></script><script async="" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/fbevents.js"></script><script type="text/javascript" async="" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/bat.js"></script><script type="text/javascript" async="" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/conversion_async.js"></script><script type="text/javascript" async="" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/insight.min.js"></script><script type="text/javascript" async="" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/conversion_async.js"></script><script type="text/javascript" async="" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/linkid.js"></script><script async="" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/gtm.js"></script><script async="" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/analytics.js"></script><script type="text/javascript">(window.NREUM||(NREUM={})).loader_config={xpid:"VQQDUVVVGwACU1RUAQA="};window.NREUM||(NREUM={}),__nr_require=function(t,e,n){function r(n){if(!e[n]){var o=e[n]={exports:{}};t[n][0].call(o.exports,function(e){var o=t[n][1][e];return r(o||e)},o,o.exports)}return e[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(t,e,n){function r(t){try{c.console&&console.log(t)}catch(e){}}var o,i=t("ee"),a=t(20),c={};try{o=localStorage.getItem("__nr_flags").split(","),console&&"function"==typeof console.log&&(c.console=!0,o.indexOf("dev")!==-1&&(c.dev=!0),o.indexOf("nr_dev")!==-1&&(c.nrDev=!0))}catch(s){}c.nrDev&&i.on("internal-error",function(t){r(t.stack)}),c.dev&&i.on("fn-err",function(t,e,n){r(n.stack)}),c.dev&&(r("NR AGENT IN DEVELOPMENT MODE"),r("flags: "+a(c,function(t,e){return t}).join(", ")))},{}],2:[function(t,e,n){function r(t,e,n,r,c){try{h?h-=1:o(c||new UncaughtException(t,e,n),!0)}catch(f){try{i("ierr",[f,s.now(),!0])}catch(d){}}return"function"==typeof u&&u.apply(this,a(arguments))}function UncaughtException(t,e,n){this.message=t||"Uncaught error with no additional information",this.sourceURL=e,this.line=n}function o(t,e){var n=e?null:s.now();i("err",[t,n])}var i=t("handle"),a=t(21),c=t("ee"),s=t("loader"),f=t("gos"),u=window.onerror,d=!1,p="nr@seenError",h=0;s.features.err=!0,t(1),window.onerror=r;try{throw new Error}catch(l){"stack"in l&&(t(13),t(12),"addEventListener"in window&&t(6),s.xhrWrappable&&t(14),d=!0)}c.on("fn-start",function(t,e,n){d&&(h+=1)}),c.on("fn-err",function(t,e,n){d&&!n[p]&&(f(n,p,function(){return!0}),this.thrown=!0,o(n))}),c.on("fn-end",function(){d&&!this.thrown&&h>0&&(h-=1)}),c.on("internal-error",function(t){i("ierr",[t,s.now(),!0])})},{}],3:[function(t,e,n){t("loader").features.ins=!0},{}],4:[function(t,e,n){function r(){M++,S=y.hash,this[u]=b.now()}function o(){M--,y.hash!==S&&i(0,!0);var t=b.now();this[l]=~~this[l]+t-this[u],this[d]=t}function i(t,e){E.emit("newURL",[""+y,e])}function a(t,e){t.on(e,function(){this[e]=b.now()})}var c="-start",s="-end",f="-body",u="fn"+c,d="fn"+s,p="cb"+c,h="cb"+s,l="jsTime",m="fetch",v="addEventListener",w=window,y=w.location,b=t("loader");if(w[v]&&b.xhrWrappable){var g=t(10),x=t(11),E=t(8),P=t(6),O=t(13),R=t(7),T=t(14),L=t(9),j=t("ee"),N=j.get("tracer");t(15),b.features.spa=!0;var S,M=0;j.on(u,r),j.on(p,r),j.on(d,o),j.on(h,o),j.buffer([u,d,"xhr-done","xhr-resolved"]),P.buffer([u]),O.buffer(["setTimeout"+s,"clearTimeout"+c,u]),T.buffer([u,"new-xhr","send-xhr"+c]),R.buffer([m+c,m+"-done",m+f+c,m+f+s]),E.buffer(["newURL"]),g.buffer([u]),x.buffer(["propagate",p,h,"executor-err","resolve"+c]),N.buffer([u,"no-"+u]),L.buffer(["new-jsonp","cb-start","jsonp-error","jsonp-end"]),a(T,"send-xhr"+c),a(j,"xhr-resolved"),a(j,"xhr-done"),a(R,m+c),a(R,m+"-done"),a(L,"new-jsonp"),a(L,"jsonp-end"),a(L,"cb-start"),E.on("pushState-end",i),E.on("replaceState-end",i),w[v]("hashchange",i,!0),w[v]("load",i,!0),w[v]("popstate",function(){i(0,M>1)},!0)}},{}],5:[function(t,e,n){function r(t){}if(window.performance&&window.performance.timing&&window.performance.getEntriesByType){var o=t("ee"),i=t("handle"),a=t(13),c=t(12),s="learResourceTimings",f="addEventListener",u="resourcetimingbufferfull",d="bstResource",p="resource",h="-start",l="-end",m="fn"+h,v="fn"+l,w="bstTimer",y="pushState",b=t("loader");b.features.stn=!0,t(8);var g=NREUM.o.EV;o.on(m,function(t,e){var n=t[0];n instanceof g&&(this.bstStart=b.now())}),o.on(v,function(t,e){var n=t[0];n instanceof g&&i("bst",[n,e,this.bstStart,b.now()])}),a.on(m,function(t,e,n){this.bstStart=b.now(),this.bstType=n}),a.on(v,function(t,e){i(w,[e,this.bstStart,b.now(),this.bstType])}),c.on(m,function(){this.bstStart=b.now()}),c.on(v,function(t,e){i(w,[e,this.bstStart,b.now(),"requestAnimationFrame"])}),o.on(y+h,function(t){this.time=b.now(),this.startPath=location.pathname+location.hash}),o.on(y+l,function(t){i("bstHist",[location.pathname+location.hash,this.startPath,this.time])}),f in window.performance&&(window.performance["c"+s]?window.performance[f](u,function(t){i(d,[window.performance.getEntriesByType(p)]),window.performance["c"+s]()},!1):window.performance[f]("webkit"+u,function(t){i(d,[window.performance.getEntriesByType(p)]),window.performance["webkitC"+s]()},!1)),document[f]("scroll",r,{passive:!0}),document[f]("keypress",r,!1),document[f]("click",r,!1)}},{}],6:[function(t,e,n){function r(t){for(var e=t;e&&!e.hasOwnProperty(u);)e=Object.getPrototypeOf(e);e&&o(e)}function o(t){c.inPlace(t,[u,d],"-",i)}function i(t,e){return t[1]}var a=t("ee").get("events"),c=t(23)(a,!0),s=t("gos"),f=XMLHttpRequest,u="addEventListener",d="removeEventListener";e.exports=a,"getPrototypeOf"in Object?(r(document),r(window),r(f.prototype)):f.prototype.hasOwnProperty(u)&&(o(window),o(f.prototype)),a.on(u+"-start",function(t,e){var n=t[1],r=s(n,"nr@wrapped",function(){function t(){if("function"==typeof n.handleEvent)return n.handleEvent.apply(n,arguments)}var e={object:t,"function":n}[typeof n];return e?c(e,"fn-",null,e.name||"anonymous"):n});this.wrapped=t[1]=r}),a.on(d+"-start",function(t){t[1]=this.wrapped||t[1]})},{}],7:[function(t,e,n){function r(t,e,n){var r=t[e];"function"==typeof r&&(t[e]=function(){var t=r.apply(this,arguments);return o.emit(n+"start",arguments,t),t.then(function(e){return o.emit(n+"end",[null,e],t),e},function(e){throw o.emit(n+"end",[e],t),e})})}var o=t("ee").get("fetch"),i=t(20);e.exports=o;var a=window,c="fetch-",s=c+"body-",f=["arrayBuffer","blob","json","text","formData"],u=a.Request,d=a.Response,p=a.fetch,h="prototype";u&&d&&p&&(i(f,function(t,e){r(u[h],e,s),r(d[h],e,s)}),r(a,"fetch",c),o.on(c+"end",function(t,e){var n=this;e?e.clone().arrayBuffer().then(function(t){n.rxSize=t.byteLength,o.emit(c+"done",[null,e],n)}):o.emit(c+"done",[t],n)}))},{}],8:[function(t,e,n){var r=t("ee").get("history"),o=t(23)(r);e.exports=r,o.inPlace(window.history,["pushState","replaceState"],"-")},{}],9:[function(t,e,n){function r(t){function e(){s.emit("jsonp-end",[],p),t.removeEventListener("load",e,!1),t.removeEventListener("error",n,!1)}function n(){s.emit("jsonp-error",[],p),s.emit("jsonp-end",[],p),t.removeEventListener("load",e,!1),t.removeEventListener("error",n,!1)}var r=t&&"string"==typeof t.nodeName&&"script"===t.nodeName.toLowerCase();if(r){var o="function"==typeof t.addEventListener;if(o){var a=i(t.src);if(a){var u=c(a),d="function"==typeof u.parent[u.key];if(d){var p={};f.inPlace(u.parent,[u.key],"cb-",p),t.addEventListener("load",e,!1),t.addEventListener("error",n,!1),s.emit("new-jsonp",[t.src],p)}}}}}function o(){return"addEventListener"in window}function i(t){var e=t.match(u);return e?e[1]:null}function a(t,e){var n=t.match(p),r=n[1],o=n[3];return o?a(o,e[r]):e[r]}function c(t){var e=t.match(d);return e&&e.length>=3?{key:e[2],parent:a(e[1],window)}:{key:t,parent:window}}var s=t("ee").get("jsonp"),f=t(23)(s);if(e.exports=s,o()){var u=/[?&](?:callback|cb)=([^&#]+)/,d=/(.*)\.([^.]+)/,p=/^(\w+)(\.|$)(.*)$/,h=["appendChild","insertBefore","replaceChild"];f.inPlace(HTMLElement.prototype,h,"dom-"),f.inPlace(HTMLHeadElement.prototype,h,"dom-"),f.inPlace(HTMLBodyElement.prototype,h,"dom-"),s.on("dom-start",function(t){r(t[0])})}},{}],10:[function(t,e,n){var r=t("ee").get("mutation"),o=t(23)(r),i=NREUM.o.MO;e.exports=r,i&&(window.MutationObserver=function(t){return this instanceof i?new i(o(t,"fn-")):i.apply(this,arguments)},MutationObserver.prototype=i.prototype)},{}],11:[function(t,e,n){function r(t){var e=a.context(),n=c(t,"executor-",e),r=new f(n);return a.context(r).getCtx=function(){return e},a.emit("new-promise",[r,e],e),r}function o(t,e){return e}var i=t(23),a=t("ee").get("promise"),c=i(a),s=t(20),f=NREUM.o.PR;e.exports=a,f&&(window.Promise=r,["all","race"].forEach(function(t){var e=f[t];f[t]=function(n){function r(t){return function(){a.emit("propagate",[null,!o],i),o=o||!t}}var o=!1;s(n,function(e,n){Promise.resolve(n).then(r("all"===t),r(!1))});var i=e.apply(f,arguments),c=f.resolve(i);return c}}),["resolve","reject"].forEach(function(t){var e=f[t];f[t]=function(t){var n=e.apply(f,arguments);return t!==n&&a.emit("propagate",[t,!0],n),n}}),f.prototype["catch"]=function(t){return this.then(null,t)},f.prototype=Object.create(f.prototype,{constructor:{value:r}}),s(Object.getOwnPropertyNames(f),function(t,e){try{r[e]=f[e]}catch(n){}}),a.on("executor-start",function(t){t[0]=c(t[0],"resolve-",this),t[1]=c(t[1],"resolve-",this)}),a.on("executor-err",function(t,e,n){t[1](n)}),c.inPlace(f.prototype,["then"],"then-",o),a.on("then-start",function(t,e){this.promise=e,t[0]=c(t[0],"cb-",this),t[1]=c(t[1],"cb-",this)}),a.on("then-end",function(t,e,n){this.nextPromise=n;var r=this.promise;a.emit("propagate",[r,!0],n)}),a.on("cb-end",function(t,e,n){a.emit("propagate",[n,!0],this.nextPromise)}),a.on("propagate",function(t,e,n){this.getCtx&&!e||(this.getCtx=function(){if(t instanceof Promise)var e=a.context(t);return e&&e.getCtx?e.getCtx():this})}),r.toString=function(){return""+f})},{}],12:[function(t,e,n){var r=t("ee").get("raf"),o=t(23)(r),i="equestAnimationFrame";e.exports=r,o.inPlace(window,["r"+i,"mozR"+i,"webkitR"+i,"msR"+i],"raf-"),r.on("raf-start",function(t){t[0]=o(t[0],"fn-")})},{}],13:[function(t,e,n){function r(t,e,n){t[0]=a(t[0],"fn-",null,n)}function o(t,e,n){this.method=n,this.timerDuration=isNaN(t[1])?0:+t[1],t[0]=a(t[0],"fn-",this,n)}var i=t("ee").get("timer"),a=t(23)(i),c="setTimeout",s="setInterval",f="clearTimeout",u="-start",d="-";e.exports=i,a.inPlace(window,[c,"setImmediate"],c+d),a.inPlace(window,[s],s+d),a.inPlace(window,[f,"clearImmediate"],f+d),i.on(s+u,r),i.on(c+u,o)},{}],14:[function(t,e,n){function r(t,e){d.inPlace(e,["onreadystatechange"],"fn-",c)}function o(){var t=this,e=u.context(t);t.readyState>3&&!e.resolved&&(e.resolved=!0,u.emit("xhr-resolved",[],t)),d.inPlace(t,y,"fn-",c)}function i(t){b.push(t),l&&(x?x.then(a):v?v(a):(E=-E,P.data=E))}function a(){for(var t=0;t<b.length;t++)r([],b[t]);b.length&&(b=[])}function c(t,e){return e}function s(t,e){for(var n in t)e[n]=t[n];return e}t(6);var f=t("ee"),u=f.get("xhr"),d=t(23)(u),p=NREUM.o,h=p.XHR,l=p.MO,m=p.PR,v=p.SI,w="readystatechange",y=["onload","onerror","onabort","onloadstart","onloadend","onprogress","ontimeout"],b=[];e.exports=u;var g=window.XMLHttpRequest=function(t){var e=new h(t);try{u.emit("new-xhr",[e],e),e.addEventListener(w,o,!1)}catch(n){try{u.emit("internal-error",[n])}catch(r){}}return e};if(s(h,g),g.prototype=h.prototype,d.inPlace(g.prototype,["open","send"],"-xhr-",c),u.on("send-xhr-start",function(t,e){r(t,e),i(e)}),u.on("open-xhr-start",r),l){var x=m&&m.resolve();if(!v&&!m){var E=1,P=document.createTextNode(E);new l(a).observe(P,{characterData:!0})}}else f.on("fn-end",function(t){t[0]&&t[0].type===w||a()})},{}],15:[function(t,e,n){function r(t){var e=this.params,n=this.metrics;if(!this.ended){this.ended=!0;for(var r=0;r<d;r++)t.removeEventListener(u[r],this.listener,!1);if(!e.aborted){if(n.duration=a.now()-this.startTime,4===t.readyState){e.status=t.status;var i=o(t,this.lastSize);if(i&&(n.rxSize=i),this.sameOrigin){var s=t.getResponseHeader("X-NewRelic-App-Data");s&&(e.cat=s.split(", ").pop())}}else e.status=0;n.cbTime=this.cbTime,f.emit("xhr-done",[t],t),c("xhr",[e,n,this.startTime])}}}function o(t,e){var n=t.responseType;if("json"===n&&null!==e)return e;var r="arraybuffer"===n||"blob"===n||"json"===n?t.response:t.responseText;return l(r)}function i(t,e){var n=s(e),r=t.params;r.host=n.hostname+":"+n.port,r.pathname=n.pathname,t.sameOrigin=n.sameOrigin}var a=t("loader");if(a.xhrWrappable){var c=t("handle"),s=t(16),f=t("ee"),u=["load","error","abort","timeout"],d=u.length,p=t("id"),h=t(19),l=t(18),m=window.XMLHttpRequest;a.features.xhr=!0,t(14),f.on("new-xhr",function(t){var e=this;e.totalCbs=0,e.called=0,e.cbTime=0,e.end=r,e.ended=!1,e.xhrGuids={},e.lastSize=null,h&&(h>34||h<10)||window.opera||t.addEventListener("progress",function(t){e.lastSize=t.loaded},!1)}),f.on("open-xhr-start",function(t){this.params={method:t[0]},i(this,t[1]),this.metrics={}}),f.on("open-xhr-end",function(t,e){"loader_config"in NREUM&&"xpid"in NREUM.loader_config&&this.sameOrigin&&e.setRequestHeader("X-NewRelic-ID",NREUM.loader_config.xpid)}),f.on("send-xhr-start",function(t,e){var n=this.metrics,r=t[0],o=this;if(n&&r){var i=l(r);i&&(n.txSize=i)}this.startTime=a.now(),this.listener=function(t){try{"abort"===t.type&&(o.params.aborted=!0),("load"!==t.type||o.called===o.totalCbs&&(o.onloadCalled||"function"!=typeof e.onload))&&o.end(e)}catch(n){try{f.emit("internal-error",[n])}catch(r){}}};for(var c=0;c<d;c++)e.addEventListener(u[c],this.listener,!1)}),f.on("xhr-cb-time",function(t,e,n){this.cbTime+=t,e?this.onloadCalled=!0:this.called+=1,this.called!==this.totalCbs||!this.onloadCalled&&"function"==typeof n.onload||this.end(n)}),f.on("xhr-load-added",function(t,e){var n=""+p(t)+!!e;this.xhrGuids&&!this.xhrGuids[n]&&(this.xhrGuids[n]=!0,this.totalCbs+=1)}),f.on("xhr-load-removed",function(t,e){var n=""+p(t)+!!e;this.xhrGuids&&this.xhrGuids[n]&&(delete this.xhrGuids[n],this.totalCbs-=1)}),f.on("addEventListener-end",function(t,e){e instanceof m&&"load"===t[0]&&f.emit("xhr-load-added",[t[1],t[2]],e)}),f.on("removeEventListener-end",function(t,e){e instanceof m&&"load"===t[0]&&f.emit("xhr-load-removed",[t[1],t[2]],e)}),f.on("fn-start",function(t,e,n){e instanceof m&&("onload"===n&&(this.onload=!0),("load"===(t[0]&&t[0].type)||this.onload)&&(this.xhrCbStart=a.now()))}),f.on("fn-end",function(t,e){this.xhrCbStart&&f.emit("xhr-cb-time",[a.now()-this.xhrCbStart,this.onload,e],e)})}},{}],16:[function(t,e,n){e.exports=function(t){var e=document.createElement("a"),n=window.location,r={};e.href=t,r.port=e.port;var o=e.href.split("://");!r.port&&o[1]&&(r.port=o[1].split("/")[0].split("@").pop().split(":")[1]),r.port&&"0"!==r.port||(r.port="https"===o[0]?"443":"80"),r.hostname=e.hostname||n.hostname,r.pathname=e.pathname,r.protocol=o[0],"/"!==r.pathname.charAt(0)&&(r.pathname="/"+r.pathname);var i=!e.protocol||":"===e.protocol||e.protocol===n.protocol,a=e.hostname===document.domain&&e.port===n.port;return r.sameOrigin=i&&(!e.hostname||a),r}},{}],17:[function(t,e,n){function r(){}function o(t,e,n){return function(){return i(t,[f.now()].concat(c(arguments)),e?null:this,n),e?void 0:this}}var i=t("handle"),a=t(20),c=t(21),s=t("ee").get("tracer"),f=t("loader"),u=NREUM;"undefined"==typeof window.newrelic&&(newrelic=u);var d=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit","addRelease"],p="api-",h=p+"ixn-";a(d,function(t,e){u[e]=o(p+e,!0,"api")}),u.addPageAction=o(p+"addPageAction",!0),u.setCurrentRouteName=o(p+"routeName",!0),e.exports=newrelic,u.interaction=function(){return(new r).get()};var l=r.prototype={createTracer:function(t,e){var n={},r=this,o="function"==typeof e;return i(h+"tracer",[f.now(),t,n],r),function(){if(s.emit((o?"":"no-")+"fn-start",[f.now(),r,o],n),o)try{return e.apply(this,arguments)}catch(t){throw s.emit("fn-err",[arguments,this,t],n),t}finally{s.emit("fn-end",[f.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(t,e){l[e]=o(h+e)}),newrelic.noticeError=function(t){"string"==typeof t&&(t=new Error(t)),i("err",[t,f.now()])}},{}],18:[function(t,e,n){e.exports=function(t){if("string"==typeof t&&t.length)return t.length;if("object"==typeof t){if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer&&t.byteLength)return t.byteLength;if("undefined"!=typeof Blob&&t instanceof Blob&&t.size)return t.size;if(!("undefined"!=typeof FormData&&t instanceof FormData))try{return JSON.stringify(t).length}catch(e){return}}}},{}],19:[function(t,e,n){var r=0,o=navigator.userAgent.match(/Firefox[\/\s](\d+\.\d+)/);o&&(r=+o[1]),e.exports=r},{}],20:[function(t,e,n){function r(t,e){var n=[],r="",i=0;for(r in t)o.call(t,r)&&(n[i]=e(r,t[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;e.exports=r},{}],21:[function(t,e,n){function r(t,e,n){e||(e=0),"undefined"==typeof n&&(n=t?t.length:0);for(var r=-1,o=n-e||0,i=Array(o<0?0:o);++r<o;)i[r]=t[e+r];return i}e.exports=r},{}],22:[function(t,e,n){e.exports={exists:"undefined"!=typeof window.performance&&window.performance.timing&&"undefined"!=typeof window.performance.timing.navigationStart}},{}],23:[function(t,e,n){function r(t){return!(t&&t instanceof Function&&t.apply&&!t[a])}var o=t("ee"),i=t(21),a="nr@original",c=Object.prototype.hasOwnProperty,s=!1;e.exports=function(t,e){function n(t,e,n,o){function nrWrapper(){var r,a,c,s;try{a=this,r=i(arguments),c="function"==typeof n?n(r,a):n||{}}catch(f){p([f,"",[r,a,o],c])}u(e+"start",[r,a,o],c);try{return s=t.apply(a,r)}catch(d){throw u(e+"err",[r,a,d],c),d}finally{u(e+"end",[r,a,s],c)}}return r(t)?t:(e||(e=""),nrWrapper[a]=t,d(t,nrWrapper),nrWrapper)}function f(t,e,o,i){o||(o="");var a,c,s,f="-"===o.charAt(0);for(s=0;s<e.length;s++)c=e[s],a=t[c],r(a)||(t[c]=n(a,f?c+o:o,i,c))}function u(n,r,o){if(!s||e){var i=s;s=!0;try{t.emit(n,r,o,e)}catch(a){p([a,n,r,o])}s=i}}function d(t,e){if(Object.defineProperty&&Object.keys)try{var n=Object.keys(t);return n.forEach(function(n){Object.defineProperty(e,n,{get:function(){return t[n]},set:function(e){return t[n]=e,e}})}),e}catch(r){p([r])}for(var o in t)c.call(t,o)&&(e[o]=t[o]);return e}function p(e){try{t.emit("internal-error",e)}catch(n){}}return t||(t=o),n.inPlace=f,n.flag=a,n}},{}],ee:[function(t,e,n){function r(){}function o(t){function e(t){return t&&t instanceof r?t:t?s(t,c,i):i()}function n(n,r,o,i){if(!p.aborted||i){t&&t(n,r,o);for(var a=e(o),c=l(n),s=c.length,f=0;f<s;f++)c[f].apply(a,r);var d=u[y[n]];return d&&d.push([b,n,r,a]),a}}function h(t,e){w[t]=l(t).concat(e)}function l(t){return w[t]||[]}function m(t){return d[t]=d[t]||o(n)}function v(t,e){f(t,function(t,n){e=e||"feature",y[n]=e,e in u||(u[e]=[])})}var w={},y={},b={on:h,emit:n,get:m,listeners:l,context:e,buffer:v,abort:a,aborted:!1};return b}function i(){return new r}function a(){(u.api||u.feature)&&(p.aborted=!0,u=p.backlog={})}var c="nr@context",s=t("gos"),f=t(20),u={},d={},p=e.exports=o();p.backlog=u},{}],gos:[function(t,e,n){function r(t,e,n){if(o.call(t,e))return t[e];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,e,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return t[e]=r,r}var o=Object.prototype.hasOwnProperty;e.exports=r},{}],handle:[function(t,e,n){function r(t,e,n,r){o.buffer([t],r),o.emit(t,e,n)}var o=t("ee").get("handle");e.exports=r,r.ee=o},{}],id:[function(t,e,n){function r(t){var e=typeof t;return!t||"object"!==e&&"function"!==e?-1:t===window?0:a(t,i,function(){return o++})}var o=1,i="nr@id",a=t("gos");e.exports=r},{}],loader:[function(t,e,n){function r(){if(!x++){var t=g.info=NREUM.info,e=p.getElementsByTagName("script")[0];if(setTimeout(u.abort,3e4),!(t&&t.licenseKey&&t.applicationID&&e))return u.abort();f(y,function(e,n){t[e]||(t[e]=n)}),s("mark",["onload",a()+g.offset],null,"api");var n=p.createElement("script");n.src="https://"+t.agent,e.parentNode.insertBefore(n,e)}}function o(){"complete"===p.readyState&&i()}function i(){s("mark",["domContent",a()+g.offset],null,"api")}function a(){return E.exists&&performance.now?Math.round(performance.now()):(c=Math.max((new Date).getTime(),c))-g.offset}var c=(new Date).getTime(),s=t("handle"),f=t(20),u=t("ee"),d=window,p=d.document,h="addEventListener",l="attachEvent",m=d.XMLHttpRequest,v=m&&m.prototype;NREUM.o={ST:setTimeout,SI:d.setImmediate,CT:clearTimeout,XHR:m,REQ:d.Request,EV:d.Event,PR:d.Promise,MO:d.MutationObserver};var w=""+location,y={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-spa-1071.min.js"},b=m&&v&&v[h]&&!/CriOS/.test(navigator.userAgent),g=e.exports={offset:c,now:a,origin:w,features:{},xhrWrappable:b};t(17),p[h]?(p[h]("DOMContentLoaded",i,!1),d[h]("load",r,!1)):(p[l]("onreadystatechange",o),d[l]("onload",r)),s("mark",["firstbyte",c],null,"api");var x=0,E=t(22)},{}]},{},["loader",2,15,5,3,4]);</script><link rel="apple-touch-icon" href="https://www.safaribooksonline.com/static/images/apple-touch-icon.0c29511d2d72.png"><link rel="shortcut icon" href="https://www.safaribooksonline.com/favicon.ico" type="image/x-icon"><link href="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/css" rel="stylesheet" type="text/css"><title>5&nbsp;Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)</title><link rel="stylesheet" href="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/b8d25f1a9a05.css" type="text/css"><link rel="stylesheet" type="text/css" href="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/annotator.ef38b0457d7b.css"><link rel="stylesheet" href="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/font-awesome.min.css"><style type="text/css" title="ibis-book">@page{margin:1.5em}#sbo-rt-content div{margin:0 .5em 0 .5em}#sbo-rt-content svg{height:98%;width:100%}#sbo-rt-content img{max-height:100%;max-width:100%}#sbo-rt-content a{text-decoration:none}#sbo-rt-content .dedi1{margin-top:8em;margin-bottom:.4em;text-align:center}#sbo-rt-content .dedi{margin-top:1em;margin-bottom:.4em;text-align:center}#sbo-rt-content .copyright{margin-top:1em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .copyrightt{margin-top:1.5em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .h2{font-size:1.8em;margin-top:.5em;margin-bottom:.5em;text-indent:.1em}#sbo-rt-content .h2a{font-size:1.5em;margin-top:.2em;margin-bottom:2.5em;text-indent:.1em}#sbo-rt-content .h2d{font-size:130%;color:#fff;background-color:#000;padding:.2em;margin-right:40%;margin-top:2em;margin-bottom:2em;text-indent:1em}#sbo-rt-content .code{margin-top:1em;margin-bottom:1em;margin-left:5em}#sbo-rt-content .code1{margin-top:1em;margin-bottom:1em;margin-left:1.3em}#sbo-rt-content .codea{margin-top:1em;margin-bottom:1em;margin-left:.1em}#sbo-rt-content .code2{margin-top:1em;margin-bottom:1em;margin-left:2.5em}#sbo-rt-content .code2a{margin-top:1em;margin-bottom:1em;margin-left:3.5em}#sbo-rt-content .toc-chap{margin-top:1em;margin-bottom:.5em;margin-left:1em;text-indent:.01em}#sbo-rt-content .toc{margin-top:.1em;margin-bottom:.1em;margin-left:1.8em;text-indent:.01em}#sbo-rt-content .tocs{margin-top:.6em;margin-bottom:.6em;margin-left:1.2em;text-indent:.01em}#sbo-rt-content .tocs1{margin-top:.6em;margin-bottom:.4em;margin-left:3em;text-indent:.01em}#sbo-rt-content .noindentd{font-size:1.2em;color:#fff;background-color:#000;padding:.2em;margin-right:50%;margin-top:1em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .icon{margin-top:1em;margin-bottom:1em;text-indent:.01em}#sbo-rt-content .noindent{margin-top:.1em;margin-bottom:.1em;text-indent:.01em}#sbo-rt-content .noindentl{margin-top:1em;margin-bottom:.1em;margin-left:2.5em;text-indent:.01em}#sbo-rt-content .indent{margin-top:.1em;margin-bottom:.1em;text-indent:1.2em}#sbo-rt-content .indentt{margin-top:1em;margin-bottom:.1em;text-indent:1.2em}#sbo-rt-content .indenttb{margin-top:1em;margin-bottom:1em;text-indent:1.2em}#sbo-rt-content .h3{font-size:160%;margin-top:1.2em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .h3n{font-size:160%;margin-top:.5em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .h3s{font-size:120%;margin-top:.2em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .h3a{font-size:120%;color:#fff;background-color:#000;padding:.2em;margin-right:40%;margin-top:1.2em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .h3a1{font-size:120%;color:#fff;background-color:#000;padding:.2em;margin-right:65%;margin-top:1.2em;margin-bottom:.001em;text-indent:1em}#sbo-rt-content .line{margin-top:.1em;margin-bottom:.001em;border:0;border-bottom:solid black .1em}#sbo-rt-content .h4s{font-size:120%;margin-top:.5em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .h4{font-size:140%;margin-top:1.2em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .h4a{font-size:120%;margin-top:1.2em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .noindentt{margin-top:1em;margin-bottom:.1em;text-indent:.01em}#sbo-rt-content .indentb{margin-top:.1em;margin-bottom:1.2em;text-indent:1.2em}#sbo-rt-content .imagef{margin-top:1em;margin-bottom:1em;text-align:center}#sbo-rt-content .imagel{margin-top:1em;margin-bottom:1em;text-indent:.1em}#sbo-rt-content .imagel1{margin-top:1em;margin-bottom:1em;margin-left:1em;text-indent:.1em}#sbo-rt-content .images{margin-top:1em;margin-bottom:1em;text-align:center}#sbo-rt-content .inline{text-decoration:middle}#sbo-rt-content .imaget{margin-top:.5em;margin-bottom:.5em;text-indent:.1em}#sbo-rt-content .right{margin-top:.1em;margin-bottom:.1em;text-align:right}#sbo-rt-content .figs{background-color:#000;color:#fff;padding:.2em}#sbo-rt-content .bull{margin-top:.3em;margin-bottom:.1em;margin-left:3.5em;text-indent:-1.5em}#sbo-rt-content .tick{margin-top:.5em;margin-bottom:.1em;text-indent:-2em;margin-left:4em}#sbo-rt-content .drop{font-size:4em;margin:-.2em .01em -.2em .01em;text-indent:.01em;float:left}#sbo-rt-content .tick1{margin-top:.5em;margin-bottom:.1em;text-indent:-2em;margin-left:3em}#sbo-rt-content .noindenttop{margin-top:4em;margin-bottom:.2em;text-indent:.01em}#sbo-rt-content .bulletxlb{margin-top:.4em;margin-bottom:.4em;margin-left:5.7em;text-indent:-1.4em}#sbo-rt-content .bulletxlb1{margin-top:.4em;margin-bottom:.4em;margin-left:7em;text-indent:-1.4em}#sbo-rt-content .bulletxl{margin-top:.4em;margin-bottom:.4em;margin-left:5.7em;text-indent:-5.3em}#sbo-rt-content .bulletxla{margin-top:.4em;margin-bottom:.4em;margin-left:5.7em;text-indent:-3.2em}#sbo-rt-content .bulletxls{margin-top:.4em;margin-bottom:.4em;margin-left:4em;text-indent:-1.4em}#sbo-rt-content .bulletxt{margin-top:1em;margin-bottom:.1em;margin-left:2.6em;text-indent:-1.4em}#sbo-rt-content .bulletxn{margin-top:1em;margin-bottom:.1em;margin-left:2.6em;text-indent:.01em}#sbo-rt-content .bulletx{margin-top:.4em;margin-bottom:.1em;margin-left:2.6em;text-indent:-1.4em}#sbo-rt-content .bulletxs{margin-top:.4em;margin-bottom:.1em;margin-left:4.2em;text-indent:-1.5em}#sbo-rt-content .bulletxsa{margin-top:.4em;margin-bottom:.1em;margin-left:1.6em;text-indent:-1.4em}#sbo-rt-content .bulletxb{margin-top:.3em;margin-bottom:1em;margin-left:2.6em;text-indent:-1.4em}#sbo-rt-content .sidebar{margin-top:1em;margin-bottom:-.1em;border:solid #b2b3b6 .2em;background-color:#666769;padding:.5em;text-indent:.01em}#sbo-rt-content .sidebar1{margin-top:.001em;margin-bottom:1em;border:solid #b2b3b6 .2em;background-color:#e7e7e8;padding:.5em;text-indent:.01em}#sbo-rt-content .sideh{font-size:1.4em;color:#fff;margin-top:.5em;margin-bottom:.5em;text-align:center}#sbo-rt-content .sidehl{font-size:1.2em;margin-top:.5em;margin-bottom:.5em;text-indent:.1em}#sbo-rt-content .side-exam{margin-top:1em;margin-bottom:1em;text-indent:.01em;border:solid .1em;background-color:#eeefef;padding:1em}#sbo-rt-content .Text-icon-exam1{font-weight:bold;margin-top:1em;margin-bottom:.2em;text-indent:.01em}#sbo-rt-content .Text-icon-exam{font-weight:bold;margin-top:.5em;margin-bottom:.2em;text-indent:.01em}#sbo-rt-content .Text-icon-exami{font-weight:bold;margin-top:.5em;margin-bottom:.2em;text-indent:1.2em}#sbo-rt-content .under{text-decoration:underline}#sbo-rt-content .hanga{margin-top:.1em;margin-bottom:.6em;margin-left:2.5em;text-indent:-1.5em}#sbo-rt-content .hangai{margin-top:.1em;margin-bottom:.1em;margin-left:2.5em;text-indent:1.2em}#sbo-rt-content .hangan{margin-top:.1em;margin-bottom:.1em;margin-left:2.5em;text-indent:.1em}#sbo-rt-content .hanga1{margin-top:.1em;margin-bottom:.6em;margin-left:2.5em;text-indent:-2em}#sbo-rt-content .bqt{font-size:.9em;margin-top:1em;margin-bottom:.5em;margin-left:1em;text-indent:.01em}#sbo-rt-content .bq{font-size:.9em;margin-top:.5em;margin-bottom:.5em;margin-left:1.5em;text-indent:.01em}#sbo-rt-content .bqs{font-size:.9em;margin-top:.5em;margin-bottom:.5em;margin-left:2em;text-indent:.01em}#sbo-rt-content .noindentb{margin-top:.1em;margin-bottom:1em;text-indent:.01em}#sbo-rt-content .noindentb1{margin-top:.1em;margin-bottom:2em;text-indent:.01em}#sbo-rt-content .toc-lev1{margin-top:.1em;margin-bottom:.1em;margin-left:3em;text-indent:-1.2em}#sbo-rt-content .toc-lev2{margin-top:.1em;margin-bottom:.1em;margin-left:6.5em;text-indent:-1.2em}#sbo-rt-content .toc-lev3{margin-top:.1em;margin-bottom:.1em;margin-left:1.8em;text-indent:.01em}#sbo-rt-content .toc-lev3a{margin-top:.1em;margin-bottom:.1em;margin-left:5.4em;text-indent:.01em}#sbo-rt-content .toc-index{margin-top:2em;margin-bottom:.1em;margin-left:2em;text-indent:.01em}#sbo-rt-content .numst{margin-top:1em;margin-bottom:.1em;margin-left:2.3em;text-indent:-1.4em}#sbo-rt-content .numst1{margin-top:1em;margin-bottom:.1em;margin-left:1.8em;text-indent:-1.4em}#sbo-rt-content .numsn{margin-top:1em;margin-bottom:.1em;margin-left:2.3em;text-indent:.1em}#sbo-rt-content .numsb{margin-top:.1em;margin-bottom:1em;margin-left:2.3em;text-indent:-1.3em}#sbo-rt-content .nums{margin-top:.3em;margin-bottom:.3em;margin-left:2.3em;text-indent:-1.3em}#sbo-rt-content .figcap{margin-top:.1em;margin-bottom:1.5em;text-indent:.01em}#sbo-rt-content .tabcap{margin-top:1.5em;margin-bottom:.8em;text-indent:.01em}#sbo-rt-content .ash{color:#939598}#sbo-rt-content .ash1{font-size:1.3em;color:#939598}#sbo-rt-content .fonts{font-size:1.2em}#sbo-rt-content .num{margin-top:.1em;margin-bottom:.1em;margin-left:1.6em;text-indent:-1em}#sbo-rt-content .numn{margin-top:.4em;margin-bottom:.1em;margin-left:1.7em;text-indent:.1em}#sbo-rt-content .numin{margin-top:.1em;margin-bottom:.1em;margin-left:1.6em;text-indent:1.2em}#sbo-rt-content .numa{margin-top:.1em;margin-bottom:.4em;margin-left:3.9em;text-indent:-1.7em}#sbo-rt-content .numl{margin-top:.4em;margin-bottom:.1em;margin-left:3.6em;text-indent:-1em}#sbo-rt-content .numln{margin-top:.4em;margin-bottom:.1em;margin-left:3.6em;text-indent:.1em}#sbo-rt-content .bqi{font-size:.9em;margin-top:.5em;margin-bottom:.5em;margin-left:5em;text-indent:1.2em}#sbo-rt-content .noindenttop1{margin-top:4em;margin-bottom:1em;text-indent:.01em}#sbo-rt-content .coden{margin-top:.8em;margin-bottom:.8em;margin-left:1.5em}#sbo-rt-content .numlist{margin-top:.1em;margin-bottom:.1em;margin-left:2.5em;text-indent:-1.5em}#sbo-rt-content .noindent1{margin-top:1em;margin-bottom:1em;text-indent:.01em}#sbo-rt-content .noindentn{margin-top:.1em;margin-bottom:.1em;margin-left:.1em;text-indent:.01em}#sbo-rt-content .image-t{margin-top:.2em;margin-bottom:1.5em;text-indent:.01em}#sbo-rt-content .image-f{margin-top:1em;margin-bottom:.5em;text-align:center}#sbo-rt-content .code-n{margin-top:.5em;margin-bottom:.5em;margin-left:2.3em}#sbo-rt-content .hr{margin-top:.5em;margin-bottom:1.5em;border-bottom:solid #939598 .2em}#sbo-rt-content .bqn{font-size:.9em;margin-top:.8em;margin-bottom:.8em;margin-left:1.3em;text-indent:.01em}#sbo-rt-content .code-n1{margin-top:.7em;margin-bottom:.7em;margin-left:2.8em}#sbo-rt-content .numlistk{margin-top:.1em;margin-bottom:.1em;margin-left:2.2em;text-indent:-1.6em}#sbo-rt-content .numlistk1{margin-top:.5em;margin-bottom:.1em;margin-left:1.9em;text-indent:-1.6em}#sbo-rt-content .code-1{margin-top:.5em;margin-bottom:.5em;margin-left:2.5em}#sbo-rt-content .numlist-n{margin-top:.3em;margin-bottom:.3em;margin-left:2.2em;text-indent:.01em}#sbo-rt-content .num-k{margin-top:.3em;margin-bottom:.3em;margin-left:4em;text-indent:-1.6em}#sbo-rt-content .hang-a{margin-top:.1em;margin-bottom:.5em;margin-left:2.4em;text-indent:.01em}#sbo-rt-content .h5{font-size:120%;margin-top:1.5em;margin-bottom:.3em;text-indent:.01em}#sbo-rt-content .indenta{margin-top:.3em;margin-bottom:.3em;margin-left:1.5em;text-indent:.01em}#sbo-rt-content .indent-a{margin-top:.5em;margin-bottom:.5em;margin-left:1.2em;text-indent:.01em}#sbo-rt-content .indexmain{margin-top:.1em;margin-bottom:.1em;margin-left:1em;text-indent:-1em}#sbo-rt-content .indexhead{margin-top:.7em;margin-bottom:.3em;width:20%;font-size:1.3em;margin-left:1.5em;text-indent:.5em;background-color:#6d6e71;color:#fff;padding:.2em}#sbo-rt-content .indexsub{margin-top:.1em;margin-bottom:.1em;margin-left:2.6em;text-indent:-1em}#sbo-rt-content .h2-n{font-size:1.3em;margin-top:2em;margin-bottom:2em;text-indent:2em;background-color:#231f20;color:#fff;width:30%;padding:.2em}#sbo-rt-content .image-n{margin-top:.1em;margin-bottom:.1em;text-align:center}#sbo-rt-content .imagea{margin-top:2em;margin-bottom:.5em;text-align:left}</style><script> // <![CDATA[
    var g = {
      position_cache: {
        
          "chapter": "/api/v1/book/9781260011388/chapter/cover.html",
          "book_id": "9781260011388",
          "chapter_uri": "cover.html",
          "position": 0,
          "user_uuid": "bece7dd7-9327-4cc1-a1c8-17e84b9a1059",
          "next_chapter_uri": "/library/view/oca-java-se/9781260011388/title.html"
        
      },
      title: "OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0\u002D808)",
      author_list: "Bert Bates, Kathy Sierra",
      format: "book",
      source: "application/epub+zip",
      is_system_book: true,
      is_public: false,
      loaded_from_server: true,
      allow_scripts: false,
      has_mathml: false,
      show_ios_app_teaser: false
    };
    // ]]></script><script src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/modernizr.js"></script><script>
    
      
        

        

        
          
            window.PUBLIC_ANNOTATIONS = true;
          
        

      

      
        window.MOBILE_PUBLIC_ANNOTATIONS = false;
      

    

    
      window.PRIVACY_CONTROL_OVERRIDE = false;
    

    
      window.PRIVACY_CONTROL_SWITCH = true;
    

    
      window.PUBLISHER_PAGES = true;
    

      window.SBO = {
        "constants": {
          "SITB_ENDPOINT": "https://www.safaribooksonline.com/api/v2/sitb/",
          "SEARCH_SELECT_ENDPOINT": "https://www.safaribooksonline.com/api/v2/search/select/",
          "ENABLE_ONLINE_TRAINING": true
        }
      };
  </script><link rel="canonical" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html"><meta name="description" content=" "><meta property="og:title" content="Cover Page"><meta itemprop="isPartOf" content="/library/view/oca-java-se/9781260011388/"><meta itemprop="name" content="Cover Page"><meta property="og:url" itemprop="url" content="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html"><meta property="og:site_name" content="Safari"><meta property="og:image" itemprop="thumbnailUrl" content="https://www.safaribooksonline.com/library/cover/9781260011388/"><meta property="og:description" itemprop="description" content=" "><meta itemprop="inLanguage" content="en"><meta itemprop="publisher" content="McGraw-Hill"><meta property="og:type" content="book"><meta property="og:book:isbn" itemprop="isbn" content="9781260011388"><meta property="og:book:author" itemprop="author" content="Bert Bates"><meta property="og:book:author" itemprop="author" content="Kathy Sierra"><meta property="og:book:tag" itemprop="about" content="Certification"><meta property="og:book:tag" itemprop="about" content="Java"><meta name="twitter:card" content="summary"><meta name="twitter:site" content="@safari"><style type="text/css" id="font-styles" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }"></style><style type="text/css" id="font-family" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }"></style><style type="text/css" id="column-width" data-template="#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }"></style><noscript>&lt;meta http-equiv="refresh" content="0; url=/library/no-js/" /&gt;</noscript><script type="text/javascript">
  (function(i,s,o,g,r,a,m) {
    i['GoogleAnalyticsObject']=r;
    i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();
    a=s.createElement(o),m=s.getElementsByTagName(o)[0];
    a.async=1;
    a.src=g;
    m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  var matches = document.cookie.match(/BrowserCookie\s*=\s*([a-f0-9\-]{36})/),
      user_uuid = null;

  if (matches && matches.length === 2) {
    user_uuid = matches[1];
  }


  ga('create', 'UA-39299553-7', {'userId': 'bece7dd7-9327-4cc1-a1c8-17e84b9a1059' });



  
    ga('set', 'dimension1', 'Trial');
  


ga('set', 'dimension6', user_uuid);


  ga('set', 'dimension2', 'bece7dd7-9327-4cc1-a1c8-17e84b9a1059');
  






//enable enhanced link tracking
ga('require', 'linkid', 'linkid.js');

// reading interface will track pageviews itself
if (document.location.pathname.indexOf("/library/view") !== 0) {
  ga('send', 'pageview');
}
</script><script>
    (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    '//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-5P4V6Z');
  </script><script defer="" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/vendor.4bb90b301ddb.js"></script><script defer="" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/reader.7bc20c923d74.js"></script><script src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource"></script><script src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(1)"></script><script async="" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/MathJax.js"></script><style id="annotator-dynamic-style">.annotator-adder, .annotator-outer, .annotator-notice {
  z-index: 100019;
}
.annotator-filter {
  z-index: 100009;
}</style></head>


<body class="reading sidenav  scalefonts subscribe-panel library nav-collapsed">

    
  
  <noscript> 
    &lt;iframe src="//www.googletagmanager.com/ns.html?id=GTM-5P4V6Z"
            height="0" width="0"
            style="display:none;visibility:hidden"&gt;
    &lt;/iframe&gt;
  </noscript>
  



    
      <div class="hide working" role="status">
        <div class="working-image"></div>
      </div>
      <div class="sbo-site-nav">
        





<a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#container" class="skip">Skip to content</a><header class="topbar t-topbar"><nav role="navigation" class="js-site-nav"><ul class="topnav"><li class="t-logo"><a href="https://www.safaribooksonline.com/home/" class="l0 None safari-home nav-icn js-keyboard-nav-home"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>Safari Home Icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M4 9.9L4 9.9 4 18 16 18 16 9.9 10 4 4 9.9ZM2.6 8.1L2.6 8.1 8.7 1.9 10 0.5 11.3 1.9 17.4 8.1 18 8.7 18 9.5 18 18.1 18 20 16.1 20 3.9 20 2 20 2 18.1 2 9.5 2 8.7 2.6 8.1Z"></path><rect x="10" y="12" width="3" height="7"></rect><rect transform="translate(18.121320, 10.121320) rotate(-315.000000) translate(-18.121320, -10.121320) " x="16.1" y="9.1" width="4" height="2"></rect><rect transform="translate(2.121320, 10.121320) scale(-1, 1) rotate(-315.000000) translate(-2.121320, -10.121320) " x="0.1" y="9.1" width="4" height="2"></rect></g></svg><span>Safari Home</span></a></li><li><a href="https://www.safaribooksonline.com/r/" class="t-recommendations-nav l0 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>recommendations icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M50 25C50 18.2 44.9 12.5 38.3 11.7 37.5 5.1 31.8 0 25 0 18.2 0 12.5 5.1 11.7 11.7 5.1 12.5 0 18.2 0 25 0 31.8 5.1 37.5 11.7 38.3 12.5 44.9 18.2 50 25 50 31.8 50 37.5 44.9 38.3 38.3 44.9 37.5 50 31.8 50 25ZM25 3.1C29.7 3.1 33.6 6.9 34.4 11.8 30.4 12.4 26.9 15.1 25 18.8 23.1 15.1 19.6 12.4 15.6 11.8 16.4 6.9 20.3 3.1 25 3.1ZM34.4 15.6C33.6 19.3 30.7 22.2 27.1 22.9 27.8 19.2 30.7 16.3 34.4 15.6ZM22.9 22.9C19.2 22.2 16.3 19.3 15.6 15.6 19.3 16.3 22.2 19.2 22.9 22.9ZM3.1 25C3.1 20.3 6.9 16.4 11.8 15.6 12.4 19.6 15.1 23.1 18.8 25 15.1 26.9 12.4 30.4 11.8 34.4 6.9 33.6 3.1 29.7 3.1 25ZM22.9 27.1C22.2 30.7 19.3 33.6 15.6 34.4 16.3 30.7 19.2 27.8 22.9 27.1ZM25 46.9C20.3 46.9 16.4 43.1 15.6 38.2 19.6 37.6 23.1 34.9 25 31.3 26.9 34.9 30.4 37.6 34.4 38.2 33.6 43.1 29.7 46.9 25 46.9ZM27.1 27.1C30.7 27.8 33.6 30.7 34.4 34.4 30.7 33.6 27.8 30.7 27.1 27.1ZM38.2 34.4C37.6 30.4 34.9 26.9 31.3 25 34.9 23.1 37.6 19.6 38.2 15.6 43.1 16.4 46.9 20.3 46.9 25 46.9 29.7 43.1 33.6 38.2 34.4Z"></path></g></svg><span>Recommended</span></a></li><li><a href="https://www.safaribooksonline.com/s/" class="t-queue-nav l0 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>queue icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 29.2C25.4 29.2 25.8 29.1 26.1 28.9L48.7 16.8C49.5 16.4 50 15.5 50 14.6 50 13.7 49.5 12.8 48.7 12.4L26.1 0.3C25.4-0.1 24.6-0.1 23.9 0.3L1.3 12.4C0.5 12.8 0 13.7 0 14.6 0 15.5 0.5 16.4 1.3 16.8L23.9 28.9C24.2 29.1 24.6 29.2 25 29.2ZM7.3 14.6L25 5.2 42.7 14.6 25 24 7.3 14.6ZM48.7 22.4L47.7 21.9 25 34.2 2.3 21.9 1.3 22.4C0.5 22.9 0 23.7 0 24.7 0 25.6 0.5 26.5 1.3 26.9L23.9 39.3C24.2 39.5 24.6 39.6 25 39.6 25.4 39.6 25.8 39.5 26.1 39.3L48.7 26.9C49.5 26.5 50 25.6 50 24.7 50 23.7 49.5 22.9 48.7 22.4ZM48.7 32.8L47.7 32.3 25 44.6 2.3 32.3 1.3 32.8C0.5 33.3 0 34.1 0 35.1 0 36 0.5 36.9 1.3 37.3L23.9 49.7C24.2 49.9 24.6 50 25 50 25.4 50 25.8 49.9 26.1 49.7L48.7 37.3C49.5 36.9 50 36 50 35.1 50 34.1 49.5 33.3 48.7 32.8Z"></path></g></svg><span>
                  Queue
              </span></a></li><li class="search"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#" class="t-search-nav trigger nav-icn l0" data-dropdown-selector=".searchbox"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>search icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M31.3 0C20.9 0 12.5 8.4 12.5 18.8 12.5 22.5 13.6 25.9 15.4 28.8L1.2 42.9C-0.4 44.5-0.4 47.2 1.2 48.8 2 49.6 3.1 50 4.2 50 5.2 50 6.3 49.6 7.1 48.8L21.2 34.6C24.1 36.5 27.5 37.5 31.3 37.5 41.6 37.5 50 29.1 50 18.8 50 8.4 41.6 0 31.3 0ZM31.3 31.3C24.4 31.3 18.8 25.6 18.8 18.8 18.8 11.9 24.4 6.3 31.3 6.3 38.1 6.3 43.8 11.9 43.8 18.8 43.8 25.6 38.1 31.3 31.3 31.3Z"></path></g></svg><span>Search</span></a></li><li class="usermenu dropdown"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#" class="trigger l0 nav-icn nav-dropdown"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>navigation arrow</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M0.1 12.5L9.7 3.1C9.8 3 9.9 3 10 3 10.1 3 10.2 3 10.3 3.1L19.9 12.5C20 12.5 20 12.6 20 12.8 20 12.9 20 13 19.9 13L17 15.9C16.9 16 16.8 16 16.7 16 16.5 16 16.4 16 16.4 15.9L10 9.7 3.6 15.9C3.6 16 3.5 16 3.3 16 3.2 16 3.1 16 3 15.9L0.1 13C0 12.9 0 12.8 0 12.7 0 12.7 0 12.6 0.1 12.5Z"></path></g></svg><span>Expand Nav</span></a><div class="drop-content"><ul><li><a href="https://www.safaribooksonline.com/history/" class="t-recent-nav l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>recent items icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 0C11.2 0 0 11.2 0 25 0 38.8 11.2 50 25 50 38.8 50 50 38.8 50 25 50 11.2 38.8 0 25 0ZM6.3 25C6.3 14.6 14.6 6.3 25 6.3 35.4 6.3 43.8 14.6 43.8 25 43.8 35.4 35.4 43.8 25 43.8 14.6 43.8 6.3 35.4 6.3 25ZM31.8 31.5C32.5 30.5 32.4 29.2 31.6 28.3L27.1 23.8 27.1 12.8C27.1 11.5 26.2 10.4 25 10.4 23.9 10.4 22.9 11.5 22.9 12.8L22.9 25.7 28.8 31.7C29.2 32.1 29.7 32.3 30.2 32.3 30.8 32.3 31.3 32 31.8 31.5Z"></path></g></svg><span>History</span></a></li><li><a href="https://www.safaribooksonline.com/topics" class="t-topics-link l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 55" width="20" height="20" version="1.1" fill="#4A3C31"><desc>topics icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 55L50 41.262 50 13.762 25 0 0 13.762 0 41.262 25 55ZM8.333 37.032L8.333 17.968 25 8.462 41.667 17.968 41.667 37.032 25 46.538 8.333 37.032Z"></path></g></svg><span>Topics</span></a></li><li><a href="https://www.safaribooksonline.com/tutorials/" class="l1 nav-icn t-tutorials-nav js-toggle-menu-item None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>tutorials icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M15.8 18.2C15.8 18.2 15.9 18.2 16 18.2 16.1 18.2 16.2 18.2 16.4 18.2 16.5 18.2 16.7 18.1 16.9 18 17 17.9 17.1 17.8 17.2 17.7 17.3 17.6 17.4 17.5 17.4 17.4 17.5 17.2 17.6 16.9 17.6 16.7 17.6 16.6 17.6 16.5 17.6 16.4 17.5 16.2 17.5 16.1 17.4 15.9 17.3 15.8 17.2 15.6 17 15.5 16.8 15.3 16.6 15.3 16.4 15.2 16.2 15.2 16 15.2 15.8 15.2 15.7 15.2 15.5 15.3 15.3 15.4 15.2 15.4 15.1 15.5 15 15.7 14.9 15.8 14.8 15.9 14.7 16 14.7 16.1 14.6 16.3 14.6 16.4 14.6 16.5 14.6 16.6 14.6 16.6 14.6 16.7 14.6 16.9 14.6 17 14.6 17.1 14.7 17.3 14.7 17.4 14.8 17.6 15 17.7 15.1 17.9 15.2 18 15.3 18 15.5 18.1 15.5 18.1 15.6 18.2 15.7 18.2 15.7 18.2 15.7 18.2 15.8 18.2L15.8 18.2ZM9.4 11.5C9.5 11.5 9.5 11.5 9.6 11.5 9.7 11.5 9.9 11.5 10 11.5 10.2 11.5 10.3 11.4 10.5 11.3 10.6 11.2 10.8 11.1 10.9 11 10.9 10.9 11 10.8 11.1 10.7 11.2 10.5 11.2 10.2 11.2 10 11.2 9.9 11.2 9.8 11.2 9.7 11.2 9.5 11.1 9.4 11 9.2 10.9 9.1 10.8 8.9 10.6 8.8 10.5 8.7 10.3 8.6 10 8.5 9.9 8.5 9.7 8.5 9.5 8.5 9.3 8.5 9.1 8.6 9 8.7 8.8 8.7 8.7 8.8 8.6 9 8.5 9.1 8.4 9.2 8.4 9.3 8.2 9.5 8.2 9.8 8.2 10 8.2 10.1 8.2 10.2 8.2 10.3 8.2 10.5 8.3 10.6 8.4 10.7 8.5 10.9 8.6 11.1 8.7 11.2 8.9 11.3 9 11.4 9.1 11.4 9.2 11.4 9.3 11.5 9.3 11.5 9.3 11.5 9.4 11.5 9.4 11.5L9.4 11.5ZM3 4.8C3.1 4.8 3.1 4.8 3.2 4.8 3.4 4.8 3.5 4.8 3.7 4.8 3.8 4.8 4 4.7 4.1 4.6 4.3 4.5 4.4 4.4 4.5 4.3 4.6 4.2 4.6 4.1 4.7 4 4.8 3.8 4.8 3.5 4.8 3.3 4.8 3.1 4.8 3 4.8 2.9 4.7 2.8 4.7 2.6 4.6 2.5 4.5 2.3 4.4 2.2 4.2 2.1 4 1.9 3.8 1.9 3.6 1.8 3.5 1.8 3.3 1.8 3.1 1.8 2.9 1.8 2.7 1.9 2.6 2 2.4 2.1 2.3 2.2 2.2 2.3 2.1 2.4 2 2.5 2 2.6 1.8 2.8 1.8 3 1.8 3.3 1.8 3.4 1.8 3.5 1.8 3.6 1.8 3.8 1.9 3.9 2 4 2.1 4.2 2.2 4.4 2.4 4.5 2.5 4.6 2.6 4.7 2.7 4.7 2.8 4.7 2.9 4.8 2.9 4.8 3 4.8 3 4.8 3 4.8L3 4.8ZM13.1 15.2C13.2 15.1 13.2 15.1 13.2 15.1 13.3 14.9 13.4 14.7 13.6 14.5 13.8 14.2 14.1 14 14.4 13.8 14.7 13.6 15.1 13.5 15.5 13.4 15.9 13.4 16.3 13.4 16.7 13.5 17.2 13.5 17.6 13.7 17.9 13.9 18.2 14.1 18.5 14.4 18.7 14.7 18.9 15 19.1 15.3 19.2 15.6 19.3 15.9 19.4 16.1 19.4 16.4 19.4 17 19.3 17.5 19.1 18.1 19 18.3 18.9 18.5 18.7 18.7 18.5 19 18.3 19.2 18 19.4 17.7 19.6 17.3 19.8 16.9 19.9 16.6 20 16.3 20 16 20 15.8 20 15.6 20 15.4 19.9 15.4 19.9 15.4 19.9 15.4 19.9 15.2 19.9 15 19.8 14.9 19.8 14.8 19.7 14.7 19.7 14.6 19.7 14.4 19.6 14.3 19.5 14.1 19.3 13.7 19.1 13.4 18.7 13.2 18.4 13.1 18.1 12.9 17.8 12.9 17.5 12.8 17.3 12.8 17.1 12.8 16.9L3.5 14.9C3.3 14.9 3.1 14.8 3 14.8 2.7 14.7 2.4 14.5 2.1 14.3 1.7 14 1.4 13.7 1.2 13.3 1 13 0.9 12.6 0.8 12.3 0.7 12 0.7 11.7 0.7 11.4 0.7 11 0.8 10.5 1 10.1 1.1 9.8 1.3 9.5 1.6 9.2 1.8 8.9 2.1 8.7 2.4 8.5 2.8 8.3 3.2 8.1 3.6 8.1 3.9 8 4.2 8 4.5 8 4.6 8 4.8 8 4.9 8.1L6.8 8.5C6.8 8.4 6.8 8.4 6.8 8.4 6.9 8.2 7.1 8 7.2 7.8 7.5 7.5 7.7 7.3 8 7.1 8.4 6.9 8.7 6.8 9.1 6.7 9.5 6.7 10 6.7 10.4 6.8 10.8 6.8 11.2 7 11.5 7.2 11.8 7.5 12.1 7.7 12.4 8 12.6 8.3 12.7 8.6 12.8 8.9 12.9 9.2 13 9.4 13 9.7 13 9.7 13 9.8 13 9.8 13.6 9.9 14.2 10.1 14.9 10.2 15 10.2 15 10.2 15.1 10.2 15.3 10.2 15.4 10.2 15.6 10.2 15.8 10.1 16 10 16.2 9.9 16.4 9.8 16.5 9.6 16.6 9.5 16.8 9.2 16.9 8.8 16.9 8.5 16.9 8.3 16.9 8.2 16.8 8 16.8 7.8 16.7 7.7 16.6 7.5 16.5 7.3 16.3 7.2 16.2 7.1 16 7 15.9 6.9 15.8 6.9 15.7 6.9 15.6 6.8 15.5 6.8L6.2 4.8C6.2 5 6 5.2 5.9 5.3 5.7 5.6 5.5 5.8 5.3 6 4.9 6.2 4.5 6.4 4.1 6.5 3.8 6.6 3.5 6.6 3.2 6.6 3 6.6 2.8 6.6 2.7 6.6 2.6 6.6 2.6 6.5 2.6 6.5 2.5 6.5 2.3 6.5 2.1 6.4 1.8 6.3 1.6 6.1 1.3 6 1 5.7 0.7 5.4 0.5 5 0.3 4.7 0.2 4.4 0.1 4.1 0 3.8 0 3.6 0 3.3 0 2.8 0.1 2.2 0.4 1.7 0.5 1.5 0.7 1.3 0.8 1.1 1.1 0.8 1.3 0.6 1.6 0.5 2 0.3 2.3 0.1 2.7 0.1 3.1 0 3.6 0 4 0.1 4.4 0.2 4.8 0.3 5.1 0.5 5.5 0.8 5.7 1 6 1.3 6.2 1.6 6.3 1.9 6.4 2.3 6.5 2.5 6.6 2.7 6.6 3 6.6 3 6.6 3.1 6.6 3.1 9.7 3.8 12.8 4.4 15.9 5.1 16.1 5.1 16.2 5.2 16.4 5.2 16.7 5.3 16.9 5.5 17.2 5.6 17.5 5.9 17.8 6.2 18.1 6.5 18.3 6.8 18.4 7.2 18.6 7.5 18.6 7.9 18.7 8.2 18.7 8.6 18.7 9 18.6 9.4 18.4 9.8 18.3 10.1 18.2 10.3 18 10.6 17.8 10.9 17.5 11.1 17.3 11.3 16.9 11.6 16.5 11.8 16 11.9 15.7 12 15.3 12 15 12 14.8 12 14.7 12 14.5 11.9 13.9 11.8 13.3 11.7 12.6 11.5 12.5 11.7 12.4 11.9 12.3 12 12.1 12.3 11.9 12.5 11.7 12.7 11.3 12.9 10.9 13.1 10.5 13.2 10.2 13.3 9.9 13.3 9.6 13.3 9.4 13.3 9.2 13.3 9 13.2 9 13.2 9 13.2 9 13.2 8.8 13.2 8.7 13.2 8.5 13.1 8.2 13 8 12.8 7.7 12.6 7.4 12.4 7.1 12 6.8 11.7 6.7 11.4 6.6 11.1 6.5 10.8 6.4 10.6 6.4 10.4 6.4 10.2 5.8 10.1 5.2 9.9 4.5 9.8 4.4 9.8 4.4 9.8 4.3 9.8 4.1 9.8 4 9.8 3.8 9.8 3.6 9.9 3.4 10 3.2 10.1 3 10.2 2.9 10.4 2.8 10.5 2.6 10.8 2.5 11.1 2.5 11.5 2.5 11.6 2.5 11.8 2.6 12 2.6 12.1 2.7 12.3 2.8 12.5 2.9 12.6 3.1 12.8 3.2 12.9 3.3 13 3.5 13.1 3.6 13.1 3.7 13.1 3.8 13.2 3.9 13.2L13.1 15.2 13.1 15.2Z"></path></g></svg><span>Tutorials</span></a></li><li class="nav-offers flyout-parent"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#" class="l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>offers icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M35.9 20.6L27 15.5C26.1 15 24.7 15 23.7 15.5L14.9 20.6C13.9 21.1 13.2 22.4 13.2 23.4L13.2 41.4C13.2 42.4 13.9 43.7 14.9 44.2L23.3 49C24.2 49.5 25.6 49.5 26.6 49L35.9 43.6C36.8 43.1 37.6 41.8 37.6 40.8L37.6 23.4C37.6 22.4 36.8 21.1 35.9 20.6L35.9 20.6ZM40 8.2C39.1 7.6 37.6 7.6 36.7 8.2L30.2 11.9C29.3 12.4 29.3 13.2 30.2 13.8L39.1 18.8C40 19.4 40.7 20.6 40.7 21.7L40.7 39C40.7 40.1 41.4 40.5 42.4 40L48.2 36.6C49.1 36.1 49.8 34.9 49.8 33.8L49.8 15.6C49.8 14.6 49.1 13.3 48.2 12.8L40 8.2 40 8.2ZM27 10.1L33.6 6.4C34.5 5.9 34.5 5 33.6 4.5L26.6 0.5C25.6 0 24.2 0 23.3 0.5L16.7 4.2C15.8 4.7 15.8 5.6 16.7 6.1L23.7 10.1C24.7 10.6 26.1 10.6 27 10.1ZM10.1 21.7C10.1 20.6 10.8 19.4 11.7 18.8L20.6 13.8C21.5 13.2 21.5 12.4 20.6 11.9L13.6 7.9C12.7 7.4 11.2 7.4 10.3 7.9L1.6 12.8C0.7 13.3 0 14.6 0 15.6L0 33.8C0 34.9 0.7 36.1 1.6 36.6L8.4 40.5C9.3 41 10.1 40.6 10.1 39.6L10.1 21.7 10.1 21.7Z"></path></g></svg><span>Offers &amp; Deals</span></a><ul class="flyout"><li><a href="https://www.safaribooksonline.com/oreilly-newsletters/" class="l2 nav-icn"><span>Newsletters</span></a></li></ul></li><li class="nav-highlights"><a href="https://www.safaribooksonline.com/u/0011N00001As6t6QAB/" class="t-highlights-nav l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 35" width="20" height="20" version="1.1" fill="#4A3C31"><desc>highlights icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M13.325 18.071L8.036 18.071C8.036 11.335 12.36 7.146 22.5 5.594L22.5 0C6.37 1.113 0 10.632 0 22.113 0 29.406 3.477 35 10.403 35 15.545 35 19.578 31.485 19.578 26.184 19.578 21.556 17.211 18.891 13.325 18.071L13.325 18.071ZM40.825 18.071L35.565 18.071C35.565 11.335 39.86 7.146 50 5.594L50 0C33.899 1.113 27.5 10.632 27.5 22.113 27.5 29.406 30.977 35 37.932 35 43.045 35 47.078 31.485 47.078 26.184 47.078 21.556 44.74 18.891 40.825 18.071L40.825 18.071Z"></path></g></svg><span>Highlights</span></a></li><li><a href="https://www.safaribooksonline.com/u/" class="t-settings-nav l1 js-settings nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 53" width="20" height="20" version="1.1" fill="#4A3C31"><desc>settings icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M44.6 29.6C44.7 28.6 44.8 27.5 44.8 26.5 44.8 25.5 44.7 24.4 44.6 23.4L49.6 19C50 18.8 50.1 18.3 49.9 17.9 48.9 14.7 47.1 11.7 44.9 9.1 44.6 8.8 44.2 8.7 43.8 8.8L37.4 11.1C35.8 9.8 34 8.7 32.1 8L30.9 1.4C30.8 0.9 30.4 0.6 30 0.5 26.7-0.2 23.3-0.2 20 0.5 19.6 0.6 19.2 0.9 19.1 1.4L17.9 8C16 8.7 14.1 9.8 12.6 11.1L6.2 8.8C5.8 8.7 5.4 8.8 5.1 9.1 2.9 11.7 1.1 14.7 0.1 17.9 -0.1 18.3 0 18.8 0.4 19L5.4 23.4C5.3 24.4 5.2 25.5 5.2 26.5 5.2 27.5 5.3 28.6 5.4 29.6L0.4 34C0 34.2-0.1 34.7 0.1 35.1 1.1 38.3 2.9 41.4 5.1 43.9 5.4 44.2 5.8 44.4 6.2 44.2L12.6 42C14.1 43.2 16 44.3 17.9 45L19.1 51.7C19.2 52.1 19.6 52.5 20 52.5 21.6 52.8 23.3 53 25 53 26.7 53 28.4 52.8 30 52.5 30.4 52.5 30.8 52.1 30.9 51.7L32.1 45C34 44.3 35.8 43.2 37.4 42L43.8 44.2C44.2 44.4 44.6 44.2 44.9 43.9 47.1 41.4 48.9 38.3 49.9 35.1 50.1 34.7 50 34.2 49.6 34L44.6 29.6ZM25 36.4C19.6 36.4 15.2 32 15.2 26.5 15.2 21 19.6 16.6 25 16.6 30.4 16.6 34.8 21 34.8 26.5 34.8 32 30.4 36.4 25 36.4Z"></path></g></svg><span>Settings</span></a></li><li><a href="https://www.safaribooksonline.com/public/support" class="l1 no-icon">Support</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l1 no-icon">Sign Out</a></li></ul><ul class="profile"><li><a href="https://www.safaribooksonline.com/u/" class="l2 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 53" width="20" height="20" version="1.1" fill="#4A3C31"><desc>settings icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M44.6 29.6C44.7 28.6 44.8 27.5 44.8 26.5 44.8 25.5 44.7 24.4 44.6 23.4L49.6 19C50 18.8 50.1 18.3 49.9 17.9 48.9 14.7 47.1 11.7 44.9 9.1 44.6 8.8 44.2 8.7 43.8 8.8L37.4 11.1C35.8 9.8 34 8.7 32.1 8L30.9 1.4C30.8 0.9 30.4 0.6 30 0.5 26.7-0.2 23.3-0.2 20 0.5 19.6 0.6 19.2 0.9 19.1 1.4L17.9 8C16 8.7 14.1 9.8 12.6 11.1L6.2 8.8C5.8 8.7 5.4 8.8 5.1 9.1 2.9 11.7 1.1 14.7 0.1 17.9 -0.1 18.3 0 18.8 0.4 19L5.4 23.4C5.3 24.4 5.2 25.5 5.2 26.5 5.2 27.5 5.3 28.6 5.4 29.6L0.4 34C0 34.2-0.1 34.7 0.1 35.1 1.1 38.3 2.9 41.4 5.1 43.9 5.4 44.2 5.8 44.4 6.2 44.2L12.6 42C14.1 43.2 16 44.3 17.9 45L19.1 51.7C19.2 52.1 19.6 52.5 20 52.5 21.6 52.8 23.3 53 25 53 26.7 53 28.4 52.8 30 52.5 30.4 52.5 30.8 52.1 30.9 51.7L32.1 45C34 44.3 35.8 43.2 37.4 42L43.8 44.2C44.2 44.4 44.6 44.2 44.9 43.9 47.1 41.4 48.9 38.3 49.9 35.1 50.1 34.7 50 34.2 49.6 34L44.6 29.6ZM25 36.4C19.6 36.4 15.2 32 15.2 26.5 15.2 21 19.6 16.6 25 16.6 30.4 16.6 34.8 21 34.8 26.5 34.8 32 30.4 36.4 25 36.4Z"></path></g></svg><span>Settings</span></a><span class="l2 t-nag-notification" id="nav-nag"><strong class="trial-green">7</strong> days left in your trial.
  
  

  
    
      

<a class="" href="https://www.safaribooksonline.com/subscribe/">Subscribe</a>.


    
  

  

</span></li><li><a href="https://www.safaribooksonline.com/public/support" class="l2">Support</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l2">Sign Out</a></li></ul></div></li></ul></nav></header>


      </div>
      <div id="container" class="application" style="height: auto;">
        
          <div class="nav-container clearfix">
            


            
            
          </div>

          

  <div class="js-toc">
    
      <div class="sbo-reading-menu sbo-menu-top"><section class="sbo-toc-container toc-menu"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#" class="sbo-toc-thumb"><span class="sbo-title ss-list"><h1><div class="visuallyhidden">Table of Contents for </div>
      
      OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)
      
    </h1></span></a><div class="toc-contents"></div></section></div>

    

    <div class="interface-controls interface-controls-top">
      <ul class="interface-control-btns js-bitlist js-reader">
        <li class="js-search-in-archive search-in-archive t-search-in-archive"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#" title="Search in archive" class="js-search-controls search-controls"><span class="icon">Search in book...</span></a><form class="search-archive-bar js-search-form"><input type="search" name="query" placeholder="Search inside this book..." autocomplete="off"></form><div class="search-archive-results"><div class="js-sitb-results-region"></div></div></li><li class="queue-control"><button type="button" class="rec-fav ss-queue js-queue js-current-chapter-queue" data-queue-endpoint="/api/v1/book/9781260011388/chapter/ch05.html" data-for-analytics="9781260011388:ch05.html" aria-label="Add to Queue"><span>Add to Queue</span></button></li><li class="js-font-control-panel font-control-activator"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#" data-push-state="false" id="font-controls" title="Change font size" aria-label="Change font size"><span class="icon">Toggle Font Controls</span></a></li><li class="dropdown sharing-controls"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#" class="trigger" data-push-state="false" title="Share" aria-label="Share"><i class="fa fa-share"></i></a><ul class="social-sharing dropdown-menu"><li><a class="twitter share-button t-twitter" target="_blank" aria-label="Share this section on Twitter" title="Share this section on Twitter" href="https://twitter.com/share?url=https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html&amp;text=OCA%20Java%20SE%208%20Programmer%20I%20Exam%20Guide%20%28Exams%201Z0-808%29&amp;via=safari"><span>Twitter</span></a></li><li><a class="facebook share-button t-facebook" target="_blank" aria-label="Share this section on Facebook" title="Share this section on Facebook" href="https://www.facebook.com/sharer/sharer.php?u=https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html"><span>Facebook</span></a></li><li><a class="googleplus share-button t-googleplus" target="_blank" aria-label="Share this secton on Google Plus" title="Share this secton on Google Plus" href="https://plus.google.com/share?url=https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html"><span>Google Plus</span></a></li><li><a class="email share-button t-email" aria-label="Share this section via email" title="Share this section via email" href="mailto:?subject=Safari:%20Cover%20Page&amp;body=https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html%0D%0Afrom%20OCA%20Java%20SE%208%20Programmer%20I%20Exam%20Guide%20%28Exams%201Z0-808%29%0D%0A"><span>Email</span></a></li></ul></li>
      </ul>
    </div>

    <section role="document">
	  <div class="t-sbo-prev sbo-prev sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">4&nbsp;Operators</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">6&nbsp;Strings, Arrays, ArrayLists, Dates, and Lambdas</div>
        </a>
    
  
  </div>



<div id="sbo-rt-content"><div class="annotator-wrapper"><p class="imagea"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/common.jpg" alt="Images" width="500" height="252" data-mfp-src="/library/view/oca-java-se/9781260011388/common.jpg"></p>
<h2 class="h2" id="ch5"><a id="page_271"></a>5</h2>
<h2 class="h2a">Flow Control and Exceptions</h2>
<p class="noindentd">CERTIFICATION OBJECTIVES</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use if and switch Statements</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Develop for, do, and while Loops</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use break and continue Statements</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use try, catch, and finally Statements</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;State the Effects of Exceptions</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Recognize Common Exceptions</p>
<p class="tick"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/tic.jpg" alt="Images" width="12" height="13" data-mfp-src="/library/view/oca-java-se/9781260011388/tic.jpg">&nbsp;&nbsp;&nbsp;Two-Minute Drill</p>
<p class="tick1"><strong>Q&amp;A</strong> Self Test</p>
<p class="noindenttop1"><a id="page_272"></a><span class="drop">C</span>an you imagine trying to write code using a language that didn’t give you a way to execute statements conditionally? Flow control is a key part of most any useful programming language, and Java offers several ways to accomplish it. Some statements, such as <code>if</code> statements and <code>for</code> loops, are common to most languages. But Java also throws in a couple of flow control features you might not have used before—exceptions and assertions. (We’ll discuss assertions in the next chapter.)</p>
<p class="bqi">The <code>if</code> statement and the <code>switch</code> statement are types of conditional/decision controls that allow your program to behave differently at a “fork in the road,” depending on the result of a logical test. Java also provides three different looping constructs—<code>for</code>, <code>while</code>, and <code>do</code>—so you can execute the same code over and over again depending on some condition being true. Exceptions give you a clean, simple way to organize code that deals with problems that might crop up at runtime.</p>
<p class="bqi">With these tools, you can build a robust program that can handle any logical situation with grace. Expect to see a wide range of questions on the exam that include flow control as part of the question code, even on questions that aren’t testing your knowledge of flow control.</p>
<h3 class="h3a">CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch05lev1sec1"></a>Using if and switch Statements (OCA Objectives 3.3 and 3.4)</h3>
<p class="noindentn"><em>3.3&nbsp;&nbsp;&nbsp;Create if and if-else and ternary constructs.</em></p>
<p class="noindentn"><em>3.5&nbsp;&nbsp;&nbsp;Use a switch statement.</em></p>
<p class="indentt">The <code>if</code> and <code>switch</code> statements are commonly referred to as decision statements. When you use decision statements in your program, you’re asking the program to evaluate a given expression to determine which course of action to take. We’ll look at the <code>if</code> statement first.</p>
<h4 class="h4"><a id="ch05lev2sec1"></a><a id="page_273"></a>if-else Branching</h4>
<p class="noindentt">The basic format of an <code>if</code> statement is as follows:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0273-01.jpg" alt="images" width="416" height="55" data-mfp-src="/library/view/oca-java-se/9781260011388/p0273-01.jpg"></p>
<p class="indent">The expression in parentheses must evaluate to (a <code>boolean</code>) <code>true</code> or <code>false</code>. Typically, you’re testing something to see if it’s true and then running a code block (one or more statements) if it is true and (optionally) another block of code if it isn’t. The following code demonstrates a legal <code>if-else</code> statement:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0273-02.jpg" alt="images" width="454" height="95" data-mfp-src="/library/view/oca-java-se/9781260011388/p0273-02.jpg"></p>
<p class="noindentt">The <code>else</code> block is optional, so you can also use the following:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0273-03.jpg" alt="images" width="111" height="94" data-mfp-src="/library/view/oca-java-se/9781260011388/p0273-03.jpg"></p>
<p class="noindentt">The preceding code will assign 2 to <code>y</code> if the test succeeds (meaning <code>x</code> really is greater than 3), but the other two lines will execute regardless. Even the curly braces are optional if you have only one statement to execute within the body of the conditional block. The following code example is legal (although not recommended for readability):</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0273-04.jpg" alt="images" width="486" height="74" data-mfp-src="/library/view/oca-java-se/9781260011388/p0273-04.jpg"></p>
<p class="indentb">Most developers consider it good practice to enclose blocks within curly braces, even if there’s only one statement in the block. Be careful with code like the preceding, because you might think it should read as</p>
<p class="indentt">“If <code>x</code> is greater than 3, then set <code>y</code> to 2, <code>z</code> to <code>z</code> + 8, and <code>a</code> to <code>y</code> + <code>x</code>.”</p>
<p class="noindentt"><a id="page_274"></a>But the last two lines are going to execute no matter what! They aren’t part of the conditional flow. You might find it even more misleading if the code were indented as follows:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0274-01.jpg" alt="images" width="111" height="73" data-mfp-src="/library/view/oca-java-se/9781260011388/p0274-01.jpg"></p>
<p class="noindentt">You might have a need to nest <code>if-else</code> statements (although, again, it’s not recommended for readability, so nested <code>if</code> tests should be kept to a minimum). You can set up an <code>if-else</code> statement to test for multiple conditions. The following example uses two conditions, so if the first test fails, we want to perform a second test before deciding what to do:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0274-02.jpg" alt="images" width="196" height="195" data-mfp-src="/library/view/oca-java-se/9781260011388/p0274-02.jpg"></p>
<p class="noindentt">This brings up the other <code>if-else</code> construct, the <code>if</code>, <code>else if</code>, <code>else</code>. The preceding code could (and should) be rewritten like this:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0274-03.jpg" alt="images" width="235" height="135" data-mfp-src="/library/view/oca-java-se/9781260011388/p0274-03.jpg"></p>
<p class="indent">There are a couple of rules for using <code>else</code> and <code>else if</code>:</p>
<p class="bulletxt"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;You can have zero or one <code>else</code> for a given <code>if</code>, and it must come after any <code>else if</code>s.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;You can have zero to many <code>else if</code>s for a given <code>if</code>, and they must come before the (optional) <code>else</code>.</p>
<p class="bulletxb"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Once an <code>else if</code> succeeds, none of the remaining <code>else if</code>s nor the <code>else</code> will be tested.</p>
<p class="indent"><a id="page_275"></a>The following example shows code that is horribly formatted for the real world. As you’ve probably guessed, it’s fairly likely that you’ll encounter formatting like this on the exam. In any case, the code demonstrates the use of multiple <code>else if</code>s:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0275-01.jpg" alt="images" width="417" height="93" data-mfp-src="/library/view/oca-java-se/9781260011388/p0275-01.jpg"></p>
<p class="indent">It produces this output:</p>
<p class="coden"><code>&lt;4</code></p>
<p class="noindentt">(Notice that even though the second <code>else if</code> is true, it is never reached.)</p>
<p class="indent">Sometimes you can have a problem figuring out which <code>if</code> your <code>else</code> should pair with, as follows:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0275-02.jpg" alt="images" width="378" height="93" data-mfp-src="/library/view/oca-java-se/9781260011388/p0275-02.jpg"></p>
<p class="noindentt">We intentionally left out the indenting in this piece of code so it doesn’t give clues as to which <code>if</code> statement the <code>else</code> belongs to. Did you figure it out? Java law decrees that an <code>else</code> clause belongs to the innermost <code>if</code> statement to which it might possibly belong (in other words, the closest preceding <code>if</code> that doesn’t have an <code>else</code>). In the case of the preceding example, the <code>else</code> belongs to the second <code>if</code> statement in the listing. With proper indenting, it would look like this:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0275-03.jpg" alt="images" width="368" height="113" data-mfp-src="/library/view/oca-java-se/9781260011388/p0275-03.jpg"></p>
<p class="noindentt">Following our coding conventions by using curly braces, it would be even easier <br>to read:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0275-04.jpg" alt="images" width="368" height="155" data-mfp-src="/library/view/oca-java-se/9781260011388/p0275-04.jpg"></p>
<p class="noindentt"><a id="page_276"></a>Don’t get your hopes up about the exam questions being all nice and indented properly. Some exam takers even have a slogan for the way questions are presented on the exam: Anything that can be made more confusing will be.</p>
<p class="indent">Be prepared for questions that not only fail to indent nicely but also intentionally indent in a misleading way. Pay close attention for misdirection like the following:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0276-01.jpg" alt="images" width="599" height="113" data-mfp-src="/library/view/oca-java-se/9781260011388/p0276-01.jpg"></p>
<p class="noindentt">Of course, the preceding code is exactly the same as the previous two examples, except for the way it looks.</p>
<h4 class="h4a">Legal Expressions for if Statements</h4>
<p class="noindent">The expression in an <code>if</code> statement must be a <code>boolean</code> expression. Any expression that resolves to a <code>boolean</code> is fine, and some of the expressions can be complex. Assume <code>doStuff()</code> returns <code>true</code>,</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0276-02.jpg" alt="images" width="368" height="93" data-mfp-src="/library/view/oca-java-se/9781260011388/p0276-02.jpg"></p>
<p class="noindentt">which prints</p>
<p class="code1"><code>true</code></p>
<p class="noindent">You can read the preceding code as, “If both (<code>x &gt; 3</code>) and (<code>y &lt; 2</code>) are <code>true</code>, or if the result of <code>doStuff()</code> is <code>true</code>, then print <code>true</code>.” So, basically, if just <code>doStuff()</code> alone is <code>true</code>, we’ll still get <code>true</code>. If <code>doStuff()</code> is <code>false</code>, though, then both (<code>x &gt; 3</code>) and (<code>y &lt; 2</code>) will have to be <code>true</code> in order to print <code>true</code>. The preceding code is even more complex if you leave off one set of parentheses as follows:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0276-03.jpg" alt="images" width="349" height="93" data-mfp-src="/library/view/oca-java-se/9781260011388/p0276-03.jpg"></p>
<p class="noindentt">This now prints…nothing! Because the preceding code (with one less set of parentheses) evaluates as though you were saying, “If (<code>x &gt; 3</code>) is <code>true</code>, and either (<code>y &lt; 2</code>) or the result of <code>doStuff()</code> is <code>true</code>, then print <code>true</code>. So if (<code>x &gt; 3</code>) is not <code>true</code>, no point in looking at the rest of the expression.” Because of the short-circuit <a id="page_277"></a><code>&amp;&amp;</code>, the expression is evaluated as though there were parentheses around <code>(y &lt; 2) | doStuff()</code>. In other words, it is evaluated as a single expression before the <code>&amp;&amp;</code> and a single expression after the <code>&amp;&amp;</code>.</p>
<p class="indent">Remember that the only legal expression in an <code>if</code> test is a <code>boolean</code>. In some languages, 0 == false and 1 == true. Not so in Java! The following code shows <code>if</code> statements that might look tempting but are illegal, followed by legal substitutions:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0277-01.jpg" alt="images" width="332" height="153" data-mfp-src="/library/view/oca-java-se/9781260011388/p0277-01.jpg"></p>
<div class="side-exam">
<p class="imaget"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>One common mistake programmers make (and that can be difficult to spot) is assigning a <code>boolean</code> variable when you meant to test a <code>boolean</code> variable. Look out for code like the following:</em></strong></p>
<p class="codea"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0277-02.jpg" alt="images" width="188" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0277-02.jpg"></p>
<p class="noindent1"><strong><em>You might think one of three things:</em></strong></p>
<p class="numlist"><strong><em>1.&nbsp;&nbsp;&nbsp;The code compiles and runs fine, and the <code>if</code> test fails because <code>boo</code> is <code>false</code>.</em></strong></p>
<p class="numlist"><strong><em>2.&nbsp;&nbsp;&nbsp;The code won’t compile because you’re using an assignment (=) rather than an equality test (==).</em></strong></p>
<p class="numlist"><strong><em>3.&nbsp;&nbsp;&nbsp;The code compiles and runs fine, and the <code>if</code> test succeeds because <code>boo</code> is SET to <code>true</code> (rather than TESTED for <code>true</code>) in the <code>if</code> argument!</em></strong></p>
<p class="noindentt"><strong><em>Well, number 3 is correct–pointless, but correct. Given that the result of any assignment is the value of the variable after the assignment, the expression <code>(boo = true)</code> has a result of <code>true.</code> Hence, the <code>if</code> test succeeds. But the only variables that can be assigned (rather than tested against something else) are a <code>boolean</code> or a <code>Boolean;</code> all other assignments will result in something non-<code>boolean</code>, so they’re not legal, as in the following:</em></strong></p>
<p class="codea"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0277-03.jpg" alt="images" width="568" height="34" data-mfp-src="/library/view/oca-java-se/9781260011388/p0277-03.jpg"></p>
<p class="noindentt"><strong><em>Because <code>if</code> tests require <code>boolean</code> expressions, you need to be really solid on both logical operators and <code>if</code> test syntax and semantics.</em></strong></p>
</div>
<h4 class="h4"><a id="ch05lev2sec2"></a><a id="page_278"></a>switch Statements</h4>
<p class="noindent">You’ve seen how <code>if</code> and <code>else-if</code> statements can be used to support both simple and complex decision logic. In many cases, the <code>switch</code> statement provides a cleaner way to handle complex decision logic. Let’s compare the following <code>if-else if</code> statement to the equivalently performing <code>switch</code> statement:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0278-01.jpg" alt="images" width="397" height="192" data-mfp-src="/library/view/oca-java-se/9781260011388/p0278-01.jpg"></p>
<p class="noindentt">Now let’s see the same functionality represented in a <code>switch</code> construct:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0278-02.jpg" alt="images" width="416" height="213" data-mfp-src="/library/view/oca-java-se/9781260011388/p0278-02.jpg"></p>
<p class="noindentt">Note: The reason this <code>switch</code> statement emulates the <code>if</code> is because of the <code>break</code> statements that were placed inside of the <code>switch</code>. In general, <code>break</code> statements are optional, and as you will see in a few pages, their inclusion or exclusion causes huge changes in how a <code>switch</code> statement will execute.</p>
<h4 class="h4a">Legal Expressions for switch and case</h4>
<p class="noindent">The general form of the <code>switch</code> statement is</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0278-03.jpg" alt="images" width="266" height="95" data-mfp-src="/library/view/oca-java-se/9781260011388/p0278-03.jpg"></p>
<p class="indent"><strong>A <code>switch</code>’s expression must evaluate to a <code>char</code>, <code>byte</code>, <code>short</code>, <code>int</code>, an <code>enum</code> (as of Java 5), and a <code>String</code> (as of Java 7).</strong> That means if you’re not using an <a id="page_279"></a><code>enum</code> or a <code>String</code>, only variables and values that can be automatically promoted (in other words, implicitly cast) to an <code>int</code> are acceptable. You won’t be able to compile if you use anything else, including the remaining numeric types of <code>long</code>, <code>float</code>, and <code>double</code>.</p>
<p class="indent">A <code>case</code> constant must evaluate to the same type that the <code>switch</code> expression can use, with one additional—and big—constraint: the <code>case</code> constant must be a compile-time constant! Since the <code>case</code> argument has to be resolved at compile time, you can use only a constant or <code>final</code> variable that is immediately initialized with a literal value. It is not enough to be <code>final</code>; it must be a compile-time <em>constant</em>. Here’s an example:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0279-01.jpg" alt="images" width="296" height="133" data-mfp-src="/library/view/oca-java-se/9781260011388/p0279-01.jpg"></p>
<p class="noindentt">Also, the <code>switch</code> can only check for equality. This means the other relational operators such as greater than are rendered unusable in a <code>case</code>. The following is an example of a valid expression using a method invocation in a <code>switch</code> statement. Note that for this code to be legal, the method being invoked on the object reference must return a value compatible with an <code>int</code>.</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0279-02.jpg" alt="images" width="397" height="272" data-mfp-src="/library/view/oca-java-se/9781260011388/p0279-02.jpg"></p>
<p class="indent">One other rule you might not expect involves the question, “What happens if I <code>switch</code> on a variable smaller than an <code>int</code>?” Look at the following <code>switch</code>:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0279-03.jpg" alt="images" width="102" height="93" data-mfp-src="/library/view/oca-java-se/9781260011388/p0279-03.jpg"></p>
<p class="noindentt"><a id="page_280"></a>This code won’t compile. Although the <code>switch</code> argument is legal—a byte is implicitly cast to an <code>int</code>—the second <code>case</code> argument (128) is too large for a <code>byte</code>, and the compiler knows it! Attempting to compile the preceding example gives you an error something like this:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0280-01.jpg" alt="images" width="372" height="82" data-mfp-src="/library/view/oca-java-se/9781260011388/p0280-01.jpg"></p>
<p class="indent">It’s also illegal to have more than one <code>case</code> label using the same value. For example, the following block of code won’t compile because it uses two <code>case</code>s with the same value of 80:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0280-02.jpg" alt="images" width="549" height="133" data-mfp-src="/library/view/oca-java-se/9781260011388/p0280-02.jpg"></p>
<p class="indent">It <em>is</em> legal to leverage the power of boxing in a <code>switch</code> expression. For instance, the following is legal:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0280-03.jpg" alt="images" width="425" height="55" data-mfp-src="/library/view/oca-java-se/9781260011388/p0280-03.jpg"></p>
<div class="side-exam">
<p class="imaget"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>Look for any violation of the rules for <code>switch</code> and case arguments. For example, you might find illegal examples like the following snippets:</em></strong></p>
<p class="codea"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0280-04.jpg" alt="images" width="101" height="195" data-mfp-src="/library/view/oca-java-se/9781260011388/p0280-04.jpg"></p>
<p class="noindent"><strong><em>In the first example, the <code>case</code> omits the colon. The second example omits the keyword <code>case.</code></em></strong></p>
</div>
<h4 class="h4a"><a id="page_281"></a>An Intro to String “equality”</h4>
<p class="noindent">As we’ve been discussing, the operation of <code>switch</code> statements depends on the expression “matching” or being “equal” to one of the cases. We’ve talked about how we know when primitives are equal, but what does it mean for objects to be equal? This is another one of those surprisingly tricky topics, and for those of you who intend to take the OCP exam, you’ll spend a lot of time studying “object equality.” For you OCA candidates, all you have to know is that for a <code>switch</code> statement, two <code>String</code>s will be considered “equal” if they have the same case-sensitive sequence of characters. For example, in the following partial <code>switch</code> statement, the expression would match the case:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0281-01.jpg" alt="images" width="283" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0281-01.jpg"></p>
<p class="noindentt">But the following would NOT match:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0281-02.jpg" alt="images" width="610" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0281-02.jpg"></p>
<h4 class="h4a">Break and Fall-Through in switch Blocks</h4>
<p class="noindent">We’re finally ready to discuss the <code>break</code> statement and offer more details about flow control within a <code>switch</code> statement. The most important thing to remember about the flow of execution through a <code>switch</code> statement is this:</p>
<p class="bqt"><code>case</code> constants are evaluated from the top down, and the first <code>case</code> constant that matches the <code>switch</code>’s expression is the execution <em>entry point</em>.</p>
<p class="noindentt">In other words, once a <code>case</code> constant is matched, the Java Virtual Machine (JVM) will execute the associated code block and ALL subsequent code blocks (barring a <code>break</code> statement), too! The following example uses a <code>String</code> in a <code>case</code> statement:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0281-03.jpg" alt="images" width="445" height="214" data-mfp-src="/library/view/oca-java-se/9781260011388/p0281-03.jpg"></p>
<p class="noindentt"><a id="page_282"></a>In this example <code>case “green”:</code> matched, so the JVM executed that code block and all subsequent code blocks to produce the output:</p>
<p class="code1"><code>green blue done</code></p>
<p class="indent">Again, when the program encounters the keyword <code>break</code> during the execution of a <code>switch</code> statement, execution will immediately move out of the <code>switch</code> block to the next statement after the <code>switch</code>. If <code>break</code> is omitted, the program just keeps executing the remaining <code>case</code> blocks until either a <code>break</code> is found or the <code>switch</code> statement ends. Examine the following code:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0282-01.jpg" alt="images" width="416" height="133" data-mfp-src="/library/view/oca-java-se/9781260011388/p0282-01.jpg"></p>
<p class="noindentt">The code will print the following:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0282-02.jpg" alt="images" width="162" height="70" data-mfp-src="/library/view/oca-java-se/9781260011388/p0282-02.jpg"></p>
<p class="indent">This combination occurs because the code didn’t hit a <code>break</code> statement; execution just kept dropping down through each <code>case</code> until the end. This dropping down is actually called “fall-through,” because of the way execution falls from one <code>case</code> to the next. Remember, the matching <code>case</code> is simply your entry point into the <code>switch</code> block! In other words, you must <em>not</em> think of it as, “Find the matching <code>case</code>, execute just that code, and get out.” That’s <em>not</em> how it works. If you do want that “just the matching code” behavior, you’ll insert a <code>break</code> into each <code>case</code> as follows:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0282-03.jpg" alt="images" width="406" height="252" data-mfp-src="/library/view/oca-java-se/9781260011388/p0282-03.jpg"></p>
<p class="noindentt"><a id="page_283"></a>Running the preceding code, now that we’ve added the <code>break</code> statements, prints:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0283-01.jpg" alt="images" width="162" height="30" data-mfp-src="/library/view/oca-java-se/9781260011388/p0283-01.jpg"></p>
<p class="noindentt">And that’s it. We entered into the <code>switch</code> block at <code>case 1</code>. Because it matched the <code>switch()</code> argument, we got the <code>println</code> statement and then hit the <code>break</code> and jumped to the end of the <code>switch</code>.</p>
<p class="indent">An interesting example of this fall-through logic is shown in the following code:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0283-02.jpg" alt="images" width="511" height="173" data-mfp-src="/library/view/oca-java-se/9781260011388/p0283-02.jpg"></p>
<p class="noindentt">This <code>switch</code> statement will print <code>x is an even number</code> or nothing, depending on whether the number is between one and ten and is odd or even. For example, if <code>x</code> is 4, execution will begin at <code>case 4</code>, but then fall down through <code>6</code>, <code>8</code>, and <code>10</code>, where it prints and then breaks. The <code>break</code> at <code>case 10</code>, by the way, is not needed; we’re already at the end of the <code>switch</code> anyway.</p>
<p class="indent">Note: Because fall-through is less than intuitive, Oracle recommends that you add a comment such as <code>// fall through</code> when you use fall-through logic.</p>
<h4 class="h4a">The Default Case</h4>
<p class="noindent">What if, using the preceding code, you wanted to print <code>x is an odd number</code> if none of the <code>case</code>s (the even numbers) matched? You couldn’t put it after the <code>switch</code> statement, or even as the last <code>case</code> in the <code>switch</code>, because in both of those situations it would always print <code>x is an odd number</code>. To get this behavior, you’d use the <code>default</code> keyword. (By the way, if you’ve wondered why there is a <code>default</code> keyword even though we don’t use a modifier for default access control, now you’ll see that the <code>default</code> keyword is used for a completely different purpose.) The only change we need to make is to add the <code>default</code> case to the preceding code:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0283-03.jpg" alt="images" width="512" height="173" data-mfp-src="/library/view/oca-java-se/9781260011388/p0283-03.jpg"></p>
<div class="side-exam">
<p class="imaget"><a id="page_284"></a><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>The <code>default case</code> doesn’t have to come at the end of the <code>switch.</code> Look for it in strange places such as the following:</em></strong></p>
<p class="codea"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0284-01.jpg" alt="images" width="387" height="133" data-mfp-src="/library/view/oca-java-se/9781260011388/p0284-01.jpg"></p>
<p class="noindent"><strong><em>Running the preceding code prints this:</em></strong></p>
<p class="codea"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0284-02.jpg" alt="images" width="59" height="62" data-mfp-src="/library/view/oca-java-se/9781260011388/p0284-02.jpg"></p>
<p class="noindent"><strong><em>And if we modify it so the only match is the <code>default case,</code> like this,</em></strong></p>
<p class="codea"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0284-03.jpg" alt="images" width="387" height="133" data-mfp-src="/library/view/oca-java-se/9781260011388/p0284-03.jpg"></p>
<p class="noindent"><strong><em>then running the preceding code prints this:</em></strong></p>
<p class="codea"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0284-04.jpg" alt="images" width="59" height="45" data-mfp-src="/library/view/oca-java-se/9781260011388/p0284-04.jpg"></p>
<p class="noindent"><strong><em>The rule to remember is that <code>default</code> works just like any other <code>case</code> for fall-through!</em></strong></p>
</div>
<h3 class="h3a1"><a id="ch05lev2sec3"></a><a id="page_285"></a>EXERCISE 5-1</h3>
<p class="line"></p>
<h3 class="h3s">Creating a switch-case Statement</h3>
<p class="noindent">Try creating a <code>switch</code> statement using a <code>char</code> value as the <code>case</code>. Include a default behavior if none of the <code>char</code> values match.</p>
<p class="bulletxt"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Make sure a <code>char</code> variable is declared before the <code>switch</code> statement.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Each <code>case</code> statement should be followed by a <code>break</code>.</p>
<p class="bulletxb"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The <code>default case</code> can be located at the end, middle, or top.</p>
<hr class="hr">
<h3 class="h3a">CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch05lev1sec2"></a>Creating Loops Constructs (OCA Objectives 5.1, 5.2, 5.3, 5.4, and 5.5)</h3>
<p class="noindentn"><em>5.1&nbsp;&nbsp;&nbsp;Create and use while loops.</em></p>
<p class="noindentn"><em>5.2&nbsp;&nbsp;&nbsp;Create and use for loops including the enhanced for loop.</em></p>
<p class="noindentn"><em>5.3&nbsp;&nbsp;&nbsp;Create and use do/while loops.</em></p>
<p class="noindentn"><em>5.4&nbsp;&nbsp;&nbsp;Compare loop constructs.</em></p>
<p class="noindentn"><em>5.5&nbsp;&nbsp;&nbsp;Use break and continue.</em></p>
<p class="indentt">Java loops come in three flavors: <code>while</code>, <code>do</code>, and <code>for</code> (and as of Java 5, the <code>for</code> loop has two variations). All three let you repeat a block of code as long as some condition is true or for a specific number of iterations. You’re probably familiar with loops from other languages, so even if you’re somewhat new to Java, these won’t be a problem to learn.</p>
<h4 class="h4"><a id="ch05lev2sec4"></a>Using while Loops</h4>
<p class="noindent">The <code>while</code> loop is good when you don’t know how many times a block or statement should repeat but you want to continue looping as long as some condition is true. A <code>while</code> statement looks like this:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0285-01.jpg" alt="images" width="188" height="55" data-mfp-src="/library/view/oca-java-se/9781260011388/p0285-01.jpg"></p>
<p class="noindentt"><a id="page_286"></a>Or this:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0286-01.jpg" alt="images" width="226" height="93" data-mfp-src="/library/view/oca-java-se/9781260011388/p0286-01.jpg"></p>
<p class="indent">In this case, as in all loops, the expression (test) must evaluate to a <code>boolean</code> result. The body of the <code>while</code> loop will execute only if the expression (sometimes called the “condition”) results in a value of <code>true</code>. Once inside the loop, the loop body will repeat until the condition is no longer met because it evaluates to <code>false</code>. In the previous example, program control will enter the loop body because <code>x</code> is equal to 2. However, <code>x</code> is incremented in the loop, so when the condition is checked again it will evaluate to <code>false</code> and exit the loop.</p>
<p class="indent">Any variables used in the expression of a <code>while</code> loop must be declared before the expression is evaluated. In other words, you can’t say this:</p>
<p class="code1"><code>while (int x = 2) { } // not legal</code></p>
<p class="noindent">Then again, why would you? Instead of testing the variable, you’d be declaring and initializing it, so it would always have the exact same value. Not much of a test condition!</p>
<p class="indent">The key point to remember about a <code>while</code> loop is that it might not ever run. If the test expression is <code>false</code> the first time the <code>while</code> expression is checked, the loop body will be skipped and the program will begin executing at the first statement <em>after</em> the <code>while</code> loop. Look at the following example:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0286-02.jpg" alt="images" width="340" height="113" data-mfp-src="/library/view/oca-java-se/9781260011388/p0286-02.jpg"></p>
<p class="noindentt">Running this code produces</p>
<p class="code1"><code>past the loop</code></p>
<p class="noindent">Because the expression <code>(x &gt; 8)</code> evaluates to <code>false</code>, none of the code within the <code>while</code> loop ever executes.</p>
<h4 class="h4"><a id="ch05lev2sec5"></a><a id="page_287"></a>Using do Loops</h4>
<p class="noindent">The <code>do</code> loop is similar to the <code>while</code> loop, except the expression is not evaluated until after the <code>do</code> loop’s code is executed. Therefore, the code in a <code>do</code> loop is guaranteed to execute at least once. The following shows a <code>do</code> loop in action:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0287-01.jpg" alt="images" width="340" height="55" data-mfp-src="/library/view/oca-java-se/9781260011388/p0287-01.jpg"></p>
<p class="noindentt">The <code>System.out.println()</code> statement will print once, even though the expression evaluates to <code>false</code>. Remember, the <code>do</code> loop will always run the code in the loop body at least once. Be sure to note the use of the semicolon at the end of the <code>while</code> expression.</p>
<div class="side-exam">
<p class="imaget"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>As with if tests, look for <code>while</code> loops (and the <code>while</code> test in a <code>do</code> loop) with an expression that does not resolve to a <code>boolean</code>. Take a look at the following examples of legal and illegal <code>while</code> expressions:</em></strong></p>
<p class="codea"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0287-02.jpg" alt="images" width="543" height="114" data-mfp-src="/library/view/oca-java-se/9781260011388/p0287-02.jpg"></p>
</div>
<h4 class="h4"><a id="ch05lev2sec6"></a>Using for Loops</h4>
<p class="noindent">As of Java 5, the <code>for</code> loop took on a second structure. We’ll call the old style of <code>for</code> loop the “basic <code>for</code> loop,” and we’ll call the new style of <code>for</code> loop the “enhanced <code>for</code> loop” (it’s also sometimes called the <code>for-each</code>). Depending on what documentation you use, you’ll see both terms, along with <code>for-in</code>. The terms <code>for-in</code>, <code>for-each</code>, and “enhanced <code>for</code>” all refer to the same Java construct.</p>
<p class="indent">The basic <code>for</code> loop is more flexible than the enhanced <code>for</code> loop, but the enhanced <code>for</code> loop was designed to make iterating through arrays and collections easier to code.</p>
<h4 class="h4a"><a id="page_288"></a>The Basic for Loop</h4>
<p class="noindent">The <code>for</code> loop is especially useful for flow control when you already know how many times you need to execute the statements in the loop’s block. The <code>for</code> loop declaration has three main parts besides the body of the loop:</p>
<p class="bulletxt"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Declaration and initialization of variables</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The <code>boolean</code> expression (conditional test)</p>
<p class="bulletxb"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The iteration expression</p>
<p class="indent">The three <code>for</code> declaration parts are separated by semicolons. The following two examples demonstrate the <code>for</code> loop. The first example shows the parts of a <code>for</code> loop in a pseudocode form, and the second shows a typical example of a <code>for</code> loop:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0288-01.jpg" alt="images" width="578" height="135" data-mfp-src="/library/view/oca-java-se/9781260011388/p0288-01.jpg"></p>
<h4 class="h4a">The Basic for Loop: Declaration and Initialization</h4>
<p class="noindent">The first part of the <code>for</code> statement lets you declare and initialize zero, one, or multiple variables of the same type inside the parentheses after the <code>for</code> keyword. If you declare more than one variable of the same type, you’ll need to separate them with commas as follows:</p>
<p class="code1"><code>for (int x = 10, y = 3; y &gt; 3; y++) { }</code></p>
<p class="noindent">The declaration and initialization happen before anything else in a <code>for</code> loop. And whereas the other two parts—the <code>boolean</code> test and the iteration expression—will run with each iteration of the loop, the declaration and initialization happen just once, at the very beginning. You also must know that the scope of variables declared in the <code>for</code> loop ends with the <code>for</code> loop! The following demonstrates this:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0288-02.jpg" alt="images" width="581" height="94" data-mfp-src="/library/view/oca-java-se/9781260011388/p0288-02.jpg"></p>
<p class="noindentt"><a id="page_289"></a>If you try to compile this, you’ll get something like this:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0289-01.jpg" alt="images" width="332" height="82" data-mfp-src="/library/view/oca-java-se/9781260011388/p0289-01.jpg"></p>
<h4 class="h4a">Basic for Loop: Conditional (boolean) Expression</h4>
<p class="noindent">The next section that executes is the conditional expression, which (like all other conditional tests) must evaluate to a <code>boolean</code> value. You can have only one logical expression, but it can be very complex. Look out for code that uses logical expressions like this:</p>
<p class="code1"><code>for (int x = 0; ((((x &lt; 10) &amp;&amp; (y-- &gt; 2)) | x == 3)); x++) { }</code></p>
<p class="noindent">The preceding code is legal, but the following is not:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0289-02.jpg" alt="images" width="542" height="35" data-mfp-src="/library/view/oca-java-se/9781260011388/p0289-02.jpg"></p>
<p class="noindentt">The compiler will let you know the problem:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0289-03.jpg" alt="images" width="398" height="42" data-mfp-src="/library/view/oca-java-se/9781260011388/p0289-03.jpg"></p>
<p class="indent">The rule to remember is this: <em>You can have only one test expression.</em></p>
<p class="indent">In other words, you can’t use multiple tests separated by commas, even though, the other two parts of a <code>for</code> statement can have multiple parts.</p>
<h4 class="h4a">Basic for Loop: Iteration Expression</h4>
<p class="noindent">After each execution of the body of the <code>for</code> loop, the iteration expression is executed. This is where you get to say what you want to happen with each iteration of the loop. Remember that it always happens after the loop body runs! Look at the following:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0289-04.jpg" alt="images" width="466" height="55" data-mfp-src="/library/view/oca-java-se/9781260011388/p0289-04.jpg"></p>
<p class="noindentt">This loop executes just once. The first time into the loop, <code>x</code> is set to 0, then <code>x</code> is tested to see if it’s less than 1 (which it is), and then the body of the loop executes. <a id="page_290"></a>After the body of the loop runs, the iteration expression runs, incrementing <code>x</code> by 1. Next, the conditional test is checked, and since the result is now <code>false</code>, execution jumps to below the <code>for</code> loop and continues.</p>
<p class="indent"><strong>Keep in mind that barring a forced exit, evaluating the iteration expression and then evaluating the conditional expression are always the last two things that happen in a <code>for</code> loop!</strong></p>
<p class="indent">Examples of forced exits include a <code>break</code>, a return, a <code>System.exit()</code>, and an exception, which will all cause a loop to terminate abruptly, without running the iteration expression. Look at the following code:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0290-01.jpg" alt="images" width="358" height="135" data-mfp-src="/library/view/oca-java-se/9781260011388/p0290-01.jpg"></p>
<p class="noindent">Running this code produces</p>
<p class="code1"><code>in for loop</code></p>
<p class="indent">The statement prints only once because a <code>return</code> causes execution to leave not just the current iteration of a loop, but the entire method. So the iteration expression never runs in that case. <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ch5tab1">Table 5-1</a> lists the causes and results of abrupt loop termination.</p>
<p class="tabcap"><span class="figs"><strong>TABLE 5-1</strong></span>&nbsp;&nbsp;&nbsp;Causes of Early Loop Termination</p>
<p class="image-t"><a id="ch5tab1"></a><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/t0290-01.jpg" alt="images" width="753" height="161" data-mfp-src="/library/view/oca-java-se/9781260011388/t0290-01.jpg"></p>
<h4 class="h4a">Basic for Loop: for Loop Issues</h4>
<p class="noindent">None of the three sections of the <code>for</code> declaration are required! The following example is perfectly legal (although not necessarily good practice):</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0290-02.jpg" alt="images" width="444" height="55" data-mfp-src="/library/view/oca-java-se/9781260011388/p0290-02.jpg"></p>
<p class="noindentt"><a id="page_291"></a>In this example, all the declaration parts are left out, so the <code>for</code> loop will act like an endless loop.</p>
<p class="indent">For the exam, it’s important to know that with the absence of the initialization and increment sections, the loop will act like a <code>while</code> loop. The following example demonstrates how this is accomplished:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0291-01.jpg" alt="images" width="218" height="113" data-mfp-src="/library/view/oca-java-se/9781260011388/p0291-01.jpg"></p>
<p class="noindentt">The next example demonstrates a <code>for</code> loop with multiple variables in play. A comma separates the variables, and they must be of the same type. Remember that the variables declared in the <code>for</code> statement are all local to the <code>for</code> loop and can’t be used outside the scope of the loop.</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0291-02.jpg" alt="images" width="483" height="55" data-mfp-src="/library/view/oca-java-se/9781260011388/p0291-02.jpg"></p>
<div class="side-exam">
<p class="imaget"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>Variable scope plays a large role in the exam. You need to know that a variable declared in the <code>for</code> loop can’t be used beyond the <code>for</code> loop. But a variable only initialized in the <code>for</code> statement (but declared earlier) can be used beyond the loop. For example, the following is legal:</em></strong></p>
<p class="codea"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0291-03.jpg" alt="images" width="274" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0291-03.jpg"></p>
<p class="noindent"><strong><em>But this is not:</em></strong></p>
<p class="codea"><code>for (int x = 3; x &lt; 20; x++) { } System.out.println(x);</code></p>
</div>
<p class="indent">The last thing to note is that all three sections of the <code>for</code> loop are independent of each other. The three expressions in the <code>for</code> statement don’t need to operate on the same variables, although they typically do. But even the iterator expression, which many mistakenly call the “increment expression,” doesn’t need to increment <a id="page_292"></a>or set anything; you can put in virtually any arbitrary code statements that you want to happen with each iteration of the loop. Look at the following:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0292-01.jpg" alt="images" width="540" height="73" data-mfp-src="/library/view/oca-java-se/9781260011388/p0292-01.jpg"></p>
<p class="noindentt">The preceding code prints</p>
<p class="code1"><code>iterate<br>iterate</code></p>
<div class="side-exam">
<p class="imaget"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>Many questions in the Java 8 exams list "Compilation fails" and "An exception occurs at runtime" as possible answers, making them more difficult because you can’t simply work through the behavior of the code. You must first make sure the code isn’t violating any fundamental rules that will lead to a compiler error and then look for possible exceptions. Only after you’ve satisfied those two should you dig into the logic and flow of the code in the question.</em></strong></p>
</div>
<h4 class="h4a">The Enhanced for Loop (for Arrays)</h4>
<p class="noindent">The enhanced <code>for</code> loop, new as of Java 5, is a specialized <code>for</code> loop that simplifies looping through an array or a collection. In this chapter we’re going to focus on using the enhanced <code>for</code> to loop through arrays. In <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html">Chapter 6</a> we’ll revisit the enhanced <code>for</code>, when we discuss the ArrayList collection class—where the enhanced <code>for</code> really comes into its own.</p>
<p class="indent">Instead of having <em>three</em> components, the enhanced <code>for</code> has <em>two</em>. Let’s loop through an array the basic (old) way and then using the enhanced <code>for</code>:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0292-02.jpg" alt="images" width="533" height="94" data-mfp-src="/library/view/oca-java-se/9781260011388/p0292-02.jpg"></p>
<p class="noindentt">This produces the following output:</p>
<p class="code1"><code>12341234</code></p>
<p class="noindent"><a id="page_293"></a>More formally, let’s describe the enhanced <code>for</code> as follows:</p>
<p class="code1"><code>for(declaration : expression)</code></p>
<p class="noindentt">The two pieces of the <code>for</code> statement are</p>
<p class="bulletxt"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code><strong>d</strong><strong>eclaration</strong></code> The <em>newly declared</em> block variable of a type compatible with the elements of the array you are accessing. This variable will be available within the <code>for</code> block, and its value will be the same as the current array element.</p>
<p class="bulletxb"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code><strong>e</strong><strong>xpression</strong></code> This must evaluate to the array you want to loop through. This could be an array variable or a method call that returns an array. The array can be any type: primitives, objects, or even arrays of arrays.</p>
<p class="indent">Using the preceding definitions, let’s look at some legal and illegal enhanced <code>for</code> declarations:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0293-01.jpg" alt="images" width="591" height="430" data-mfp-src="/library/view/oca-java-se/9781260011388/p0293-01.jpg"></p>
<p class="noindent">The enhanced <code>for</code> loop assumes that, barring an early exit from the loop, you’ll always loop through every element of the array. The following discussions of <code>break</code> and <code>continue</code> apply to both the basic and enhanced <code>for</code> loops.</p>
<h4 class="h4"><a id="ch05lev2sec7"></a><a id="page_294"></a>Using break and continue</h4>
<p class="noindent">The <code>break</code> and <code>continue</code> keywords are used to stop either the entire loop (<code>break</code>) or just the current iteration (<code>continue</code>). Typically, if you’re using <code>break</code> or <code>continue</code>, you’ll do an <code>if</code> test within the loop, and if some condition becomes <code>true</code> (or <code>false</code> depending on the program), you want to get out immediately. The difference between them is whether or not you continue with a new iteration or jump to the first statement below the loop and continue from there.</p>
<div class="side-exam">
<p class="imaget"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>Remember, <code>continue</code> statements must be inside a loop; otherwise, you’ll get a compiler error. <code>break</code> statements must be used inside either a loop or a <code>switch</code> statement.</em></strong></p>
</div>
<p class="indent">The <code>break</code> statement causes the program to stop execution of the innermost loop and start processing the next line of code after the block.</p>
<p class="indent">The <code>continue</code> statement causes only the current iteration of the innermost loop to cease and the next iteration of the same loop to start if the condition of the loop is met. When using a <code>continue</code> statement with a <code>for</code> loop, you need to consider the effects that <code>continue</code> has on the loop iteration. Examine the following code:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0294-01.jpg" alt="images" width="339" height="75" data-mfp-src="/library/view/oca-java-se/9781260011388/p0294-01.jpg"></p>
<p class="noindentt">The question is, is this an endless loop? The answer is no. When the <code>continue</code> statement is hit, the iteration expression still runs! It runs just as though the current iteration ended “in the natural way.” So in the preceding example, <code>i</code> will still increment before the condition <code>(i &lt; 10)</code> is checked again.</p>
<p class="indent">Most of the time, a <code>continue</code> is used within an <code>if</code> test as follows:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0294-02.jpg" alt="images" width="570" height="155" data-mfp-src="/library/view/oca-java-se/9781260011388/p0294-02.jpg"></p>
<h4 class="h4"><a id="ch05lev2sec8"></a><a id="page_295"></a>Unlabeled Statements</h4>
<p class="noindent">Both the <code>break</code> statement and the <code>continue</code> statement can be unlabeled or labeled. Although it’s far more common to use <code>break</code> and <code>continue</code> unlabeled, the exam expects you to know how labeled <code>break</code> and <code>continue</code> statements work. As stated before, a <code>break</code> statement (unlabeled) will exit out of the innermost looping construct and proceed with the next line of code beyond the loop block. The following example demonstrates a <code>break</code> statement:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0295-01.jpg" alt="images" width="436" height="151" data-mfp-src="/library/view/oca-java-se/9781260011388/p0295-01.jpg"></p>
<p class="indent">In the previous example, the <code>break</code> statement is unlabeled. The following is an example of an unlabeled <code>continue</code> statement:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0295-02.jpg" alt="images" width="611" height="135" data-mfp-src="/library/view/oca-java-se/9781260011388/p0295-02.jpg"></p>
<p class="indent">In this example, a file is being read one field at a time. When an error is encountered, the program moves to the next field in the file and uses the <code>continue</code> statement to go back into the loop (if it is not at the end of the file) and keeps reading the various fields. If the <code>break</code> command were used instead, the code would stop reading the file once the error occurred and move on to the next line of code after the loop. The <code>continue</code> statement gives you a way to say, “This particular iteration of the loop needs to stop, but not the whole loop itself. I just don’t want the rest of the code in this iteration to finish, so do the iteration expression and then start over with the test, and don’t worry about what was below the <code>continue</code> statement.”</p>
<h4 class="h4"><a id="ch05lev2sec9"></a>Labeled Statements</h4>
<p class="noindent">Although many statements in a Java program can be labeled, it’s most common to use labels with loop statements like <code>for</code> or <code>while</code>, in conjunction with <code>break</code> and <code>continue</code> statements. A label statement must be placed just before the statement being labeled, and it consists of a valid identifier that ends with a colon (<code>:</code>).</p>
<p class="indent"><a id="page_296"></a>You need to understand the difference between labeled and unlabeled <code>break</code> and <code>continue</code>. The labeled varieties are needed only in situations where you have a nested loop, and they need to indicate which of the nested loops you want to break from, or from which of the nested loops you want to continue with the next iteration. A <code>break</code> statement will exit out of the labeled loop, as opposed to the innermost loop, if the <code>break</code> keyword is combined with a label.</p>
<p class="indent">Here’s an example of what a label looks like:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0296-01.jpg" alt="images" width="302" height="113" data-mfp-src="/library/view/oca-java-se/9781260011388/p0296-01.jpg"></p>
<p class="indent">The label must adhere to the rules for a valid variable name and should adhere to the Java naming convention. The syntax for the use of a label name in conjunction with a <code>break</code> statement is the <code>break</code> keyword, then the label name, followed by a semicolon. A more complete example of the use of a labeled <code>break</code> statement is as follows:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0296-02.jpg" alt="images" width="504" height="192" data-mfp-src="/library/view/oca-java-se/9781260011388/p0296-02.jpg"></p>
<p class="indent">Running this code produces</p>
<p class="code1"><code>Hello<br>Good-Bye</code></p>
<p class="noindent">In this example, the word <code>Hello</code> will be printed one time. Then, the labeled <code>break</code> statement will be executed, and the flow will exit out of the loop labeled <code>outer</code>. The next line of code will then print <code>Good-Bye</code>.</p>
<p class="indent">Let’s see what will happen if the <code>continue</code> statement is used instead of the <code>break</code> statement. The following code example is similar to the preceding one, with the exception of substituting <code>continue</code> for <code>break</code>:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0296-03.jpg" alt="images" width="273" height="52" data-mfp-src="/library/view/oca-java-se/9781260011388/p0296-03.jpg"></p>
<p class="coden"><a id="page_297"></a><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0297-01.jpg" alt="images" width="456" height="113" data-mfp-src="/library/view/oca-java-se/9781260011388/p0297-01.jpg"></p>
<p class="indent">Running this code produces</p>
<p class="code1"><code>Hello<br>Hello<br>Hello<br>Hello<br>Hello<br>Good-Bye</code></p>
<p class="noindent">In this example, <code>Hello</code> will be printed five times. After the <code>continue</code> statement is executed, the flow continues with the next iteration of the loop identified with the label. Finally, when the condition in the outer loop evaluates to <code>false</code>, this loop will finish and <code>Good-Bye</code> will be printed.</p>
<h3 class="h3a1"><a id="ch05lev2sec10"></a>EXERCISE 5-2</h3>
<p class="line"></p>
<h3 class="h3s">Creating a Labeled while Loop</h3>
<p class="noindentt">Try creating a labeled <code>while</code> loop. Make the label <code>outer</code> and provide a condition to check whether a variable <code>age</code> is less than or equal to 21. Within the loop, increment <code>age</code> by 1. Every time the program goes through the loop, check whether <code>age</code> is 16. If it is, print the message “get your driver’s license” and continue to the outer loop. If not, print “Another year.”</p>
<p class="bulletxt"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The <code>outer</code> label should appear just before the <code>while</code> loop begins.</p>
<p class="bulletxb"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Make sure <code>age</code> is declared outside of the <code>while</code> loop.</p>
<hr class="hr">
<div class="side-exam">
<p class="imaget"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>Labeled <code>continue</code> and <code>break</code> statements must be inside the loop that has the same label name; otherwise, the code will not compile.</em></strong></p>
</div>
<h3 class="h3a"><a id="page_298"></a>CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch05lev1sec3"></a>Handling Exceptions (OCA Objectives 8.1, 8.2, 8.3, 8.4, and 8.5)</h3>
<p class="noindentn"><em>8.1&nbsp;&nbsp;&nbsp;Differentiate among checked exceptions, unchecked exceptions, and errors.</em></p>
<p class="noindentn"><em>8.2&nbsp;&nbsp;&nbsp;Create a try-catch block and determine how exceptions alter normal program flow.</em></p>
<p class="noindentn"><em>8.3&nbsp;&nbsp;&nbsp;Describe the advantages of Exception handling.</em></p>
<p class="noindentn"><em>8.4&nbsp;&nbsp;&nbsp;Create and invoke a method that throws an exception.</em></p>
<p class="noindentn"><em>8.5&nbsp;&nbsp;&nbsp;Recognize common exception classes (such as NullPointerException, ArithmeticException, ArrayIndexOutOfBoundsException, ClassCastException) (sic)</em></p>
<p class="indentt">An old maxim in software development says that 80 percent of the work is used 20 percent of the time. The 80 percent refers to the effort required to check and handle errors. In many languages, writing program code that checks for and deals with errors is tedious and bloats the application source into confusing spaghetti. Still, error detection and handling may be the most important ingredient of any robust application. Here are some of the benefits of Java’s exception-handling features:</p>
<p class="bulletxt"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;It arms developers with an elegant mechanism for handling errors that produces efficient and organized error-handling code.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;It allows developers to detect errors easily without writing special code to test return values.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;It lets us keep exception-<em>handling</em> code cleanly separated from exception-<em>generating</em> code.</p>
<p class="bulletxb"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;It also lets us use the same exception-handling code to deal with a range of possible exceptions.</p>
<p class="indent">Java 7 added several new exception-handling capabilities to the language. For our purposes, Oracle split the various exception-handling topics into two main parts:</p>
<p class="numst">1.&nbsp;&nbsp;&nbsp;The OCA exam covers the Java 6 version of exception handling.</p>
<p class="numsb">2.&nbsp;&nbsp;&nbsp;The OCP exam adds the new exception features added in Java 7.</p>
<p class="indent"><a id="page_299"></a>In order to mirror Oracle’s OCA 8 objectives versus the OCP 8 objectives, this chapter will give you only the basics of exception handling—but plenty to handle the OCA 8 exam.</p>
<h4 class="h4"><a id="ch05lev2sec11"></a>Catching an Exception Using try and catch</h4>
<p class="noindent">Before we begin, let’s introduce some terminology. The term <em>exception</em> means “exceptional condition” and is an occurrence that alters the normal program flow. A&nbsp;bunch of things can lead to exceptions, including hardware failures, resource exhaustion, and good old bugs. When an exceptional event occurs in Java, an exception is said to be “thrown.” The code that’s responsible for doing something about the exception is called an “exception handler,” and it “catches” the thrown exception.</p>
<p class="indent">Exception handling works by transferring the execution of a program to an appropriate exception handler when an exception occurs. For example, if you call a method that opens a file but the file cannot be opened, execution of that method will stop, and code that you wrote to deal with this situation will be run. Therefore, we need a way to tell the JVM what code to execute when a certain exception happens. To do this, we use the <code>try</code> and <code>catch</code> keywords. The <code>try</code> is used to define a block of code in which exceptions may occur. This block of code is called a “guarded region” (which really means “risky code goes here”). One or more <code>catch</code> clauses match a specific exception (or group of exceptions—more on that later) to a block of code that handles it. Here’s how it looks in pseudocode:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0299-01.jpg" alt="images" width="627" height="313" data-mfp-src="/library/view/oca-java-se/9781260011388/p0299-01.jpg"></p>
<p class="noindentt">In this pseudocode example, lines 2 through 5 constitute the guarded region that is governed by the <code>try</code> clause. Line 7 is an exception handler for an exception of <a id="page_300"></a>type <code>MyFirstException</code>. Line 12 is an exception handler for an exception of type <code>MySecondException</code>. Notice that the <code>catch</code> blocks immediately follow the <code>try</code> block. This is a requirement; if you have one or more <code>catch</code> blocks, they must immediately follow the <code>try</code> block. Additionally, the <code>catch</code> blocks must all follow each other, without any other statements or blocks in between. Also, the order in which the <code>catch</code> blocks appear matters, as we’ll see a little later.</p>
<p class="indent">Execution of the guarded region starts at line 2. If the program executes all the way past line 5 with no exceptions being thrown, execution will transfer to line 15 and continue downward. However, if at any time in lines 2 through 5 (the <code>try</code> block) an exception of type <code>MyFirstException</code> is thrown, execution will immediately transfer to line 7. Lines 8 through 10 will then be executed so that the entire <code>catch</code> block runs, and then execution will transfer to line 15 and continue.</p>
<p class="indent">Note that if an exception occurred on, say, line 3 of the <code>try</code> block, the remaining lines in the <code>try</code> block (4 and 5) would never be executed. Once control jumps to the <code>catch</code> block, it never returns to complete the balance of the <code>try</code> block. This is exactly what you want, though. Imagine that your code looks something like this pseudocode:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0300-01.jpg" alt="images" width="314" height="135" data-mfp-src="/library/view/oca-java-se/9781260011388/p0300-01.jpg"></p>
<p class="noindent">This pseudocode demonstrates how you typically work with exceptions. Code that’s dependent on a risky operation (as populating a table with file data is dependent on getting the file from the network) is grouped into a <code>try</code> block in such a way that if, say, the first operation fails, you won’t continue trying to run other code that’s also guaranteed to fail. In the pseudocode example, you won’t be able to read from the file if you can’t get the file off the network in the first place.</p>
<p class="indent"><strong>One of the benefits of using exception handling is that code to handle any particular exception that may occur in the governed region needs to be written only once.</strong> Returning to our earlier code example, there may be three different places in our <code>try</code> block that can generate a <code>MyFirstException</code>, but wherever it occurs it will be handled by the same <code>catch</code> block (on line 7). We’ll discuss more benefits of exception handling near the end of this chapter.</p>
<h4 class="h4"><a id="ch05lev2sec12"></a><a id="page_301"></a>Using finally</h4>
<p class="noindent">Although <code>try</code> and <code>catch</code> provide a terrific mechanism for trapping and handling exceptions, we are left with the problem of how to clean up after ourselves if an&nbsp;exception occurs. Because execution transfers out of the <code>try</code> block as soon as an exception is thrown, we can’t put our cleanup code at the bottom of the <code>try</code> block and expect it to be executed if an exception occurs. Almost as bad an idea would be placing our cleanup code in each of the <code>catch</code> blocks—let’s see why.</p>
<p class="indent">Exception handlers are a poor place to clean up after the code in the <code>try</code> block because each handler then requires its own copy of the cleanup code. If, for example, you allocated a network socket or opened a file somewhere in the guarded region, each exception handler would have to close the file or release the socket. That would make it too easy to forget to do cleanup and also lead to a lot of redundant code. To address this problem, Java offers the <code>finally</code> block.</p>
<p class="indent">A <code>finally</code> block encloses code that is always executed at some point after the <code>try</code> block, whether an exception was thrown or not. Even if there is a <code>return</code> statement in the <code>try</code> block, the <code>finally</code> block executes right after the <code>return</code> statement is encountered and before the <code>return</code> executes!</p>
<p class="indent">This is the right place to close your files, release your network sockets, and perform any other cleanup your code requires. If the <code>try</code> block executes with no exceptions, the <code>finally</code> block is executed immediately after the <code>try</code> block completes. If there was an exception thrown, the <code>finally</code> block executes immediately after the proper <code>catch</code> block completes. Let’s look at another pseudocode example:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0301-01.jpg" alt="images" width="530" height="293" data-mfp-src="/library/view/oca-java-se/9781260011388/p0301-01.jpg"></p>
<p class="indent"><a id="page_302"></a>As before, execution starts at the first line of the <code>try</code> block, line 2. If there are no exceptions thrown in the <code>try</code> block, execution transfers to line 11, the first line of the <code>finally</code> block. On the other hand, if a <code>MySecondException</code> is thrown while the code in the <code>try</code> block is executing, execution transfers to the first line of that exception handler, line 8 in the <code>catch</code> clause. After all the code in the <code>catch</code> clause is executed, the program moves to line 11, the first line of the <code>finally</code> clause. Repeat after me: <code>finally</code> always runs! Okay, we’ll have to refine that a little, but for now, start burning in the idea that <code>finally</code> always runs. If an exception is thrown, <code>finally</code> runs. If an exception is not thrown, <code>finally</code> runs. If the exception is caught, <code>finally</code> runs. If the exception is not caught, <code>finally</code> runs. Later we’ll look at the few scenarios in which <code>finally</code> might not run or complete.</p>
<p class="indent">Remember, <code>finally</code> clauses are not required. If you don’t write one, your code will compile and run just fine. In fact, if you have no resources to clean up after your <code>try</code> block completes, you probably don’t need a <code>finally</code> clause. Also, because the compiler doesn’t even require <code>catch</code> clauses, sometimes you’ll run across code that has a <code>try</code> block immediately followed by a <code>finally</code> block. Such code is useful when the exception is going to be passed back to the calling method, as explained in the next section. Using a <code>finally</code> block allows the cleanup code to execute even when there isn’t a <code>catch</code> clause.</p>
<p class="indent">The following legal code demonstrates a <code>try</code> with a <code>finally</code> but no <code>catch</code>:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0302-01a.jpg" alt="images" width="111" height="87" data-mfp-src="/library/view/oca-java-se/9781260011388/p0302-01a.jpg"></p>
<p class="indent">The following legal code demonstrates a <code>try</code>, <code>catch</code>, and <code>finally</code>:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0302-01.jpg" alt="images" width="264" height="135" data-mfp-src="/library/view/oca-java-se/9781260011388/p0302-01.jpg"></p>
<p class="indent">The following ILLEGAL code demonstrates a <code>try</code> without a <code>catch</code> or <code>finally</code>:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0302-02.jpg" alt="images" width="123" height="55" data-mfp-src="/library/view/oca-java-se/9781260011388/p0302-02.jpg"></p>
<p class="coden"><a id="page_303"></a><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0303-01.jpg" alt="images" width="368" height="34" data-mfp-src="/library/view/oca-java-se/9781260011388/p0303-01.jpg"></p>
<p class="indent">The following ILLEGAL code demonstrates a misplaced <code>catch</code> block:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0303-02.jpg" alt="images" width="368" height="115" data-mfp-src="/library/view/oca-java-se/9781260011388/p0303-02.jpg"></p>
<div class="side-exam">
<p class="imaget"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>It is illegal to use a <code>try</code> clause without either a <code>catch</code> clause or a <code>finally</code> clause. A <code>try</code> clause by itself will result in a compiler error. Any <code>catch</code> clauses must immediately follow the <code>try</code> block. Any <code>finally</code> clause must immediately follow the last <code>catch</code> clause (or it must immediately follow the <code>try</code> block if there is no <code>catch</code>). It is legal to omit either the <code>catch</code> clause or the <code>finally</code> clause, but not both.</em></strong></p>
</div>
<h4 class="h4"><a id="ch05lev2sec13"></a>Propagating Uncaught Exceptions</h4>
<p class="noindent">Why aren’t <code>catch</code> clauses required? What happens to an exception that’s thrown in a <code>try</code> block when there is no <code>catch</code> clause waiting for it? Actually, there’s no requirement that you code a <code>catch</code> clause for every possible exception that could be thrown from the corresponding <code>try</code> block. In fact, it’s doubtful that you could accomplish such a feat! If a method doesn’t provide a <code>catch</code> clause for a particular exception, that method is said to be “ducking” the exception (or “passing the buck”).</p>
<p class="indent">So what happens to a ducked exception? Before we discuss that, we need to briefly review the concept of the call stack. Most languages have the concept of a method stack or a call stack. Simply put, the call stack is the chain of methods that your program executes to get to the current method. If your program starts in method <code>main()</code> and <code>main()</code> calls method <code>a()</code>, which calls method <code>b()</code>, which in turn calls method <code>c()</code>, the call stack consists of the following:</p>
<p class="code1"><code>c<br>b<br>a<br>main</code></p>
<p class="indent">We will represent the stack as growing upward (although it can also be visualized as growing downward). As you can see, the last method called is at the <a id="page_304"></a>top of the stack, while the first calling method is at the bottom. The method at the very top of the stack trace would be the method you were currently executing. If we move back down the call stack, we’re moving from the current method to the previously called method. <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ch5fig1">Figure 5-1</a> illustrates a way to think about how the call stack in Java works.</p>
<p class="image-f"><a id="ch5fig1"></a><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0304-01.jpg" alt="images" width="1002" height="687" data-mfp-src="/library/view/oca-java-se/9781260011388/f0304-01.jpg"></p>
<p class="figcap"><span class="figs"><strong>FIGURE 5-1</strong></span>&nbsp;&nbsp;&nbsp;The Java method call stack</p>
<p class="indent">Now let’s examine what happens to ducked exceptions. Imagine a building, say, five stories high, and at each floor there is a deck or balcony. Now imagine that on each deck, one person is standing holding a baseball mitt. Exceptions are like balls dropped from person to person, starting from the roof. An exception is first thrown from the top of the stack (in other words, the person on the roof); and if it isn’t caught by the same person who threw it (the person on the roof), it drops down the call stack to the previous method, which is the person standing on the deck one floor down. If not caught there by the person one floor down, the exception/ball again drops down to the previous method (person on the next floor down), and so on, until it is caught or until it reaches the very bottom of the call stack. This is called “exception propagation.”</p>
<p class="indent">If an exception reaches the bottom of the call stack, it’s like reaching the bottom of a very long drop; the ball explodes, and so does your program. An exception that’s never caught will cause your application to stop running. A description (if one is available) of the exception will be displayed, and the call stack will be “dumped.” This helps you debug your application by telling you what exception was thrown, from what method it was thrown, and what the stack looked like at the time.</p>
<div class="side-exam">
<p class="imaget"><a id="page_305"></a><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>You can keep throwing an exception down through the methods on the stack. But what happens when you get to the <code>main()</code> method at the bottom? You can throw the exception out of <code>main()</code> as well. This results in the JVM halting, and the stack trace will be printed to the output. The following code throws an exception:</em></strong></p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0305-01.jpg" alt="images" width="523" height="234" data-mfp-src="/library/view/oca-java-se/9781260011388/p0305-01.jpg"></p>
<p class="noindent"><strong><em>It prints out a stack trace something like this:</em></strong></p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0305-02.jpg" alt="images" width="638" height="93" data-mfp-src="/library/view/oca-java-se/9781260011388/p0305-02.jpg"></p>
</div>
<h3 class="h3a1"><a id="ch05lev2sec14"></a>EXERCISE 5-3</h3>
<p class="line"></p>
<h3 class="h3s">Propagating and Catching an Exception</h3>
<p class="noindent">In this exercise, you’re going to create two methods that deal with exceptions. One of the methods is the <code>main()</code> method, which will call another method. If an exception is thrown in the other method, <code>main()</code> must deal with it. A <code>finally</code> statement will be included to indicate that the program has completed. The method that <code>main()</code> will call will be named <code>reverse</code>, and it will reverse the order of the characters in a <code>String</code>. If the <code>String</code> contains no characters, <code>reverse</code> will propagate an exception up to the <code>main()</code> method.</p>
<p class="numst"><a id="page_306"></a>1.&nbsp;&nbsp;&nbsp;Create a class called <code>Propagate</code> and a <code>main()</code> method, which will remain empty for now.</p>
<p class="nums">2.&nbsp;&nbsp;&nbsp;Create a method called <code>reverse</code>. It takes an argument of a <code>String</code> and returns a <code>String</code>.</p>
<p class="nums">3.&nbsp;&nbsp;&nbsp;In <code>reverse</code>, check whether the <code>String</code> has a length of 0 by using the <code>String.length()</code> method. If the length is 0, the <code>reverse</code> method will throw an exception.</p>
<p class="nums">4.&nbsp;&nbsp;&nbsp;Now include the code to reverse the order of the <code>String</code>. Because this isn’t the main topic of this chapter, the reversal code has been provided, but feel free to try it on your own.</p>
<p class="code-n"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0306-01.jpg" alt="images" width="321" height="92" data-mfp-src="/library/view/oca-java-se/9781260011388/p0306-01.jpg"></p>
<p class="numsb">5.&nbsp;&nbsp;&nbsp;Now in the <code>main()</code> method you will attempt to call this method and deal with any potential exceptions. Additionally, you will include a <code>finally</code> statement that displays when <code>main()</code> has finished.</p>
<hr class="hr">
<h4 class="h4"><a id="ch05lev2sec15"></a>Defining Exceptions</h4>
<p class="noindent">We have been discussing exceptions as a concept. We know that they are thrown when a problem of some type happens, and we know what effect they have on the flow of our program. In this section, we will develop the concepts further and use exceptions in functional Java code.</p>
<p class="indent">Earlier we said that an exception is an occurrence that alters the normal program flow. But because this is Java, anything that’s not a primitive must be…an object. Exceptions are no different. Every exception is an instance of a class that has class <code>Exception</code> in its inheritance hierarchy. In other words, exceptions are always some subclass of <code>java.lang.Exception</code>.</p>
<p class="indent">When an exception is thrown, an object of a particular <code>Exception</code> subtype is instantiated and handed to the exception handler as an argument to the <code>catch</code> clause. An actual <code>catch</code> clause looks like this:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0306-02.jpg" alt="images" width="397" height="115" data-mfp-src="/library/view/oca-java-se/9781260011388/p0306-02.jpg"></p>
<p class="noindent"><a id="page_307"></a>In this example, <code>e</code> is an instance of the <code>ArrayIndexOutOfBoundsException</code> class. As with any other object, you can call its methods.</p>
<h4 class="h4"><a id="ch05lev2sec16"></a>Exception Hierarchy</h4>
<p class="noindent">All exception classes are subtypes of class <code>Exception</code>. This class derives from the class <code>Throwable</code> (which derives from the class <code>Object</code>). <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ch5fig2">Figure 5-2</a> shows the hierarchy for the exception classes.</p>
<p class="imagef"><a id="ch5fig2"></a><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0307-01.jpg" alt="images" width="770" height="687" data-mfp-src="/library/view/oca-java-se/9781260011388/f0307-01.jpg"></p>
<p class="figcap"><span class="figs"><strong>FIGURE 5-2</strong></span>&nbsp;&nbsp;&nbsp;Exception class hierarchy</p>
<p class="indent">As you can see, there are two subclasses that derive from <code>Throwable</code>: <code>Exception</code> and <code>Error</code>. Classes that derive from <code>Error</code> represent unusual situations that are not caused by program errors and indicate things that would not normally happen during program execution, such as the JVM running out of memory. Generally, your application won’t be able to recover from an <code>Error</code>, so you’re not required to handle them. If your code does not handle them (and it usually won’t), it will still compile with no trouble. Although often thought of as exceptional conditions, <code>Error</code>s are technically not exceptions because they do not derive from class <code>Exception</code>.</p>
<p class="indent">In general, an exception represents something that happens not as a result of a programming error, but rather because some resource is not available or some other condition required for correct execution is not present. For example, if your application is supposed to communicate with another application or computer that is not answering, this is an exception that is not caused by a bug. <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ch5fig2">Figure 5-2</a> also <a id="page_308"></a>shows a subtype of <code>Exception</code> called <code>RuntimeException</code>. These exceptions are a special case because they sometimes do indicate program errors. They can also represent rare, difficult-to-handle exceptional conditions. Runtime exceptions are discussed in greater detail later in this chapter.</p>
<p class="indent">Java provides many exception classes, most of which have quite descriptive names. There are two ways to get information about an exception. The first is from the type of the exception itself. The next is from information that you can get from the exception object. Class <code>Throwable</code> (at the top of the inheritance tree for exceptions) provides its descendants with some methods that are useful in exception handlers. One of these is <code>printStackTrace()</code>. As you would expect, if you call an exception object’s <code>printStackTrace()</code> method, as in the earlier example, a stack trace from where the exception occurred will be printed.</p>
<p class="indent">We discussed that a call stack builds upward with the most recently called method at the top. You will notice that the <code>printStackTrace()</code> method prints the most recently entered method first and continues down, printing the name of each method as it works its way down the call stack (this is called “unwinding the stack”) from the top.</p>
<div class="side-exam">
<p class="imaget"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>For the exam, you don’t need to know any of the methods contained in the <code>Throwable</code> classes, including <code>Exception</code> and <code>Error.</code> You are expected to know that <code>Exception, Error, RuntimeException,</code> and <code>Throwable</code> types can all be thrown using the <code>throw</code> keyword and can all be caught (although you rarely will catch anything other than <code>Exception</code> subtypes).</em></strong></p>
</div>
<h4 class="h4"><a id="ch05lev2sec17"></a>Handling an Entire Class Hierarchy of Exceptions</h4>
<p class="noindent">We’ve discussed that the <code>catch</code> keyword allows you to specify a particular type of exception to catch. You can actually catch more than one type of exception in a single <code>catch</code> clause. If the exception class that you specify in the <code>catch</code> clause has no subclasses, then only the specified class of exception will be caught. However, if the class specified in the <code>catch</code> clause does have subclasses, any exception object that subclasses the specified class will be caught as well.</p>
<p class="indent">For example, class <code>IndexOutOfBoundsException</code> has two subclasses, <code>ArrayIndexOutOfBoundsException</code> and <code>StringIndexOutOfBoundsException</code>. You may want to write one exception handler that deals with exceptions produced <a id="page_309"></a>by either type of boundary error, but you might not be concerned with which exception you actually have. In this case, you could write a <code>catch</code> clause like the following:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0309-01.jpg" alt="images" width="524" height="115" data-mfp-src="/library/view/oca-java-se/9781260011388/p0309-01.jpg"></p>
<p class="indent">If any code in the <code>try</code> block throws <code>ArrayIndexOutOfBoundsException</code> or <code>StringIndexOutOfBoundsException</code>, the exception will be caught and handled. This can be convenient, but it should be used sparingly. By specifying an exception class’s superclass in your <code>catch</code> clause, you’re discarding valuable information about the exception. You can, of course, find out exactly what exception class you have, but if you’re going to do that, you’re better off writing a separate <code>catch</code> clause for each exception type of interest.</p>
<p class="imagel"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/icon.jpg" alt="Images" width="50" height="35" data-mfp-src="/library/view/oca-java-se/9781260011388/icon.jpg"></p>
<p class="icon"><strong><em>Resist the temptation to write a single catchall exception handler such as the following:</em></strong></p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0309-02.jpg" alt="images" width="206" height="115" data-mfp-src="/library/view/oca-java-se/9781260011388/p0309-02.jpg"></p>
<p class="noindent"><strong><em>This code will catch every exception generated. Of course, no single exception handler can properly handle every exception, and programming in this way defeats the design objective. Exception handlers that trap many errors at once will probably reduce the reliability of your program, because it’s likely that an exception will be caught that the handler does not know how to handle.</em></strong></p>
<h4 class="h4"><a id="ch05lev2sec18"></a>Exception Matching</h4>
<p class="noindent">If you have an exception hierarchy composed of a superclass exception and a number of subtypes, and you’re interested in handling one of the subtypes in a special way but want to handle all the rest together, you need write only two <code>catch</code> clauses.</p>
<p class="indent"><a id="page_310"></a>When an exception is thrown, Java will try to find (by looking at the available <code>catch</code> clauses from the top down) a <code>catch</code> clause for the exception type. If it doesn’t find one, it will search for a handler for a supertype of the exception. If it does not find a <code>catch</code> clause that matches a supertype for the exception, then the exception is propagated down the call stack. This process is called “exception matching.” Let’s look at an example.</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0310-01.jpg" alt="images" width="492" height="410" data-mfp-src="/library/view/oca-java-se/9781260011388/p0310-01.jpg"></p>
<p class="indent">This short program attempts to open a file and to read some data from it. Opening and reading files can generate many exceptions, most of which are some type of <code>IOException</code>. Imagine that in this program we’re interested in knowing only whether the exact exception is a <code>FileNotFoundException</code>. Otherwise, we don’t care exactly what the problem is.</p>
<p class="indent"><code>FileNotFoundException</code> is a subclass of <code>IOException</code>. Therefore, we could handle it in the <code>catch</code> clause that catches all subtypes of <code>IOException</code>, but then we would have to test the exception to determine whether it was a <code>FileNotFoundException</code>. Instead, we coded a special exception handler for the <code>FileNotFoundException</code> and a separate exception handler for all other <code>IOException</code> subtypes.</p>
<p class="indent">If this code generates a <code>FileNotFoundException</code>, it will be handled by the <code>catch</code> clause that begins at line 10. If it generates another <code>IOException</code>—perhaps <a id="page_311"></a><code>EOFException</code>, which is a subclass of <code>IOException</code>—it will be handled by the <code>catch</code> clause that begins at line 15. If some other exception is generated, such as a runtime exception of some type, neither <code>catch</code> clause will be executed and the exception will be propagated down the call stack.</p>
<p class="indent">Notice that the <code>catch</code> clause for the <code>FileNotFoundException</code> was placed above the handler for the <code>IOException</code>. This is really important! If we do it the opposite way, the program will not compile. The handlers for the most specific exceptions must always be placed above those for more general exceptions. The following will not compile:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0311-01.jpg" alt="images" width="362" height="135" data-mfp-src="/library/view/oca-java-se/9781260011388/p0311-01.jpg"></p>
<p class="noindentt">You’ll get a compiler error something like this:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0311-02.jpg" alt="images" width="562" height="62" data-mfp-src="/library/view/oca-java-se/9781260011388/p0311-02.jpg"></p>
<p class="indent">If you think back to the people with baseball mitts (in the section “Propagating Uncaught Exceptions”), imagine that the most general mitts are the largest and can&nbsp;thus catch many kinds of balls. An <code>IOException</code> mitt is large enough and flexible enough to catch any type of <code>IOException</code>. So if the person on the fifth&nbsp;floor (say, Fred) has a big ol’ <code>IOException</code> mitt, he can’t help but catch a <code>FileNotFoundException</code> ball with it. And if the guy (say, Jimmy) on the second floor is holding a <code>FileNotFoundException</code> mitt, that <code>FileNotFoundException</code> ball will never get to him because it will always be stopped by Fred on the fifth floor, standing there with his big-enough-for-any-<code>IOException</code> mitt.</p>
<p class="indent">So what do you do with exceptions that are siblings in the class hierarchy? If one <code>Exception</code> class is not a subtype or supertype of the other, then the order in which the <code>catch</code> clauses are placed doesn’t matter.</p>
<h4 class="h4"><a id="ch05lev2sec19"></a><a id="page_312"></a>Exception Declaration and the Public Interface</h4>
<p class="noindent">So, how do we know that some method throws an exception that we have to catch? Just as a method must specify what type and how many arguments it accepts and what is returned, the exceptions that a method can throw must be <em>declared</em> (unless the exceptions are subclasses of <code>RuntimeException</code>). The list of thrown exceptions is part of a method’s public interface. The <code>throws</code> keyword is used as follows to list the exceptions that a method can throw:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0312-01.jpg" alt="images" width="503" height="55" data-mfp-src="/library/view/oca-java-se/9781260011388/p0312-01.jpg"></p>
<p class="noindentt">This method has a <code>void</code> return type, accepts no arguments, and declares that it can throw one of two types of exceptions: either type <code>MyException1</code> or type <code>MyException2</code>. (Just because the method declares that it throws an exception doesn’t mean it always will. It just tells the world that it might.)</p>
<p class="indent">Suppose your method doesn’t directly throw an exception but calls a method that does. You can choose not to handle the exception yourself and instead just declare it, as though it were your method that actually throws the exception. If you do declare the exception that your method might get from another method and you don’t provide a <code>try/catch</code> for it, then the method will propagate back to the method that called your method and will either be caught there or continue on to be handled by a method further down the stack.</p>
<p class="indent">Any method that might throw an exception (unless it’s a subclass of <code>RuntimeException</code>) must declare the exception. That includes methods that aren’t actually throwing it directly, but are “ducking” and letting the exception pass down to the next method in the stack. If you “duck” an exception, it is just as if you were the one actually throwing the exception. <code>RuntimeException</code> subclasses are exempt, so the compiler won’t check to see if you’ve declared them. But all non-<code>RuntimeException</code>s are considered “checked” exceptions because the compiler checks to be certain you’ve acknowledged that “bad things could happen here.”</p>
<p class="indent">Remember this:</p>
<p class="bqn">Each method must either handle all checked exceptions by supplying a <code>catch</code> clause or list each unhandled checked exception as a thrown exception.</p>
<p class="noindent">This rule is referred to as Java’s “handle or declare” requirement (sometimes called “catch or declare”).</p>
<div class="side-exam">
<p class="imaget"><a id="page_313"></a><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>Look for code that invokes a method declaring an exception, where the calling method doesn’t handle or declare the checked exception. The following code (which uses the <code>throw</code> keyword to throw an exception manually–more on this next) has two big problems that the compiler will prevent:</em></strong></p>
<p class="codea"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0313-01.jpg" alt="images" width="245" height="115" data-mfp-src="/library/view/oca-java-se/9781260011388/p0313-01.jpg"></p>
<p class="noindent"><strong><em>First, the <code>doMore()</code> method throws a checked exception but does not declare it! But suppose we fix the <code>doMore()</code> method as follows:</em></strong></p>
<p class="codea"><code>void doMore() throws IOException { … }</code></p>
<p class="noindent"><strong><em>The <code>doStuff()</code> method is still in trouble because it, too, must declare the <code>IOException,</code> unless it handles it by providing a <code>try/catch,</code> with a <code>catch</code> clause that can take an <code>IOException.</code></em></strong></p>
</div>
<p class="indent">Again, some exceptions are exempt from this rule. An object of type <code>RuntimeException</code> may be thrown from any method without being specified as part of the method’s public interface (and a handler need not be present). And even if a method does declare a <code>RuntimeException</code>, the calling method is under no obligation to handle or declare it. <code>RuntimeException</code>, <code>Error</code>, and all their subtypes are unchecked exceptions, and unchecked exceptions do not have to be specified or handled. Here is an example:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0313-02.jpg" alt="images" width="581" height="193" data-mfp-src="/library/view/oca-java-se/9781260011388/p0313-02.jpg"></p>
<p class="indent"><a id="page_314"></a>Let’s look at <code>myMethod1()</code>. Because <code>EOFException</code> subclasses <code>IOException</code> and <code>IOException</code> subclasses <code>Exception</code>, it is a checked exception and must be declared as an exception that may be thrown by this method. But where will the exception actually come from? The public interface for method <code>myMethod2()</code> called here declares that an exception of this type can be thrown. Whether that method actually throws the exception itself or calls another method that throws it is unimportant to us; we simply know that we either have to catch the exception or declare that we threw it. The method <code>myMethod1()</code> does not catch the exception, so it declares that it throws it. Now let’s look at another legal example, <code>myMethod3()</code>:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0314-01.jpg" alt="images" width="562" height="55" data-mfp-src="/library/view/oca-java-se/9781260011388/p0314-01.jpg"></p>
<p class="noindent">According to the comment, this method can throw a <code>NullPointerException</code>. Because <code>RuntimeException</code> is the superclass of <code>NullPointerException</code>, it is an unchecked exception and need not be declared. We can see that <code>myMethod3()</code> does not declare any exceptions.</p>
<p class="indent">Runtime exceptions are referred to as <em>unchecked</em> exceptions. All other exceptions are <em>checked</em> exceptions, and they don’t derive from <code>java.lang.RuntimeException</code>. A checked exception must be caught somewhere in your code. If you invoke a method that throws a checked exception but you don’t catch the checked exception somewhere, your code will not compile. That’s why they’re called checked exceptions: the compiler checks to make sure they’re handled or declared. A number of the methods in the Java API throw checked exceptions, so you will often write exception handlers to cope with exceptions generated by methods you didn’t write.</p>
<p class="indent">You can also throw an exception yourself, and that exception can be either an existing exception from the Java API or one of your own. To create your own exception, you simply subclass <code>Exception</code> (or one of its subclasses) as follows:</p>
<p class="code1"><code>class MyException extends Exception { }</code></p>
<p class="indent">And if you throw the exception, the compiler will guarantee that you declare it as follows:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0314-02.jpg" alt="images" width="553" height="95" data-mfp-src="/library/view/oca-java-se/9781260011388/p0314-02.jpg"></p>
<p class="indent"><a id="page_315"></a>The preceding code upsets the compiler:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0315-01.jpg" alt="images" width="629" height="62" data-mfp-src="/library/view/oca-java-se/9781260011388/p0315-01.jpg"></p>
<div class="side-exam">
<p class="imaget"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>When an object of a subtype of <code>Exception</code> is thrown, it must be handled or declared. These objects are called "checked exceptions" and include all exceptions except those that are subtypes of <code>RuntimeException,</code> which are unchecked exceptions. Be ready to spot methods that don’t follow the "handle or declare" rule, such as this:</em></strong></p>
<p class="codea"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0315-02.jpg" alt="images" width="350" height="254" data-mfp-src="/library/view/oca-java-se/9781260011388/p0315-02.jpg"></p>
<p class="noindent"><strong><em>You need to recognize that this code won’t compile. If you try, you’ll get this:</em></strong></p>
<p class="codea"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0315-03.jpg" alt="images" width="503" height="62" data-mfp-src="/library/view/oca-java-se/9781260011388/p0315-03.jpg"></p>
<p class="noindent"><strong><em>Notice that <code>someMethod()</code> fails either to handle or declare the exception that can be thrown by <code>doStuff()</code>. In the next pages, we’ll discuss several ways to deal with this sort of situation.</em></strong></p>
</div>
<p class="indent">You need to know how an <code>Error</code> compares with checked and unchecked exceptions. Objects of type <code>Error</code> are not <code>Exception</code> objects, although they do represent exceptional conditions. Both <code>Exception</code> and <code>Error</code> share a common superclass, <code>Throwable</code>; thus, both can be thrown using the <code>throw</code> keyword. When an <code>Error</code> or a subclass of <code>Error</code> (like <code>StackOverflowError</code>) is thrown, it’s <a id="page_316"></a>unchecked. You are not required to catch <code>Error</code> objects or <code>Error</code> subtypes. You can also throw an <code>Error</code> yourself (although, other than <code>AssertionError</code>, you probably won’t ever want to), and you can catch one, but again, you probably won’t. What, for example, would you actually do if you got an <code>OutOfMemoryError</code>? It’s not like you can tell the garbage collector to run; you can bet the JVM fought desperately to save itself (and reclaimed all the memory it could) by the time you got the error. In other words, don’t expect the JVM at that point to say, “Run the garbage collector? Oh, thanks so much for telling me. That just never occurred to me. Sure, I’ll get right on it.” Even better, what would you do if a <code>VirtualMachineError</code> arose? Your program is toast by the time you’d catch the error, so there’s really no point in trying to catch one of these babies. Just remember, though, that you can! The following compiles just fine:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0316-01.jpg" alt="images" width="599" height="314" data-mfp-src="/library/view/oca-java-se/9781260011388/p0316-01.jpg"></p>
<p class="indent">If we were throwing a checked exception rather than <code>Error</code>, then the <code>doStuff()</code> method would need to declare the exception. But remember, since <code>Error</code> is not a subtype of <code>Exception</code>, it doesn’t need to be declared. You’re free to declare it if you like, but the compiler just doesn’t care one way or another when or how the <code>Error</code> is thrown or by whom.</p>
<p class="imagel"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/icon.jpg" alt="Images" width="50" height="35" data-mfp-src="/library/view/oca-java-se/9781260011388/icon.jpg"></p>
<p class="icon"><strong><em>Because Java has checked exceptions, it’s commonly said that Java forces developers to handle exceptions. Yes, Java forces us to write exception handlers for each exception that can occur during normal operation, but it’s up to us to make the exception handlers actually do something useful. We know software managers who melt down when they see a programmer write something like this:</em></strong></p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0316-02.jpg" alt="images" width="245" height="55" data-mfp-src="/library/view/oca-java-se/9781260011388/p0316-02.jpg"></p>
<p class="noindent"><a id="page_317"></a><strong><em>Notice anything missing? Don’t “eat” the exception by catching it without actually handling it. You won’t even be able to tell that the exception occurred because you’ll never see the stack trace.</em></strong></p>
<h4 class="h4"><a id="ch05lev2sec20"></a>Rethrowing the Same Exception</h4>
<p class="noindent">Just as you can throw a new exception from a <code>catch</code> clause, you can also throw the same exception you just caught. Here’s a <code>catch</code> clause that does this:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0317-01.jpg" alt="images" width="524" height="75" data-mfp-src="/library/view/oca-java-se/9781260011388/p0317-01.jpg"></p>
<p class="indent">All other <code>catch</code> clauses associated with the same <code>try</code> are ignored; if a <code>finally</code> block exists, it runs, and the exception is thrown back to the calling method (the next method down the call stack). If you throw a checked exception from a <code>catch</code> clause, you must also declare that exception! In other words, you must handle <em>and</em> declare, as opposed to handle <em>or</em> declare. The following example is illegal:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0317-02.jpg" alt="images" width="524" height="155" data-mfp-src="/library/view/oca-java-se/9781260011388/p0317-02.jpg"></p>
<p class="noindent">In the preceding code, the <code>doStuff()</code> method is clearly able to throw a checked exception—in this case an <code>IOException</code>—so the compiler says, “Well, that’s just peachy that you have a <code>try/catch</code> in there, but it’s not good enough. If you might rethrow the <code>IOException</code> you catch, then you must declare it (in the method signature)!”</p>
<h3 class="h3a1"><a id="ch05lev2sec21"></a>EXERCISE 5-4</h3>
<p class="line"></p>
<h3 class="h3s">Creating an Exception</h3>
<p class="noindent">In this exercise, we attempt to create a custom exception. We won’t put in any new methods (it will have only those inherited from <code>Exception</code>); and because it extends <code>Exception</code>, the compiler considers it a checked exception. The goal of <a id="page_318"></a>the program is to determine whether a command-line argument representing a particular food (as a string) is considered bad or okay.</p>
<p class="numst">1.&nbsp;&nbsp;&nbsp;Let’s first create our exception. We will call it <code>BadFoodException</code>. This exception will be thrown when a bad food is encountered.</p>
<p class="nums">2.&nbsp;&nbsp;&nbsp;Create an enclosing class called <code>MyException</code> and a <code>main()</code> method, which will remain empty for now.</p>
<p class="nums">3.&nbsp;&nbsp;&nbsp;Create a method called <code>checkFood()</code>. It takes a <code>String</code> argument and throws our exception if it doesn’t like the food it was given. Otherwise, it tells us it likes the food. You can add any foods you aren’t particularly fond of to the list.</p>
<p class="numsb">4.&nbsp;&nbsp;&nbsp;Now in the <code>main()</code> method, you’ll get the command-line argument out of the <code>String</code> array and then pass that <code>String</code> on to the <code>checkFood()</code> method. Because it’s a checked exception, the <code>checkFood()</code> method must declare it, and the <code>main()</code> method must handle it (using a <code>try/catch</code>). Do not have <code>main()</code> declare the exception, because if <code>main()</code> ducks the exception, who else is back there to catch it? (Actually, <code>main()</code> can legally declare exceptions, but don’t do that in this exercise.)</p>
<p class="indent">As nifty as exception handling is, it’s still up to the developer to make proper use of it. Exception handling makes organizing code and signaling problems easy, but the exception handlers still have to be written. You’ll find that even the most complex situations can be handled, and your code will be reusable, readable, and maintainable.</p>
<hr class="hr">
<h3 class="h3a">CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch05lev1sec4"></a>Common Exceptions and Errors (OCA Objective 8.5)</h3>
<p class="noindentn"><em>8.5&nbsp;&nbsp;&nbsp;Recognize common exception classes (such as NullPointerException, ArithmeticException, ArrayIndexOutOfBoundsException, ClassCastException) (sic)</em></p>
<p class="indentt">The intention of this objective is to make sure that you are familiar with some of the most common exceptions and errors you’ll encounter as a Java programmer.</p>
<div class="side-exam">
<p class="imaget"><a id="page_319"></a><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>The questions from this section are likely to be along the lines of, "Here’s some code that just did something bad, which exception will be thrown?" Throughout the exam, questions will present some code and ask you to determine whether the code will run or whether an exception will be thrown. Since these questions are so common, understanding the causes for these exceptions is critical to your success.</em></strong></p>
</div>
<p class="indent">This is another one of those objectives that will turn up all through the real exam (does “An exception is thrown at runtime” ring a bell?), so make sure this section gets a lot of your attention.</p>
<h4 class="h4"><a id="ch05lev2sec22"></a>Where Exceptions Come From</h4>
<p class="noindent">Jump back a page and take a look at the last sentence. It’s important that you understand what causes exceptions and errors and where they come from. For the purposes of exam preparation, let’s define two broad categories of exceptions and errors:</p>
<p class="bulletxt"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>JVM exceptions</strong> Those exceptions or errors that are either exclusively or most logically thrown by the JVM</p>
<p class="bulletxb"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>Programmatic exceptions</strong> Those exceptions that are thrown explicitly by application and/or API programmers</p>
<h4 class="h4"><a id="ch05lev2sec23"></a>JVM-Thrown Exceptions</h4>
<p class="noindent">Let’s start with a very common exception, the <code>NullPointerException</code>. As we saw in earlier chapters, this exception occurs when you attempt to access an object using a reference variable with a current value of <code>null</code>. There’s no way that the compiler can hope to find these problems before runtime. Take a look at the following:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0319-01.jpg" alt="images" width="407" height="115" data-mfp-src="/library/view/oca-java-se/9781260011388/p0319-01.jpg"></p>
<p class="noindent"><a id="page_320"></a>Surely, the compiler can find the problem with that tiny little program! Nope, you’re&nbsp;on your own. The code will compile just fine, and the JVM will throw a <code>NullPointerException</code> when it tries to invoke the <code>length()</code> method.</p>
<p class="indent">Earlier in this chapter we discussed the call stack. As you recall, we used the convention that <code>main()</code> would be at the bottom of the call stack, and that as <code>main()</code> invokes another method, and that method invokes another, and so on, the stack grows upward. Of course, the stack resides in memory, and even if your OS gives you a gigabyte of RAM for your program, it’s still a finite amount. It’s possible to grow the stack so large that the OS runs out of space to store the call stack. When this happens, you get (wait for it…) a <code>StackOverflowError</code>. The most common way for this to occur is to create a recursive method. A recursive method invokes itself in the method body. Although that may sound weird, it’s a very common and useful technique for such things as searching and sorting algorithms. Take a look at this code:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0320-01.jpg" alt="images" width="344" height="55" data-mfp-src="/library/view/oca-java-se/9781260011388/p0320-01.jpg"></p>
<p class="noindent">As you can see, if you ever make the mistake of invoking the <code>go()</code> method, your program will fall into a black hole—<code>go()</code> invoking <code>go()</code> invoking <code>go()</code>, until, no matter how much memory you have, you’ll get a <code>StackOverflowError</code>. Again, only the JVM knows when this moment occurs, and the JVM will be the source of this error.</p>
<h4 class="h4"><a id="ch05lev2sec24"></a>Programmatically Thrown Exceptions</h4>
<p class="noindent">Now let’s look at programmatically thrown exceptions. Remember we defined <em>programmatically</em> as meaning something like this:</p>
<p class="bq">Created by an application and/or API developer</p>
<p class="noindent">For instance, many classes in the Java API have methods that take <code>String</code> arguments and convert these <code>String</code>s into numeric primitives. A good example of these classes is the so-called “wrapper classes” that we will study in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html">Chapter 6</a>. Even though we haven’t talked much about wrapper classes yet, the following example should make sense.</p>
<p class="indent"><a id="page_321"></a>At some point long ago, some programmer wrote the <code>java.lang.Integer</code> class and created methods like <code>parseInt()</code> and <code>valueOf()</code>. That programmer wisely decided that if one of these methods was passed a <code>String</code> that could not be converted into a number, the method should throw a <code>NumberFormatException</code>. The partially implemented code might look something like this:</p>
<p class="coden"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0321-01.jpg" alt="images" width="502" height="155" data-mfp-src="/library/view/oca-java-se/9781260011388/p0321-01.jpg"></p>
<p class="indent">Other examples of programmatic exceptions include an <code>AssertionError</code> (okay, it’s not an exception, but it IS thrown programmatically) and throwing an <code>IllegalArgumentException</code>. In fact, our mythical API developer could have used <code>IllegalArgumentException</code> for her <code>parseInt()</code> method. But it turns out that <code>NumberFormatException</code> extends <code>IllegalArgumentException</code> and is a little more precise, so in this case, using <code>NumberFormatException</code> supports the notion we discussed earlier: that when you have an exception hierarchy, you should use the most precise exception that you can.</p>
<p class="indent">Of course, as we discussed earlier, you can also make up your very own special custom exceptions and throw them whenever you want to. These homemade exceptions also fall into the category of “programmatically thrown exceptions.”</p>
<h4 class="h4"><a id="ch05lev2sec25"></a>A Summary of the Exam’s Exceptions and Errors</h4>
<p class="noindent">OCA 8 Objective 8.5 lists a few specific exceptions and errors; it says “Recognize common exception classes (such as….”). <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ch5tab2">Table 5-2</a> summarizes the ten exceptions and errors that are most likely a part of the OCA 8 exam.</p>
<p class="tabcap"><a id="page_322"></a><span class="figs"><strong>TABLE 5-2</strong></span>&nbsp;&nbsp;&nbsp;Descriptions and Sources of Common Exceptions</p>
<p class="image-t"><a id="ch5tab2"></a><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/t0322-01.jpg" alt="images" width="901" height="928" data-mfp-src="/library/view/oca-java-se/9781260011388/t0322-01.jpg"></p>
<h3 class="h3"><a id="ch05lev1sec5"></a><a id="page_323"></a><span class="under">CERTIFICATION SUMMARY</span></h3>
<p class="noindent">This chapter covered a lot of ground, all of which involved ways of controlling your program flow based on a conditional test. First, you learned about <code>if</code> and <code>switch</code> statements. The <code>if</code> statement evaluates one or more expressions to a <code>boolean</code> result. If the result is <code>true</code>, the program will execute the code in the block that is encompassed by the <code>if</code>. If an <code>else</code> statement is used and the <code>if</code> expression evaluates to <code>false</code>, then the code following the <code>else</code> will be performed. If no <code>else</code> block is defined, then none of the code associated with the <code>if</code> statement will&nbsp;execute.</p>
<p class="indent">You also learned that the <code>switch</code> statement can be used to replace multiple <br><code>if-else</code> statements. The <code>switch</code> statement can evaluate integer primitive types that can be implicitly cast to an <code>int</code> (those types are <code>byte</code>, <code>short</code>, <code>int</code>, and <code>char</code>); or it can evaluate <code>enum</code>s; and as of Java 7, it can evaluate <code>String</code>s. At runtime, the JVM will try to find a match between the expression in the <code>switch</code> statement and a constant in a corresponding <code>case</code> statement. If a match is found, execution will begin at the matching case and continue on from there, executing code in all the remaining <code>case</code> statements until a <code>break</code> statement is found or the end of the <code>switch</code> statement occurs. If there is no match, then the <code>default</code> case will execute, if there is one.</p>
<p class="indent">You’ve learned about the three looping constructs available in the Java language. These constructs are the <code>for</code> loop (including the basic <code>for</code> and the enhanced <code>for</code>, which was new to Java 5), the <code>while</code> loop, and the <code>do</code> loop. In general, the <code>for</code> loop is used when you know how many times you need to go through the loop. The <code>while</code> loop is used when you do not know how many times you want to go through, whereas the <code>do</code> loop is used when you need to go through at least once. In the <code>for</code> loop and the <code>while</code> loop, the expression has to evaluate to <code>true</code> to get inside the block and will check after every iteration of the loop. The <code>do</code> loop does not check the condition until after it has gone through the loop once. The major benefit of the <code>for</code> loop is the ability to initialize one or more variables and increment or decrement those variables in the <code>for</code> loop definition.</p>
<p class="indent">The <code>break</code> and <code>continue</code> statements can be used in either a labeled or unlabeled fashion. When unlabeled, the <code>break</code> statement will force the program to stop processing the innermost looping construct and start with the line of code following the loop. Using an unlabeled <code>continue</code> command will cause the program to stop execution of the current iteration of the innermost loop and proceed with the next iteration. When a <code>break</code> or a <code>continue</code> statement is used in a labeled manner, it will perform in the same way, with one exception: the statement will not apply to the innermost loop; instead, it will apply to the loop with the label. The <code>break</code> statement is used most often in conjunction with the <code>switch</code> statement. When there is a match <a id="page_324"></a>between the <code>switch</code> expression and the <code>case</code> constant, the code following the <code>case</code> constant will be performed. To stop execution, a <code>break</code> is&nbsp;needed.</p>
<p class="indent">You’ve seen how Java provides an elegant mechanism in exception handling. Exception handling allows you to isolate your error-correction code into separate blocks so the main code doesn’t become cluttered by error-checking code. Another elegant feature allows you to handle similar errors with a single error-handling block, without code duplication. Also, the error handling can be deferred to methods further back on the call stack.</p>
<p class="indent">You learned that Java’s <code>try</code> keyword is used to specify a guarded region—a block of code in which problems might be detected. An exception handler is the code that is executed when an exception occurs. The handler is defined by using Java’s <code>catch</code> keyword. All <code>catch</code> clauses must immediately follow the related <code>try</code> block.</p>
<p class="indent">Java also provides the <code>finally</code> keyword. This is used to define a block of code that is always executed, either immediately after a <code>catch</code> clause completes or immediately after the associated <code>try</code> block in the case that no exception was thrown (or there was a <code>try</code> but no <code>catch</code>). Use <code>finally</code> blocks to release system resources and to perform any cleanup required by the code in the <code>try</code> block. A <code>finally</code> block is not required, but if there is one, it must immediately follow the last <code>catch</code>. (If there is no <code>catch</code> block, the <code>finally</code> block must immediately follow the <code>try</code> block.) It’s guaranteed to be called except when the <code>try</code> or <code>catch</code> issues a <code>System.exit()</code>.</p>
<p class="indent">An exception object is an instance of class <code>Exception</code> or one of its subclasses. The <code>catch</code> clause takes, as a parameter, an instance of an object of a type derived from the <code>Exception</code> class. Java requires that each method either catches any checked exception it can throw or else declares that it throws the exception. The exception declaration is part of the method’s signature. To declare that an exception may be thrown, the <code>throws</code> keyword is used in a method definition, along with a list of all checked exceptions that might be thrown.</p>
<p class="indent">Runtime exceptions are of type <code>RuntimeException</code> (or one of its subclasses). These exceptions are a special case because they do not need to be handled or declared, and thus are known as “unchecked” exceptions. Errors are of type <code>java.lang.Error</code> or its subclasses, and like runtime exceptions, they do not need to be handled or declared. Checked exceptions include any exception types that are not of type <code>RuntimeException</code> or <code>Error</code>. If your code fails either to handle a checked exception or declare that it is thrown, your code won’t compile. But with unchecked exceptions or objects of type <code>Error</code>, it doesn’t matter to the compiler whether you declare them or handle them, do nothing about them, or do some combination of declaring and handling. In other words, you’re free to declare them and handle them, but the compiler won’t care one way or the other. It’s not good practice to handle an <code>Error</code>, though, because you can rarely recover from one.</p>
<p class="indent">Finally, remember that exceptions can be generated by the JVM or by a programmer.</p>
<h3 class="h3"><a id="ch05lev1sec6"></a><a id="page_325"></a><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/tic1.jpg" alt="images" width="25" height="28" data-mfp-src="/library/view/oca-java-se/9781260011388/tic1.jpg"> TWO-MINUTE DRILL</h3>
<p class="noindent">Here are some of the key points from each certification objective in this chapter. You might want to loop through them several times.</p>
<h4 class="h4a">Writing Code Using if and switch Statements (OCA Objectives 3.3 and 3.4)</h4>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The only legal expression in an <code>if</code> statement is a <code>boolean</code> expression—in other words, an expression that resolves to a <code>boolean</code> or a <code>Boolean</code> reference.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Watch out for <code>boolean</code> assignments (<code>=</code>) that can be mistaken for <code>boolean</code> equality (<code>==</code>) tests:</p>
<p class="code-n1"><code>boolean x = false;<br>if (x = true) { } // an assignment, so x will always be true!</code></p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Curly braces are optional for <code>if</code> blocks that have only one conditional statement. But watch out for misleading indentations.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;<code>s</code><code>witch</code> statements can evaluate only to <code>enum</code>s or the <code>byte</code>, <code>short</code>, <code>int</code>, <code>char</code>, and, as of Java 7, <code>String</code> data types. You can’t say this:</p>
<p class="code-n1"><code>long s = 30;<br>switch(s) { }</code></p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The <code>case</code> constant must be a literal or a compile-time constant, including an <code>enum</code> or a <code>String</code>. You cannot have a case that includes a nonfinal variable or a range of values.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;If the condition in a <code>switch</code> statement matches a <code>case</code> constant, execution will run through all code in the <code>switch</code> following the matching <code>case</code> statement until a <code>break</code> statement or the end of the <code>switch</code> statement is encountered. In other words, the matching <code>case</code> is just the entry point into the <code>case</code> block, but unless there’s a <code>break</code> statement, the matching <code>case</code> is not the only <code>case</code> code that runs.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The <code>default</code> keyword should be used in a <code>switch</code> statement if you want to run some code when none of the <code>case</code> values match the conditional value.</p>
<p class="bulletx"><a id="page_326"></a><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The <code>default</code> block can be located anywhere in the <code>switch</code> block, so if no preceding <code>case</code> matches, the <code>default</code> block will be entered; if the <code>default</code> does not contain a <code>break</code>, then code will continue to execute (fall-through) to the end of the <code>switch</code> or until the <code>break</code> statement is encountered.</p>
<h4 class="h4a">Writing Code Using Loops (OCA Objectives 5.1, 5.2, 5.3, and 5.4)</h4>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;A basic <code>for</code> statement has three parts: declaration and/or initialization, boolean evaluation, and the iteration expression.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;If a variable is incremented or evaluated within a basic <code>for</code> loop, it must be declared before the loop or within the <code>for</code> loop declaration.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;A variable declared (not just initialized) within the basic <code>for</code> loop declaration cannot be accessed outside the <code>for</code> loop—in other words, code below the <code>for</code> loop won’t be able to use the variable.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;You can initialize more than one variable of the same type in the first part of the basic <code>for</code> loop declaration; each initialization must be comma separated.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;An enhanced <code>for</code> statement (new as of Java 5) has two parts: the <em>declaration</em> and the <em>expression</em>. It is used only to loop through arrays or collections.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;With an enhanced <code>for</code>, the <em>expression</em> is the array or collection through which you want to loop.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;With an enhanced <code>for</code>, the <em>declaration</em> is the block variable, whose type is compatible with the elements of the array or collection, and that variable contains the value of the element for the given iteration.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Unlike with C, you cannot use a number or anything that does not evaluate to a <code>boolean</code> value as a condition for an <code>if</code> statement or looping construct. You can’t, for example, say <code>if(x)</code>, unless <code>x</code> is a <code>boolean</code> variable.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The <code>do</code> loop will <strong>always</strong> enter the body of the loop at least once.</p>
<h4 class="h4a">Using break and continue (OCA Objective 5.5)</h4>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;An unlabeled <code>break</code> statement will cause the current iteration of the innermost loop to stop and the line of code following the loop to run.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;An unlabeled <code>continue</code> statement will cause the current iteration of the innermost loop to stop, the condition of that loop to be checked, and if the condition is met, the loop to run again.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;If the <code>break</code> statement or the <code>continue</code> statement is labeled, it will cause <br>a similar action to occur on the labeled loop, not the innermost loop.</p>
<h4 class="h4a"><a id="page_327"></a>Handling Exceptions (OCA Objectives 8.1, 8.2, 8.3, 8.4, and 8.5)</h4>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Some of the benefits of Java’s exception-handling features include organized error-handling code, easy error detection, keeping exception-handling code separate from other code, and the ability to reuse exception-handling code for a range of issues.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Exceptions come in two flavors: checked and unchecked.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Checked exceptions include all subtypes of <code>Exception</code>, excluding classes that extend <code>RuntimeException</code>.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Checked exceptions are subject to the handle or declare rule; any method that might throw a checked exception (including methods that invoke methods that can throw a checked exception) must either declare the exception using <code>throws</code> or handle the exception with an appropriate <code>try/catch</code>.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Subtypes of <code>Error</code> or <code>RuntimeException</code> are unchecked, so the compiler doesn’t enforce the handle or declare rule. You’re free to handle them or to declare them, but the compiler doesn’t care one way or the other.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;A <code>finally</code> block will always be invoked, regardless of whether an exception is thrown or caught in its <code>try/catch</code>.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The only exception to the <code>finally</code>-will-always-be-called rule is that a <code>finally</code> will not be invoked if the JVM shuts down. That could happen if code from the <code>try</code> or <code>catch</code> blocks calls <code>System.exit()</code>.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Just because <code>finally</code> is invoked does not mean it will complete. Code in the <code>finally</code> block could itself raise an exception or issue a <code>System.exit()</code>.</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Uncaught exceptions propagate back through the call stack, starting from the method where the exception is thrown and ending with either the first method that has a corresponding catch for that exception type or a JVM shutdown (which happens if the exception gets to <code>main()</code> and <code>main()</code> is “ducking” the exception by declaring it).</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;You can almost always create your own exceptions by extending <code>Exception</code> or one of its checked exception subtypes. Such an exception will then be considered a checked exception by the compiler. (In other words, it’s rare to extend <code>RuntimeException</code>.)</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;All <code>catch</code> blocks must be ordered from most specific to most general. If you have a <code>catch</code> clause for both <code>IOException</code> and <code>Exception</code>, you must put the <code>catch</code> for <code>IOException</code> first in your code. Otherwise, the <code>IOException</code> would be caught by <code>catch(Exception e)</code>, because a <code>catch</code> argument can catch the specified exception or any of its subtypes!</p>
<p class="bulletx"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Some exceptions are created by programmers and some by the JVM.</p>
<h3 class="h3"><a id="ch05lev1sec7"></a><a id="page_328"></a>SELF TEST</h3>
<p class="numlistk"><a id="ich5q1" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ch5q1"><strong>1.</strong></a>&nbsp;&nbsp;&nbsp;Given that <code>toLowerCase()</code> is an aptly named <code>String</code> method that returns a <code>String</code>, and given the code:</p>
<p class="code-1"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0328-01.jpg" alt="images" width="398" height="274" data-mfp-src="/library/view/oca-java-se/9781260011388/p0328-01.jpg"></p>
<p class="numlist-n">What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>-</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>-r</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>-rg</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;An exception is thrown at runtime</p>
<p class="numlistk"><a id="ich5q2" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ch5q2"><strong>2.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0328-02.jpg" alt="images" width="397" height="353" data-mfp-src="/library/view/oca-java-se/9781260011388/p0328-02.jpg"></p>
<p class="numlist-n"><a id="page_329"></a>What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>-</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>-c</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>-c2</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;<code>-2c</code></p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;<code>-c22b</code></p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;<code>-2c2b</code></p>
<p class="num-k">G.&nbsp;&nbsp;&nbsp;<code>-2c2bc</code></p>
<p class="num-k">H.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numlistk"><a id="ich5q3" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ch5q3"><strong>3.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><code>try { int x = Integer.parseInt(“two”); }</code></p>
<p class="numlist-n">Which could be used to create an appropriate <code>catch</code> block? (Choose all that apply.)</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>ClassCastException</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>IllegalStateException</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>NumberFormatException</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;<code>IllegalArgumentException</code></p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;<code>ExceptionInInitializerError</code></p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;<code>ArrayIndexOutOfBoundsException</code></p>
<p class="numlistk"><a id="ich5q4" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ch5q4"><strong>4.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0329-01.jpg" alt="images" width="398" height="313" data-mfp-src="/library/view/oca-java-se/9781260011388/p0329-01.jpg"></p>
<p class="numlist-n">And given the command-line invocation:</p>
<p class="code-1"><code>Java Flip2 RED Green YeLLow</code></p>
<p class="numlist-n"><a id="page_330"></a>Which are true? (Choose all that apply.)</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;The string <code>rgy</code> will appear somewhere in the output</p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;The string <code>rgg</code> will appear somewhere in the output</p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;The string <code>gyr</code> will appear somewhere in the output</p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;An exception is thrown at runtime</p>
<p class="numlistk"><a id="ich5q5" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ch5q5"><strong>5.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0330-01.jpg" alt="images" width="426" height="155" data-mfp-src="/library/view/oca-java-se/9781260011388/p0330-01.jpg"></p>
<p class="numlist-n">Which, inserted independently at line 4, compiles? (Choose all that apply.)</p>
<p class="num-k"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0330-02.jpg" alt="images" width="652" height="169" data-mfp-src="/library/view/oca-java-se/9781260011388/p0330-02.jpg"></p>
<p class="numlistk"><a id="ich5q6" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ch5q6"><strong>6.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0330-03.jpg" alt="images" width="455" height="294" data-mfp-src="/library/view/oca-java-se/9781260011388/p0330-03.jpg"></p>
<p class="numlist-n"><a id="page_331"></a>What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>-ic of</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>-mf of</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>-mc mf</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;<code>-ic mf of</code></p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;<code>-ic mc mf of</code></p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;<code>-ic mc of mf</code></p>
<p class="num-k">G.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numlistk"><a id="ich5q7" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ch5q7"><strong>7.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="num-k"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0331-01.jpg" alt="images" width="664" height="234" data-mfp-src="/library/view/oca-java-se/9781260011388/p0331-01.jpg"></p>
<p class="numlist-n">What is the result? (Choose all that apply.)</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;Compilation succeeds</p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 8</p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 10</p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 12</p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 14</p>
<p class="numlistk"><a id="ich5q8" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ch5q8"><strong>8.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="num-k"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0331-02.jpg" alt="images" width="435" height="213" data-mfp-src="/library/view/oca-java-se/9781260011388/p0331-02.jpg"></p>
<p class="num-k"><a id="page_332"></a><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0332-01.jpg" alt="images" width="292" height="132" data-mfp-src="/library/view/oca-java-se/9781260011388/p0332-01.jpg"></p>
<p class="numlist-n">What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>9 10 d</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>8 9 10 d</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>9 10 10 d</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;<code>9 10 10 d 13</code></p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;<code>8 9 10 10 d 13</code></p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;<code>8 9 10 9 10 10 d 13</code></p>
<p class="num-k">G.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numlistk"><a id="ich5q9" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ch5q9"><strong>9.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0332-02.jpg" alt="images" width="463" height="294" data-mfp-src="/library/view/oca-java-se/9781260011388/p0332-02.jpg"></p>
<p class="numlist-n">And given that line 7 will assign the value 0, 1, or 2 to <code>sw</code>, which are true? (Choose all that apply.)</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;A <code>ClassCastException</code> might be thrown</p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;A <code>StackOverflowError</code> might be thrown</p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;A <code>NullPointerException</code> might be thrown</p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;An <code>IllegalStateException</code> might be thrown</p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;The program might hang without ever completing</p>
<p class="num-k">G.&nbsp;&nbsp;&nbsp;The program will always complete without exception</p>
<p class="numlistk1"><a id="page_333"></a><a id="ich5q10" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ch5q10"><strong>10.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0333-01.jpg" alt="images" width="435" height="274" data-mfp-src="/library/view/oca-java-se/9781260011388/p0333-01.jpg"></p>
<p class="numlist-n">What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>1 3 9</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>5 5 7 7</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>1 3 3 9 9</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;<code>1 1 3 3 9 9</code></p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;<code>1 1 1 3 3 3 9 9 9</code></p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numlistk1"><a id="ich5q11" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ch5q11"><strong>11.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0333-02.jpg" alt="images" width="521" height="254" data-mfp-src="/library/view/oca-java-se/9781260011388/p0333-02.jpg"></p>
<p class="numlist-n">What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>12</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>13</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>123</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;<code>1234</code></p>
<p class="num-k"><a id="page_334"></a>E.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;<code>123</code> followed by an exception</p>
<p class="num-k">G.&nbsp;&nbsp;&nbsp;<code>1234</code> followed by an exception</p>
<p class="num-k">H.&nbsp;&nbsp;&nbsp;An exception is thrown with no other output</p>
<p class="numlistk1"><a id="ich5q12" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ch5q12"><strong>12.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0334-01.jpg" alt="images" width="435" height="234" data-mfp-src="/library/view/oca-java-se/9781260011388/p0334-01.jpg"></p>
<p class="numlist-n">What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>0 1 2 3</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>1 1 1 3 3</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>0 1 1 1 2 3 3</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;<code>1 1 1 3 3 4 4 4</code></p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;<code>0 1 1 1 2 3 3 4 4 4</code></p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numlistk1"><a id="ich5q13" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ch5q13"><strong>13.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0334-02.jpg" alt="images" width="435" height="175" data-mfp-src="/library/view/oca-java-se/9781260011388/p0334-02.jpg"></p>
<p class="numlist-n">And given the following three code fragments:</p>
<p class="code-1"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0334-03.jpg" alt="images" width="530" height="117" data-mfp-src="/library/view/oca-java-se/9781260011388/p0334-03.jpg"></p>
<p class="numlist-n"><a id="page_335"></a>When fragments I–III are added, independently, at line 5, which are true? (Choose all that apply.)</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;Some will not compile</p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;They will all compile</p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;All will complete normally</p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;None will complete normally</p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;Only one will complete normally</p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;Two of them will complete normally</p>
<p class="numlistk1"><a id="ich5q14" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ch5q14"><strong>14.</strong></a>&nbsp;&nbsp;&nbsp;Given the code snippet:</p>
<p class="code-1"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0335-01.jpg" alt="images" width="416" height="252" data-mfp-src="/library/view/oca-java-se/9781260011388/p0335-01.jpg"></p>
<p class="numlist-n">And given that the numbered lines will all be tested by uncommenting one <code>switch</code> statement and one <code>case</code> statement together, which line(s) will FAIL to compile? (Choose all that apply.)</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;line 1</p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;line 2</p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;line 3</p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;line 4</p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;line 5</p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;line 6</p>
<p class="num-k">G.&nbsp;&nbsp;&nbsp;All six lines of code will compile</p>
<p class="numlistk1"><a id="ich5q15" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ch5q15"><strong>15.</strong></a>&nbsp;&nbsp;&nbsp;Given that <code>IOException</code> is in the <code>java.io</code> package and given:</p>
<p class="code-1"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0335-02.jpg" alt="images" width="292" height="115" data-mfp-src="/library/view/oca-java-se/9781260011388/p0335-02.jpg"></p>
<p class="numlist-n"><a id="page_336"></a>And given the following four code fragments:</p>
<p class="code-1"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0336-01.jpg" alt="images" width="654" height="75" data-mfp-src="/library/view/oca-java-se/9781260011388/p0336-01.jpg"></p>
<p class="numlist-n">If the four fragments are inserted independently at line 2, which are true? (Choose all that apply.)</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;All four will compile and execute without exception</p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;All four will compile and execute and throw an exception</p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;Some, but not all, will compile and execute without exception</p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;Some, but not all, will compile and execute and throw an exception</p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;When considering fragments II, III, and IV, of those that will compile, adding a <code>try/catch</code> block around line 4 will cause compilation to fail</p>
<p class="numlistk1"><a id="ich5q16" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ch5q16"><strong>16.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0336-02.jpg" alt="images" width="435" height="234" data-mfp-src="/library/view/oca-java-se/9781260011388/p0336-02.jpg"></p>
<p class="numlist-n">And given the following four code fragments:</p>
<p class="code-1"><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0336-03.jpg" alt="images" width="454" height="75" data-mfp-src="/library/view/oca-java-se/9781260011388/p0336-03.jpg"></p>
<p class="numlist-n">When fragments I–IV are added, independently, at line 10, which are true? (Choose all that apply.)</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;None will compile</p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;They will all compile</p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;Some, but not all, will compile</p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;All those that compile will throw an exception at runtime</p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;None of those that compile will throw an exception at runtime</p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;Only some of those that compile will throw an exception at runtime</p>
<h3 class="h3"><a id="ch05lev1sec8"></a><a id="page_337"></a>SELF TEST ANSWERS</h3>
<p class="hanga"><a id="ch5q1" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ich5q1"><strong>1.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>C</strong> is correct. As of Java 7 it’s legal to switch on a String, and remember that switches use “entry point” logic.</p>
<p class="hang-a"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, D,</strong> and <strong>E</strong> are incorrect based on the above. (OCA Objective 3.4)</p>
<p class="hanga"><a id="ch5q2" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ich5q2"><strong>2.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>B</strong> is correct. Once <code>s3()</code> throws the exception to <code>s2()</code>, <code>s2()</code> throws it to <code>s1()</code>, and no more of <code>s2()</code>’s code will be executed.</p>
<p class="hang-a"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, C, D, E, F, G,</strong> and <strong>H</strong> are incorrect based on the above. (OCA Objectives 8.2 and 8.4)</p>
<p class="hanga"><a id="ch5q3" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ich5q3"><strong>3.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>C</strong> and <strong>D</strong> are correct. <code>Integer.parseInt</code> can throw a <code>NumberFormatException</code>, and <code>IllegalArgumentException</code> is its superclass (that is, a broader exception).</p>
<p class="hang-a"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, E,</strong> and <strong>F</strong> are not in <code>NumberFormatException</code>’s class hierarchy. (OCA Objective 8.5)</p>
<p class="hanga"><a id="ch5q4" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ich5q4"><strong>4.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>E</strong> is correct. As of Java 7 the syntax is legal. The <code>sa[]</code> array receives only three arguments from the command line, so on the last iteration through <code>sa[]</code>, a <code>NullPointerException</code> is thrown.</p>
<p class="hang-a"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, C,</strong> and <strong>D</strong> are incorrect based on the above. (OCA Objectives 1.3, 5.2, and 8.5)</p>
<p class="hanga"><a id="ch5q5" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ich5q5"><strong>5.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>A</strong>, <strong>D,</strong> and <strong>F</strong> are correct. <strong>A</strong> is an example of the enhanced <code>for</code> loop. <strong>D</strong> and <strong>F</strong> are examples of the basic <code>for</code> loop.</p>
<p class="hang-a"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>B, C,</strong> and <strong>E</strong> are incorrect. <strong>B</strong> is incorrect because its operands are swapped. <strong>C</strong> is incorrect because the enhanced <code>for</code> must declare its first operand. <strong>E</strong> is incorrect syntax to declare two variables in a <code>for</code> statement. (OCA Objective 5.2)</p>
<p class="hanga"><a id="ch5q6" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ich5q6"><strong>6.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>E</strong> is correct. There is no problem nesting <code>try/catch</code> blocks. As is normal, when an exception is thrown, the code in the <code>catch</code> block runs, and then the code in the <code>finally</code> block runs.</p>
<p class="hang-a"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, C, D,</strong> and <strong>F</strong> are incorrect based on the above. (OCA Objectives 8.2 and 8.4)</p>
<p class="hanga"><a id="ch5q7" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ich5q7"><strong>7.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>C</strong> is correct. An overriding method cannot throw a broader exception than the method it’s overriding. Class CC4’s method is an overload, not an override.</p>
<p class="hang-a"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, D,</strong> and <strong>E</strong> are incorrect based on the above. (OCA Objectives 8.2 and 8.4)</p>
<p class="hanga"><a id="ch5q8" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ich5q8"><strong>8.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>D</strong> is correct. Did you catch the static initializer block? Remember that switches work on “fall-through” logic and that fall-through logic also applies to the default case, which is used when no other case matches.</p>
<p class="hang-a"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, C, E, F,</strong> and <strong>G</strong> are incorrect based on the above. (OCA Objective 3.4)</p>
<p class="hanga"><a id="ch5q9" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ich5q9"><strong>9.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>D</strong> and <strong>F</strong> are correct. Because <code>i</code> was not initialized, case 1 will throw a <code>NullPointerException</code>. Case 0 will initiate an endless loop, not a stack overflow. Case 2’s downcast will <em>not</em> cause an exception.</p>
<p class="hang-a"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, C, E,</strong> and <strong>G</strong> are incorrect based on the above. (OCA Objectives 3.4 and 8.5)</p>
<p class="hanga1"><a id="page_338"></a><a id="ch5q10" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ich5q10"><strong>10.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>D</strong> is correct. The basic rule for unlabeled <code>continue</code> statements is that the current iteration stops early and execution jumps to the next iteration. The last two <code>continue</code> statements are redundant!</p>
<p class="hang-a"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, C, E,</strong> and <strong>F</strong> are incorrect based on the above. (OCA Objectives 5.2 and 5.5)</p>
<p class="hanga1"><a id="ch5q11" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ich5q11"><strong>11.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>H</strong> is correct. It’s true that the value of <code>String</code> s is <code>123</code> at the time that the divide-by-zero exception is thrown, but <code>finally()</code> is <em>not</em> guaranteed to complete, and in this case <code>finally()</code> never completes, so the <code>System.out.println</code> (S.O.P) never executes.</p>
<p class="hang-a"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, C, D, E, F,</strong> and <strong>G</strong> are incorrect based on the above. (OCA Objectives 8.2 and 8.5)</p>
<p class="hanga1"><a id="ch5q12" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ich5q12"><strong>12.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>C</strong> is correct. A <code>break</code> breaks out of the current innermost loop and carries on. A labeled <code>break</code> breaks out of and terminates the labeled loops.</p>
<p class="hang-a"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, D, E,</strong> and <strong>F</strong> are incorrect based on the above. (OCA Objectives 5.2 and 5.5)</p>
<p class="hanga1"><a id="ch5q13" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ich5q13"><strong>13.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>B</strong> and <strong>E</strong> are correct. First off, <code>go()</code> is a badly designed recursive method, guaranteed to cause a <code>StackOverflowError</code>. Since <code>Exception</code> is not a superclass of <code>Error</code>, catching an <code>Exception</code> will not help handle an <code>Error</code>, so fragment III will not complete normally. Only fragment II will catch the <code>Error</code>.</p>
<p class="hang-a"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, C, D,</strong> and <strong>F</strong> are incorrect based on the above. (OCA Objectives 8.1, 8.2, and 8.4)</p>
<p class="hanga1"><a id="ch5q14" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ich5q14"><strong>14.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>E</strong> is correct. A <code>switch</code>’s <code>cases</code> must be compile-time constants or <code>enum</code> values.</p>
<p class="hang-a"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, C, D, F,</strong> and <strong>G</strong> are incorrect based on the above. (OCA Objective 3.4)</p>
<p class="hanga1"><a id="ch5q15" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ich5q15"><strong>15.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>D</strong> is correct. This is kind of sneaky, but remember that we’re trying to toughen you up for the real exam. If you’re going to throw an <code>IOException</code>, you have to import the java.io package or declare the exception with a fully qualified name.</p>
<p class="hang-a"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, C,</strong> and <strong>E</strong> are incorrect. <strong>A, B,</strong> and <strong>C</strong> are incorrect based on the above. <strong>E</strong> is incorrect because it’s okay both to handle and declare an exception. (OCA Objectives 8.2 and 8.5)</p>
<p class="hanga1"><a id="ch5q16" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#ich5q16"><strong>16.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>C</strong> and <strong>D</strong> are correct. An overriding method cannot throw checked exceptions that are broader than those thrown by the overridden method. However, an overriding method <em>can</em> throw <code>RuntimeExceptions</code> not thrown by the overridden method.</p>
<p class="hang-a"><img class="inline" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, E,</strong> and <strong>F</strong> are incorrect based on the above. (OCA Objective 8.1)</p>
<div class="annotator-outer annotator-viewer viewer annotator-hide">
  <ul class="annotator-widget annotator-listing"></ul>
</div><div class="annotator-modal-wrapper annotator-editor-modal annotator-editor annotator-hide">
	<div class="annotator-outer editor">
		<h2 class="title">Highlight</h2>
		<form class="annotator-widget">
			<ul class="annotator-listing">
			<li class="annotator-item"><textarea id="annotator-field-15" placeholder="Add a note using markdown (optional)" class="js-editor" maxlength="750"></textarea></li></ul>
			<div class="annotator-controls">
				<a class="link-to-markdown" href="https://daringfireball.net/projects/markdown/basics" target="_blank">?</a>
				<ul>
					<li class="delete annotator-hide"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#delete" class="annotator-delete-note button positive">Delete Note</a></li>
					<li class="save"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#save" class="annotator-save annotator-focus button positive">Save Note</a></li>
					<li class="cancel"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#cancel" class="annotator-cancel button">Cancel</a></li>
				</ul>
			</div>
		</form>
	</div>
</div><div class="annotator-modal-wrapper annotator-delete-confirm-modal" style="display: none;">
  <div class="annotator-outer">
    <h2 class="title">Highlight</h2>
      <a class="js-close-delete-confirm annotator-cancel close" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#close">Close</a>
      <div class="annotator-widget">
         <div class="delete-confirm">
            Are you sure you want to permanently delete this note?
         </div>
         <div class="annotator-controls">
            <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#cancel" class="annotator-cancel button js-cancel-delete-confirm">No, I changed my mind</a>
            <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#delete" class="annotator-delete button positive js-delete-confirm">Yes, delete it</a>
         </div>
       </div>
   </div>
</div><div class="annotator-adder" style="display: none;">
	<ul class="adders ">
		
		<li class="copy"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#">Copy</a></li>
		
		<li class="add-highlight"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#">Add Highlight</a></li>
		<li class="add-note"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#">
			
				Add Note
			
		</a></li>
		
	</ul>
</div></div></div>



  <div class="t-sbo-prev sbo-prev sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">4&nbsp;Operators</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">6&nbsp;Strings, Arrays, ArrayLists, Dates, and Lambdas</div>
        </a>
    
  
  </div>

</section>
  </div>
<section class="sbo-saved-archives"></section>



          
          
  




    
    
      <div id="js-subscribe-nag" class="subscribe-nag clearfix trial-panel t-subscribe-nag collapsed slideUp">
        
        
          
          

          
            <p>You have 7 days left in your trial, Haridave. Subscribe today. <a href="https://www.safaribooksonline.com/subscribe/" class="ga-active-trial-subscribe-nag">See pricing options.</a></p>
          
        
        

      </div>

    
    



        
      </div>
      




  <footer class="pagefoot t-pagefoot" style="padding-bottom: 69px;">
    <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#" class="icon-up" style="display: block;"><div class="visuallyhidden">Back to top</div></a>
    <ul class="js-footer-nav">
      
        <li><a class="t-recommendations-footer" href="https://www.safaribooksonline.com/r/">Recommended</a></li>
      
      <li>
      
      <a class="t-queue-footer" href="https://www.safaribooksonline.com/s/">Queue</a>
      
      </li>
      
        <li><a class="t-recent-footer" href="https://www.safaribooksonline.com/history/">History</a></li>
        <li><a class="t-topics-footer" href="https://www.safaribooksonline.com/topics?q=*&amp;limit=21">Topics</a></li>
      
      
        <li><a class="t-tutorials-footer" href="https://www.safaribooksonline.com/tutorials/">Tutorials</a></li>
      
      <li><a class="t-settings-footer js-settings" href="https://www.safaribooksonline.com/u/">Settings</a></li>
      <li class="full-support"><a href="https://www.safaribooksonline.com/public/support">Support</a></li>
      <li><a href="https://www.safaribooksonline.com/apps/">Get the App</a></li>
      <li><a href="https://www.safaribooksonline.com/accounts/logout/">Sign Out</a></li>
    </ul>
    <span class="copyright">© 2017 <a href="https://www.safaribooksonline.com/" target="_blank">Safari</a>.</span>
    <a href="https://www.safaribooksonline.com/terms/">Terms of Service</a> /
    <a href="https://www.safaribooksonline.com/privacy/">Privacy Policy</a>
  </footer>

<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","queueTime":0,"licenseKey":"510f1a6865","errorBeacon":"bam.nr-data.net","agent":"","applicationTime":579,"applicationID":"3275661","transactionName":"YgdaZ0NSW0cEB0RdWltNfkZfUEFdCgofXFBHDVYdR1pQQxZeRl1QQj1aWkU="}</script>


    

    <script src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(2)" charset="utf-8"></script>
    <script src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(3)" charset="utf-8"></script><script type="text/javascript" id="">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","https://connect.facebook.net/en_US/fbevents.js");fbq("init","1732687426968531");fbq("track","PageView");</script>
<noscript>&lt;img height="1" width="1" style="display:none" src="https://www.facebook.com/tr?id=1732687426968531&amp;amp;ev=PageView&amp;amp;noscript=1"&gt;</noscript><div style="width:0px; height:0px; display:none; visibility:hidden;" id="batBeacon0.79713329937001"><img style="width:0px; height:0px; display:none; visibility:hidden;" id="batBeacon0.9495598444101674" width="0" height="0" alt="" src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/0"></div>
  

<script src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(4)" type="text/javascript"></script><script src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(5)" type="text/javascript"></script><div class="annotator-notice">Sorry we could not read the annotations from the store</div><div class="font-flyout" style="top: 200.003px; left: 1288px;"><div class="font-controls-panel">
	<div class="nightmodes">
		<ul>
			<li class="day"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#" id="day-mode" title="Day Mode">
				<i class="fa fa-sun-o"></i>
				<span>Day Mode</span></a></li>
			<li class="cloudy"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#" id="cloudy-mode" title="Cloudy Mode">
				<i class="fa fa-cloud"></i>
				<span>Cloud Mode</span>
			</a></li>
			<li class="night"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#" id="night-mode" title="Night Mode">
				<i class="fa fa-moon-o"></i>
				<span>Night Mode</span>
			</a></li>
		</ul>
	</div>

	<div class="font-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-font left"></i>
			<span class="filler" style="width: 50%;"></span>
			<div id="js-font-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle" style="position: relative; left: 80px;"></div>
			<i class="fa fa-font right"></i>
		</div>
	</div>

	<div class="column-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-compress left"></i>
			<span class="filler" style="width: 50%;"></span>
			<div id="js-column-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle" style="position: relative; left: 80px;"></div>
			<i class="fa fa-expand right"></i>
		</div>
	</div>

	<a id="reset" class="button" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html#">Reset</a>
</div>
</div><img src="./5 Flow Control and Exceptions - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/seg" width="1" height="1" border="0" alt="" style="display: none;"></body></html>