<!DOCTYPE html>
<!-- saved from url=(0082)https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html -->
<html class=" js flexbox flexboxlegacy no-touch websqldatabase indexeddb history csscolumns csstransforms localstorage sessionstorage applicationcache svg inlinesvg" lang="en" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#" itemscope="" itemtype="http://schema.org/Book http://schema.org/ItemPage" "="" data-login-url="/accounts/login/" data-offline-url="/" data-url="/library/view/oca-java-se/9781260011388/ch01.html" data-csrf-cookie="csrfsafari" data-highlight-privacy="" data-user-id="2290670" data-user-uuid="47d2d020-0715-4a80-b4fa-020254e89d38" data-username="davejay21" data-account-type="Trial" data-activated-trial-date="11/27/2017" data-archive="9781260011388" data-publishers="McGraw-Hill" data-htmlfile-name="ch01.html" data-epub-title="OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)" data-debug="0" data-testing="0" style=""><!--<![endif]--><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><meta name="author" content="Safari Books Online"><meta name="format-detection" content="telephone=no"><meta http-equiv="cleartype" content="on"><meta name="HandheldFriendly" content="True"><meta name="MobileOptimized" content="320"><meta name="apple-itunes-app" content="app-id=881697395, app-argument=safaridetail://9781260011388"><meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0, maximum-scale=1.0"><meta property="twitter:account_id" content="4503599627559754"><script async="" src="https://connect.facebook.net/en_US/fbevents.js"></script><script type="text/javascript" async="" src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/bat.js"></script><script type="text/javascript" async="" src="https://www.googleadservices.com/pagead/conversion_async.js"></script><script type="text/javascript" async="" src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/insight.min.js"></script><script type="text/javascript" async="" src="https://www.googleadservices.com/pagead/conversion_async.js"></script><script type="text/javascript" async="" src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/linkid.js"></script><script async="" src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/gtm.js"></script><script async="" src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/analytics.js"></script><script type="text/javascript">(window.NREUM||(NREUM={})).loader_config={xpid:"VQQDUVVVGwACU1RUAQA="};window.NREUM||(NREUM={}),__nr_require=function(t,e,n){function r(n){if(!e[n]){var o=e[n]={exports:{}};t[n][0].call(o.exports,function(e){var o=t[n][1][e];return r(o||e)},o,o.exports)}return e[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(t,e,n){function r(t){try{c.console&&console.log(t)}catch(e){}}var o,i=t("ee"),a=t(20),c={};try{o=localStorage.getItem("__nr_flags").split(","),console&&"function"==typeof console.log&&(c.console=!0,o.indexOf("dev")!==-1&&(c.dev=!0),o.indexOf("nr_dev")!==-1&&(c.nrDev=!0))}catch(s){}c.nrDev&&i.on("internal-error",function(t){r(t.stack)}),c.dev&&i.on("fn-err",function(t,e,n){r(n.stack)}),c.dev&&(r("NR AGENT IN DEVELOPMENT MODE"),r("flags: "+a(c,function(t,e){return t}).join(", ")))},{}],2:[function(t,e,n){function r(t,e,n,r,c){try{h?h-=1:o(c||new UncaughtException(t,e,n),!0)}catch(f){try{i("ierr",[f,s.now(),!0])}catch(d){}}return"function"==typeof u&&u.apply(this,a(arguments))}function UncaughtException(t,e,n){this.message=t||"Uncaught error with no additional information",this.sourceURL=e,this.line=n}function o(t,e){var n=e?null:s.now();i("err",[t,n])}var i=t("handle"),a=t(21),c=t("ee"),s=t("loader"),f=t("gos"),u=window.onerror,d=!1,p="nr@seenError",h=0;s.features.err=!0,t(1),window.onerror=r;try{throw new Error}catch(l){"stack"in l&&(t(13),t(12),"addEventListener"in window&&t(6),s.xhrWrappable&&t(14),d=!0)}c.on("fn-start",function(t,e,n){d&&(h+=1)}),c.on("fn-err",function(t,e,n){d&&!n[p]&&(f(n,p,function(){return!0}),this.thrown=!0,o(n))}),c.on("fn-end",function(){d&&!this.thrown&&h>0&&(h-=1)}),c.on("internal-error",function(t){i("ierr",[t,s.now(),!0])})},{}],3:[function(t,e,n){t("loader").features.ins=!0},{}],4:[function(t,e,n){function r(){M++,S=y.hash,this[u]=b.now()}function o(){M--,y.hash!==S&&i(0,!0);var t=b.now();this[l]=~~this[l]+t-this[u],this[d]=t}function i(t,e){E.emit("newURL",[""+y,e])}function a(t,e){t.on(e,function(){this[e]=b.now()})}var c="-start",s="-end",f="-body",u="fn"+c,d="fn"+s,p="cb"+c,h="cb"+s,l="jsTime",m="fetch",v="addEventListener",w=window,y=w.location,b=t("loader");if(w[v]&&b.xhrWrappable){var g=t(10),x=t(11),E=t(8),P=t(6),O=t(13),R=t(7),T=t(14),L=t(9),j=t("ee"),N=j.get("tracer");t(15),b.features.spa=!0;var S,M=0;j.on(u,r),j.on(p,r),j.on(d,o),j.on(h,o),j.buffer([u,d,"xhr-done","xhr-resolved"]),P.buffer([u]),O.buffer(["setTimeout"+s,"clearTimeout"+c,u]),T.buffer([u,"new-xhr","send-xhr"+c]),R.buffer([m+c,m+"-done",m+f+c,m+f+s]),E.buffer(["newURL"]),g.buffer([u]),x.buffer(["propagate",p,h,"executor-err","resolve"+c]),N.buffer([u,"no-"+u]),L.buffer(["new-jsonp","cb-start","jsonp-error","jsonp-end"]),a(T,"send-xhr"+c),a(j,"xhr-resolved"),a(j,"xhr-done"),a(R,m+c),a(R,m+"-done"),a(L,"new-jsonp"),a(L,"jsonp-end"),a(L,"cb-start"),E.on("pushState-end",i),E.on("replaceState-end",i),w[v]("hashchange",i,!0),w[v]("load",i,!0),w[v]("popstate",function(){i(0,M>1)},!0)}},{}],5:[function(t,e,n){function r(t){}if(window.performance&&window.performance.timing&&window.performance.getEntriesByType){var o=t("ee"),i=t("handle"),a=t(13),c=t(12),s="learResourceTimings",f="addEventListener",u="resourcetimingbufferfull",d="bstResource",p="resource",h="-start",l="-end",m="fn"+h,v="fn"+l,w="bstTimer",y="pushState",b=t("loader");b.features.stn=!0,t(8);var g=NREUM.o.EV;o.on(m,function(t,e){var n=t[0];n instanceof g&&(this.bstStart=b.now())}),o.on(v,function(t,e){var n=t[0];n instanceof g&&i("bst",[n,e,this.bstStart,b.now()])}),a.on(m,function(t,e,n){this.bstStart=b.now(),this.bstType=n}),a.on(v,function(t,e){i(w,[e,this.bstStart,b.now(),this.bstType])}),c.on(m,function(){this.bstStart=b.now()}),c.on(v,function(t,e){i(w,[e,this.bstStart,b.now(),"requestAnimationFrame"])}),o.on(y+h,function(t){this.time=b.now(),this.startPath=location.pathname+location.hash}),o.on(y+l,function(t){i("bstHist",[location.pathname+location.hash,this.startPath,this.time])}),f in window.performance&&(window.performance["c"+s]?window.performance[f](u,function(t){i(d,[window.performance.getEntriesByType(p)]),window.performance["c"+s]()},!1):window.performance[f]("webkit"+u,function(t){i(d,[window.performance.getEntriesByType(p)]),window.performance["webkitC"+s]()},!1)),document[f]("scroll",r,{passive:!0}),document[f]("keypress",r,!1),document[f]("click",r,!1)}},{}],6:[function(t,e,n){function r(t){for(var e=t;e&&!e.hasOwnProperty(u);)e=Object.getPrototypeOf(e);e&&o(e)}function o(t){c.inPlace(t,[u,d],"-",i)}function i(t,e){return t[1]}var a=t("ee").get("events"),c=t(23)(a,!0),s=t("gos"),f=XMLHttpRequest,u="addEventListener",d="removeEventListener";e.exports=a,"getPrototypeOf"in Object?(r(document),r(window),r(f.prototype)):f.prototype.hasOwnProperty(u)&&(o(window),o(f.prototype)),a.on(u+"-start",function(t,e){var n=t[1],r=s(n,"nr@wrapped",function(){function t(){if("function"==typeof n.handleEvent)return n.handleEvent.apply(n,arguments)}var e={object:t,"function":n}[typeof n];return e?c(e,"fn-",null,e.name||"anonymous"):n});this.wrapped=t[1]=r}),a.on(d+"-start",function(t){t[1]=this.wrapped||t[1]})},{}],7:[function(t,e,n){function r(t,e,n){var r=t[e];"function"==typeof r&&(t[e]=function(){var t=r.apply(this,arguments);return o.emit(n+"start",arguments,t),t.then(function(e){return o.emit(n+"end",[null,e],t),e},function(e){throw o.emit(n+"end",[e],t),e})})}var o=t("ee").get("fetch"),i=t(20);e.exports=o;var a=window,c="fetch-",s=c+"body-",f=["arrayBuffer","blob","json","text","formData"],u=a.Request,d=a.Response,p=a.fetch,h="prototype";u&&d&&p&&(i(f,function(t,e){r(u[h],e,s),r(d[h],e,s)}),r(a,"fetch",c),o.on(c+"end",function(t,e){var n=this;e?e.clone().arrayBuffer().then(function(t){n.rxSize=t.byteLength,o.emit(c+"done",[null,e],n)}):o.emit(c+"done",[t],n)}))},{}],8:[function(t,e,n){var r=t("ee").get("history"),o=t(23)(r);e.exports=r,o.inPlace(window.history,["pushState","replaceState"],"-")},{}],9:[function(t,e,n){function r(t){function e(){s.emit("jsonp-end",[],p),t.removeEventListener("load",e,!1),t.removeEventListener("error",n,!1)}function n(){s.emit("jsonp-error",[],p),s.emit("jsonp-end",[],p),t.removeEventListener("load",e,!1),t.removeEventListener("error",n,!1)}var r=t&&"string"==typeof t.nodeName&&"script"===t.nodeName.toLowerCase();if(r){var o="function"==typeof t.addEventListener;if(o){var a=i(t.src);if(a){var u=c(a),d="function"==typeof u.parent[u.key];if(d){var p={};f.inPlace(u.parent,[u.key],"cb-",p),t.addEventListener("load",e,!1),t.addEventListener("error",n,!1),s.emit("new-jsonp",[t.src],p)}}}}}function o(){return"addEventListener"in window}function i(t){var e=t.match(u);return e?e[1]:null}function a(t,e){var n=t.match(p),r=n[1],o=n[3];return o?a(o,e[r]):e[r]}function c(t){var e=t.match(d);return e&&e.length>=3?{key:e[2],parent:a(e[1],window)}:{key:t,parent:window}}var s=t("ee").get("jsonp"),f=t(23)(s);if(e.exports=s,o()){var u=/[?&](?:callback|cb)=([^&#]+)/,d=/(.*)\.([^.]+)/,p=/^(\w+)(\.|$)(.*)$/,h=["appendChild","insertBefore","replaceChild"];f.inPlace(HTMLElement.prototype,h,"dom-"),f.inPlace(HTMLHeadElement.prototype,h,"dom-"),f.inPlace(HTMLBodyElement.prototype,h,"dom-"),s.on("dom-start",function(t){r(t[0])})}},{}],10:[function(t,e,n){var r=t("ee").get("mutation"),o=t(23)(r),i=NREUM.o.MO;e.exports=r,i&&(window.MutationObserver=function(t){return this instanceof i?new i(o(t,"fn-")):i.apply(this,arguments)},MutationObserver.prototype=i.prototype)},{}],11:[function(t,e,n){function r(t){var e=a.context(),n=c(t,"executor-",e),r=new f(n);return a.context(r).getCtx=function(){return e},a.emit("new-promise",[r,e],e),r}function o(t,e){return e}var i=t(23),a=t("ee").get("promise"),c=i(a),s=t(20),f=NREUM.o.PR;e.exports=a,f&&(window.Promise=r,["all","race"].forEach(function(t){var e=f[t];f[t]=function(n){function r(t){return function(){a.emit("propagate",[null,!o],i),o=o||!t}}var o=!1;s(n,function(e,n){Promise.resolve(n).then(r("all"===t),r(!1))});var i=e.apply(f,arguments),c=f.resolve(i);return c}}),["resolve","reject"].forEach(function(t){var e=f[t];f[t]=function(t){var n=e.apply(f,arguments);return t!==n&&a.emit("propagate",[t,!0],n),n}}),f.prototype["catch"]=function(t){return this.then(null,t)},f.prototype=Object.create(f.prototype,{constructor:{value:r}}),s(Object.getOwnPropertyNames(f),function(t,e){try{r[e]=f[e]}catch(n){}}),a.on("executor-start",function(t){t[0]=c(t[0],"resolve-",this),t[1]=c(t[1],"resolve-",this)}),a.on("executor-err",function(t,e,n){t[1](n)}),c.inPlace(f.prototype,["then"],"then-",o),a.on("then-start",function(t,e){this.promise=e,t[0]=c(t[0],"cb-",this),t[1]=c(t[1],"cb-",this)}),a.on("then-end",function(t,e,n){this.nextPromise=n;var r=this.promise;a.emit("propagate",[r,!0],n)}),a.on("cb-end",function(t,e,n){a.emit("propagate",[n,!0],this.nextPromise)}),a.on("propagate",function(t,e,n){this.getCtx&&!e||(this.getCtx=function(){if(t instanceof Promise)var e=a.context(t);return e&&e.getCtx?e.getCtx():this})}),r.toString=function(){return""+f})},{}],12:[function(t,e,n){var r=t("ee").get("raf"),o=t(23)(r),i="equestAnimationFrame";e.exports=r,o.inPlace(window,["r"+i,"mozR"+i,"webkitR"+i,"msR"+i],"raf-"),r.on("raf-start",function(t){t[0]=o(t[0],"fn-")})},{}],13:[function(t,e,n){function r(t,e,n){t[0]=a(t[0],"fn-",null,n)}function o(t,e,n){this.method=n,this.timerDuration=isNaN(t[1])?0:+t[1],t[0]=a(t[0],"fn-",this,n)}var i=t("ee").get("timer"),a=t(23)(i),c="setTimeout",s="setInterval",f="clearTimeout",u="-start",d="-";e.exports=i,a.inPlace(window,[c,"setImmediate"],c+d),a.inPlace(window,[s],s+d),a.inPlace(window,[f,"clearImmediate"],f+d),i.on(s+u,r),i.on(c+u,o)},{}],14:[function(t,e,n){function r(t,e){d.inPlace(e,["onreadystatechange"],"fn-",c)}function o(){var t=this,e=u.context(t);t.readyState>3&&!e.resolved&&(e.resolved=!0,u.emit("xhr-resolved",[],t)),d.inPlace(t,y,"fn-",c)}function i(t){b.push(t),l&&(x?x.then(a):v?v(a):(E=-E,P.data=E))}function a(){for(var t=0;t<b.length;t++)r([],b[t]);b.length&&(b=[])}function c(t,e){return e}function s(t,e){for(var n in t)e[n]=t[n];return e}t(6);var f=t("ee"),u=f.get("xhr"),d=t(23)(u),p=NREUM.o,h=p.XHR,l=p.MO,m=p.PR,v=p.SI,w="readystatechange",y=["onload","onerror","onabort","onloadstart","onloadend","onprogress","ontimeout"],b=[];e.exports=u;var g=window.XMLHttpRequest=function(t){var e=new h(t);try{u.emit("new-xhr",[e],e),e.addEventListener(w,o,!1)}catch(n){try{u.emit("internal-error",[n])}catch(r){}}return e};if(s(h,g),g.prototype=h.prototype,d.inPlace(g.prototype,["open","send"],"-xhr-",c),u.on("send-xhr-start",function(t,e){r(t,e),i(e)}),u.on("open-xhr-start",r),l){var x=m&&m.resolve();if(!v&&!m){var E=1,P=document.createTextNode(E);new l(a).observe(P,{characterData:!0})}}else f.on("fn-end",function(t){t[0]&&t[0].type===w||a()})},{}],15:[function(t,e,n){function r(t){var e=this.params,n=this.metrics;if(!this.ended){this.ended=!0;for(var r=0;r<d;r++)t.removeEventListener(u[r],this.listener,!1);if(!e.aborted){if(n.duration=a.now()-this.startTime,4===t.readyState){e.status=t.status;var i=o(t,this.lastSize);if(i&&(n.rxSize=i),this.sameOrigin){var s=t.getResponseHeader("X-NewRelic-App-Data");s&&(e.cat=s.split(", ").pop())}}else e.status=0;n.cbTime=this.cbTime,f.emit("xhr-done",[t],t),c("xhr",[e,n,this.startTime])}}}function o(t,e){var n=t.responseType;if("json"===n&&null!==e)return e;var r="arraybuffer"===n||"blob"===n||"json"===n?t.response:t.responseText;return l(r)}function i(t,e){var n=s(e),r=t.params;r.host=n.hostname+":"+n.port,r.pathname=n.pathname,t.sameOrigin=n.sameOrigin}var a=t("loader");if(a.xhrWrappable){var c=t("handle"),s=t(16),f=t("ee"),u=["load","error","abort","timeout"],d=u.length,p=t("id"),h=t(19),l=t(18),m=window.XMLHttpRequest;a.features.xhr=!0,t(14),f.on("new-xhr",function(t){var e=this;e.totalCbs=0,e.called=0,e.cbTime=0,e.end=r,e.ended=!1,e.xhrGuids={},e.lastSize=null,h&&(h>34||h<10)||window.opera||t.addEventListener("progress",function(t){e.lastSize=t.loaded},!1)}),f.on("open-xhr-start",function(t){this.params={method:t[0]},i(this,t[1]),this.metrics={}}),f.on("open-xhr-end",function(t,e){"loader_config"in NREUM&&"xpid"in NREUM.loader_config&&this.sameOrigin&&e.setRequestHeader("X-NewRelic-ID",NREUM.loader_config.xpid)}),f.on("send-xhr-start",function(t,e){var n=this.metrics,r=t[0],o=this;if(n&&r){var i=l(r);i&&(n.txSize=i)}this.startTime=a.now(),this.listener=function(t){try{"abort"===t.type&&(o.params.aborted=!0),("load"!==t.type||o.called===o.totalCbs&&(o.onloadCalled||"function"!=typeof e.onload))&&o.end(e)}catch(n){try{f.emit("internal-error",[n])}catch(r){}}};for(var c=0;c<d;c++)e.addEventListener(u[c],this.listener,!1)}),f.on("xhr-cb-time",function(t,e,n){this.cbTime+=t,e?this.onloadCalled=!0:this.called+=1,this.called!==this.totalCbs||!this.onloadCalled&&"function"==typeof n.onload||this.end(n)}),f.on("xhr-load-added",function(t,e){var n=""+p(t)+!!e;this.xhrGuids&&!this.xhrGuids[n]&&(this.xhrGuids[n]=!0,this.totalCbs+=1)}),f.on("xhr-load-removed",function(t,e){var n=""+p(t)+!!e;this.xhrGuids&&this.xhrGuids[n]&&(delete this.xhrGuids[n],this.totalCbs-=1)}),f.on("addEventListener-end",function(t,e){e instanceof m&&"load"===t[0]&&f.emit("xhr-load-added",[t[1],t[2]],e)}),f.on("removeEventListener-end",function(t,e){e instanceof m&&"load"===t[0]&&f.emit("xhr-load-removed",[t[1],t[2]],e)}),f.on("fn-start",function(t,e,n){e instanceof m&&("onload"===n&&(this.onload=!0),("load"===(t[0]&&t[0].type)||this.onload)&&(this.xhrCbStart=a.now()))}),f.on("fn-end",function(t,e){this.xhrCbStart&&f.emit("xhr-cb-time",[a.now()-this.xhrCbStart,this.onload,e],e)})}},{}],16:[function(t,e,n){e.exports=function(t){var e=document.createElement("a"),n=window.location,r={};e.href=t,r.port=e.port;var o=e.href.split("://");!r.port&&o[1]&&(r.port=o[1].split("/")[0].split("@").pop().split(":")[1]),r.port&&"0"!==r.port||(r.port="https"===o[0]?"443":"80"),r.hostname=e.hostname||n.hostname,r.pathname=e.pathname,r.protocol=o[0],"/"!==r.pathname.charAt(0)&&(r.pathname="/"+r.pathname);var i=!e.protocol||":"===e.protocol||e.protocol===n.protocol,a=e.hostname===document.domain&&e.port===n.port;return r.sameOrigin=i&&(!e.hostname||a),r}},{}],17:[function(t,e,n){function r(){}function o(t,e,n){return function(){return i(t,[f.now()].concat(c(arguments)),e?null:this,n),e?void 0:this}}var i=t("handle"),a=t(20),c=t(21),s=t("ee").get("tracer"),f=t("loader"),u=NREUM;"undefined"==typeof window.newrelic&&(newrelic=u);var d=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit","addRelease"],p="api-",h=p+"ixn-";a(d,function(t,e){u[e]=o(p+e,!0,"api")}),u.addPageAction=o(p+"addPageAction",!0),u.setCurrentRouteName=o(p+"routeName",!0),e.exports=newrelic,u.interaction=function(){return(new r).get()};var l=r.prototype={createTracer:function(t,e){var n={},r=this,o="function"==typeof e;return i(h+"tracer",[f.now(),t,n],r),function(){if(s.emit((o?"":"no-")+"fn-start",[f.now(),r,o],n),o)try{return e.apply(this,arguments)}catch(t){throw s.emit("fn-err",[arguments,this,t],n),t}finally{s.emit("fn-end",[f.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(t,e){l[e]=o(h+e)}),newrelic.noticeError=function(t){"string"==typeof t&&(t=new Error(t)),i("err",[t,f.now()])}},{}],18:[function(t,e,n){e.exports=function(t){if("string"==typeof t&&t.length)return t.length;if("object"==typeof t){if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer&&t.byteLength)return t.byteLength;if("undefined"!=typeof Blob&&t instanceof Blob&&t.size)return t.size;if(!("undefined"!=typeof FormData&&t instanceof FormData))try{return JSON.stringify(t).length}catch(e){return}}}},{}],19:[function(t,e,n){var r=0,o=navigator.userAgent.match(/Firefox[\/\s](\d+\.\d+)/);o&&(r=+o[1]),e.exports=r},{}],20:[function(t,e,n){function r(t,e){var n=[],r="",i=0;for(r in t)o.call(t,r)&&(n[i]=e(r,t[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;e.exports=r},{}],21:[function(t,e,n){function r(t,e,n){e||(e=0),"undefined"==typeof n&&(n=t?t.length:0);for(var r=-1,o=n-e||0,i=Array(o<0?0:o);++r<o;)i[r]=t[e+r];return i}e.exports=r},{}],22:[function(t,e,n){e.exports={exists:"undefined"!=typeof window.performance&&window.performance.timing&&"undefined"!=typeof window.performance.timing.navigationStart}},{}],23:[function(t,e,n){function r(t){return!(t&&t instanceof Function&&t.apply&&!t[a])}var o=t("ee"),i=t(21),a="nr@original",c=Object.prototype.hasOwnProperty,s=!1;e.exports=function(t,e){function n(t,e,n,o){function nrWrapper(){var r,a,c,s;try{a=this,r=i(arguments),c="function"==typeof n?n(r,a):n||{}}catch(f){p([f,"",[r,a,o],c])}u(e+"start",[r,a,o],c);try{return s=t.apply(a,r)}catch(d){throw u(e+"err",[r,a,d],c),d}finally{u(e+"end",[r,a,s],c)}}return r(t)?t:(e||(e=""),nrWrapper[a]=t,d(t,nrWrapper),nrWrapper)}function f(t,e,o,i){o||(o="");var a,c,s,f="-"===o.charAt(0);for(s=0;s<e.length;s++)c=e[s],a=t[c],r(a)||(t[c]=n(a,f?c+o:o,i,c))}function u(n,r,o){if(!s||e){var i=s;s=!0;try{t.emit(n,r,o,e)}catch(a){p([a,n,r,o])}s=i}}function d(t,e){if(Object.defineProperty&&Object.keys)try{var n=Object.keys(t);return n.forEach(function(n){Object.defineProperty(e,n,{get:function(){return t[n]},set:function(e){return t[n]=e,e}})}),e}catch(r){p([r])}for(var o in t)c.call(t,o)&&(e[o]=t[o]);return e}function p(e){try{t.emit("internal-error",e)}catch(n){}}return t||(t=o),n.inPlace=f,n.flag=a,n}},{}],ee:[function(t,e,n){function r(){}function o(t){function e(t){return t&&t instanceof r?t:t?s(t,c,i):i()}function n(n,r,o,i){if(!p.aborted||i){t&&t(n,r,o);for(var a=e(o),c=l(n),s=c.length,f=0;f<s;f++)c[f].apply(a,r);var d=u[y[n]];return d&&d.push([b,n,r,a]),a}}function h(t,e){w[t]=l(t).concat(e)}function l(t){return w[t]||[]}function m(t){return d[t]=d[t]||o(n)}function v(t,e){f(t,function(t,n){e=e||"feature",y[n]=e,e in u||(u[e]=[])})}var w={},y={},b={on:h,emit:n,get:m,listeners:l,context:e,buffer:v,abort:a,aborted:!1};return b}function i(){return new r}function a(){(u.api||u.feature)&&(p.aborted=!0,u=p.backlog={})}var c="nr@context",s=t("gos"),f=t(20),u={},d={},p=e.exports=o();p.backlog=u},{}],gos:[function(t,e,n){function r(t,e,n){if(o.call(t,e))return t[e];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,e,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return t[e]=r,r}var o=Object.prototype.hasOwnProperty;e.exports=r},{}],handle:[function(t,e,n){function r(t,e,n,r){o.buffer([t],r),o.emit(t,e,n)}var o=t("ee").get("handle");e.exports=r,r.ee=o},{}],id:[function(t,e,n){function r(t){var e=typeof t;return!t||"object"!==e&&"function"!==e?-1:t===window?0:a(t,i,function(){return o++})}var o=1,i="nr@id",a=t("gos");e.exports=r},{}],loader:[function(t,e,n){function r(){if(!x++){var t=g.info=NREUM.info,e=p.getElementsByTagName("script")[0];if(setTimeout(u.abort,3e4),!(t&&t.licenseKey&&t.applicationID&&e))return u.abort();f(y,function(e,n){t[e]||(t[e]=n)}),s("mark",["onload",a()+g.offset],null,"api");var n=p.createElement("script");n.src="https://"+t.agent,e.parentNode.insertBefore(n,e)}}function o(){"complete"===p.readyState&&i()}function i(){s("mark",["domContent",a()+g.offset],null,"api")}function a(){return E.exists&&performance.now?Math.round(performance.now()):(c=Math.max((new Date).getTime(),c))-g.offset}var c=(new Date).getTime(),s=t("handle"),f=t(20),u=t("ee"),d=window,p=d.document,h="addEventListener",l="attachEvent",m=d.XMLHttpRequest,v=m&&m.prototype;NREUM.o={ST:setTimeout,SI:d.setImmediate,CT:clearTimeout,XHR:m,REQ:d.Request,EV:d.Event,PR:d.Promise,MO:d.MutationObserver};var w=""+location,y={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-spa-1071.min.js"},b=m&&v&&v[h]&&!/CriOS/.test(navigator.userAgent),g=e.exports={offset:c,now:a,origin:w,features:{},xhrWrappable:b};t(17),p[h]?(p[h]("DOMContentLoaded",i,!1),d[h]("load",r,!1)):(p[l]("onreadystatechange",o),d[l]("onload",r)),s("mark",["firstbyte",c],null,"api");var x=0,E=t(22)},{}]},{},["loader",2,15,5,3,4]);</script><link rel="apple-touch-icon" href="https://www.safaribooksonline.com/static/images/apple-touch-icon.8cc2fd27400e.png"><link rel="shortcut icon" href="https://www.safaribooksonline.com/favicon.ico" type="image/x-icon"><link href="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/css" rel="stylesheet" type="text/css"><title>1&nbsp;Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)</title><link rel="stylesheet" href="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/d6ec1592ffb3.css" type="text/css"><link rel="stylesheet" type="text/css" href="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/annotator.e34eec1a0d5a.css"><link rel="stylesheet" href="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/font-awesome.min.css"><style type="text/css" title="ibis-book">
    @page{margin:1.5em}#sbo-rt-content div{margin:0 .5em 0 .5em}#sbo-rt-content svg{height:98%;width:100%}#sbo-rt-content img{max-height:100%;max-width:100%}#sbo-rt-content a{text-decoration:none}#sbo-rt-content .dedi1{margin-top:8em;margin-bottom:.4em;text-align:center}#sbo-rt-content .dedi{margin-top:1em;margin-bottom:.4em;text-align:center}#sbo-rt-content .copyright{margin-top:1em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .copyrightt{margin-top:1.5em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .h2{font-size:1.8em;margin-top:.5em;margin-bottom:.5em;text-indent:.1em}#sbo-rt-content .h2a{font-size:1.5em;margin-top:.2em;margin-bottom:2.5em;text-indent:.1em}#sbo-rt-content .h2d{font-size:130%;color:#fff;background-color:#000;padding:.2em;margin-right:40%;margin-top:2em;margin-bottom:2em;text-indent:1em}#sbo-rt-content .code{margin-top:1em;margin-bottom:1em;margin-left:5em}#sbo-rt-content .code1{margin-top:1em;margin-bottom:1em;margin-left:1.3em}#sbo-rt-content .codea{margin-top:1em;margin-bottom:1em;margin-left:.1em}#sbo-rt-content .code2{margin-top:1em;margin-bottom:1em;margin-left:2.5em}#sbo-rt-content .code2a{margin-top:1em;margin-bottom:1em;margin-left:3.5em}#sbo-rt-content .toc-chap{margin-top:1em;margin-bottom:.5em;margin-left:1em;text-indent:.01em}#sbo-rt-content .toc{margin-top:.1em;margin-bottom:.1em;margin-left:1.8em;text-indent:.01em}#sbo-rt-content .tocs{margin-top:.6em;margin-bottom:.6em;margin-left:1.2em;text-indent:.01em}#sbo-rt-content .tocs1{margin-top:.6em;margin-bottom:.4em;margin-left:3em;text-indent:.01em}#sbo-rt-content .noindentd{font-size:1.2em;color:#fff;background-color:#000;padding:.2em;margin-right:50%;margin-top:1em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .icon{margin-top:1em;margin-bottom:1em;text-indent:.01em}#sbo-rt-content .noindent{margin-top:.1em;margin-bottom:.1em;text-indent:.01em}#sbo-rt-content .noindentl{margin-top:1em;margin-bottom:.1em;margin-left:2.5em;text-indent:.01em}#sbo-rt-content .indent{margin-top:.1em;margin-bottom:.1em;text-indent:1.2em}#sbo-rt-content .indentt{margin-top:1em;margin-bottom:.1em;text-indent:1.2em}#sbo-rt-content .indenttb{margin-top:1em;margin-bottom:1em;text-indent:1.2em}#sbo-rt-content .h3{font-size:160%;margin-top:1.2em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .h3n{font-size:160%;margin-top:.5em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .h3s{font-size:120%;margin-top:.2em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .h3a{font-size:120%;color:#fff;background-color:#000;padding:.2em;margin-right:40%;margin-top:1.2em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .h3a1{font-size:120%;color:#fff;background-color:#000;padding:.2em;margin-right:65%;margin-top:1.2em;margin-bottom:.001em;text-indent:1em}#sbo-rt-content .line{margin-top:.1em;margin-bottom:.001em;border:0;border-bottom:solid black .1em}#sbo-rt-content .h4s{font-size:120%;margin-top:.5em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .h4{font-size:140%;margin-top:1.2em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .h4a{font-size:120%;margin-top:1.2em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .noindentt{margin-top:1em;margin-bottom:.1em;text-indent:.01em}#sbo-rt-content .indentb{margin-top:.1em;margin-bottom:1.2em;text-indent:1.2em}#sbo-rt-content .imagef{margin-top:1em;margin-bottom:1em;text-align:center}#sbo-rt-content .imagel{margin-top:1em;margin-bottom:1em;text-indent:.1em}#sbo-rt-content .imagel1{margin-top:1em;margin-bottom:1em;margin-left:1em;text-indent:.1em}#sbo-rt-content .images{margin-top:1em;margin-bottom:1em;text-align:center}#sbo-rt-content .inline{text-decoration:middle}#sbo-rt-content .imaget{margin-top:.5em;margin-bottom:.5em;text-indent:.1em}#sbo-rt-content .right{margin-top:.1em;margin-bottom:.1em;text-align:right}#sbo-rt-content .figs{background-color:#000;color:#fff;padding:.2em}#sbo-rt-content .bull{margin-top:.3em;margin-bottom:.1em;margin-left:3.5em;text-indent:-1.5em}#sbo-rt-content .tick{margin-top:.5em;margin-bottom:.1em;text-indent:-2em;margin-left:4em}#sbo-rt-content .drop{font-size:4em;margin:-.2em .01em -.2em .01em;text-indent:.01em;float:left}#sbo-rt-content .tick1{margin-top:.5em;margin-bottom:.1em;text-indent:-2em;margin-left:3em}#sbo-rt-content .noindenttop{margin-top:4em;margin-bottom:.2em;text-indent:.01em}#sbo-rt-content .bulletxlb{margin-top:.4em;margin-bottom:.4em;margin-left:5.7em;text-indent:-1.4em}#sbo-rt-content .bulletxlb1{margin-top:.4em;margin-bottom:.4em;margin-left:7em;text-indent:-1.4em}#sbo-rt-content .bulletxl{margin-top:.4em;margin-bottom:.4em;margin-left:5.7em;text-indent:-5.3em}#sbo-rt-content .bulletxla{margin-top:.4em;margin-bottom:.4em;margin-left:5.7em;text-indent:-3.2em}#sbo-rt-content .bulletxls{margin-top:.4em;margin-bottom:.4em;margin-left:4em;text-indent:-1.4em}#sbo-rt-content .bulletxt{margin-top:1em;margin-bottom:.1em;margin-left:2.6em;text-indent:-1.4em}#sbo-rt-content .bulletxn{margin-top:1em;margin-bottom:.1em;margin-left:2.6em;text-indent:.01em}#sbo-rt-content .bulletx{margin-top:.4em;margin-bottom:.1em;margin-left:2.6em;text-indent:-1.4em}#sbo-rt-content .bulletxs{margin-top:.4em;margin-bottom:.1em;margin-left:4.2em;text-indent:-1.5em}#sbo-rt-content .bulletxsa{margin-top:.4em;margin-bottom:.1em;margin-left:1.6em;text-indent:-1.4em}#sbo-rt-content .bulletxb{margin-top:.3em;margin-bottom:1em;margin-left:2.6em;text-indent:-1.4em}#sbo-rt-content .sidebar{margin-top:1em;margin-bottom:-.1em;border:solid #b2b3b6 .2em;background-color:#666769;padding:.5em;text-indent:.01em}#sbo-rt-content .sidebar1{margin-top:.001em;margin-bottom:1em;border:solid #b2b3b6 .2em;background-color:#e7e7e8;padding:.5em;text-indent:.01em}#sbo-rt-content .sideh{font-size:1.4em;color:#fff;margin-top:.5em;margin-bottom:.5em;text-align:center}#sbo-rt-content .sidehl{font-size:1.2em;margin-top:.5em;margin-bottom:.5em;text-indent:.1em}#sbo-rt-content .side-exam{margin-top:1em;margin-bottom:1em;text-indent:.01em;border:solid .1em;background-color:#eeefef;padding:1em}#sbo-rt-content .Text-icon-exam1{font-weight:bold;margin-top:1em;margin-bottom:.2em;text-indent:.01em}#sbo-rt-content .Text-icon-exam{font-weight:bold;margin-top:.5em;margin-bottom:.2em;text-indent:.01em}#sbo-rt-content .Text-icon-exami{font-weight:bold;margin-top:.5em;margin-bottom:.2em;text-indent:1.2em}#sbo-rt-content .under{text-decoration:underline}#sbo-rt-content .hanga{margin-top:.1em;margin-bottom:.6em;margin-left:2.5em;text-indent:-1.5em}#sbo-rt-content .hangai{margin-top:.1em;margin-bottom:.1em;margin-left:2.5em;text-indent:1.2em}#sbo-rt-content .hangan{margin-top:.1em;margin-bottom:.1em;margin-left:2.5em;text-indent:.1em}#sbo-rt-content .hanga1{margin-top:.1em;margin-bottom:.6em;margin-left:2.5em;text-indent:-2em}#sbo-rt-content .bqt{font-size:.9em;margin-top:1em;margin-bottom:.5em;margin-left:1em;text-indent:.01em}#sbo-rt-content .bq{font-size:.9em;margin-top:.5em;margin-bottom:.5em;margin-left:1.5em;text-indent:.01em}#sbo-rt-content .bqs{font-size:.9em;margin-top:.5em;margin-bottom:.5em;margin-left:2em;text-indent:.01em}#sbo-rt-content .noindentb{margin-top:.1em;margin-bottom:1em;text-indent:.01em}#sbo-rt-content .noindentb1{margin-top:.1em;margin-bottom:2em;text-indent:.01em}#sbo-rt-content .toc-lev1{margin-top:.1em;margin-bottom:.1em;margin-left:3em;text-indent:-1.2em}#sbo-rt-content .toc-lev2{margin-top:.1em;margin-bottom:.1em;margin-left:6.5em;text-indent:-1.2em}#sbo-rt-content .toc-lev3{margin-top:.1em;margin-bottom:.1em;margin-left:1.8em;text-indent:.01em}#sbo-rt-content .toc-lev3a{margin-top:.1em;margin-bottom:.1em;margin-left:5.4em;text-indent:.01em}#sbo-rt-content .toc-index{margin-top:2em;margin-bottom:.1em;margin-left:2em;text-indent:.01em}#sbo-rt-content .numst{margin-top:1em;margin-bottom:.1em;margin-left:2.3em;text-indent:-1.4em}#sbo-rt-content .numst1{margin-top:1em;margin-bottom:.1em;margin-left:1.8em;text-indent:-1.4em}#sbo-rt-content .numsn{margin-top:1em;margin-bottom:.1em;margin-left:2.3em;text-indent:.1em}#sbo-rt-content .numsb{margin-top:.1em;margin-bottom:1em;margin-left:2.3em;text-indent:-1.3em}#sbo-rt-content .nums{margin-top:.3em;margin-bottom:.3em;margin-left:2.3em;text-indent:-1.3em}#sbo-rt-content .figcap{margin-top:.1em;margin-bottom:1.5em;text-indent:.01em}#sbo-rt-content .tabcap{margin-top:1.5em;margin-bottom:.8em;text-indent:.01em}#sbo-rt-content .ash{color:#939598}#sbo-rt-content .ash1{font-size:1.3em;color:#939598}#sbo-rt-content .fonts{font-size:1.2em}#sbo-rt-content .num{margin-top:.1em;margin-bottom:.1em;margin-left:1.6em;text-indent:-1em}#sbo-rt-content .numn{margin-top:.4em;margin-bottom:.1em;margin-left:1.7em;text-indent:.1em}#sbo-rt-content .numin{margin-top:.1em;margin-bottom:.1em;margin-left:1.6em;text-indent:1.2em}#sbo-rt-content .numa{margin-top:.1em;margin-bottom:.4em;margin-left:3.9em;text-indent:-1.7em}#sbo-rt-content .numl{margin-top:.4em;margin-bottom:.1em;margin-left:3.6em;text-indent:-1em}#sbo-rt-content .numln{margin-top:.4em;margin-bottom:.1em;margin-left:3.6em;text-indent:.1em}#sbo-rt-content .bqi{font-size:.9em;margin-top:.5em;margin-bottom:.5em;margin-left:5em;text-indent:1.2em}#sbo-rt-content .noindenttop1{margin-top:4em;margin-bottom:1em;text-indent:.01em}#sbo-rt-content .coden{margin-top:.8em;margin-bottom:.8em;margin-left:1.5em}#sbo-rt-content .numlist{margin-top:.1em;margin-bottom:.1em;margin-left:2.5em;text-indent:-1.5em}#sbo-rt-content .noindent1{margin-top:1em;margin-bottom:1em;text-indent:.01em}#sbo-rt-content .noindentn{margin-top:.1em;margin-bottom:.1em;margin-left:.1em;text-indent:.01em}#sbo-rt-content .image-t{margin-top:.2em;margin-bottom:1.5em;text-indent:.01em}#sbo-rt-content .image-f{margin-top:1em;margin-bottom:.5em;text-align:center}#sbo-rt-content .code-n{margin-top:.5em;margin-bottom:.5em;margin-left:2.3em}#sbo-rt-content .hr{margin-top:.5em;margin-bottom:1.5em;border-bottom:solid #939598 .2em}#sbo-rt-content .bqn{font-size:.9em;margin-top:.8em;margin-bottom:.8em;margin-left:1.3em;text-indent:.01em}#sbo-rt-content .code-n1{margin-top:.7em;margin-bottom:.7em;margin-left:2.8em}#sbo-rt-content .numlistk{margin-top:.1em;margin-bottom:.1em;margin-left:2.2em;text-indent:-1.6em}#sbo-rt-content .numlistk1{margin-top:.5em;margin-bottom:.1em;margin-left:1.9em;text-indent:-1.6em}#sbo-rt-content .code-1{margin-top:.5em;margin-bottom:.5em;margin-left:2.5em}#sbo-rt-content .numlist-n{margin-top:.3em;margin-bottom:.3em;margin-left:2.2em;text-indent:.01em}#sbo-rt-content .num-k{margin-top:.3em;margin-bottom:.3em;margin-left:4em;text-indent:-1.6em}#sbo-rt-content .hang-a{margin-top:.1em;margin-bottom:.5em;margin-left:2.4em;text-indent:.01em}#sbo-rt-content .h5{font-size:120%;margin-top:1.5em;margin-bottom:.3em;text-indent:.01em}#sbo-rt-content .indenta{margin-top:.3em;margin-bottom:.3em;margin-left:1.5em;text-indent:.01em}#sbo-rt-content .indent-a{margin-top:.5em;margin-bottom:.5em;margin-left:1.2em;text-indent:.01em}#sbo-rt-content .indexmain{margin-top:.1em;margin-bottom:.1em;margin-left:1em;text-indent:-1em}#sbo-rt-content .indexhead{margin-top:.7em;margin-bottom:.3em;width:20%;font-size:1.3em;margin-left:1.5em;text-indent:.5em;background-color:#6d6e71;color:#fff;padding:.2em}#sbo-rt-content .indexsub{margin-top:.1em;margin-bottom:.1em;margin-left:2.6em;text-indent:-1em}#sbo-rt-content .h2-n{font-size:1.3em;margin-top:2em;margin-bottom:2em;text-indent:2em;background-color:#231f20;color:#fff;width:30%;padding:.2em}#sbo-rt-content .image-n{margin-top:.1em;margin-bottom:.1em;text-align:center}#sbo-rt-content .imagea{margin-top:2em;margin-bottom:.5em;text-align:left}
    </style><script> // <![CDATA[
    var g = {
      position_cache: {
        
          "chapter": "/api/v1/book/9781260011388/chapter/ch01.html",
          "book_id": "9781260011388",
          "chapter_uri": "ch01.html",
          "position": 50.5116326951,
          "user_uuid": "47d2d020-0715-4a80-b4fa-020254e89d38",
          "next_chapter_uri": "/library/view/oca-java-se/9781260011388/ch02.html"
        
      },
      title: "OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0\u002D808)",
      author_list: "Bert Bates, Kathy Sierra",
      format: "book",
      source: "application/epub+zip",
      is_system_book: true,
      is_public: false,
      loaded_from_server: true,
      allow_scripts: false,
      has_mathml: false,
      show_ios_app_teaser: false
    };
    // ]]></script><script src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/modernizr.js"></script><script>
    
      
        

        

        
          
            window.PUBLIC_ANNOTATIONS = true;
          
        

      

      
        window.MOBILE_PUBLIC_ANNOTATIONS = false;
      

    

    
      window.PRIVACY_CONTROL_OVERRIDE = false;
    

    
      window.PRIVACY_CONTROL_SWITCH = true;
    

    
      window.PUBLISHER_PAGES = true;
    

      window.SBO = {
        "constants": {
          "SITB_ENDPOINT": "https://www.safaribooksonline.com/api/v2/sitb/",
          "SEARCH_SELECT_ENDPOINT": "https://www.safaribooksonline.com/api/v2/search/select/",
          "ENABLE_ONLINE_TRAINING": true
        }
      };
  </script><link rel="canonical" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html"><meta name="description" content=" 1 Declarations and Access Control CERTIFICATION OBJECTIVES •     Java Features and Benefits •     Identifiers and Keywords •     javac, java, main(), and Imports •     Declare Classes and Interfaces •     Declare Class Members •     Declare Constructors and Arrays ... "><meta property="og:title" content="1 Declarations and Access Control"><meta itemprop="isPartOf" content="/library/view/oca-java-se/9781260011388/"><meta itemprop="name" content="1 Declarations and Access Control"><meta property="og:url" itemprop="url" content="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html"><meta property="og:site_name" content="Safari"><meta property="og:image" itemprop="thumbnailUrl" content="https://www.safaribooksonline.com/library/cover/9781260011388/"><meta property="og:description" itemprop="description" content=" 1 Declarations and Access Control CERTIFICATION OBJECTIVES •     Java Features and Benefits •     Identifiers and Keywords •     javac, java, main(), and Imports •     Declare Classes and Interfaces •     Declare Class Members •     Declare Constructors and Arrays ... "><meta itemprop="inLanguage" content="en"><meta itemprop="publisher" content="McGraw-Hill"><meta property="og:type" content="book"><meta property="og:book:isbn" itemprop="isbn" content="9781260011388"><meta property="og:book:author" itemprop="author" content="Bert Bates"><meta property="og:book:author" itemprop="author" content="Kathy Sierra"><meta property="og:book:tag" itemprop="about" content="Certification"><meta property="og:book:tag" itemprop="about" content="Java"><meta name="twitter:card" content="summary"><meta name="twitter:site" content="@safari"><style type="text/css" id="font-styles" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }"></style><style type="text/css" id="font-family" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }"></style><style type="text/css" id="column-width" data-template="#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }"></style><noscript>&lt;meta http-equiv="refresh" content="0; url=/library/no-js/" /&gt;</noscript><script type="text/javascript">
  (function(i,s,o,g,r,a,m) {
    i['GoogleAnalyticsObject']=r;
    i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();
    a=s.createElement(o),m=s.getElementsByTagName(o)[0];
    a.async=1;
    a.src=g;
    m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  var matches = document.cookie.match(/BrowserCookie\s*=\s*([a-f0-9\-]{36})/),
      user_uuid = null;

  if (matches && matches.length === 2) {
    user_uuid = matches[1];
  }


  ga('create', 'UA-39299553-7', {'userId': '47d2d020-0715-4a80-b4fa-020254e89d38' });



  
    ga('set', 'dimension1', 'Trial');
  


ga('set', 'dimension6', user_uuid);


  ga('set', 'dimension2', '47d2d020-0715-4a80-b4fa-020254e89d38');
  






//enable enhanced link tracking
ga('require', 'linkid', 'linkid.js');

// reading interface will track pageviews itself
if (document.location.pathname.indexOf("/library/view") !== 0) {
  ga('send', 'pageview');
}
</script><script>
    (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    '//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-5P4V6Z');
  </script><script defer="" src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/vendor.5b8a0cbcea73.js"></script><script defer="" src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/reader.45d29af7ef2f.js"></script></head>


<body class="reading sidenav nav-collapsed  scalefonts">

    
  
  <noscript> 
    &lt;iframe src="//www.googletagmanager.com/ns.html?id=GTM-5P4V6Z"
            height="0" width="0"
            style="display:none;visibility:hidden"&gt;
    &lt;/iframe&gt;
  </noscript>
  



    
      <div class="hide working" role="status">
        <div class="working-image"></div>
      </div>
      <div class="sbo-site-nav">
        





<a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#container" class="skip">Skip to content</a><header class="topbar t-topbar"><nav role="navigation" class="js-site-nav"><ul class="topnav"><li class="t-logo"><a href="https://www.safaribooksonline.com/home/" class="l0 None safari-home nav-icn js-keyboard-nav-home"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>Safari Home Icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M4 9.9L4 9.9 4 18 16 18 16 9.9 10 4 4 9.9ZM2.6 8.1L2.6 8.1 8.7 1.9 10 0.5 11.3 1.9 17.4 8.1 18 8.7 18 9.5 18 18.1 18 20 16.1 20 3.9 20 2 20 2 18.1 2 9.5 2 8.7 2.6 8.1Z"></path><rect x="10" y="12" width="3" height="7"></rect><rect transform="translate(18.121320, 10.121320) rotate(-315.000000) translate(-18.121320, -10.121320) " x="16.1" y="9.1" width="4" height="2"></rect><rect transform="translate(2.121320, 10.121320) scale(-1, 1) rotate(-315.000000) translate(-2.121320, -10.121320) " x="0.1" y="9.1" width="4" height="2"></rect></g></svg><span>Safari Home</span></a></li><li><a href="https://www.safaribooksonline.com/r/" class="t-recommendations-nav l0 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>recommendations icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M50 25C50 18.2 44.9 12.5 38.3 11.7 37.5 5.1 31.8 0 25 0 18.2 0 12.5 5.1 11.7 11.7 5.1 12.5 0 18.2 0 25 0 31.8 5.1 37.5 11.7 38.3 12.5 44.9 18.2 50 25 50 31.8 50 37.5 44.9 38.3 38.3 44.9 37.5 50 31.8 50 25ZM25 3.1C29.7 3.1 33.6 6.9 34.4 11.8 30.4 12.4 26.9 15.1 25 18.8 23.1 15.1 19.6 12.4 15.6 11.8 16.4 6.9 20.3 3.1 25 3.1ZM34.4 15.6C33.6 19.3 30.7 22.2 27.1 22.9 27.8 19.2 30.7 16.3 34.4 15.6ZM22.9 22.9C19.2 22.2 16.3 19.3 15.6 15.6 19.3 16.3 22.2 19.2 22.9 22.9ZM3.1 25C3.1 20.3 6.9 16.4 11.8 15.6 12.4 19.6 15.1 23.1 18.8 25 15.1 26.9 12.4 30.4 11.8 34.4 6.9 33.6 3.1 29.7 3.1 25ZM22.9 27.1C22.2 30.7 19.3 33.6 15.6 34.4 16.3 30.7 19.2 27.8 22.9 27.1ZM25 46.9C20.3 46.9 16.4 43.1 15.6 38.2 19.6 37.6 23.1 34.9 25 31.3 26.9 34.9 30.4 37.6 34.4 38.2 33.6 43.1 29.7 46.9 25 46.9ZM27.1 27.1C30.7 27.8 33.6 30.7 34.4 34.4 30.7 33.6 27.8 30.7 27.1 27.1ZM38.2 34.4C37.6 30.4 34.9 26.9 31.3 25 34.9 23.1 37.6 19.6 38.2 15.6 43.1 16.4 46.9 20.3 46.9 25 46.9 29.7 43.1 33.6 38.2 34.4Z"></path></g></svg><span>Recommended</span></a></li><li><a href="https://www.safaribooksonline.com/s/" class="t-queue-nav l0 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>queue icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 29.2C25.4 29.2 25.8 29.1 26.1 28.9L48.7 16.8C49.5 16.4 50 15.5 50 14.6 50 13.7 49.5 12.8 48.7 12.4L26.1 0.3C25.4-0.1 24.6-0.1 23.9 0.3L1.3 12.4C0.5 12.8 0 13.7 0 14.6 0 15.5 0.5 16.4 1.3 16.8L23.9 28.9C24.2 29.1 24.6 29.2 25 29.2ZM7.3 14.6L25 5.2 42.7 14.6 25 24 7.3 14.6ZM48.7 22.4L47.7 21.9 25 34.2 2.3 21.9 1.3 22.4C0.5 22.9 0 23.7 0 24.7 0 25.6 0.5 26.5 1.3 26.9L23.9 39.3C24.2 39.5 24.6 39.6 25 39.6 25.4 39.6 25.8 39.5 26.1 39.3L48.7 26.9C49.5 26.5 50 25.6 50 24.7 50 23.7 49.5 22.9 48.7 22.4ZM48.7 32.8L47.7 32.3 25 44.6 2.3 32.3 1.3 32.8C0.5 33.3 0 34.1 0 35.1 0 36 0.5 36.9 1.3 37.3L23.9 49.7C24.2 49.9 24.6 50 25 50 25.4 50 25.8 49.9 26.1 49.7L48.7 37.3C49.5 36.9 50 36 50 35.1 50 34.1 49.5 33.3 48.7 32.8Z"></path></g></svg><span>
                  Queue
              </span></a></li><li class="search"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#" class="t-search-nav trigger nav-icn l0" data-dropdown-selector=".searchbox"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>search icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M31.3 0C20.9 0 12.5 8.4 12.5 18.8 12.5 22.5 13.6 25.9 15.4 28.8L1.2 42.9C-0.4 44.5-0.4 47.2 1.2 48.8 2 49.6 3.1 50 4.2 50 5.2 50 6.3 49.6 7.1 48.8L21.2 34.6C24.1 36.5 27.5 37.5 31.3 37.5 41.6 37.5 50 29.1 50 18.8 50 8.4 41.6 0 31.3 0ZM31.3 31.3C24.4 31.3 18.8 25.6 18.8 18.8 18.8 11.9 24.4 6.3 31.3 6.3 38.1 6.3 43.8 11.9 43.8 18.8 43.8 25.6 38.1 31.3 31.3 31.3Z"></path></g></svg><span>Search</span></a></li><li class="usermenu dropdown"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#" class="trigger l0 nav-icn nav-dropdown"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>navigation arrow</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M0.1 12.5L9.7 3.1C9.8 3 9.9 3 10 3 10.1 3 10.2 3 10.3 3.1L19.9 12.5C20 12.5 20 12.6 20 12.8 20 12.9 20 13 19.9 13L17 15.9C16.9 16 16.8 16 16.7 16 16.5 16 16.4 16 16.4 15.9L10 9.7 3.6 15.9C3.6 16 3.5 16 3.3 16 3.2 16 3.1 16 3 15.9L0.1 13C0 12.9 0 12.8 0 12.7 0 12.7 0 12.6 0.1 12.5Z"></path></g></svg><span>Expand Nav</span></a><div class="drop-content"><ul><li><a href="https://www.safaribooksonline.com/history/" class="t-recent-nav l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>recent items icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 0C11.2 0 0 11.2 0 25 0 38.8 11.2 50 25 50 38.8 50 50 38.8 50 25 50 11.2 38.8 0 25 0ZM6.3 25C6.3 14.6 14.6 6.3 25 6.3 35.4 6.3 43.8 14.6 43.8 25 43.8 35.4 35.4 43.8 25 43.8 14.6 43.8 6.3 35.4 6.3 25ZM31.8 31.5C32.5 30.5 32.4 29.2 31.6 28.3L27.1 23.8 27.1 12.8C27.1 11.5 26.2 10.4 25 10.4 23.9 10.4 22.9 11.5 22.9 12.8L22.9 25.7 28.8 31.7C29.2 32.1 29.7 32.3 30.2 32.3 30.8 32.3 31.3 32 31.8 31.5Z"></path></g></svg><span>History</span></a></li><li><a href="https://www.safaribooksonline.com/topics" class="t-topics-link l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 55" width="20" height="20" version="1.1" fill="#4A3C31"><desc>topics icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 55L50 41.262 50 13.762 25 0 0 13.762 0 41.262 25 55ZM8.333 37.032L8.333 17.968 25 8.462 41.667 17.968 41.667 37.032 25 46.538 8.333 37.032Z"></path></g></svg><span>Topics</span></a></li><li><a href="https://www.safaribooksonline.com/tutorials/" class="l1 nav-icn t-tutorials-nav js-toggle-menu-item None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>tutorials icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M15.8 18.2C15.8 18.2 15.9 18.2 16 18.2 16.1 18.2 16.2 18.2 16.4 18.2 16.5 18.2 16.7 18.1 16.9 18 17 17.9 17.1 17.8 17.2 17.7 17.3 17.6 17.4 17.5 17.4 17.4 17.5 17.2 17.6 16.9 17.6 16.7 17.6 16.6 17.6 16.5 17.6 16.4 17.5 16.2 17.5 16.1 17.4 15.9 17.3 15.8 17.2 15.6 17 15.5 16.8 15.3 16.6 15.3 16.4 15.2 16.2 15.2 16 15.2 15.8 15.2 15.7 15.2 15.5 15.3 15.3 15.4 15.2 15.4 15.1 15.5 15 15.7 14.9 15.8 14.8 15.9 14.7 16 14.7 16.1 14.6 16.3 14.6 16.4 14.6 16.5 14.6 16.6 14.6 16.6 14.6 16.7 14.6 16.9 14.6 17 14.6 17.1 14.7 17.3 14.7 17.4 14.8 17.6 15 17.7 15.1 17.9 15.2 18 15.3 18 15.5 18.1 15.5 18.1 15.6 18.2 15.7 18.2 15.7 18.2 15.7 18.2 15.8 18.2L15.8 18.2ZM9.4 11.5C9.5 11.5 9.5 11.5 9.6 11.5 9.7 11.5 9.9 11.5 10 11.5 10.2 11.5 10.3 11.4 10.5 11.3 10.6 11.2 10.8 11.1 10.9 11 10.9 10.9 11 10.8 11.1 10.7 11.2 10.5 11.2 10.2 11.2 10 11.2 9.9 11.2 9.8 11.2 9.7 11.2 9.5 11.1 9.4 11 9.2 10.9 9.1 10.8 8.9 10.6 8.8 10.5 8.7 10.3 8.6 10 8.5 9.9 8.5 9.7 8.5 9.5 8.5 9.3 8.5 9.1 8.6 9 8.7 8.8 8.7 8.7 8.8 8.6 9 8.5 9.1 8.4 9.2 8.4 9.3 8.2 9.5 8.2 9.8 8.2 10 8.2 10.1 8.2 10.2 8.2 10.3 8.2 10.5 8.3 10.6 8.4 10.7 8.5 10.9 8.6 11.1 8.7 11.2 8.9 11.3 9 11.4 9.1 11.4 9.2 11.4 9.3 11.5 9.3 11.5 9.3 11.5 9.4 11.5 9.4 11.5L9.4 11.5ZM3 4.8C3.1 4.8 3.1 4.8 3.2 4.8 3.4 4.8 3.5 4.8 3.7 4.8 3.8 4.8 4 4.7 4.1 4.6 4.3 4.5 4.4 4.4 4.5 4.3 4.6 4.2 4.6 4.1 4.7 4 4.8 3.8 4.8 3.5 4.8 3.3 4.8 3.1 4.8 3 4.8 2.9 4.7 2.8 4.7 2.6 4.6 2.5 4.5 2.3 4.4 2.2 4.2 2.1 4 1.9 3.8 1.9 3.6 1.8 3.5 1.8 3.3 1.8 3.1 1.8 2.9 1.8 2.7 1.9 2.6 2 2.4 2.1 2.3 2.2 2.2 2.3 2.1 2.4 2 2.5 2 2.6 1.8 2.8 1.8 3 1.8 3.3 1.8 3.4 1.8 3.5 1.8 3.6 1.8 3.8 1.9 3.9 2 4 2.1 4.2 2.2 4.4 2.4 4.5 2.5 4.6 2.6 4.7 2.7 4.7 2.8 4.7 2.9 4.8 2.9 4.8 3 4.8 3 4.8 3 4.8L3 4.8ZM13.1 15.2C13.2 15.1 13.2 15.1 13.2 15.1 13.3 14.9 13.4 14.7 13.6 14.5 13.8 14.2 14.1 14 14.4 13.8 14.7 13.6 15.1 13.5 15.5 13.4 15.9 13.4 16.3 13.4 16.7 13.5 17.2 13.5 17.6 13.7 17.9 13.9 18.2 14.1 18.5 14.4 18.7 14.7 18.9 15 19.1 15.3 19.2 15.6 19.3 15.9 19.4 16.1 19.4 16.4 19.4 17 19.3 17.5 19.1 18.1 19 18.3 18.9 18.5 18.7 18.7 18.5 19 18.3 19.2 18 19.4 17.7 19.6 17.3 19.8 16.9 19.9 16.6 20 16.3 20 16 20 15.8 20 15.6 20 15.4 19.9 15.4 19.9 15.4 19.9 15.4 19.9 15.2 19.9 15 19.8 14.9 19.8 14.8 19.7 14.7 19.7 14.6 19.7 14.4 19.6 14.3 19.5 14.1 19.3 13.7 19.1 13.4 18.7 13.2 18.4 13.1 18.1 12.9 17.8 12.9 17.5 12.8 17.3 12.8 17.1 12.8 16.9L3.5 14.9C3.3 14.9 3.1 14.8 3 14.8 2.7 14.7 2.4 14.5 2.1 14.3 1.7 14 1.4 13.7 1.2 13.3 1 13 0.9 12.6 0.8 12.3 0.7 12 0.7 11.7 0.7 11.4 0.7 11 0.8 10.5 1 10.1 1.1 9.8 1.3 9.5 1.6 9.2 1.8 8.9 2.1 8.7 2.4 8.5 2.8 8.3 3.2 8.1 3.6 8.1 3.9 8 4.2 8 4.5 8 4.6 8 4.8 8 4.9 8.1L6.8 8.5C6.8 8.4 6.8 8.4 6.8 8.4 6.9 8.2 7.1 8 7.2 7.8 7.5 7.5 7.7 7.3 8 7.1 8.4 6.9 8.7 6.8 9.1 6.7 9.5 6.7 10 6.7 10.4 6.8 10.8 6.8 11.2 7 11.5 7.2 11.8 7.5 12.1 7.7 12.4 8 12.6 8.3 12.7 8.6 12.8 8.9 12.9 9.2 13 9.4 13 9.7 13 9.7 13 9.8 13 9.8 13.6 9.9 14.2 10.1 14.9 10.2 15 10.2 15 10.2 15.1 10.2 15.3 10.2 15.4 10.2 15.6 10.2 15.8 10.1 16 10 16.2 9.9 16.4 9.8 16.5 9.6 16.6 9.5 16.8 9.2 16.9 8.8 16.9 8.5 16.9 8.3 16.9 8.2 16.8 8 16.8 7.8 16.7 7.7 16.6 7.5 16.5 7.3 16.3 7.2 16.2 7.1 16 7 15.9 6.9 15.8 6.9 15.7 6.9 15.6 6.8 15.5 6.8L6.2 4.8C6.2 5 6 5.2 5.9 5.3 5.7 5.6 5.5 5.8 5.3 6 4.9 6.2 4.5 6.4 4.1 6.5 3.8 6.6 3.5 6.6 3.2 6.6 3 6.6 2.8 6.6 2.7 6.6 2.6 6.6 2.6 6.5 2.6 6.5 2.5 6.5 2.3 6.5 2.1 6.4 1.8 6.3 1.6 6.1 1.3 6 1 5.7 0.7 5.4 0.5 5 0.3 4.7 0.2 4.4 0.1 4.1 0 3.8 0 3.6 0 3.3 0 2.8 0.1 2.2 0.4 1.7 0.5 1.5 0.7 1.3 0.8 1.1 1.1 0.8 1.3 0.6 1.6 0.5 2 0.3 2.3 0.1 2.7 0.1 3.1 0 3.6 0 4 0.1 4.4 0.2 4.8 0.3 5.1 0.5 5.5 0.8 5.7 1 6 1.3 6.2 1.6 6.3 1.9 6.4 2.3 6.5 2.5 6.6 2.7 6.6 3 6.6 3 6.6 3.1 6.6 3.1 9.7 3.8 12.8 4.4 15.9 5.1 16.1 5.1 16.2 5.2 16.4 5.2 16.7 5.3 16.9 5.5 17.2 5.6 17.5 5.9 17.8 6.2 18.1 6.5 18.3 6.8 18.4 7.2 18.6 7.5 18.6 7.9 18.7 8.2 18.7 8.6 18.7 9 18.6 9.4 18.4 9.8 18.3 10.1 18.2 10.3 18 10.6 17.8 10.9 17.5 11.1 17.3 11.3 16.9 11.6 16.5 11.8 16 11.9 15.7 12 15.3 12 15 12 14.8 12 14.7 12 14.5 11.9 13.9 11.8 13.3 11.7 12.6 11.5 12.5 11.7 12.4 11.9 12.3 12 12.1 12.3 11.9 12.5 11.7 12.7 11.3 12.9 10.9 13.1 10.5 13.2 10.2 13.3 9.9 13.3 9.6 13.3 9.4 13.3 9.2 13.3 9 13.2 9 13.2 9 13.2 9 13.2 8.8 13.2 8.7 13.2 8.5 13.1 8.2 13 8 12.8 7.7 12.6 7.4 12.4 7.1 12 6.8 11.7 6.7 11.4 6.6 11.1 6.5 10.8 6.4 10.6 6.4 10.4 6.4 10.2 5.8 10.1 5.2 9.9 4.5 9.8 4.4 9.8 4.4 9.8 4.3 9.8 4.1 9.8 4 9.8 3.8 9.8 3.6 9.9 3.4 10 3.2 10.1 3 10.2 2.9 10.4 2.8 10.5 2.6 10.8 2.5 11.1 2.5 11.5 2.5 11.6 2.5 11.8 2.6 12 2.6 12.1 2.7 12.3 2.8 12.5 2.9 12.6 3.1 12.8 3.2 12.9 3.3 13 3.5 13.1 3.6 13.1 3.7 13.1 3.8 13.2 3.9 13.2L13.1 15.2 13.1 15.2Z"></path></g></svg><span>Tutorials</span></a></li><li class="nav-offers flyout-parent"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#" class="l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>offers icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M35.9 20.6L27 15.5C26.1 15 24.7 15 23.7 15.5L14.9 20.6C13.9 21.1 13.2 22.4 13.2 23.4L13.2 41.4C13.2 42.4 13.9 43.7 14.9 44.2L23.3 49C24.2 49.5 25.6 49.5 26.6 49L35.9 43.6C36.8 43.1 37.6 41.8 37.6 40.8L37.6 23.4C37.6 22.4 36.8 21.1 35.9 20.6L35.9 20.6ZM40 8.2C39.1 7.6 37.6 7.6 36.7 8.2L30.2 11.9C29.3 12.4 29.3 13.2 30.2 13.8L39.1 18.8C40 19.4 40.7 20.6 40.7 21.7L40.7 39C40.7 40.1 41.4 40.5 42.4 40L48.2 36.6C49.1 36.1 49.8 34.9 49.8 33.8L49.8 15.6C49.8 14.6 49.1 13.3 48.2 12.8L40 8.2 40 8.2ZM27 10.1L33.6 6.4C34.5 5.9 34.5 5 33.6 4.5L26.6 0.5C25.6 0 24.2 0 23.3 0.5L16.7 4.2C15.8 4.7 15.8 5.6 16.7 6.1L23.7 10.1C24.7 10.6 26.1 10.6 27 10.1ZM10.1 21.7C10.1 20.6 10.8 19.4 11.7 18.8L20.6 13.8C21.5 13.2 21.5 12.4 20.6 11.9L13.6 7.9C12.7 7.4 11.2 7.4 10.3 7.9L1.6 12.8C0.7 13.3 0 14.6 0 15.6L0 33.8C0 34.9 0.7 36.1 1.6 36.6L8.4 40.5C9.3 41 10.1 40.6 10.1 39.6L10.1 21.7 10.1 21.7Z"></path></g></svg><span>Offers &amp; Deals</span></a><ul class="flyout"><li><a href="https://www.safaribooksonline.com/oreilly-newsletters/" class="l2 nav-icn"><span>Newsletters</span></a></li></ul></li><li class="nav-highlights"><a href="https://www.safaribooksonline.com/u/0011N00001AOVgyQAH/" class="t-highlights-nav l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 35" width="20" height="20" version="1.1" fill="#4A3C31"><desc>highlights icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M13.325 18.071L8.036 18.071C8.036 11.335 12.36 7.146 22.5 5.594L22.5 0C6.37 1.113 0 10.632 0 22.113 0 29.406 3.477 35 10.403 35 15.545 35 19.578 31.485 19.578 26.184 19.578 21.556 17.211 18.891 13.325 18.071L13.325 18.071ZM40.825 18.071L35.565 18.071C35.565 11.335 39.86 7.146 50 5.594L50 0C33.899 1.113 27.5 10.632 27.5 22.113 27.5 29.406 30.977 35 37.932 35 43.045 35 47.078 31.485 47.078 26.184 47.078 21.556 44.74 18.891 40.825 18.071L40.825 18.071Z"></path></g></svg><span>Highlights</span></a></li><li><a href="https://www.safaribooksonline.com/u/" class="t-settings-nav l1 js-settings nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 53" width="20" height="20" version="1.1" fill="#4A3C31"><desc>settings icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M44.6 29.6C44.7 28.6 44.8 27.5 44.8 26.5 44.8 25.5 44.7 24.4 44.6 23.4L49.6 19C50 18.8 50.1 18.3 49.9 17.9 48.9 14.7 47.1 11.7 44.9 9.1 44.6 8.8 44.2 8.7 43.8 8.8L37.4 11.1C35.8 9.8 34 8.7 32.1 8L30.9 1.4C30.8 0.9 30.4 0.6 30 0.5 26.7-0.2 23.3-0.2 20 0.5 19.6 0.6 19.2 0.9 19.1 1.4L17.9 8C16 8.7 14.1 9.8 12.6 11.1L6.2 8.8C5.8 8.7 5.4 8.8 5.1 9.1 2.9 11.7 1.1 14.7 0.1 17.9 -0.1 18.3 0 18.8 0.4 19L5.4 23.4C5.3 24.4 5.2 25.5 5.2 26.5 5.2 27.5 5.3 28.6 5.4 29.6L0.4 34C0 34.2-0.1 34.7 0.1 35.1 1.1 38.3 2.9 41.4 5.1 43.9 5.4 44.2 5.8 44.4 6.2 44.2L12.6 42C14.1 43.2 16 44.3 17.9 45L19.1 51.7C19.2 52.1 19.6 52.5 20 52.5 21.6 52.8 23.3 53 25 53 26.7 53 28.4 52.8 30 52.5 30.4 52.5 30.8 52.1 30.9 51.7L32.1 45C34 44.3 35.8 43.2 37.4 42L43.8 44.2C44.2 44.4 44.6 44.2 44.9 43.9 47.1 41.4 48.9 38.3 49.9 35.1 50.1 34.7 50 34.2 49.6 34L44.6 29.6ZM25 36.4C19.6 36.4 15.2 32 15.2 26.5 15.2 21 19.6 16.6 25 16.6 30.4 16.6 34.8 21 34.8 26.5 34.8 32 30.4 36.4 25 36.4Z"></path></g></svg><span>Settings</span></a></li><li><a href="https://www.safaribooksonline.com/public/support" class="l1 no-icon">Support</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l1 no-icon">Sign Out</a></li></ul><ul class="profile"><li><a href="https://www.safaribooksonline.com/u/" class="l2 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 53" width="20" height="20" version="1.1" fill="#4A3C31"><desc>settings icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M44.6 29.6C44.7 28.6 44.8 27.5 44.8 26.5 44.8 25.5 44.7 24.4 44.6 23.4L49.6 19C50 18.8 50.1 18.3 49.9 17.9 48.9 14.7 47.1 11.7 44.9 9.1 44.6 8.8 44.2 8.7 43.8 8.8L37.4 11.1C35.8 9.8 34 8.7 32.1 8L30.9 1.4C30.8 0.9 30.4 0.6 30 0.5 26.7-0.2 23.3-0.2 20 0.5 19.6 0.6 19.2 0.9 19.1 1.4L17.9 8C16 8.7 14.1 9.8 12.6 11.1L6.2 8.8C5.8 8.7 5.4 8.8 5.1 9.1 2.9 11.7 1.1 14.7 0.1 17.9 -0.1 18.3 0 18.8 0.4 19L5.4 23.4C5.3 24.4 5.2 25.5 5.2 26.5 5.2 27.5 5.3 28.6 5.4 29.6L0.4 34C0 34.2-0.1 34.7 0.1 35.1 1.1 38.3 2.9 41.4 5.1 43.9 5.4 44.2 5.8 44.4 6.2 44.2L12.6 42C14.1 43.2 16 44.3 17.9 45L19.1 51.7C19.2 52.1 19.6 52.5 20 52.5 21.6 52.8 23.3 53 25 53 26.7 53 28.4 52.8 30 52.5 30.4 52.5 30.8 52.1 30.9 51.7L32.1 45C34 44.3 35.8 43.2 37.4 42L43.8 44.2C44.2 44.4 44.6 44.2 44.9 43.9 47.1 41.4 48.9 38.3 49.9 35.1 50.1 34.7 50 34.2 49.6 34L44.6 29.6ZM25 36.4C19.6 36.4 15.2 32 15.2 26.5 15.2 21 19.6 16.6 25 16.6 30.4 16.6 34.8 21 34.8 26.5 34.8 32 30.4 36.4 25 36.4Z"></path></g></svg><span>Settings</span></a><span class="l2 t-nag-notification" id="nav-nag"><strong class="trial-red">1</strong> days left in your trial.
  
  

  
    
      

<a class="" href="https://www.safaribooksonline.com/subscribe/">Subscribe</a>.


    
  

  

</span></li><li><a href="https://www.safaribooksonline.com/public/support" class="l2">Support</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l2">Sign Out</a></li></ul></div></li></ul></nav></header>


      </div>
      <div id="container" class="application">
        
          <div class="nav-container clearfix">
            


            
            
          </div>

          

  <div class="js-toc">
    
      <div class="sbo-reading-menu sbo-menu-top"><section class="sbo-toc-container toc-menu"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#" class="sbo-toc-thumb"><span class="sbo-title ss-list"><h1><div class="visuallyhidden">Table of Contents for </div>
      
      OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)
      
    </h1></span></a><div class="toc-contents"></div></section></div>

    

    <div class="interface-controls interface-controls-top">
      <ul class="interface-control-btns js-bitlist js-reader">
        <li class="js-search-in-archive search-in-archive t-search-in-archive"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#" title="Search in archive" class="js-search-controls search-controls"><span class="icon">Search in book...</span></a><form class="search-archive-bar js-search-form"><input type="search" name="query" placeholder="Search inside this book..." autocomplete="off"></form><div class="search-archive-results"><div class="js-sitb-results-region"></div></div></li><li class="queue-control"><button type="button" class="rec-fav ss-queue js-queue js-current-chapter-queue" data-queue-endpoint="/api/v1/book/9781260011388/chapter/ch01.html"><span>Add to Queue</span></button></li><li class="js-font-control-panel font-control-activator"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#" data-push-state="false" id="font-controls" title="Change font size" aria-label="Change font size"><span class="icon">Toggle Font Controls</span></a></li><li class="dropdown sharing-controls"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#" class="trigger" data-push-state="false" title="Share" aria-label="Share"><i class="fa fa-share"></i></a><ul class="social-sharing dropdown-menu"><li><a class="twitter share-button t-twitter" target="_blank" aria-label="Share this section on Twitter" title="Share this section on Twitter" href="https://twitter.com/share?url=https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html&amp;text=OCA%20Java%20SE%208%20Programmer%20I%20Exam%20Guide%20%28Exams%201Z0-808%29&amp;via=safari"><span>Twitter</span></a></li><li><a class="facebook share-button t-facebook" target="_blank" aria-label="Share this section on Facebook" title="Share this section on Facebook" href="https://www.facebook.com/sharer/sharer.php?u=https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html"><span>Facebook</span></a></li><li><a class="googleplus share-button t-googleplus" target="_blank" aria-label="Share this secton on Google Plus" title="Share this secton on Google Plus" href="https://plus.google.com/share?url=https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html"><span>Google Plus</span></a></li><li><a class="email share-button t-email" aria-label="Share this section via email" title="Share this section via email" href="mailto:?subject=Safari:%201%C2%A0Declarations%20and%20Access%20Control&amp;body=https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html%0D%0Afrom%20OCA%20Java%20SE%208%20Programmer%20I%20Exam%20Guide%20%28Exams%201Z0-808%29%0D%0A"><span>Email</span></a></li></ul></li>
      </ul>
    </div>

    <section role="document">
        
        



 <!--[if lt IE 9]>
  
<![endif]-->



  <script defer="" src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/djangoMessagesPage.4f8a62ee1443.js"></script>


        
	  <div class="t-sbo-prev sbo-prev sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/intro.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">Introduction</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">2&nbsp;Object Orientation</div>
        </a>
    
  
  </div>



<div id="sbo-rt-content"><p class="imagea"><img class="inline" src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/common.jpg" alt="Images" width="500" height="252"></p>
<h2 class="h2" id="ch1"><a id="page_1"></a>1</h2>
<h2 class="h2a">Declarations and Access Control</h2>
<p class="noindentd">CERTIFICATION OBJECTIVES</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java Features and Benefits</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Identifiers and Keywords</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;javac, java, main(), and Imports</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Declare Classes and Interfaces</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Declare Class Members</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Declare Constructors and Arrays</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create static Class Members</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use enums</p>
<p class="tick"><img class="inline" src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/tic.jpg" alt="Images" width="12" height="13">&nbsp;&nbsp;&nbsp;Two-Minute Drill</p>
<p class="tick1"><strong>Q&amp;A</strong> Self Test</p>
<p class="noindenttop"><a id="page_2"></a><span class="drop">W</span>e assume that because you’re planning on becoming certified, you already know the basics of Java. If you’re completely new to the language, this chapter—and the rest of the book—will be confusing; so be sure you know at least the basics of the language before diving into this book. That said, we’re starting with a brief, high-level refresher to put you back in the Java mood, in case you’ve been away for a while.</p>
<h3 class="h3"><a id="ch01lev1sec1"></a>Java Refresher</h3>
<p class="noindent">A Java program is mostly a collection of <em>objects</em> talking to other objects by invoking each other’s <em>methods</em>. Every object is of a certain <em>type</em>, and that type is defined by a <em>class</em> or an <em>interface</em>. Most Java programs use a collection of objects of many different types. Following is a list of a few useful terms for this object-oriented (OO) language:</p>
<p class="bulletxt"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>C</strong><strong>lass</strong> A template that describes the kinds of state and behavior that objects of its type support.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>O</strong><strong>bject</strong> At runtime, when the Java Virtual Machine (JVM) encounters the <code>new</code> keyword, it will use the appropriate class to make an object that is an instance of that class. That object will have its own <em>state</em> and access to all of the behaviors defined by its class.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>S</strong><strong>tate (instance variables)</strong> Each object (instance of a class) will have its own unique set of instance variables as defined in the class. Collectively, the values assigned to an object’s instance variables make up the object’s <em>state</em>.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>B</strong><strong>ehavior (methods)</strong> When a programmer creates a class, she creates methods for that class. Methods are where the class’s logic is stored and where the real work gets done. They are where algorithms get executed and data gets manipulated.</p>
<h4 class="h4a">Identifiers and Keywords</h4>
<p class="noindent">All the Java components we just talked about—classes, variables, and methods—need names. In Java, these names are called <em>identifiers</em>, and, as you might expect, there are rules for what constitutes a legal Java identifier. Beyond what’s <em>legal</em>, though, Java (and Oracle) programmers have created <em>conventions</em> for naming methods, variables, and classes.</p>
<p class="indent">Like all programming languages, Java has a set of built-in <em>keywords</em>. These keywords must <em>not</em> be used as identifiers. Later in this chapter we’ll review the details of these naming rules, conventions, and the Java keywords.</p>
<h4 class="h4a"><a id="page_3"></a>Inheritance</h4>
<p class="noindent">Central to Java and other OO languages is the concept of <em>inheritance</em>, which allows code defined in one class or interface to be reused in other classes. In Java, you can define a general (more abstract) <em>superclass</em> and then extend it with more specific <em>subclasses</em>. The superclass knows nothing of the classes that inherit from it, but all of the subclasses that inherit from the superclass must explicitly declare the inheritance relationship. A subclass that inherits from a superclass is automatically given accessible instance variables and methods defined by the superclass, but the subclass is also free to <em>override</em> superclass methods to define more specific behavior. For example, a <code>Car</code> <em>super</em>class could define general methods common to all automobiles, but a <code>Ferrari</code> <em>sub</em>class could override the <code>accelerate()</code> method that was already defined in the <code>Car</code> class.</p>
<h4 class="h4a">Interfaces</h4>
<p class="noindent">A powerful companion to inheritance is the use of interfaces. Interfaces are <em>usually</em> like a 100 percent abstract superclass that defines the methods a subclass must support, but not <em>how</em> they must be supported. In other words, for example, an <code>Animal</code> interface might declare that all <code>Animal</code> implementation classes have an <code>eat()</code> method, but the <code>Animal</code> interface doesn’t supply any logic for the <code>eat()</code> method. That means it’s up to the classes that implement the <code>Animal</code> interface to define the actual code for how that particular <code>Animal</code> type behaves when its <code>eat()</code> method is invoked. Note: As of Java 8, interfaces can now include concrete, inheritable methods. We will talk much more about this when we dive into OO in the next chapter.</p>
<h3 class="h3a">CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch01lev1sec2"></a>Features and Benefits of Java (OCA Objective 1.5)</h3>
<p class="noindentb"><em>1.5 Compare and contrast the features and components of Java such as: platform independence, object orientation, encapsulation, etc.</em></p>
<p class="indent">Perhaps a great topic to start with, on our official coverage of the OCA 8, is to discuss the various benefits that Java provides to programmers. Java is now over 20 years old (wow!) and remains one of the most in-demand programming <a id="page_4"></a>languages in the world. Somewhat confusingly there is a similarly named language, “JavaScript” (an implementation of the ECMA standard), which is also a very popular language. Java and JavaScript have some aspects in common, but they are not to be confused; they are quite distinct. Let’s look at some of the benefits that Java provides to programmers and compare them (when appropriate) to some of Java’s competitors. A caveat here, many of these benefits are based on extremely complex topics. These descriptions are by no means definitive, but they’re sufficient for the exam:</p>
<p class="bulletxt"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>O</strong><strong>bject oriented</strong> As software systems get larger, they get more difficult to test and enhance. For the last several decades, object-oriented (OO) programming has been the dominant software design approach for large systems, because well-designed OO systems remain testable and enhanceable, even as they grow into huge applications with millions of lines of code. OO design also offers a natural way to think about how the components in a system should be constructed and how they should interact. The classes, objects, system state, and behaviors in well-designed OO systems are easy to map conceptually to their counterparts in the real world.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>E</strong><strong>ncapsulation</strong> Encapsulation is a key concept in OO programming. Encapsulation allows a software component to hide its data from other components, protecting the data from being updated without the component’s approval or knowledge. Java makes encapsulation far easier to achieve than in non-OO languages.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>M</strong><strong>emory management</strong> Unlike some of its competitors (C and C++), Java provides automatic memory management. In languages that don’t provide automatic memory management, keeping track of memory through pointers is quite complex. Further, tracking down bugs related to memory management (often called <em>memory leaks</em>) is a common, error-prone, and time-consuming process.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>H</strong><strong>uge library</strong> Java has an enormous library of prewritten, well-tested, and well-supported code. This code is easy to include in your Java applications and is well documented via the Java API. Throughout this book we will explore some of the most used (and most useful) members of Java’s standard core library.</p>
<p class="bulletx"><a id="page_5"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>S</strong><strong>ecure by design</strong> When compiled Java code is executed, it runs inside the Java Virtual Machine (JVM). The JVM provides a secure “sandbox” for your Java code to run in, and the JVM makes sure that nefarious programmers cannot write Java code that will cause trouble on other people’s machines when it runs.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>W</strong><strong>rite once, run anywhere (cross-platform execution)</strong> One of the goals (largely, but not perfectly achieved) of Java is that much of the Java code you write can run on many platforms, ranging from tiny Internet-of-Things (IoT) devices, to phones, to laptop computers, to large servers. Another common phrase for this ability to run on many devices is <em>cross-platform</em>.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>S</strong><strong>trongly typed</strong> A strongly typed language usually requires the programmer to explicitly declare the types of the data and objects being used in the program. Strong typing allows the Java compiler to catch many potential programming errors before your code even compiles. At the other end of the spectrum are dynamically typed languages. Dynamically typed languages can be less verbose, faster to code initially, and are often preferred in environments where small teams and rapid prototyping are the norm. But strongly typed languages like Java come into their own in large software shops with many teams of programmers and the need for more reliable, testable, production-quality code.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>M</strong><strong>ultithreaded</strong> Java provides built-in language features and APIs that allow programs to use many operating-system processes (hence, many “cores”) at the same time. As systems grow to handle more computationally intensive problems and larger data sets, the ability to use all of a computer’s core processors becomes essential. Multithreaded programming is never simple, but Java provides a rich toolkit to make it as easy as possible.</p>
<p class="bulletxb"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>D</strong><strong>istributed computing</strong> Another way to tackle big programming problems is to distribute the workload across many machines. The Java API provides several ways to simplify tasks related to distributed computing. One such example is <em>serialization</em>, a process in which a Java object is converted to a portable form. Serialized objects can be sent to other machines, deserialized, and then used as a normal Java object.</p>
<p class="indent">Again, we’ve just scratched the surface of these complex topics, but if you understand these brief descriptions, you should be prepared to handle any questions for this objective. So much for the theory, let’s get into details…</p>
<h3 class="h3a"><a id="page_6"></a>CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch01lev1sec3"></a>Identifiers and Keywords (OCA Objectives 1.2 and 2.1)</h3>
<p class="noindent"><em>1.2 Define the structure of a Java class.</em></p>
<p class="noindentb"><em>2.1 Declare and initialize variables (including casting of primitive data types).</em></p>
<p class="indent">Remember that when we list one or more Certification Objectives in the book, as we just did, it means that the following section covers at least some part of that objective. Some objectives will be covered in several different chapters, so you’ll see the same objective in more than one place in the book. For example, this section covers declarations and identifiers, but <em>using</em> the things you declare is covered primarily in later chapters.</p>
<p class="indent">So, we’ll start with Java identifiers. The two aspects of Java identifiers that we cover here are</p>
<p class="bulletxt"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>L</strong><strong>egal identifiers</strong> The rules the compiler uses to determine whether a name is legal.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>O</strong><strong>racle’s Java Code Conventions</strong> Oracle’s recommendations for naming classes, variables, and methods. We typically adhere to these standards throughout the book, except when we’re trying to show you how a tricky exam question might be coded. You won’t be asked questions about the Java Code Conventions, but we strongly recommend you use them.</p>
<h4 class="h4"><a id="ch01lev2sec1"></a>Legal Identifiers</h4>
<p class="noindent">Technically, legal identifiers must be composed of only Unicode characters, numbers, currency symbols, and connecting characters (such as underscores). The exam doesn’t dive into the details of which ranges of the Unicode character set qualify as letters and digits. So, for example, you won’t need to know that Tibetan digits range from <code>\u0420</code> to <code>\u0f29</code>. Here are the rules you <em>do</em> need to know:</p>
<p class="bulletxt"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Identifiers must start with a letter, a currency character (<code>$</code>), or a connecting character such as the underscore (<code>_</code>). Identifiers cannot start with a digit!</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;After the first character, identifiers can contain any combination of letters, currency characters, connecting characters, or numbers.</p>
<p class="bulletx"><a id="page_7"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;In practice, there is no limit to the number of characters an identifier can contain.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;You can’t use a Java keyword as an identifier. <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1tab1">Table 1-1</a> lists all the Java keywords.</p>
<p class="tabcap"><span class="figs"><strong>TABLE 1-1</strong></span>&nbsp;&nbsp;&nbsp;Complete List of Java Keywords (<code>assert</code> added in 1.4, <code>enum</code> added in 1.5)</p>
<p class="image-t"><a id="ch1tab1"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/t0007-01.jpg" alt="images" width="594" height="169"></p>
<p class="bulletxb"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Identifiers in Java are case sensitive; <code>foo</code> and <code>FOO</code> are two different identifiers.</p>
<p class="indent">Examples of legal and illegal identifiers follow. First some legal identifiers:</p>
<p class="imagel1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0007-01.jpg" alt="images" width="482" height="94"></p>
<p class="indent">The following are illegal (it’s your job to recognize why):</p>
<p class="imagel1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0007-02.jpg" alt="images" width="63" height="93"></p>
<h4 class="h4"><a id="ch01lev2sec2"></a>Oracle’s Java Code Conventions</h4>
<p class="noindent">Oracle estimates that over the lifetime of a standard piece of code, 20 percent of the effort will go into the original creation and testing of the code, and 80 percent of the effort will go into the subsequent maintenance and enhancement of the code. Agreeing on, and coding to, a set of code standards helps to reduce the effort involved in testing, maintaining, and enhancing any piece of code. Oracle has created a set of <a id="page_8"></a>coding standards for Java and published those standards in a document cleverly titled “Java Code Conventions,” which you can find if you start at <code><a href="http://java.oracle.com/">java.oracle.com</a></code>. It’s a great document, short, and easy to read, and we recommend it highly.</p>
<p class="indent">That said, you’ll find that many of the questions in the exam don’t follow the code conventions because of the limitations in the test engine that is used to deliver the exam internationally. One of the great things about the Oracle certifications is that the exams are administered uniformly throughout the world. To achieve that, the code listings that you’ll see in the real exam are often quite cramped and do not follow Oracle’s code standards. To toughen you up for the exam, we’ll often present code listings that have a similarly cramped look and feel, often indenting our code only two spaces as opposed to the Oracle standard of four.</p>
<p class="indent">We’ll also jam our curly braces together unnaturally, and we’ll sometimes put several statements on the same line…ouch! For example:</p>
<p class="indenttb"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0008-01.jpg" alt="images" width="559" height="234"></p>
<p class="indent">Consider yourself forewarned—you’ll see lots of code listings, mock questions, and real exam questions that are this sick and twisted. Nobody wants you to write your code like this—not your employer, not your coworkers, not us, not Oracle, and not the exam creation team! Code like this was created only so that complex concepts could be tested within a universal testing tool. The only standards that <em>are</em> followed as much as possible in the real exam are the naming standards. Here are the naming standards that Oracle recommends and that we use in the exam and in most of the book:</p>
<p class="bulletxt"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>Classes and interfaces</strong> The first letter should be capitalized, and if several words are linked together to form the name, the first letter of the inner words should be uppercase (a format that’s sometimes called “CamelCase”). For classes, the names should typically be nouns. Here are some examples:</p>
<p class="code"><code>Dog<br>Account<br>PrintWriter</code></p>
<p class="bulletxn"><a id="page_9"></a>For interfaces, the names should typically be adjectives, like these:</p>
<p class="code"><code>Runnable<br>Serializable</code></p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>M</strong><strong>ethods</strong> The first letter should be lowercase, and then normal CamelCase rules should be used. In addition, the names should typically be verb-noun pairs. For example:</p>
<p class="code"><code>getBalance<br>doCalculation<br>setCustomerName</code></p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>Variables</strong> Like methods, the CamelCase format should be used, but starting with a lowercase letter. Oracle recommends short, meaningful names, which sounds good to us. Some examples:</p>
<p class="code"><code>buttonWidth<br>accountBalance<br>myString</code></p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>Constants</strong> Java constants are created by marking variables static and final. They should be named using uppercase letters with underscore characters as separators:</p>
<p class="code"><code>MIN_HEIGHT</code></p>
<h3 class="h3a">CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch01lev1sec4"></a>Define Classes (OCA Objectives 1.2, 1.3, 1.4, 6.4, and 7.5)</h3>
<p class="noindent"><em>1.2 Define the structure of a Java class.</em></p>
<p class="noindent"><em>1.3 Create executable Java applications with a main method; run a Java program from the command line; including console output. (sic)</em></p>
<p class="noindent"><em>1.4 Import other Java packages to make them accessible in your code.</em></p>
<p class="noindent"><em>6.4 Apply access modifiers.</em></p>
<p class="noindent"><em>7.5 Use abstract classes and interfaces.</em></p>
<p class="indentt">When you write code in Java, you’re writing classes or interfaces. Within those classes, as you know, are variables and methods (plus a few other things). How you declare your classes, methods, and variables dramatically affects your code’s <a id="page_10"></a>behavior. For example, a <code>public</code> method can be accessed from code running anywhere in your application. Mark that method <code>private</code>, though, and it vanishes from everyone’s radar (except the class in which it was declared).</p>
<p class="indent">For this objective, we’ll study the ways in which you can declare and modify (or not) a class. You’ll find that we cover modifiers in an extreme level of detail, and although we know you’re already familiar with them, we’re starting from the very beginning. Most Java programmers think they know how all the modifiers work, but on closer study they often find out that they don’t (at least not to the degree needed for the exam). Subtle distinctions are everywhere, so you need to be absolutely certain you’re completely solid on everything in this section’s objectives before taking the exam.</p>
<h4 class="h4"><a id="ch01lev2sec3"></a>Source File Declaration Rules</h4>
<p class="noindent">Before we dig into class declarations, let’s do a quick review of the rules associated with declaring classes, <code>import</code> statements, and <code>package</code> statements in a source file:</p>
<p class="bulletxt"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;There can be only one <code>public</code> class per source code file.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Comments can appear at the beginning or end of any line in the source code file; they are independent of any of the positioning rules discussed here.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;If there <em>is</em> a <code>public</code> class in a file, the name of the file must match the name of the <code>public</code> class. For example, a class declared as <code>public class Dog { }</code> must be in a source code file named <code>Dog.java</code>.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;If the class is part of a package, the <code>package</code> statement must be the first line in the source code file, before any <code>import</code> statements that may be present.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;If there are <code>import</code> statements, they must go <em>between</em> the <code>package</code> statement (if there is one) and the class declaration. If there isn’t a <code>package</code> statement, then the <code>import</code> statement(s) must be the first line(s) in the source code file. If there are no <code>package</code> or <code>import</code> statements, the class declaration must be the first line in the source code file.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<code>i</code><code>mport</code> and <code>package</code> statements apply to <em>all</em> classes within a source code file. In other words, there’s no way to declare multiple classes in a file and have them in different packages or use different imports.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;A file can have more than one non-<code>public</code> class.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Files with no <code>public</code> classes can have a name that does not match any of the classes in the file.</p>
<h4 class="h4"><a id="ch01lev2sec4"></a><a id="page_11"></a>Using the javac and java Commands</h4>
<p class="noindent">In this book, we’re going to talk about invoking the <code>javac</code> and <code>java</code> commands about 1000 times. Although in the <strong>real world</strong> you’ll probably use an integrated development environment (IDE) most of the time, you could see a few questions on the exam that use the command line instead, so we’re going to review the basics. (By the way, we did NOT use an IDE while writing this book. We still have a slight preference for the command line while studying for the exam; all IDEs do their best to be “helpful,” and sometimes they’ll fix your problems without telling you. That’s nice on the job, but maybe not so great when you’re studying for a certification exam!)</p>
<h4 class="h4a">Compiling with javac</h4>
<p class="noindent">The <code>javac</code> command is used to invoke Java’s compiler. You can specify many options when running <code>javac</code>. For example, there are options to generate debugging information or compiler warnings. Here’s the structural overview for <code>javac</code>:</p>
<p class="code1"><code>javac [options] [source files]</code></p>
<p class="indent">There are additional command-line options called <code>@argfiles</code>, but they’re rarely used, and you won’t need to study them for the exam. Both the <code>[options]</code> and the <code>[source files]</code> are optional parts of the command, and both allow multiple entries. The following are legal <code>javac</code> commands:</p>
<p class="code1"><code>javac -help<br>javac -version Foo.java Bar.java</code></p>
<p class="indent">The first invocation doesn’t compile any files, but prints a summary of valid options. The second invocation passes the compiler an option (<code>-version</code>, which prints the version of the compiler you’re using) and passes the compiler two <code>.java</code> files to compile (<code>Foo.java</code> and <code>Bar.java</code>). Whenever you specify multiple options and/or files, they should be separated by spaces.</p>
<h4 class="h4a">Launching Applications with java</h4>
<p class="noindent">The <code>java</code> command is used to invoke the Java Virtual Machine (JVM). Here’s the basic structure of the command:</p>
<p class="code1"><code>java [options] class [args]</code></p>
<p class="indent">The <code>[options]</code> and <code>[args]</code> parts of the <code>java</code> command are optional, and they can both have multiple values. You must specify exactly one class file to <a id="page_12"></a>execute, and the <code>java</code> command assumes you’re talking about a <code>.class</code> file, so you don’t specify the <code>.class</code> extension on the command line. Here’s an example:</p>
<p class="code1"><code>java -showversion MyClass x 1</code></p>
<p class="noindent">This command can be interpreted as “Show me the version of the JVM being used, and then launch the file named <code>MyClass.class</code> and send it two String <em>arguments</em> whose values are <code>x</code> and <code>1</code>.” Let’s look at the following code:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0012-01.jpg" alt="images" width="455" height="95"></p>
<p class="noindent">It’s compiled and then invoked as follows:</p>
<p class="code1"><code>java MyClass x 1</code></p>
<p class="noindent">The output will be</p>
<p class="code1"><code>x 1</code></p>
<p class="indent">We’ll be getting into arrays in depth later, but for now it’s enough to know that args—like all arrays—use a zero-based index. In other words, the first command-line argument is assigned to <code>args[0]</code>, the second argument is assigned to <code>args[1]</code>, and so on.</p>
<h4 class="h4"><a id="ch01lev2sec5"></a>Using public static void main(String[ ] args)</h4>
<p class="noindent">The use of the <code>main()</code> method is implied in most of the questions on the exam, and on the OCA exam it is specifically covered. For the .0001 percent of you who don’t know, <code>main()</code> is the method that the JVM uses to start execution of a Java program.</p>
<p class="indent">First off, it’s important for you to know that naming a method <code>main()</code> doesn’t give it the superpowers we normally associate with <code>main()</code>. As far as the compiler and the JVM are concerned, the <strong>only</strong> version of <code>main()</code> with superpowers is the <code>main()</code> with this signature:</p>
<p class="code1"><code>public static void main(String[] args)</code></p>
<p class="noindent">Other versions of <code>main()</code> with other signatures are perfectly legal, but they’re treated as normal methods. There is some flexibility in the declaration of the “special” <code>main()</code> method (the one used to start a Java application): the order of its modifiers can be altered a little; the <code>String</code> array doesn’t have to be named <code>args</code>; <a id="page_13"></a>and it can be declared using var-args syntax. The following are all legal declarations for the “special” <code>main()</code>:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0013-01.jpg" alt="images" width="426" height="54"></p>
<p class="indent">For the OCA 8 exam, the only other thing that’s important for you to know is that <code>main()</code> <strong>can be overloaded</strong>. We’ll cover overloading in detail in the next chapter.</p>
<h4 class="h4"><a id="ch01lev2sec6"></a>Import Statements and the Java API</h4>
<p class="noindent">There are a gazillion Java classes in the world. The Java API has thousands of classes, and the Java community has written the rest. We’ll go out on a limb and contend that all Java programmers everywhere use a combination of classes they wrote and classes that other programmers wrote. Suppose we created the following:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0013-02.jpg" alt="images" width="445" height="95"></p>
<p class="noindent">This is a perfectly legal class, but as it turns out, one of the most commonly used classes in the Java API is also named <code>ArrayList</code>, or so it seems…. The API version’s actual name is <code>java.util.ArrayList</code>. That’s its <em>fully qualified name</em>. The use of fully qualified names is what helps Java developers make sure that two versions of a class like <code>ArrayList</code> don’t get confused. So now let’s say that I want to use the <code>ArrayList</code> class from the API:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0013-03.jpg" alt="images" width="398" height="115"></p>
<p class="noindent">(First off, trust us on the <code>&lt;String&gt;</code> syntax; we’ll get to that later.) Although this is legal, it’s also a LOT of keystrokes. Since we programmers are basically lazy (there, we said it), we like to use other people’s classes a LOT, AND we hate to type. If we had a large program, we might end up using <code>ArrayList</code>s many times.</p>
<p class="indent"><code>import</code> statements to the rescue! Instead of the preceding code, our class could look like this:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0013-04.jpg" alt="images" width="474" height="94"></p>
<p class="noindent"><a id="page_14"></a>We can interpret the <code>import</code> statement as saying, “In the Java API there is a package called <code>‘util’</code>, and in that package is a class called ‘<code>ArrayList</code>’. Whenever you see the word ‘<code>ArrayList</code>’ in this class, it’s just shorthand for: <code>‘java.util.ArrayList</code>’.” (Note: Lots more on packages to come!) If you’re a C programmer, you might think that the <code>import</code> statement is similar to an <code>#include</code>. Not really. All a Java <code>import</code> statement does is save you some typing. That’s it.</p>
<p class="indent">As we just implied, a package typically has many classes. The <code>import</code> statement offers yet another keystroke-saving capability. Let’s say you wanted to use a few different classes from the <code>java.util</code> package: <code>ArrayList</code> and <code>TreeSet</code>. You can add a wildcard character (<code>*</code>) to your <code>import</code> statement that means, “If you see a reference to a class you’re not sure of, you can look through the entire package for that class,” like so:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0014-01.jpg" alt="images" width="474" height="133"></p>
<p class="noindent">When the compiler and the JVM see this code, they’ll know to look through <code>java.util</code> for <code>ArrayList</code> and <code>TreeSet</code>. For the exam, the last thing you’ll need to remember about using <code>import</code> statements in your classes is that you’re free to mix and match. It’s okay to say this:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0014-02.jpg" alt="images" width="636" height="33"></p>
<h4 class="h4"><a id="ch01lev2sec7"></a>Static Import Statements</h4>
<p class="noindent">Dear Reader, We really struggled with where to include this discussion of static imports. From a learning perspective, this is probably not the ideal location, but from a reference perspective, we thought it made sense. As you’re learning the material for the first time, you might be confused by some of the ideas in this section. If that’s the case, we apologize. Put a sticky note on this page and circle back around after you’re finished with <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html">Chapter 3</a>. On the other hand, once you’re past the learning stage and you’re using this book as a reference, we think putting this section here will be quite useful. Now, on to static imports.</p>
<p class="indent">Sometimes classes will contain <em>static members</em>. (We’ll talk more about static class members later, but since we’re on the topic of imports we thought we’d toss in static imports now.) Static class members can exist in the classes you write and in a lot of the classes in the Java API.</p>
<p class="indent"><a id="page_15"></a>As we said earlier, ultimately the only value <code>import</code> statements have is that they save typing and they can make your code easier to read. In Java 5 (a long time ago), the <code>import</code> statement was enhanced to provide even greater keystroke-reduction capabilities, although some would argue that this comes at the expense of readability. This feature is known as <em>static imports</em>. Static imports can be used when you want to “save typing” while using a class’s static members. (You can use this feature on classes in the API and on your own classes.) Here’s a “before and after” example using a few static class members provided by a commonly used class in the Java API, <code>java.lang</code><code>.Integer</code>. This example also uses a static member that you’ve used a thousand times, probably without ever giving it much thought; the <code>out</code> field in the <code>System</code> class.</p>
<p class="indent">Before static imports:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0015-01.jpg" alt="images" width="455" height="115"></p>
<p class="indent">After static imports:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0015-02.jpg" alt="images" width="495" height="154"></p>
<p class="indent">Both classes produce the same output:</p>
<p class="code1"><code>2147483647<br>2a</code></p>
<p class="indent">Let’s look at what’s happening in the code that’s using the static import feature:</p>
<p class="numst"><strong>1.</strong>&nbsp;&nbsp;&nbsp;Even though the feature is commonly called “static import,” the syntax MUST be <code>import static</code> followed by the fully qualified name of the <code>static</code> member you want to import, or a wildcard. In this case, we’re doing a static import on the <code>System</code> class <code>out</code> object.</p>
<p class="nums"><strong>2.</strong>&nbsp;&nbsp;&nbsp;In this case, we might want to use several of the <code>static</code> members of the <code>java.lang.Integer</code> class. This static import statement uses the wildcard to say, “I want to do static imports of ALL the <code>static</code> members in this class.”</p>
<p class="nums"><a id="page_16"></a><strong>3.</strong>&nbsp;&nbsp;&nbsp;Now we’re finally seeing the <em>benefit</em> of the static import feature! We didn’t have to type the <code>System</code> in <code>System.out.println</code>! Wow! Second, we didn’t have to type the <code>Integer</code> in <code>Integer.MAX_VALUE</code>. So in this line of code we were able to use a shortcut for a <code>static</code> method AND a constant.</p>
<p class="numsb"><strong>4.</strong>&nbsp;&nbsp;&nbsp;Finally, we do one more shortcut, this time for a method in the <code>Integer</code> class.</p>
<p class="indent">We’ve been a little sarcastic about this feature, but we’re not the only ones. We’re not convinced that saving a few keystrokes is worth possibly making the code a little harder to read, but enough developers requested it that it was added to the language.</p>
<p class="indent">Here are a couple of rules for using static imports:</p>
<p class="bulletxt"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;You must say <code>import static</code>; you can’t say <code>static import</code>.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Watch out for ambiguously named <code>static</code> members. For instance, if you do a static import for both the <code>Integer</code> class and the <code>Long</code> class, referring to <code>MAX_VALUE</code> will cause a compiler error, because both <code>Integer</code> and <code>Long</code> have a <code>MAX_VALUE</code> constant and Java won’t know which <code>MAX_VALUE</code> you’re referring to.</p>
<p class="bulletxb"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;You can do a static import on <code>static</code> object references, constants (remember they’re <code>static</code> and <code>final</code>), and <code>static</code> methods.</p>
<div class="side-exam">
<p class="imaget"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51"></p>
<p class="Text-icon-exam"><strong><em>As you’ve seen, when using import and import static statements, sometimes you can use the wildcard character * to do some simple searching for you. (You can search within a package or within a class.) As you saw earlier, if you want to "search through the java.util package for class names," you can say this:</em></strong></p>
<p class="imagel"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0016-01.jpg" alt="images" width="721" height="17"></p>
<p class="Text-icon-exam"><strong><em>In a similar vein, if you want to "search through the java.lang.Integer class for static members," you can say this:</em></strong></p>
<p class="imagel"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0016-02.jpg" alt="images" width="730" height="44"></p>
<p class="Text-icon-exam"><strong><em>But you can’t create broader searches. For instance, you CANNOT use an import to search through the entire Java API:</em></strong></p>
<p class="imagel"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0016-03.jpg" alt="images" width="725" height="27"></p>
</div>
<h4 class="h4"><a id="ch01lev2sec8"></a><a id="page_17"></a>Class Declarations and Modifiers</h4>
<p class="noindent">The class declarations we’ll discuss in this section are limited to top-level classes. In addition to top-level classes, Java provides for another category of class known as <em>nested classes</em> or <em>inner classes</em>. Inner classes are included on the OCP exam, but not the OCA exam. When you become an OCP candidate, you’re going to love learning about inner classes. No, really. Seriously.</p>
<p class="indent">The following code is a bare-bones class declaration:</p>
<p class="code1"><code>class MyClass { }</code></p>
<p class="noindent">This code compiles just fine, but you can also add modifiers before the class declaration. In general, modifiers fall into two categories:</p>
<p class="bulletxt"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Access modifiers (<code>public</code>, <code>protected</code>, <code>private</code>)</p>
<p class="bulletxb"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Nonaccess modifiers (including <code>strictfp</code>, <code>final</code>, and <code>abstract</code>)</p>
<p class="indent">We’ll look at access modifiers first, so you’ll learn how to restrict or allow access to a class you create. Access control in Java is a little tricky because there are four access <em>controls</em> (levels of access) but only three access <em>modifiers</em>. The fourth access control level (called <em>default</em> or <em>package</em> access) is what you get when you don’t use any of the three access modifiers. In other words, <em>every</em> class, method, and instance variable you declare has an access <em>control</em>, whether you explicitly type one or not. Although all four access <em>controls</em> (which means all three <em>modifiers</em>) work for most method and variable declarations, a class can be declared with only <code>public</code> or <em>default</em> access; the other two access control levels don’t make sense for a class, as you’ll see.</p>
<p class="imagel"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/icon.jpg" alt="images" width="50" height="35"></p>
<p class="icon"><strong><em>Java is a package-centric language; the developers assumed that for good organization and name scoping, you would put all your classes into packages. They were right, and you should. Imagine this nightmare: Three different programmers, in the same company but working on different parts of a project, write a class named <code><strong><em>Utilities</em></strong></code>. If those three <code><strong><em>Utilities</em></strong></code> classes have not been declared in any explicit package and are in the classpath, you won’t have any way to tell the compiler or JVM which of the three you’re trying to reference. Oracle recommends that developers use reverse domain names, appended with division and/or project names. For example, if your domain name is <code><strong><em><a href="http://geeksanonymous.com/">geeksanonymous.com</a></em></strong></code> and you’re working on the client code for the TwelvePointOSteps program, you would name your package something like <code><strong><em>com.geeksanonymous.steps.client</em></strong></code>. That would essentially change the name of your class to <code><strong><em>com.geeksanonymous.steps.client.Utilities</em></strong></code>. <a id="page_18"></a>You might still have name collisions within your company if you don’t come up with your own naming schemes, but you’re guaranteed not to collide with classes developed outside your company (assuming they follow Oracle’s naming convention, and if they don’t, well, Really Bad Things could happen).</em></strong></p>
<h4 class="h4a">Class Access</h4>
<p class="noindent">What does it mean to access a class? When we say code from one class (class A) has access to another class (class B), it means class A can do one of three things:</p>
<p class="bulletxt"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Create an <em>instance</em> of class B.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<em>E</em><em>xtend</em> class B (in other words, become a subclass of class B).</p>
<p class="bulletxb"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<em>A</em><em>ccess</em> certain methods and variables within class B, depending on the access control of those methods and variables.</p>
<p class="indent">In effect, access means <em>visibility</em>. If class A can’t <em>see</em> class B, the access level of the methods and variables within class B won’t matter; class A won’t have any way to access those methods and variables.</p>
<p class="noindentt"><span class="fonts"><strong>Default Access</strong></span> A class with default access has <em>no</em> modifier preceding it in the declaration! It’s the access control you get when you don’t type a modifier in the class declaration. Think of <em>default</em> access as <em>package</em>-level access, because a class with default access can be seen only by classes within the same package. For example, if class A and class B are in different packages, and class A has default access, class B won’t be able to create an instance of class A or even declare a variable or return type of class A. In fact, class B has to pretend that class A doesn’t even exist or the compiler will complain. Look at the following source file:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0018-01.jpg" alt="images" width="298" height="148"></p>
<p class="indent">As you can see, the superclass (<code>Beverage</code>) is in a different package from the subclass (<code>Tea</code>). The <code>import</code> statement at the top of the <code>Tea</code> file is trying (fingers crossed) to import the <code>Beverage</code> class. The <code>Beverage</code> file compiles fine, but when we try to compile the <code>Tea</code> file, we get <em>something like</em> this:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0018-02.jpg" alt="images" width="634" height="49"></p>
<p class="noindent"><a id="page_19"></a><strong>(Note: For various reasons, the error messages we show throughout this book might not match the error messages you get. Don’t worry, the real point is to understand when you’re apt to get an error of some sort.)</strong></p>
<p class="indent"><code>Tea</code> won’t compile because its superclass, <code>Beverage</code>, has default access and is in a different package. You can do one of two things to make this work. You could put both classes in the same package, or you could declare <code>Beverage</code> as <code>public</code>, as the next section describes.</p>
<p class="indent">When you see a question with complex logic, be sure to look at the access modifiers first. That way, if you spot an access violation (for example, a class in package A trying to access a default class in package B), you’ll know the code won’t compile so you don’t have to bother working through the logic. It’s not as if you don’t have anything better to do with your time while taking the exam. Just choose the “Compilation fails” answer and zoom on to the next question.</p>
<h4 class="h4a">Public Access</h4>
<p class="noindent">A class declaration with the <code>public</code> keyword gives all classes from all packages access to the <code>public</code> class. In other words, <em>all</em> classes in the Java Universe (JU) have access to a <code>public</code> class. Don’t forget, though, that if a <code>public</code> class you’re trying to use is in a different package from the class you’re writing, you’ll still need to import the <code>public</code> class.</p>
<p class="indent">In the example from the preceding section, we may not want to place the subclass in the same package as the superclass. To make the code work, we need to add the keyword <code>public</code> in front of the superclass (<code>Beverage</code>) declaration, as follows:</p>
<p class="code1"><code>package cert;<br>public class Beverage { }</code></p>
<p class="indent">This changes the <code>Beverage</code> class so it will be visible to all classes in all packages. The class can now be instantiated from all other classes, and any class is now free to subclass (extend from) it—unless, that is, the class is also marked with the nonaccess modifier <code>final</code>. Read on.</p>
<h4 class="h4a">Other (Nonaccess) Class Modifiers</h4>
<p class="noindent">You can modify a class declaration using the keyword <code>final</code>, <code>abstract</code>, or <code>strictfp</code>. These modifiers are in addition to whatever access control is on the class, so you could, for example, declare a class as both <code>public</code> and <code>final</code>. But you can’t always mix nonaccess modifiers. You’re free to use <code>strictfp</code> in combination with <code>final</code>, for example, but you must never, ever, ever mark a class as both <code>final</code> <em>and</em> <code>abstract</code>. You’ll see why in the next two sections.</p>
<p class="indent">You won’t need to know how <code>strictfp</code> works, so we’re focusing only on modifying a class as <code>final</code> or <code>abstract</code>. For the exam, you need to know only <a id="page_20"></a>that <code>strictfp</code> is a keyword and can be used to modify a class or a method, but never a variable. Marking a class as <code>strictfp</code> means that any method code in the class will conform strictly to the IEEE 754 standard rules for floating points. Without that modifier, floating points used in the methods might behave in a platform-dependent way. If you don’t declare a class as <code>strictfp</code>, you can still get <code>strictfp</code> behavior on a method-by-method basis by declaring a method as <code>strictfp</code>. If you don’t know the IEEE 754 standard, now’s not the time to learn it. You have, as they say, bigger fish to fry.</p>
<h4 class="h4a">Final Classes</h4>
<p class="noindent">When used in a class declaration, the <code>final</code> keyword means the class can’t be subclassed. In other words, no other class can ever extend (inherit from) a <code>final</code> class, and any attempts to do so will result in a compiler error.</p>
<p class="indent">So why would you ever mark a class <code>final</code>? After all, doesn’t that violate the whole OO notion of inheritance? You should make a <code>final</code> class only if you need an absolute guarantee that none of the methods in that class will ever be overridden. If you’re deeply dependent on the implementations of certain methods, then using <code>final</code> gives you the security that nobody can change the implementation out from under you.</p>
<p class="indent">You’ll notice many classes in the Java core libraries are <code>final</code>. For example, the <code>String</code> class cannot be subclassed. Imagine the havoc if you couldn’t guarantee how a <code>String</code> object would work on any given system your application is running on! If programmers were free to extend the <code>String</code> class (and thus substitute their new <code>String</code> subclass instances where <code>java.lang.String</code> instances are expected), civilization—as we know it—could collapse. So use <code>final</code> for safety, but only when you’re certain that your <code>final</code> class has indeed said all that ever needs to be said in its methods. Marking a class <code>final</code> means, in essence, your class can’t ever be improved upon, or even specialized, by another programmer.</p>
<p class="indent">There’s a benefit to having nonfinal classes in this scenario: Imagine that you find a problem with a method in a class you’re using, but you don’t have the source code. So you can’t modify the source to improve the method, but you can extend the class and override the method in your new subclass and substitute the subclass everywhere the original superclass is expected. If the class is <code>final</code>, though, you’re stuck.</p>
<p class="indent">Let’s modify our <code>Beverage</code> example by placing the keyword <code>final</code> in the declaration:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0020-01.jpg" alt="images" width="332" height="73"></p>
<p class="indent"><a id="page_21"></a>Now let’s try to compile the <code>Tea</code> subclass:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0021-01.jpg" alt="images" width="389" height="165"></p>
<p class="indent">In practice, you’ll almost never make a final class. A final class obliterates a key benefit of OO—extensibility. Unless you have a serious safety or security issue, assume that someday another programmer will need to extend your class. If you don’t, the next programmer forced to maintain your code will hunt you down and &lt;insert really scary thing&gt;.</p>
<p class="noindentt"><span class="fonts"><strong>Abstract Classes</strong></span> An <code>abstract</code> class can never be instantiated. Its sole purpose, mission in life, raison d’être, is to be extended (subclassed). (Note, however, that you can compile and execute an <code>abstract</code> class, as long as you don’t try to make an instance of it.) Why make a class if you can’t make objects out of it? Because the class might be just too, well, <em>abstract</em>. For example, imagine you have a class <code>Car</code> that has generic methods common to all vehicles. But you don’t want anyone actually creating a generic abstract <code>Car</code> object. How would they initialize its state? What color would it be? How many seats? Horsepower? All-wheel drive? Or more importantly, how would it behave? In other words, how would the methods be implemented?</p>
<p class="indent">No, you need programmers to instantiate actual car types such as <code>BMWBoxster</code> and <code>SubaruOutback</code>. We’ll bet the Boxster owner will tell you his car does things the Subaru can do “only in its dreams.” Take a look at the following <code>abstract</code> class:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0021-02.jpg" alt="images" width="523" height="174"></p>
<p class="indent"><a id="page_22"></a>The preceding code will compile fine. However, if you try to instantiate a <code>Car</code> in another body of code, you’ll get a compiler error something like this:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0022-01.jpg" alt="images" width="429" height="70"></p>
<p class="noindent"><strong>Notice that the methods marked</strong> <code><strong>abstract</strong></code> <strong>end in a semicolon rather than curly braces.</strong></p>
<p class="indent">Look for questions with a method declaration that ends with a semicolon, rather than curly braces. If the method is in a class—as opposed to an interface—then both the method and the class must be marked <code>abstract</code>. You might get a question that asks how you could fix a code sample that includes a method ending in a semicolon but without an <code>abstract</code> modifier on the class or method. In that case, you could either mark the method and class <code>abstract</code> or change the semicolon to code (like a curly brace pair). Remember that if you change a method from <code>abstract</code> to nonabstract, don’t forget to change the semicolon at the end of the method declaration into a curly brace pair!</p>
<p class="indent">We’ll look at <code>abstract</code> methods in more detail later in this objective, but always remember that if even a single method is <code>abstract</code>, the whole class must be declared <code>abstract</code>. One <code>abstract</code> method spoils the whole bunch. You can, however, put nonabstract methods in an <code>abstract</code> class. For example, you might have methods with implementations that shouldn’t change from Car type to Car type, such as <code>getColor()</code> or <code>setPrice()</code>. By putting nonabstract methods in an <code>abstract</code> class, you give all concrete subclasses (concrete just means not abstract) inherited method implementations. The good news there is that concrete subclasses get to inherit functionality and need to implement only the methods that define subclass-specific behavior.</p>
<p class="indent">(By the way, if you think we misused <em>raison d’être</em> earlier, don’t send an e-mail. We’d like to see <em>you</em> work it into a programmer certification book.)</p>
<p class="indent">Coding with <code>abstract</code> class types (including interfaces, discussed later in this chapter) lets you take advantage of <em>polymorphism</em> and gives you the greatest degree of flexibility and extensibility. You’ll learn more about polymorphism in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html">Chapter 2</a>.</p>
<p class="indent">You can’t mark a class as both <code>abstract</code> and <code>final</code>. They have nearly opposite meanings. An <code>abstract</code> class must be subclassed, whereas a <code>final</code> class must not be subclassed. If you see this combination of <code>abstract</code> and <code>final</code> modifiers used for a class or method declaration, the code will not compile.</p>
<h3 class="h3a1"><a id="ch01lev1sec5"></a><a id="page_23"></a>EXERCISE 1-1</h3>
<p class="line"></p>
<h3 class="h3s">Creating an Abstract Superclass and Concrete Subclass</h3>
<p class="noindent">The following exercise will test your knowledge of <code>public</code>, default, <code>final</code>, and <code>abstract</code> classes. Create an <code>abstract</code> superclass named <code>Fruit</code> and a concrete subclass named <code>Apple</code>. The superclass should belong to a package called <code>food</code> and the subclass can belong to the default package (meaning it isn’t put into a package explicitly). Make the superclass <code>public</code> and give the subclass default access.</p>
<p class="numst">1.&nbsp;&nbsp;&nbsp;Create the superclass as follows:</p>
<p class="code2a"><code>package food;<br> public abstract class Fruit{ /* any code you want */}</code></p>
<p class="nums">2.&nbsp;&nbsp;&nbsp;Create the subclass in a separate file as follows:</p>
<p class="code2a"><code>import food.Fruit;<br> class Apple extends Fruit{ /* any code you want */}</code></p>
<p class="nums">3.&nbsp;&nbsp;&nbsp;Create a directory called <code>food</code> off the directory in your class path setting.</p>
<p class="nums">4.&nbsp;&nbsp;&nbsp;Attempt to compile the two files. If you want to use the <code>Apple</code> class, make sure you place the <code>Fruit.class</code> file in the <code>food</code> subdirectory.</p>
<hr class="hr">
<h3 class="h3a">CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch01lev1sec5a"></a>Use Interfaces (OCA Objective 7.5)</h3>
<p class="noindent"><em>7.6 Use abstract classes and interfaces.</em></p>
<h4 class="h4"><a id="ch01lev2sec9"></a>Declaring an Interface</h4>
<p class="noindent">In general, when you create an interface, you’re defining a contract for <em>what</em> a class can do, without saying anything about <em>how</em> the class will do it.</p>
<p class="indent">Note: As of Java 8, you can now also describe the <em>how</em>, but you usually won’t. Until we get to the new interface-related features of Java 8—<code>default</code> and <code>static</code> methods—we will discuss interfaces from a traditional perspective, which is again, defining a contract for <em>what</em> a class can do.</p>
<p class="indent"><a id="page_24"></a>An interface is a contract. You could write an interface <code>Bounceable</code>, for example, that says in effect, “This is the <code>Bounceable</code> interface. Any concrete class type that implements this interface must agree to write the code for the <code>bounce()</code> and <code>setBounceFactor()</code> methods.”</p>
<p class="indent">By defining an interface for <code>Bounceable</code>, any class that wants to be treated as a <code>Bounceable</code> thing can simply implement the <code>Bounceable</code> interface and provide code for the interface’s two methods.</p>
<p class="indent">Interfaces can be implemented by any class, from any inheritance tree. This lets you take radically different classes and give them a common characteristic. For example, you might want both a <code>Ball</code> and a <code>Tire</code> to have bounce behavior, but <code>Ball</code> and <code>Tire</code> don’t share any inheritance relationship; <code>Ball</code> extends <code>Toy</code> while <code>Tire</code> extends only <code>java.lang.Object</code>. But by making both <code>Ball</code> and <code>Tire</code> implement <code>Bounceable</code>, you’re saying that <code>Ball</code> and <code>Tire</code> can be treated as “Things that can bounce,” which in Java translates to, “Things on which you can invoke the <code>bounce()</code> and <code>setBounceFactor()</code> methods.” <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1fig1">Figure 1-1</a> illustrates the relationship between interfaces and classes.</p>
<p class="code1"><a id="ch1fig1"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0024-01.jpg" alt="images" width="855" height="687"></p>
<p class="figcap"><span class="figs"><strong>FIGURE 1-1</strong></span>&nbsp;&nbsp;&nbsp;The relationship between interfaces and classes</p>
<p class="indent"><a id="page_25"></a>Think of a traditional interface as a 100 percent <code>abstract</code> class. Like an <code>abstract</code> class, an interface defines abstract methods that take the following form:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0025-01.jpg" alt="images" width="388" height="23"></p>
<p class="indent">But although an <code>abstract</code> class can define both <code>abstract</code> and nonabstract methods, an interface <em>generally</em> has only <code>abstract</code> methods. Another way interfaces differ from <code>abstract</code> classes is that interfaces have very little flexibility in how the methods and variables defined in the interface are declared. These rules are strict:</p>
<p class="bulletxt"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Interface methods are implicitly <code>public</code> and <code>abstract</code>, unless declared as <code>default</code> or <code>static</code>. In other words, you do not need to actually type the <code>public</code> or <code>abstract</code> modifiers in the method declaration, but the method is still always <code>public</code> and <code>abstract</code>.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;All variables defined in an interface must be <code>public</code>, <code>static</code>, and <code>final</code>—in other words, interfaces can declare only constants, not instance variables.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Interface methods cannot be marked <code>final</code>, <code>strictfp</code>, or <code>native</code>. (More on these modifiers later in the chapter.)</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;An interface can <em>extend</em> one or more other interfaces.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;An interface cannot extend anything but another interface.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;An interface cannot implement another interface or class.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;An interface must be declared with the keyword <code>interface</code>.</p>
<p class="bulletxb"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Interface types can be used polymorphically (see <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html">Chapter 2</a> for more details).</p>
<p class="indent">The following is a legal interface declaration:</p>
<p class="code1"><code>public abstract interface Rollable { }</code></p>
<p class="indent">Typing in the <code>abstract</code> modifier is considered redundant; interfaces are implicitly abstract whether you type <code>abstract</code> or not. You just need to know that both of these declarations are legal and functionally identical:</p>
<p class="code1"><code>public abstract interface Rollable { }<br>public interface Rollable { }</code></p>
<p class="noindent">The <code>public</code> modifier is required if you want the interface to have <code>public</code> rather than default access.</p>
<p class="indent"><a id="page_26"></a>We’ve looked at the interface declaration, but now we’ll look closely at the methods within an interface:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0026-01.jpg" alt="images" width="465" height="75"></p>
<p class="indent">Typing in the <code>public</code> and <code>abstract</code> modifiers on the methods is redundant, though, since all interface methods are implicitly <code>public</code> and <code>abstract</code>. Given that rule, you can see that the following code is exactly equivalent to the preceding interface:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0026-02.jpg" alt="images" width="495" height="75"></p>
<p class="noindent">You must remember that all interface methods not declared <code>default</code> or <code>static</code> are <code>public</code> and <code>abstract</code> regardless of what you see in the interface definition.</p>
<p class="indent">Look for interface methods declared with any combination of <code>public</code>, <code>abstract</code>, or no modifiers. For example, the following five method declarations, if declared within their own interfaces, are legal and identical!</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0026-03.jpg" alt="images" width="283" height="93"></p>
<p class="indent">The following interface method declarations won’t compile:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0026-04.jpg" alt="images" width="640" height="74"></p>
<h4 class="h4"><a id="ch01lev2sec10"></a>Declaring Interface Constants</h4>
<p class="noindent">You’re allowed to put constants in an interface. By doing so, you guarantee that any class implementing the interface will have access to the same constant. By placing the constants right in the interface, any class that implements the interface has direct access to the constants, just as if the class had inherited them.</p>
<p class="indent">You need to remember one key rule for interface constants. They must always be</p>
<p class="code1"><code>public static final</code></p>
<p class="noindent">So that sounds simple, right? After all, interface constants are no different from any other publicly accessible constants, so they obviously must be declared <code>public</code>, <code>static</code>, and <code>final</code>. <a id="page_27"></a>But before you breeze past the rest of this discussion, think about the implications: <strong>Because interface constants are defined in an interface, they don’t have to be</strong> <strong><em>declared</em></strong> <strong>as</strong> <code><strong>public</strong></code><strong>,</strong> <code><strong>static</strong></code><strong>, or</strong> <code><strong>final</strong></code><strong>. They must be</strong> <code><strong>public</strong></code><strong>,</strong> <code><strong>static</strong></code><strong>, and</strong> <code><strong>final</strong></code><strong>, but you don’t actually have to declare them that way.</strong> Just as interface methods are always <code>public</code> and <code>abstract</code> whether you say so in the code or not, any variable defined in an interface must be—and implicitly is—a <code>public</code> constant. See if you can spot the problem with the following code (assume two separate files):</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0027-01.jpg" alt="images" width="245" height="195"></p>
<p class="indent">You can’t change the value of a constant! Once the value has been assigned, the value can never be modified. The assignment happens in the interface itself (where the constant is declared), so the implementing class can access it and use it, but as a read-only value. So the <code>BAR = 27</code> assignment will not compile.</p>
<div class="side-exam">
<p class="imaget"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51"></p>
<p class="Text-icon-exam"><strong><em>Look for interface definitions that define constants, but without explicitly using the required modifiers. For example, the following are all identical:</em></strong></p>
<p class="imagel"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0027-01.jpg" alt="images" width="665" height="207"></p>
<p class="Text-icon-exam"><strong><em>Any combination of the required (but implicit) modifiers is legal, as is using no modifiers at all! On the exam, you can expect to see questions you won’t be able to answer correctly unless you know, for example, that an interface variable is final and can never be given a value by the implementing (or any other) class.</em></strong></p>
</div>
<h4 class="h4"><a id="ch01lev2sec11"></a><a id="page_28"></a>Declaring <code>default</code> Interface Methods</h4>
<p class="noindent">As of Java 8, interfaces can include inheritable* methods with concrete implementations. (*The strict definition of “inheritance” has gotten a little fuzzy with Java 8; we’ll talk more about inheritance in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html">Chapter 2</a>.) These concrete methods are called <code>default</code> methods. In the next chapter we’ll talk a lot about the various OO-related rules that are impacted because of <code>default</code> methods. For now we’ll just cover the simple declaration rules:</p>
<p class="bulletxt"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<code>d</code><code>efault</code> methods are declared by using the <code>default</code> keyword. The <code>default</code> keyword can be used only with interface method signatures, not class method signatures.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<code>d</code><code>efault</code> methods are <code>public</code> by definition, and the <code>public</code> modifier is optional.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<code>d</code><code>efault</code> methods <strong>cannot</strong> be marked as <code>private</code>, <code>protected</code>, <code>static</code>, <code>final</code>, or <code>abstract</code>.</p>
<p class="bulletxb"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<code>d</code><code>efault</code> methods must have a concrete method body.</p>
<p class="indent">Here are some examples of legal and illegal <code>default</code> methods:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0028-01.jpg" alt="images" width="690" height="115"></p>
<h4 class="h4"><a id="ch01lev2sec12"></a>Declaring <code>static</code> Interface Methods</h4>
<p class="noindent">As of Java 8, interfaces can include <code>static</code> methods with concrete implementations. As with interface <code>default</code> methods, there are OO implications that we’ll discuss in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html">Chapter 2</a>. For now, we’ll focus on the basics of declaring and using <code>static</code> interface methods:</p>
<p class="bulletxt"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<code>s</code><code>tatic</code> interface methods are declared by using the <code>static</code> keyword.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<code>s</code><code>tatic</code> interface methods are public by default, and the <code>public</code> modifier is optional.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<code>s</code><code>tatic</code> interface methods cannot be marked as <code>private</code>, <code>protected</code>, <code>final</code>, or <code>abstract</code>.</p>
<p class="bulletx"><a id="page_29"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<code>s</code><code>tatic</code> interface methods must have a concrete method body.</p>
<p class="bulletxb"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;When invoking a <code>static</code> interface method, the method’s type (interface name) MUST be included in the invocation.</p>
<p class="indent">Here are some examples of legal and illegal static interface methods and their use:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0029-01.jpg" alt="images" width="609" height="373"></p>
<p class="noindent">which produces this output:</p>
<p class="code1"><code>42<br>42</code></p>
<p class="noindent">As we said earlier, we’ll return to our discussion of <code>default</code> methods and <code>static</code> methods for interfaces in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html">Chapter 2</a>.</p>
<h3 class="h3a">CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch01lev1sec6"></a>Declare Class Members (OCA Objectives 2.1, 2.2, 2.3, 4.1, 4.2, 6.2, 6.3, and 6.4)</h3>
<p class="noindent"><em>2.1 Declare and initialize variables (including casting of primitive data types).</em></p>
<p class="noindent"><em>2.2 Differentiate between object reference variables and primitive variables.</em></p>
<p class="noindent"><em>2.3 Know how to read or write to object fields.</em></p>
<p class="noindent"><a id="page_30"></a><em>4.1 Declare, instantiate, initialize, and use a one-dimensional array.</em></p>
<p class="noindent"><em>4.2 Declare, instantiate, initialize, and use multidimensional array. (sic)</em></p>
<p class="noindent"><em>6.2 Apply the static keyword to methods and fields.</em></p>
<p class="noindent"><em>6.3 Create and overload constructors; including impact on default constructors. (sic)</em></p>
<p class="noindent"><em>6.4 Apply access modifiers.</em></p>
<p class="indentt">We’ve looked at what it means to use a modifier in a class declaration, and now we’ll look at what it means to modify a method or variable declaration.</p>
<p class="indent">Methods and instance (nonlocal) variables are collectively known as <em>members</em>. You can modify a member with both access and nonaccess modifiers, and you have more modifiers to choose from (and combine) than when you’re declaring a class.</p>
<h4 class="h4"><a id="ch01lev2sec13"></a>Access Modifiers</h4>
<p class="noindent">Because method and variable members are usually given access control in exactly the same way, we’ll cover both in this section.</p>
<p class="indent">Whereas a <em>class</em> can use just two of the four access control levels (default or <code>public</code>), members can use all four:</p>
<p class="bulletxt"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<code>p</code><code>ublic</code></p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<code>p</code><code>rotected</code></p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;default</p>
<p class="bulletxb"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<code>p</code><code>rivate</code></p>
<p class="indent">Default protection is what you get when you don’t type an access modifier in the member declaration. The default and <code>protected</code> access control types have almost identical behavior, except for one difference that we will mention later.</p>
<p class="indent">Note: As of Java 8, the word <code>default</code> can ALSO be used to declare certain methods in interfaces. When used in an interface’s method declaration, <code>default</code> has a different meaning than what we are describing for the rest of this chapter.</p>
<p class="indent">It’s crucial that you know access control inside and outside for the exam. There will be quite a few questions where access control plays a role. Some questions test several concepts of access control at the same time, so not knowing one small part of access control could mean you blow an entire question.</p>
<p class="indent">What does it mean for code in one class to have access to a member of another class? For now, ignore any differences between methods and variables. If class A has access to a member of class B, it means that class B’s member is visible to class A. When a class does not have access to another member, the compiler will slap you for trying to access something that you’re not even supposed to know exists!</p>
<p class="indent"><a id="page_31"></a>You need to understand two different access issues:</p>
<p class="bulletxt"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Whether method code in one class can <em>access</em> a member of another class</p>
<p class="bulletxb"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Whether a subclass can <em>inherit</em> a member of its superclass</p>
<p class="indent">The first type of access occurs when a method in one class tries to access a method or a variable of another class, using the dot operator (<code>.</code>) to invoke a method or retrieve a variable. For example:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0031-01.jpg" alt="images" width="552" height="313"></p>
<p class="indent">The second type of access revolves around which, if any, members of a superclass a subclass can access through inheritance. We’re not looking at whether the subclass can, say, invoke a method on an instance of the superclass (which would just be an example of the first type of access). Instead, we’re looking at whether the subclass <em>inherits</em> a member of its superclass. Remember, if a subclass <em>inherits</em> a member, it’s exactly as if the subclass actually declared the member itself. In other words, if a subclass <em>inherits</em> a member, the subclass <em>has</em> the member. Here’s an example:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0031-02.jpg" alt="images" width="562" height="252"></p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0032-01.jpg" alt="images" width="569" height="114"></p>
<p class="indent"><a id="page_32"></a><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1fig2">Figure 1-2</a> compares a class inheriting a member of another class and accessing a member of another class using a reference of an instance of that class.</p>
<p class="images"><a id="ch1fig2"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0032-01.jpg" alt="images" width="421" height="687"></p>
<p class="figcap"><span class="figs"><strong>FIGURE 1-2</strong></span>&nbsp;&nbsp;&nbsp;Comparison of inheritance vs. dot operator for member access</p>
<p class="indent"><a id="page_33"></a>Much of access control (both types) centers on whether the two classes involved are in the same or different packages. Don’t forget, though, that if class A <em>itself</em> can’t be accessed by class B, then no members within class A can be accessed by class B.</p>
<p class="indent">You need to know the effect of different combinations of class and member access (such as a default class with a <code>public</code> variable). To figure this out, first look at the access level of the class. If the class itself will not be visible to another class, then none of the members will be visible either, even if the member is declared <code>public</code>. Once you’ve confirmed that the class is visible, then it makes sense to look at access levels on individual members.</p>
<h4 class="h4a">Public Members</h4>
<p class="noindent">When a method or variable member is declared <code>public</code>, it means all other classes, regardless of the package they belong to, can access the member (assuming the class itself is visible).</p>
<p class="indent">Look at the following source file:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0033-01.jpg" alt="images" width="543" height="287"></p>
<p class="indent">As you can see, <code>Goo</code> and <code>Sludge</code> are in different packages. However, <code>Goo</code> can invoke the method in <code>Sludge</code> without problems because both the <code>Sludge</code> class and its <code>testIt()</code> method are marked <code>public</code>.</p>
<p class="indent">For a subclass, if a member of its superclass is declared <code>public</code>, the subclass inherits that member regardless of whether both classes are in the same package:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0033-02.jpg" alt="images" width="400" height="133"></p>
<p class="noindent"><a id="page_34"></a>The <code>Roo</code> class declares the <code>doRooThings()</code> member as <code>public</code>. So if we make a subclass of <code>Roo</code>, any code in that <code>Roo</code> subclass can call its own inherited <code>doRooThings()</code> method.</p>
<p class="indent">Notice in the following code that the <code>doRooThings()</code> method is invoked without having to preface it with a reference:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0034-01.jpg" alt="images" width="449" height="134"></p>
<p class="indent">Remember, if you see a method invoked (or a variable accessed) without the dot operator (<code>.</code>), it means the method or variable belongs to the class where you see that code. It also means that the method or variable is implicitly being accessed using the <code>this</code> reference. So in the preceding code, the call to <code>doRooThings()</code> in the <code>Cloo</code> class could also have been written as <code>this.doRooThings()</code>. The reference <code>this</code> always refers to the currently executing object—in other words, the object running the code where you see the <code>this</code> reference. Because the <code>this</code> reference is implicit, you don’t need to preface your member access code with it, but it won’t hurt. Some programmers include it to make the code easier to read for new (or non) Java programmers.</p>
<p class="indent">Besides being able to invoke the <code>doRooThings()</code> method on itself, code from some other class can call <code>doRooThings()</code> on a <code>Cloo</code> instance, as in the following:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0034-02.jpg" alt="images" width="592" height="153"></p>
<h4 class="h4a">Private Members</h4>
<p class="noindent">Members marked <code>private</code> can’t be accessed by code in any class other than the class in which the <code>private</code> member was declared. Let’s make a small change to the <code>Roo</code> class from an earlier example:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0034-03.jpg" alt="images" width="303" height="53"></p>
<p class="code1"><a id="page_35"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0035-01.jpg" alt="images" width="569" height="94"></p>
<p class="indent">The <code>doRooThings()</code> method is now <code>private</code>, so no other class can use it. If we try to invoke the method from any other class, we’ll run into trouble:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0035-02.jpg" alt="images" width="572" height="152"></p>
<p class="indent">If we try to compile <code>UseARoo</code>, we get a compiler error something like this:</p>
<p class="code1"><code>cannot find symbol<br>symbol : method doRooThings()</code></p>
<p class="noindent">It’s as if the method <code>doRooThings()</code> doesn’t exist, and as far as any code outside of the <code>Roo</code> class is concerned, this is true. A <code>private</code> member is invisible to any code outside the member’s own class.</p>
<p class="indent">What about a subclass that tries to inherit a <code>private</code> member of its superclass? When a member is declared <code>private</code>, a subclass can’t inherit it. For the exam, you need to recognize that a subclass can’t see, use, or even think about the <code>private</code> members of its superclass. You can, however, declare a matching method in the subclass. But regardless of how it looks, <strong><em>it is not an overriding method!</em></strong> It is simply a method that happens to have the same name as a <code>private</code> method (which you’re not supposed to know about) in the superclass. The rules of overriding do not apply, so you can make this newly-declared-but-just-happens-to-match method declare new exceptions, or change the return type, or do anything else you want it to do.</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0035-03.jpg" alt="images" width="591" height="152"></p>
<p class="indent"><a id="page_36"></a>The <code>doRooThings()</code> method is now off limits to all subclasses, even those in the same package as the superclass:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0036-01.jpg" alt="images" width="650" height="107"></p>
<p class="indent">If we try to compile the subclass <code>Cloo</code>, the compiler is delighted to spit out an error something like this:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0036-02.jpg" alt="images" width="415" height="70"></p>
<p class="indent">Can a <code>private</code> method be overridden by a subclass? That’s an interesting question, but the answer is no. Because the subclass, as we’ve seen, cannot inherit a <code>private</code> method, it, therefore, cannot override the method—overriding depends on inheritance. We’ll cover the implications of this in more detail a little later in this section as well as in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html">Chapter 2</a>, but for now, just remember that a method marked <code>private</code> cannot be overridden. <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1fig3">Figure 1-3</a> illustrates the effects of the <code>public</code> and <code>private</code> modifiers on classes from the same or different packages.</p>
<p class="images"><a id="ch1fig3"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0037-01.jpg" alt="images" width="399" height="687"></p>
<p class="figcap"><a id="page_37"></a><span class="figs"><strong>FIGURE 1-3</strong></span>&nbsp;&nbsp;&nbsp;Effects of <code>public</code> and <code>private</code> access</p>
<h4 class="h4a">Protected and Default Members</h4>
<p class="noindent">Note: Just a reminder, in the next several sections, when we use the word “default,” we’re talking about access control. We’re NOT talking about the new kind of Java 8 interface method that can be declared <code>default</code>.</p>
<p class="indent">The <code>protected</code> and default access control levels are almost identical, but with one critical difference. A <em>default</em> member may be accessed only if the class accessing the member belongs to the same package, whereas a <code>protected</code> member can be accessed (through inheritance) by a subclass <strong><em>even if the subclass is in a different package</em></strong><em>.</em> Take a look at the following two classes:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0036-03.jpg" alt="images" width="562" height="133"></p>
<p class="indent">In another source code file you have the following:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0037-01.jpg" alt="images" width="398" height="133"></p>
<p class="indent"><a id="page_38"></a>As you can see, the <code>testIt()</code> method in the first file has <em>default</em> (think <em>package</em>-level) access. Notice also that class <code>OtherClass</code> is in a different package from the <code>AccessClass</code>. Will <code>AccessClass</code> be able to use the method <code>testIt()</code>? Will it cause a compiler error? Will Daniel ever marry Francesca? Stay tuned.</p>
<p class="code1"><code>No method matching testIt() found in class<br>certification.OtherClass. o.testIt();</code></p>
<p class="indent">From the preceding results, you can see that <code>AccessClass</code> can’t use the <code>OtherClass</code> method <code>testIt()</code> because <code>testIt()</code> has default access and <code>AccessClass</code> is not in the same package as <code>OtherClass</code>. So <code>AccessClass</code> can’t see it, the compiler complains, and we have no idea who Daniel and Francesca are.</p>
<p class="indent">Default and protected behavior differ only when we talk about subclasses. If the <code>protected</code> keyword is used to define a member, any subclass of the class declaring the member can access it <em>through inheritance</em>. It doesn’t matter if the superclass and subclass are in different packages; the <code>protected</code> superclass member is still visible to the subclass (although visible only in a very specific way, as we’ll see a little later). This is in contrast to the default behavior, which doesn’t allow a subclass to access a superclass member unless the subclass is in the same package as the superclass.</p>
<p class="indent">Whereas default access doesn’t extend any special consideration to subclasses (you’re either in the package or you’re not), the <code>protected</code> modifier respects the parent-child relationship, even when the child class moves away (and joins a new package). So when you think of <em>default</em> access, think <em>package</em> restriction. No exceptions. But when you think <code>protected</code>, think <em>package + kids</em>. A class with a <code>protected</code> member is marking that member as having package-level access for all classes, but with a special exception for subclasses outside the package.</p>
<p class="indent">But what does it mean for a subclass-outside-the-package to have access to a superclass (parent) member? It means the subclass inherits the member. It does not, however, mean the subclass-outside-the-package can access the member using a reference to an instance of the superclass. In other words, <code>protected</code> = inheritance. <code>Protected</code> does not mean that the subclass can treat the <code>protected</code> superclass member as though it were public. So if the subclass-outside-the-package gets a reference to the superclass (by, for example, creating an instance of the superclass somewhere in the subclass’s code), the subclass cannot use the dot operator on the superclass reference to access the <code>protected</code> member. To a subclass-outside-the-package, a <code>protected</code> member might as well be default (or even <code>private</code>), when the subclass is using a reference to the superclass. <strong>The subclass can see the</strong> <code><strong>protected</strong></code> <strong>member only through inheritance.</strong></p>
<p class="indent"><a id="page_39"></a>Are you confused? Hang in there and it will all become clearer with the next batch of code examples.</p>
<h4 class="h4a">Protected Details</h4>
<p class="noindent">Let’s take a look at a <code>protected</code> instance variable (remember, an instance variable is a member) of a superclass.</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0039-01.jpg" alt="images" width="410" height="74"></p>
<p class="indent">The preceding code declares the variable <code>x</code> as <code>protected</code>. This makes the variable <em>accessible</em> to all other classes <em>inside</em> the certification package, as well as <em>inheritable</em> by any subclasses <em>outside</em> the package.</p>
<p class="indent">Now let’s create a subclass in a different package and attempt to use the variable <code>x</code> (that the subclass inherits):</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0039-02.jpg" alt="images" width="563" height="153"></p>
<p class="noindent">The preceding code compiles fine. Notice, though, that the <code>Child</code> class is accessing the <code>protected</code> variable through inheritance. Remember that any time we talk about a subclass having access to a superclass member, we could be talking about the subclass inheriting the member, not simply accessing the member through a reference to an instance of the superclass (the way any other nonsubclass would access it). Watch what happens if the subclass <code>Child</code> (outside the superclass’s package) tries to access a <code>protected</code> variable using a <code>Parent</code> class reference:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0039-03.jpg" alt="images" width="626" height="200"></p>
<p class="noindent"><a id="page_40"></a>The compiler is more than happy to show us the problem:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0040-01.jpg" alt="images" width="628" height="91"></p>
<p class="indent">So far, we’ve established that a <code>protected</code> member has essentially package-level or default access to all classes except for subclasses. We’ve seen that subclasses outside the package can inherit a <code>protected</code> member. Finally, we’ve seen that subclasses outside the package can’t use a superclass reference to access a protected member. <strong><em>For a subclass outside the package, the protected member can be</em></strong> <strong><em>accessed only through inheritance.</em></strong></p>
<p class="indent">But there’s still one more issue we haven’t looked at: What does a <code>protected</code> member look like to other classes trying to use the subclass-outside-the-package to get to the subclass’s inherited <code>protected</code> superclass member? For example, using our previous <code>Parent</code>/<code>Child</code> classes, what happens if some other class—<code>Neighbor</code>, say—in the same package as the <code>Child</code> (subclass) has a reference to a <code>Child</code> instance and wants to access the member variable <code>x</code>? In other words, how does that <code>protected</code> member behave once the subclass has inherited it? Does it maintain its <code>protected</code> status such that classes in the <code>Child</code>’s package can see it?</p>
<p class="indent">No! Once the subclass-outside-the-package inherits the <code>protected</code> member, that member (as inherited by the subclass) becomes private to any code outside the subclass, with the exception of subclasses of the subclass. So if class <code>Neighbor</code> instantiates a <code>Child</code> object, then even if class <code>Neighbor</code> is in the same package as class <code>Child</code>, class <code>Neighbor</code> won’t have access to the <code>Child</code>’s inherited (but <code>protected</code>) variable <code>x</code>. <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1fig4">Figure 1-4</a> illustrates the effect of <code>protected</code> access on classes and subclasses in the same or different packages.</p>
<p class="indent">Whew! That wraps up <code>protected</code>, the most misunderstood modifier in Java. Again, it’s used only in very special cases, but you can count on it showing up on the exam. Now that we’ve covered the <code>protected</code> modifier, we’ll switch to default member access, a piece of cake compared to <code>protected</code>.</p>
<p class="images"><a id="ch1fig4"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0041-01.jpg" alt="images" width="651" height="687"></p>
<p class="figcap"><a id="page_41"></a><span class="figs"><strong>FIGURE 1-4</strong></span>&nbsp;&nbsp;&nbsp;Effects of <code>protected</code> access</p>
<h4 class="h4a">Default Details</h4>
<p class="noindent">Let’s start with the default behavior of a member in a superclass. We’ll modify the <code>Parent</code>’s member <code>x</code> to make it default.</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0040-02.jpg" alt="images" width="467" height="94"></p>
<p class="indent">Notice we didn’t place an access modifier in front of the variable <code>x</code>. Remember that if you don’t type an access modifier before a class or member declaration, the access control is default, which means package level. We’ll now attempt to access the default member from the <code>Child</code> class that we saw earlier.</p>
<p class="indent"><a id="page_42"></a>When we try to compile the <code>Child.java</code> file, we get an error like this:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0042-01.jpg" alt="images" width="445" height="50"></p>
<p class="noindent">The compiler gives the same error as when a member is declared as <code>private</code>. The subclass <code>Child</code> (in a different package from the superclass <code>Parent</code>) can’t see or use the default superclass member <code>x</code>! Now, what about default access for two classes in the same package?</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0042-02.jpg" alt="images" width="286" height="74"></p>
<p class="indent">And in the second class you have the following:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0042-03.jpg" alt="images" width="569" height="192"></p>
<p class="indent">The preceding source file compiles fine, and the class <code>Child</code> runs and displays the value of <code>x</code>. Just remember that default members are visible to subclasses only if those subclasses are in the same package as the superclass.</p>
<h4 class="h4a">Local Variables and Access Modifiers</h4>
<p class="noindent">Can access modifiers be applied to local variables? NO!</p>
<p class="indent">There is never a case where an access modifier can be applied to a local variable, so watch out for code like the following:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0042-04.jpg" alt="images" width="206" height="115"></p>
<p class="indent">You can be certain that any local variable declared with an access modifier will not compile. In fact, there is only one modifier that can ever be applied to local variables—<code>final</code>.</p>
<p class="indent"><a id="page_43"></a>That about does it for our discussion on member access modifiers. <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1tab2">Table 1-2</a> shows all the combinations of access and visibility; you really should spend some time with it. Next, we’re going to dig into the other (nonaccess) modifiers that you can apply to member declarations.</p>
<p class="tabcap"><span class="figs"><strong>TABLE 1-2</strong></span>&nbsp;&nbsp;&nbsp;Determining Access to Class Members</p>
<p class="image-t"><a id="ch1tab2"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/t0043-01.jpg" alt="images" width="991" height="246"></p>
<h4 class="h4"><a id="ch01lev2sec14"></a>Nonaccess Member Modifiers</h4>
<p class="noindent">We’ve discussed member access, which refers to whether code from one class can invoke a method (or access an instance variable) from another class. That still leaves a boatload of other modifiers you can use on member declarations. Two you’re already familiar with—<code>final</code> and <code>abstract</code>—because we applied them to class declarations earlier in this chapter. But we still have to take a quick look at <code>transient</code>, <code>synchronized</code>, <code>native</code>, <code>strictfp</code>, and then a long look at the Big One, <code>static</code>, much later in the chapter.</p>
<p class="indent">We’ll look first at modifiers applied to methods, followed by a look at modifiers applied to instance variables. We’ll wrap up this section with a look at how <code>static</code> works when applied to variables and methods.</p>
<h4 class="h4a">Final Methods</h4>
<p class="noindent">The <code>final</code> keyword prevents a method from being overridden in a subclass and is often used to enforce the API functionality of a method. For example, the <code>Thread</code> class has a method called <code>isAlive()</code> that checks whether a thread is still active. If you extend the <code>Thread</code> class, though, there is really no way that you can correctly implement this method yourself (it uses native code, for one thing), so the designers have made it <code>final</code>. Just as you can’t subclass the <code>String</code> class (because we need to be able to trust in the behavior of a String object), you can’t override many of the <a id="page_44"></a>methods in the core class libraries. This can’t-be-overridden restriction provides for safety and security, but you should use it with great caution. Preventing a subclass from overriding a method stifles many of the benefits of OO, including extensibility through polymorphism. A typical <code>final</code> method declaration looks like this:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0044-01.jpg" alt="images" width="349" height="95"></p>
<p class="indent">It’s legal to extend <code>SuperClass</code>, since the <em>class</em> isn’t marked <code>final</code>, but we can’t override the <code>final</code> <em>method</em> <code>showSample()</code>, as the following code attempts to do:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0044-02.jpg" alt="images" width="542" height="115"></p>
<p class="indent">Attempting to compile the preceding code gives us something like this:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0044-03.jpg" alt="images" width="609" height="130"></p>
<h4 class="h4a">Final Arguments</h4>
<p class="noindent">Method arguments are the variable declarations that appear in between the parentheses in a method declaration. A typical method declaration with multiple arguments looks like this:</p>
<p class="code1"><code>public Record getRecord(int fileNumber, int recNumber) {}</code></p>
<p class="indent">Method arguments are essentially the same as local variables. In the preceding example, the variables <code>fileNumber</code> and <code>recNumber</code> will both follow all the rules applied to local variables. This means they can also have the modifier <code>final</code>:</p>
<p class="code1"><code>public Record getRecord(int fileNumber, final int recNumber) {}</code></p>
<p class="noindent"><a id="page_45"></a>In this example, the variable <code>recNumber</code> is declared as <code>final</code>, which, of course, means it can’t be modified within the method. In this case, “modified” means reassigning a new value to the variable. In other words, a <code>final</code> parameter must keep the same value as the argument had when it was passed into the method.</p>
<h4 class="h4a">Abstract Methods</h4>
<p class="noindent">An <code>abstract</code> method is a method that’s been <em>declared</em> (as <code>abstract</code>) but not <em>implemented</em>. In other words, the method contains no functional code. And if you recall from the earlier section “Abstract Classes,” an <code>abstract</code> method declaration doesn’t even have curly braces for where the implementation code goes, but instead closes with a semicolon. In other words, <em>it has no method body</em>. You mark a method <code>abstract</code> when you want to force subclasses to provide the implementation. For example, if you write an <code>abstract</code> class <code>Car</code> with a method <code>goUpHill()</code>, you might want to force each subtype of <code>Car</code> to define its own <code>goUpHill()</code> behavior, specific to that particular type of car.</p>
<p class="code1"><code>public abstract void showSample();</code></p>
<p class="indent">Notice that the <code>abstract</code> method ends with a semicolon instead of curly braces. <strong>It is illegal to have even a single</strong> <code><strong>abstract</strong></code> <strong>method in a class that is not explicitly declared</strong> <code><strong>abstract</strong></code><strong>!</strong> Look at the following illegal class:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0045-01.jpg" alt="images" width="645" height="207"></p>
<p class="indent">You can, however, have an <code>abstract</code> class with no <code>abstract</code> methods. The following example will compile fine:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0045-02.jpg" alt="images" width="439" height="95"></p>
<p class="indent"><a id="page_46"></a>In the preceding example, <code>goodMethod()</code> is not <code>abstract</code>. Three different clues tell you it’s not an <code>abstract</code> method:</p>
<p class="bulletxt"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;The method is not marked <code>abstract</code>.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;The method declaration includes curly braces, as opposed to ending in a semicolon. In other words, the method has a method body.</p>
<p class="bulletxb"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;The method <strong>might</strong> provide actual implementation code inside the curly braces.</p>
<p class="indent">Any class that extends an <code>abstract</code> class must implement all <code>abstract</code> methods of the superclass, unless the subclass is <em>also</em> <code>abstract</code>. The rule is this:</p>
<p class="noindent"><strong>The first concrete subclass of an</strong> <code><strong>abstract</strong></code> <strong>class must implement</strong> <strong><em>all</em></strong> <code><strong>abstract</strong></code> <strong>methods of the superclass.</strong></p>
<p class="indent"><em>Concrete</em> just means nonabstract, so if you have an <code>abstract</code> class extending another <code>abstract</code> class, the <code>abstract</code> subclass doesn’t need to provide implementations for the inherited <code>abstract</code> methods. Sooner or later, though, somebody’s going to make a nonabstract subclass (in other words, a class that can be instantiated), and that subclass will have to implement all the <code>abstract</code> methods from up the inheritance tree. The following example demonstrates an inheritance tree with two <code>abstract</code> classes and one concrete class:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0046-01.jpg" alt="images" width="554" height="393"></p>
<p class="indent">So how many methods does class <code>Mini</code> have? Three. It inherits both the <code>getType()</code> and <code>doCarThings()</code> methods because they’re <code>public</code> and concrete (nonabstract). <a id="page_47"></a>But because <code>goUpHill()</code> is <code>abstract</code> in the superclass <code>Vehicle</code> and is never implemented in the <code>Car</code> class (so it remains <code>abstract</code>), it means class <code>Mini</code>—as the first concrete class below <code>Vehicle</code>—must implement the <code>goUpHill()</code> method. In other words, class <code>Mini</code> can’t pass the buck (of <code>abstract</code> method implementation) to the next class down the inheritance tree, but class <code>Car</code> can, since <code>Car</code>, like <code>Vehicle</code>, is <code>abstract</code>. <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1fig5">Figure 1-5</a> illustrates the effects of the <code>abstract</code> modifier on concrete and <code>abstract</code> subclasses.</p>
<p class="images"><a id="ch1fig5"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0047-01.jpg" alt="images" width="819" height="687"></p>
<p class="figcap"><span class="figs"><strong>FIGURE 1-5</strong></span>&nbsp;&nbsp;&nbsp;The effects of the <code>abstract</code> modifier on concrete and <code>abstract</code> subclasses</p>
<p class="indent">Look for concrete classes that don’t provide method implementations for <code>abstract</code> methods of the superclass. The following code won’t compile:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0047-01.jpg" alt="images" width="236" height="115"></p>
<p class="indent"><a id="page_48"></a>Class B won’t compile because it doesn’t implement the inherited <code>abstract</code> method <code>foo()</code>. Although the <code>foo(int I)</code> method in class B might appear to be an implementation of the superclass’s <code>abstract</code> method, it is simply an overloaded method (a method using the same identifier, but different arguments), so it doesn’t fulfill the requirements for implementing the superclass’s <code>abstract</code> method. We’ll look at the differences between overloading and overriding in detail in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html">Chapter 2</a>.</p>
<p class="indent">A method can never, ever, ever be marked as both <code>abstract</code> and <code>final</code>, or both <code>abstract</code> and <code>private</code>. Think about it—<code>abstract</code> methods must be implemented (which essentially means overridden by a subclass), whereas <code>final</code> and <code>private</code> methods cannot ever be overridden by a subclass. Or to phrase it another way, an <code>abstract</code> designation means the superclass doesn’t know anything about how the subclasses should behave in that method, whereas a <code>final</code> designation means the superclass knows everything about how all subclasses (however far down the inheritance tree they may be) should behave in that method. The <code>abstract</code> and <code>final</code> modifiers are virtually opposites. Because <code>private</code> methods cannot even be seen by a subclass (let alone inherited), they, too, cannot be overridden, so they, too, cannot be marked <code>abstract</code>.</p>
<p class="indent">Finally, you need to know that—for top-level classes—the <code>abstract</code> modifier can never be combined with the <code>static</code> modifier. We’ll cover <code>static</code> methods later in this objective, but for now just remember that the following would be illegal:</p>
<p class="code1"><code>abstract static void doStuff();</code></p>
<p class="noindent">And it would give you an error that should be familiar by now:</p>
<p class="code1"><code>MyClass.java:2: illegal combination of modifiers: abstract and static<br>&nbsp;&nbsp;&nbsp;abstract static void doStuff();</code></p>
<h4 class="h4a">Synchronized Methods</h4>
<p class="noindent">The <code>synchronized</code> keyword indicates that a method can be accessed by only one thread at a time. When you are studying for your OCP 8, you’ll study the <code>synchronized</code> keyword extensively, but for now...all we’re concerned with is knowing that the <code>synchronized</code> modifier can be applied only to methods—not variables, not classes, just methods. A typical <code>synchronized</code> declaration looks like this:</p>
<p class="code1"><code>public synchronized Record retrieveUserInfo(int id) { }</code></p>
<p class="indent"><a id="page_49"></a>You should also know that the <code>synchronized</code> modifier can be matched with any of the four access control levels (which means it can be paired with any of the three access modifier keywords).</p>
<h4 class="h4a">Native Methods</h4>
<p class="noindent">The <code>native</code> modifier indicates that a method is implemented in platform-dependent code, often in C. You don’t need to know how to use <code>native</code> methods for the exam, other than knowing that <code>native</code> is a modifier (thus a reserved keyword) and that <code>native</code> can be applied only to <em>methods</em>—not classes, not variables, just methods. Note that a <code>native</code> method’s body must be a semicolon (<code>;</code>) (like <code>abstract</code> methods), indicating that the implementation is omitted.</p>
<h4 class="h4a">Strictfp Methods</h4>
<p class="noindent">We looked earlier at using <code>strictfp</code> as a class modifier, but even if you don’t declare a class as <code>strictfp</code>, you can still declare an individual method as <code>strictfp</code>. Remember, <code>strictfp</code> forces floating points (and any floating-point operations) to adhere to the IEEE 754 standard. With <code>strictfp</code>, you can predict how your floating points will behave regardless of the underlying platform the JVM is running on. The downside is that if the underlying platform is capable of supporting greater precision, a <code>strictfp</code> method won’t be able to take advantage of it.</p>
<p class="indent">You’ll want to study the IEEE 754 if you need something to help you fall asleep. For the exam, however, you don’t need to know anything about <code>strictfp</code> other than what it’s used for—that it can modify a class or method declaration, and that a variable can never be declared <code>strictfp</code>.</p>
<h4 class="h4a">Methods with Variable Argument Lists (var-args)</h4>
<p class="noindent">Java allows you to create methods that can take a variable number of arguments. Depending on where you look, you might hear this capability referred to as “variable-length argument lists,” “variable arguments,” “var-args,” “varargs,” or our personal favorite (from the department of obfuscation), “variable arity parameters.” They’re all the same thing, and we’ll use the term “var-args” from here on out.</p>
<p class="indent">As a bit of background, we’d like to clarify how we’re going to use the terms “argument” and “parameter” throughout this book:</p>
<p class="bulletxt"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>a</strong><strong>rguments</strong> The things you specify between the parentheses when you’re <em>invoking</em> a method:</p>
<p class="code2a"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0049-01.jpg" alt="images" width="337" height="23"></p>
<p class="bulletx"><a id="page_50"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>p</strong><strong>arameters</strong> The things in the <em>method’s signature</em> that indicate what the method must receive when it’s invoked:</p>
<p class="code2a"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0050-01.jpg" alt="images" width="553" height="55"></p>
<p class="indent">Let’s review the declaration rules for var-args:</p>
<p class="bulletxt"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>V</strong><strong>ar-arg type</strong> When you declare a var-arg parameter, you must specify the type of the argument(s) this parameter of your method can receive. (This can be a primitive type or an object type.)</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>B</strong><strong>asic syntax</strong> To declare a method using a var-arg parameter, you follow the type with an ellipsis (<code>...</code>), a space, and then the name of the array that will hold the parameters received.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>O</strong><strong>ther parameters</strong> It’s legal to have other parameters in a method that uses a var-arg.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>V</strong><strong>ar-arg limits</strong> <strong>The var-arg must be the last parameter in the method’s signature, and you can have only one var-arg in a method.</strong></p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Let’s look at some legal and illegal var-arg declarations:</p>
<p class="noindentt"><strong>Legal:</strong></p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0050-02.jpg" alt="images" width="667" height="95"></p>
<p class="noindent"><strong>Illegal:</strong></p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0050-03.jpg" alt="images" width="600" height="55"></p>
<h4 class="h4"><a id="ch01lev2sec15"></a>Constructor Declarations</h4>
<p class="noindent">In Java, objects are constructed. Every time you make a new object, at least one constructor is invoked. Every class has a constructor, although if you don’t create one explicitly, the compiler will build one for you. There are tons of rules concerning <a id="page_51"></a>constructors, and we’re saving our detailed discussion for <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html">Chapter 2</a>. For now, let’s focus on the basic declaration rules. Here’s a simple example:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0051-01.jpg" alt="images" width="686" height="75"></p>
<p class="indent">The first thing to notice is that constructors look an awful lot like methods. A key difference is that a constructor can’t ever, ever, ever, have a return type…ever! Constructor declarations can, however, have all of the normal access modifiers, and they can take arguments (including var-args), just like methods. The other BIG RULE to understand about constructors is that they must have the same name as the class in which they are declared. Constructors can’t be marked <code>static</code> (they are, after all, associated with object instantiation), and they can’t be marked <code>final</code> or <code>abstract</code> (because they can’t be overridden). Here are some legal and illegal constructor declarations:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0051-02.jpg" alt="images" width="610" height="294"></p>
<h4 class="h4"><a id="ch01lev2sec16"></a>Variable Declarations</h4>
<p class="noindent">There are two types of variables in Java:</p>
<p class="bulletxt"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>P</strong><strong>rimitives</strong> A primitive can be one of eight types: <code>char</code>, <code>boolean</code>, <code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>double</code>, or <code>float</code>. Once a primitive has been declared, its primitive type can never change, although in most cases its value can change.</p>
<p class="bulletx"><a id="page_52"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;<strong>R</strong><strong>eference variables</strong> A reference variable is used to refer to (or access) an object. A reference variable is declared to be of a specific type, and that type can never be changed. A reference variable can be used to refer to any object of the declared type or of a <em>subtype</em> of the declared type (a compatible type). We’ll talk a lot more about using a reference variable to refer to a subtype in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html">Chapter 2</a>, when we discuss polymorphism.</p>
<h4 class="h4a">Declaring Primitives and Primitive Ranges</h4>
<p class="noindent">Primitive variables can be declared as class variables (statics), instance variables, method parameters, or local variables. You can declare one or more primitives, of the same primitive type, in a single line. In <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html">Chapter 3</a> we will discuss the various ways in which they can be initialized, but for now we’ll leave you with a few examples of primitive variable declarations:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0052-01.jpg" alt="images" width="581" height="52"></p>
<p class="indent">On previous versions of the exam you needed to know how to calculate ranges for all the Java primitives. For the current exam, you can skip some of that detail, but it’s still important to understand that for the integer types the sequence from small to big is <code>byte</code>, <code>short</code>, <code>int</code>, and <code>long</code>, and that <code>double</code>s are bigger than <code>float</code>s.</p>
<p class="indent">You will also need to know that the number types (both integer and floating-point types) are all signed and how that affects their ranges. First, let’s review the concepts.</p>
<p class="indent">All six number types in Java are made up of a certain number of 8-bit bytes and are <em>signed</em>, meaning they can be negative or positive. The leftmost bit (the most significant digit) is used to represent the sign, where a 1 means negative and 0 means positive, as shown in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1fig6">Figure 1-6</a>. The rest of the bits represent the value, using two’s complement notation.</p>
<p class="images"><a id="ch1fig6"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0052-01.jpg" alt="images" width="1726" height="687"></p>
<p class="figcap"><span class="figs"><strong>FIGURE 1-6</strong></span>&nbsp;&nbsp;&nbsp;The sign bit for a byte</p>
<p class="tabcap"><a id="page_53"></a><span class="figs"><strong>TABLE 1-3</strong></span>&nbsp;&nbsp;&nbsp;Ranges of Numeric Primitives</p>
<p class="image-t"><a id="ch1tab3"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/t0053-01.jpg" alt="images" width="991" height="256"></p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1tab3">Table 1-3</a> shows the primitive types with their sizes and ranges. <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1fig6">Figure 1-6</a> shows that with a byte, for example, there are 256 possible numbers (or 2<sup>8</sup>). Half of these are negative, and half – 1 are positive. The positive range is one less than the negative range because the number 0 is stored as a positive binary number. We use the formula –2<sup>(bits–1)</sup> to calculate the negative range, and we use 2<sup>(bits–1)</sup> – 1 for the positive range. Again, if you know the first two columns of this table, you’ll be in good shape for the exam.</p>
<p class="indent">The range for floating-point numbers is complicated to determine, but luckily you don’t need to know these for the exam (although you are expected to know that a double holds 64 bits and a float 32).</p>
<p class="indent">There is not a range of <code>boolean</code> values; a <code>boolean</code> can be only <code>true</code> or <code>false</code>. If someone asks you for the bit depth of a <code>boolean</code>, look them straight in the eye and say, “That’s virtual-machine dependent.” They’ll be impressed.</p>
<p class="indent">The <code>char</code> type (a character) contains a single, 16-bit Unicode character. Although the extended ASCII set known as ISO Latin<code>-</code>1 needs only 8 bits (256 different characters), a larger range is needed to represent characters found in languages other than English. Unicode characters are actually represented by unsigned 16-bit integers, which means 2<sup>16</sup> possible values, ranging from 0 to 65535 (2<sup>16</sup> – 1). You’ll learn in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html">Chapter 3</a> that because a <code>char</code> is really an integer type, it can be assigned to any number type large enough to hold 65535 (which means anything larger than a <code>short</code>; although both <code>chars</code> and <code>shorts</code> are 16-bit types, remember that a <code>short</code> uses 1 bit to represent the sign, so fewer positive numbers are acceptable in a short).</p>
<h4 class="h4a">Declaring Reference Variables</h4>
<p class="noindent">Reference variables can be declared as static variables, instance variables, method parameters, or local variables. You can declare one or more reference variables, of the same type, in a single line. In <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html">Chapter 3</a> we will discuss the various ways in <a id="page_54"></a>which they can be initialized, but for now we’ll leave you with a few examples of reference variable declarations:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0054-01.jpg" alt="images" width="588" height="53"></p>
<h4 class="h4a">Instance Variables</h4>
<p class="noindent">Instance variables are defined inside the class, but outside of any method, and are initialized only when the class is instantiated. Instance variables are the fields that belong to each unique object. For example, the following code defines fields (instance variables) for the name, title, and manager for employee objects:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0054-02.jpg" alt="images" width="599" height="155"></p>
<p class="indent">The preceding <code>Employee</code> class says that each employee instance will know its own name, title, and manager. In other words, each instance can have its own unique values for those three fields. For the exam, you need to know that instance variables</p>
<p class="bulletxt"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Can use any of the four access <em>levels</em> (which means they can be marked with any of the three access <em>modifiers</em>)</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Can be marked <code>final</code></p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Can be marked <code>transient</code></p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Cannot be marked <code>abstract</code></p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Cannot be marked <code>synchronized</code></p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Cannot be marked <code>strictfp</code></p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Cannot be marked <code>native</code></p>
<p class="bulletxb"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Cannot be marked <code>static</code> because then they’d become class variables</p>
<p class="indent">We’ve already covered the effects of applying access control to instance variables (it works the same way as it does for member methods). A little later in this chapter we’ll look at what it means to apply the <code>final</code> or <code>transient</code> modifier to an instance <a id="page_55"></a>variable. First, though, we’ll take a quick look at the difference between instance and local variables. <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1fig7">Figure 1-7</a> compares the way in which modifiers can be applied to methods versus variables.</p>
<p class="images"><a id="ch1fig7"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0055-01.jpg" alt="images" width="851" height="687"></p>
<p class="figcap"><span class="figs"><strong>FIGURE 1-7</strong></span>&nbsp;&nbsp;&nbsp;Comparison of modifiers on variables vs. methods</p>
<h4 class="h4a">Local (Automatic/Stack/Method) Variables</h4>
<p class="noindent">A local variable is a variable declared within a method. That means the variable is not just initialized within the method, but also declared within the method. Just as the local variable starts its life inside the method, it’s also destroyed when the method has completed. Local variables are always on the stack, not the heap. (We’ll talk more about the stack and the heap in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html">Chapter 3</a>.) Although the value of the variable might be passed into, say, another method that then stores the value in an instance variable, the variable itself lives only within the scope of the method.</p>
<p class="indent">Just don’t forget that while the local variable is on the stack, if the variable is an object reference, the object itself will still be created on the heap. There is no such thing as a stack object, only a stack variable. You’ll often hear programmers use the phrase “local object,” but what they really mean is, “locally declared reference variable.” So if you hear a programmer use that expression, you’ll know that he’s just too lazy to phrase it in a technically precise way. You can tell him we said that—unless he knows where we live.</p>
<p class="indent">Local variable declarations can’t use most of the modifiers that can be applied to instance variables, such as <code>public</code> (or the other access modifiers), <code>transient</code>, <code>volatile</code>, <code>abstract</code>, or <code>static</code>, but as we saw earlier, local variables can be marked <code>final</code>. <a id="page_56"></a>And as you’ll learn in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html">Chapter 3</a> (but here’s a preview), before a local variable can be <em>used</em>, it must be <em>initialized</em> with a value. For instance:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0056-01.jpg" alt="images" width="216" height="95"></p>
<p class="indent">Typically, you’ll initialize a local variable in the same line in which you declare it, although you might still need to reassign it later in the method. The key is to remember that a local variable must be initialized before you try to use it. The compiler will reject any code that tries to use a local variable that hasn’t been assigned a value because—unlike instance variables—local variables don’t get default values.</p>
<p class="indent">A local variable can’t be referenced in any code outside the method in which it’s declared. In the preceding code example, it would be impossible to refer to the variable <code>count</code> anywhere else in the class except within the scope of the method <code>logIn()</code>. Again, that’s not to say that the value of <code>count</code> can’t be passed out of the method to take on a new life. But the variable holding that value, <code>count</code>, can’t be accessed once the method is complete, as the following illegal code demonstrates:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0056-02.jpg" alt="images" width="571" height="175"></p>
<p class="indent">It is possible to declare a local variable with the same name as an instance variable. It’s known as <em>shadowing</em>, as the following code demonstrates:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0056-03.jpg" alt="images" width="647" height="214"></p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0057-01.jpg" alt="images" width="436" height="146"></p>
<p class="indent"><a id="page_57"></a>Why on Earth (or the planet of your choice) would you want to do that? Normally, you won’t. But one of the more common reasons is to name a parameter with the same name as the instance variable to which the parameter will be assigned.</p>
<p class="indent">The following (wrong) code is trying to set an instance variable’s value using a parameter:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0057-02.jpg" alt="images" width="551" height="115"></p>
<p class="indent">So you’ve decided that—for overall readability—you want to give the parameter the same name as the instance variable its value is destined for, but how do you resolve the naming collision? Use the keyword <code>this</code>. The keyword <code>this</code> always, always, always refers to the object currently running. The following code shows this in action:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0057-03.jpg" alt="images" width="609" height="155"></p>
<h4 class="h4a">Array Declarations</h4>
<p class="noindent">In Java, arrays are objects that store multiple variables of the same type or variables that are all subclasses of the same type. Arrays can hold either primitives or object references, but an array itself will always be an object on the heap, even if the array is declared to hold primitive elements. In other words, there is no such thing as a primitive array, but you can make an array of primitives.</p>
<p class="indent"><a id="page_58"></a>For the exam, you need to know three things:</p>
<p class="bulletxt"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;How to make an array reference variable (declare)</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;How to make an array object (construct)</p>
<p class="bulletxb"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;How to populate the array with elements (initialize)</p>
<p class="indent">For this objective, you only need to know how to declare an array; we’ll cover constructing and initializing arrays in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html">Chapter 5</a>.</p>
<p class="icon"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/icon.jpg" alt="images" width="50" height="35"></p>
<p class="icon"><strong><em>Arrays are efficient, but many times you’ll want to use one of the Collection types from java.util (including <code><strong><em>HashMap</em></strong>, <strong><em>ArrayList</em></strong>, and <strong><em>TreeSet</em></strong></code>). Collection classes offer more flexible ways to access an object (for insertion, deletion, reading, and so on) and, unlike arrays, can expand or contract dynamically as you add or remove elements. There are Collection types for a wide range of needs. Do you need a fast sort? A group of objects with no duplicates? A way to access a name-value pair? Java provides a wide variety of Collection types to address these situations, but the only Collection type on the exam is <code><strong><em>ArrayList</em></strong></code>, and <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html">Chapter 5</a> discusses <code><strong><em>ArrayList</em></strong></code> in more detail.</em></strong></p>
<p class="indent">Arrays are declared by stating the type of elements the array will hold (an object or a primitive), followed by square brackets to either side of the identifier.</p>
<p class="noindent"><strong>Declaring an Array of Primitives:</strong></p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0058-01.jpg" alt="images" width="608" height="53"></p>
<p class="noindent"><strong>Declaring an Array of Object References:</strong></p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0058-02.jpg" alt="images" width="429" height="34"></p>
<p class="imagel"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/icon.jpg" alt="images" width="50" height="35"></p>
<p class="icon"><strong><em>When declaring an array reference, you should always put the array brackets immediately after the declared type, rather than after the identifier (variable name). That way, anyone reading the code can easily tell that, for example, <code><strong><em>key</em></strong></code> is a reference to an <code><strong><em>int</em></strong></code> array object, not an <code><strong><em>int</em></strong></code> primitive.</em></strong></p>
<p class="indent">We can also declare multidimensional arrays, which are, in fact, arrays of arrays. This can be done in the following manner:</p>
<p class="code1"><code>String[][][] occupantName;<br>String[] managerName [];</code></p>
<p class="noindent"><a id="page_59"></a>The first example is a three-dimensional array (an array of arrays of arrays), and the second is a two-dimensional array. Notice in the second example, we have one square bracket before the variable name and one after. This is perfectly legal to the compiler, proving once again that just because it’s legal doesn’t mean it’s right.</p>
<div class="side-exam">
<p class="imaget"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51"></p>
<p class="Text-icon-exam"><strong><em>It is never legal to include the size of the array in your declaration. Yes, we know you can do that in some other languages, which is why you might see a question or two that include code similar to the following:</em></strong></p>
<p class="codea"><code>int[5] scores;</code></p>
<p class="Text-icon-exam"><strong><em>The preceding code won’t compile. Remember, the JVM doesn’t allocate space until you actually instantiate the array object. That’s when size matters.</em></strong></p>
</div>
<p class="indent">In <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html">Chapter 6</a>, we’ll spend a lot of time discussing arrays, how to initialize and use them and how to deal with multidimensional arrays…stay tuned!</p>
<h4 class="h4a">Final Variables</h4>
<p class="noindent">Declaring a variable with the <code>final</code> keyword makes it impossible to reassign that variable once it has been initialized with an explicit value (notice we said “explicit” rather than “default”). For primitives, this means that once the variable is assigned a value, the value can’t be altered. For example, if you assign 10 to the <code>int</code> variable <code>x</code>, then <code>x</code> is going to stay 10, forever. So that’s straightforward for primitives, but what does it mean to have a <code>final</code> object reference variable? A reference variable marked <code>final</code> can never be reassigned to refer to a different object. The data within the object can be modified, but the reference variable cannot be changed. In other words, a <code>final</code> reference still allows you to modify the state of the object it refers to, but you can’t modify the reference variable to make it refer to a different object. Burn this in: there are no <code>final</code> objects, only <code>final</code> references. We’ll explain this in more detail in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html">Chapter 3</a>.</p>
<p class="indent">We’ve now covered how the <code>final</code> modifier can be applied to classes, methods, and variables. <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1fig8">Figure 1-8</a> highlights the key points and differences of the various applications of <code>final</code>.</p>
<p class="images"><a id="ch1fig8"></a><a id="page_60"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0060-01.jpg" alt="images" width="528" height="687"></p>
<p class="figcap"><span class="figs"><strong>FIGURE 1-8</strong></span>&nbsp;&nbsp;&nbsp;Effect of <code>final</code> on variables, methods, and classes</p>
<h4 class="h4a">Transient Variables</h4>
<p class="noindent">If you mark an instance variable as <code>transient</code>, you’re telling the JVM to skip (ignore) this variable when you attempt to serialize the object containing it. Serialization is one of the coolest features of Java; it lets you save (sometimes called “flatten”) an object by writing its state (in other words, the value of its instance variables) to a special type of I/O stream. With serialization, you can save an object to a file or even ship it over a wire for reinflating (deserializing) at the other end in <a id="page_61"></a>another JVM. We were happy when serialization was added to the exam as of Java 5, but we’re sad to say that as of Java 7, serialization is no longer on the exam.</p>
<h4 class="h4a">Volatile Variables</h4>
<p class="noindent">The <code>volatile</code> modifier tells the JVM that a thread accessing the variable must always reconcile its own private copy of the variable with the master copy in memory. Say what? Don’t worry about it. For the exam, all you need to know about <code>volatile</code> is that it exists.</p>
<p class="imagel"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/icon.jpg" alt="images" width="50" height="35"></p>
<p class="icon"><strong>The <em><code>volatile</code> modifier may also be applied to project managers!</em></strong></p>
<h4 class="h4a">Static Variables and Methods</h4>
<p class="noindent">Note: The discussion of <code>static</code> in this section DOES NOT include the new <code>static</code> interface method discussed earlier in this chapter. Don’t you just love how the Java 8 folks reused important Java terms?</p>
<p class="indent">The <code>static</code> modifier is used to create variables and methods that will exist independently of any instances created for the class. All <code>static</code> members exist before you ever make a new instance of a class, and there will be only one copy of a <code>static</code> member regardless of the number of instances of that class. In other words, all instances of a given class share the same value for any given <code>static</code> variable. We’ll cover <code>static</code> members in great detail in the next chapter.</p>
<p class="noindent"><strong>Things you can mark as</strong> <code><strong>static</strong></code><strong>:</strong></p>
<p class="bulletxt"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Methods</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Variables</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;A class nested within another class, but not within a method (not on the OCA 8 exam)</p>
<p class="bulletxb"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Initialization blocks</p>
<p class="noindent"><strong>Things you can’t mark as</strong> <code><strong>static</strong></code><strong>:</strong></p>
<p class="bulletxt"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Constructors (makes no sense; a constructor is used only to create instances)</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Classes (unless they are nested)</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Interfaces (unless they are nested)</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Method local inner classes (not on the OCA 8 exam)</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Inner class methods and instance variables (not on the OCA 8 exam)</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;Local variables</p>
<h3 class="h3a"><a id="page_62"></a>CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch01lev1sec7"></a>Declare and Use enums (OCA Objective 1.2)</h3>
<p class="noindentb"><em>1.2 Define the structure of a Java class.</em></p>
<p class="indent">Note: During the creation of this book, Oracle adjusted some of the objectives for the OCA exam. We’re not 100 percent sure that the topic of enums is included in the OCA exam, but we’ve decided that it’s better to be safe than sorry, so we recommend that OCA candidates study this section. In any case, you’re likely to encounter the use of enums in the Java code you read, so learning about them will pay off regardless.</p>
<h4 class="h4"><a id="ch01lev2sec17"></a>Declaring enums</h4>
<p class="noindent">Java lets you restrict a variable to having one of only a few predefined values—in other words, one value from an enumerated list. (The items in the enumerated list are called, surprisingly, <code>enum</code>s.)</p>
<p class="indent">Using <code>enum</code>s can help reduce the bugs in your code. For instance, imagine you’re creating a commercial-coffee-establishment application, and in your coffee shop application, you might want to restrict your <code>CoffeeSize</code> selections to <code>BIG</code>, <code>HUGE</code>, and <code>OVERWHELMING</code>. If you let an order for a LARGE or a GRANDE slip in, it might cause an error. <code>enum</code>s to the rescue. With the following simple declaration, you can guarantee that the compiler will stop you from assigning anything to a <code>CoffeeSize</code> except <code>BIG</code>, <code>HUGE</code>, or <code>OVERWHELMING</code>:</p>
<p class="code1"><code>enum CoffeeSize { BIG, HUGE, OVERWHELMING };</code></p>
<p class="indent">From then on, the only way to get a <code>CoffeeSize</code> will be with a statement something like this:</p>
<p class="code1"><code>CoffeeSize cs = CoffeeSize.BIG;</code></p>
<p class="indent">It’s not required that <code>enum</code> constants be in all caps, but borrowing from the Oracle code convention that constants are named in caps, it’s a good idea.</p>
<p class="indent">The basic components of an <code>enum</code> are its constants (that is, <code>BIG</code>, <code>HUGE</code>, and <code>OVERWHELMING</code>), although in a minute you’ll see that there can be a lot more to an <code>enum</code>. <code>enum</code>s can be declared as their own separate class or as a class member; however, they must not be declared within a method!</p>
<p class="indent"><a id="page_63"></a>Here’s an example declaring an <code>enum</code> <em>outside</em> a class:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0063-01.jpg" alt="images" width="649" height="214"></p>
<p class="noindent">The preceding code can be part of a single file (or, in general, enum classes can exist in their own file like <code>CoffeeSize.java</code>). But remember, in this case the file must be named <code>CoffeeTest1.java</code> because that’s the name of the <code>public</code> class in the file. The key point to remember is that an <code>enum</code> that isn’t enclosed in a class can be declared with only the <code>public</code> or default modifier, just like a non-inner class. Here’s an example of declaring an <code>enum</code> <em>inside</em> a class:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0063-02.jpg" alt="images" width="581" height="213"></p>
<p class="indent">The key points to take away from these examples are that <code>enum</code>s can be declared as their own class or enclosed in another class, and that the syntax for accessing an <code>enum</code>’s members depends on where the <code>enum</code> was declared.</p>
<p class="indent">The following is NOT legal:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0063-03.jpg" alt="images" width="610" height="174"></p>
<p class="indent"><a id="page_64"></a>To make it more confusing for you, the Java language designers made it optional to put a semicolon at the end of the <code>enum</code> declaration (when no other declarations for this <code>enum</code> follow):</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0064-01.jpg" alt="images" width="629" height="155"></p>
<p class="indent">So what gets created when you make an <code>enum</code>? The most important thing to remember is that <code>enum</code>s are not <code>String</code>s or <code>int</code>s! Each of the enumerated <code>CoffeeSize</code> values is actually an instance of <code>CoffeeSize</code>. In other words, <code>BIG</code> is of type <code>CoffeeSize</code>. Think of an <code>enum</code> as a kind of class that looks something (but not exactly) like this:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0064-02.jpg" alt="images" width="597" height="333"></p>
<p class="indent">Notice how each of the enumerated values, <code>BIG</code>, <code>HUGE</code>, and <code>OVERWHELMING</code>, is an instance of type <code>CoffeeSize</code>. They’re represented as <code>static</code> and <code>final</code>, which, in the Java world, is thought of as a constant. Also notice that each <code>enum</code> value knows its index or position—in other words, the order in which <code>enum</code> values are declared matters. You can think of the <code>CoffeeSize enum</code>s as existing in an array of type <code>CoffeeSize</code>, and as you’ll see in a later chapter, you can iterate through the values of an <code>enum</code> by invoking the <code>values()</code> method on any <code>enum</code> type. (Don’t worry about that in this chapter.)</p>
<h4 class="h4a"><a id="page_65"></a>Declaring Constructors, Methods, and Variables in an enum</h4>
<p class="noindent">Because an <code>enum</code> really is a special kind of class, you can do more than just list the enumerated constant values. You can add constructors, instance variables, methods, and something really strange known as a <em>constant specific class body</em>. To understand why you might need more in your <code>enum</code>, think about this scenario: Imagine you want to know the actual size, in ounces, that map to each of the three <code>CoffeeSize</code> constants. For example, you want to know that <code>BIG</code> is 8 ounces, <code>HUGE</code> is 10 ounces, and <code>OVERWHELMING</code> is a whopping 16 ounces.</p>
<p class="indent">You could make some kind of a lookup table using some other data structure, but that would be a poor design and hard to maintain. The simplest way is to treat your <code>enum</code> values (<code>BIG</code>, <code>HUGE</code>, and <code>OVERWHELMING</code>) as objects, each of which can have its own instance variables. Then you can assign those values at the time the <code>enum</code>s are initialized by passing a value to the <code>enum</code> constructor. This takes a little explaining, but first look at the following code:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0065-01.jpg" alt="images" width="658" height="548"></p>
<p class="noindent"><a id="page_66"></a>which produces:</p>
<p class="code1"><code>8<br>BIG 8<br>HUGE 10<br>OVERWHELMING 16</code></p>
<p class="noindent">Note: Every <code>enum</code> has a static method, <code>values()</code>, that returns an array of the <code>enum</code>’s values in the order they’re declared.</p>
<p class="indent">The key points to remember about <code>enum</code> constructors are</p>
<p class="bulletxt"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;You can NEVER invoke an <code>enum</code> constructor directly. The <code>enum</code> constructor is invoked automatically, with the arguments you define after the constant value. For example, <code>BIG(8)</code> invokes the <code>CoffeeSize</code> constructor that takes an <code>int</code>, passing the <code>int</code> literal 8 to the constructor. (Behind the scenes, of course, you can imagine that <code>BIG</code> is also passed to the constructor, but we don’t have to know—or care—about the details.)</p>
<p class="bulletxb"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10">&nbsp;&nbsp;&nbsp;You can define more than one argument to the constructor, and you can overload the <code>enum</code> constructors, just as you can overload a normal class constructor. We discuss constructors in much more detail in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html">Chapter 2</a>. To initialize a <code>CoffeeSize</code> with both the number of ounces and, say, a lid type, you’d pass two arguments to the constructor as <code>BIG(8, “A”)</code>, which means you have a constructor in <code>CoffeeSize</code> that takes both an <code>int</code> and a <code>String</code>.</p>
<p class="indent">And, finally, you can define something really strange in an <code>enum</code> that looks like an anonymous inner class. It’s known as a <em>constant specific class body</em>, and you use it when you need a particular constant to override a method defined in the <code>enum</code>.</p>
<p class="indent">Imagine this scenario: You want <code>enum</code>s to have two methods—one for ounces and one for lid code (a <code>String</code>). Now imagine that most coffee sizes use the same lid code, <code>“B”</code>, but the <code>OVERWHELMING</code> size uses type <code>“A”</code>. You can define a <code>getLidCode()</code> method in the <code>CoffeeSize enum</code> that returns <code>“B”</code>, but then you need a way to override it for <code>OVERWHELMING</code>. You don’t want to do some hard-to-maintain <code>if/then</code> code in the <code>getLidCode()</code> method, so the best approach might be to somehow have the <code>OVERWHELMING</code> constant override the <code>getLidCode()</code> method.</p>
<p class="indent">This looks strange, but you need to understand the basic declaration rules:</p>
<p class="code1"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0066-01.jpg" alt="images" width="107" height="37"></p>
<p class="code1"><a id="page_67"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0067-01.jpg" alt="images" width="683" height="492"></p>
<h3 class="h3"><a id="ch01lev1sec8"></a><span class="under">CERTIFICATION SUMMARY</span></h3>
<p class="noindent">After absorbing the material in this chapter, you should be familiar with some of the nuances of the Java language. You may also be experiencing confusion around why you ever wanted to take this exam in the first place. That’s normal at this point. If you hear yourself asking, “What was I thinking?” just lie down until it passes. We would like to tell you that it gets easier…that this was the toughest chapter and it’s all downhill from here.</p>
<p class="indent">Let’s briefly review what you’ll need to know for the exam:</p>
<p class="indent">There will be many questions dealing with keywords indirectly, so be sure you can identify which are keywords and which aren’t.</p>
<p class="indent">You need to understand the rules associated with creating legal identifiers and the rules associated with source code declarations, including the use of <code>package</code> and <code>import</code> statements.</p>
<p class="indent">You learned the basic syntax for the <code>java</code> and <code>javac</code> command-line programs.</p>
<p class="indent">You learned about when <code>main()</code> has superpowers and when it doesn’t.</p>
<p class="indent">We covered the basics of <code>import</code> and <code>import static</code> statements. It’s tempting to think that there’s more to them than saving a bit of typing, but there isn’t.</p>
<p class="indent"><a id="page_68"></a>You now have a good understanding of access control as it relates to classes, methods, and variables. You’ve looked at how access modifiers (<code>public</code>, <code>protected</code>, and <code>private</code>) define the access control of a class or member.</p>
<p class="indent">You learned that <code>abstract</code> classes can contain both <code>abstract</code> and nonabstract methods, but that if even a single method is marked <code>abstract</code>, the class must be marked <code>abstract</code>. Don’t forget that a concrete (nonabstract) subclass of an <code>abstract</code> class must provide implementations for all the <code>abstract</code> methods of the superclass, but that an <code>abstract</code> class does not have to implement the <code>abstract</code> methods from its superclass. An <code>abstract</code> subclass can “pass the buck” to the first concrete subclass.</p>
<p class="indent">We covered interface implementation. Remember that interfaces can extend another interface (even multiple interfaces), and that any class that implements an interface must implement all methods from all the interfaces in the inheritance tree of the interface the class is implementing.</p>
<p class="indent">You’ve also looked at the other modifiers, including <code>static</code>, <code>final</code>, <code>abstract</code>, <code>synchronized</code>, and so on. You’ve learned how some modifiers can never be combined in a declaration, such as mixing <code>abstract</code> with either <code>final</code> or <code>private</code>.</p>
<p class="indent">Keep in mind that there are no <code>final</code> objects in Java. A reference variable marked <code>final</code> can never be changed, but the object it refers to can be modified. You’ve seen that <code>final</code> applied to methods means a subclass can’t override them, and when applied to a class, the <code>final</code> class can’t be subclassed.</p>
<p class="indent">Methods can be declared with a var-arg parameter (which can take from zero to many arguments of the declared type), but that you can have only one var-arg per method, and it must be the method’s last parameter.</p>
<p class="indent">Make sure you’re familiar with the relative sizes of the numeric primitives. Remember that while the values of nonfinal variables can change, a reference variable’s type can never change.</p>
<p class="indent">You also learned that arrays are objects that contain many variables of the same type. Arrays can also contain other arrays.</p>
<p class="indent">Remember what you’ve learned about <code>static</code> variables and methods, especially that <code>static</code> members are per-class as opposed to per-instance. Don’t forget that a <code>static</code> method can’t directly access an instance variable from the class it’s in because it doesn’t have an explicit reference to any particular instance of the class.</p>
<p class="indent">Finally, we covered <code>enum</code>s. An <code>enum</code> is a safe and flexible way to implement constants. Because they are a special kind of class, <code>enum</code>s can be declared very simply, or they can be quite complex—including such attributes as methods, variables, constructors, and a special type of inner class called a constant specific class body.</p>
<p class="indent"><a id="page_69"></a>Before you hurl yourself at the practice test, spend some time with the following optimistically named “Two-Minute Drill.” Come back to this particular drill often as you work through this book and especially when you’re doing that last-minute cramming. Because—and here’s the advice you wished your mother had given you before you left for college—it’s not what you know, it’s when you know it.</p>
<p class="indent">For the exam, knowing what you can’t do with the Java language is just as important as knowing what you can do. Give the sample questions a try! They’re very similar to the difficulty and structure of the real exam questions and should be an eye opener for how difficult the exam can be. Don’t worry if you get a lot of them wrong. If you find a topic that you are weak in, spend more time reviewing and studying. Many programmers need two or three serious passes through a chapter (or an individual objective) before they can answer the questions confidently.</p>
<h3 class="h3"><a id="ch01lev1sec9"></a><a id="page_70"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/tic1.jpg" alt="images" width="25" height="28"> TWO-MINUTE DRILL</h3>
<p class="noindent">Remember that in this chapter, when we talk about classes, we’re referring to non-inner classes, in other words, <em>top-level</em> classes.</p>
<h4 class="h4a">Java Features and Benefits (OCA Objective 1.5)</h4>
<p class="bulletxt"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;While Java provides many benefits to programmers, for the exam you should remember that Java supports object-oriented programming in general, encapsulation, automatic memory management, a large API (library), built-in security features, multiplatform compatibility, strong typing, multithreading, and distributed computing.</p>
<h4 class="h4a">Identifiers (OCA Objective 2.1)</h4>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Identifiers can begin with a letter, an underscore, or a currency character.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;After the first character, identifiers can also include digits.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Identifiers can be of any length.</p>
<h4 class="h4a">Executable Java Files and main() (OCA Objective 1.3)</h4>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;You can compile and execute Java programs using the command-line programs <code>javac</code> and <code>java</code>, respectively. Both programs support a variety of command-line options.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;The only versions of <code>main()</code> methods with special powers are those versions with method signatures equivalent to <code>public static void main(String[] args)</code>.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>m</code><code>ain()</code> can be overloaded.</p>
<h4 class="h4a">Imports (OCA Objective 1.4)</h4>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;An <code>import</code> statement’s only job is to save keystrokes.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;You can use an asterisk (<code>*</code>) to search through the contents of a single package.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Although referred to as “static imports,” the syntax is <code>import static…</code>.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;You can import API classes and/or custom classes.</p>
<h4 class="h4a"><a id="page_71"></a>Source File Declaration Rules (OCA Objective 1.2)</h4>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;A source code file can have only one <code>public</code> class.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;If the source file contains a <code>public</code> class, the filename must match the <code>public</code> class name.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;A file can have only one <code>package</code> statement, but it can have multiple <code>imports</code>.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;The <code>package</code> statement (if any) must be the first (noncomment) line in a source file.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;The <code>import</code> statements (if any) must come after the <code>package</code> statement (if any) and before the first class declaration.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;If there is no <code>package</code> statement, <code>import</code> statements must be the first (noncomment) statements in the source file.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>p</code><code>ackage</code> and <code>import</code> statements apply to all classes in the file.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;A file can have more than one nonpublic class.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Files with no <code>public</code> classes have no naming restrictions.</p>
<h4 class="h4a">Class Access Modifiers (OCA Objective 6.4)</h4>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;There are three access modifiers: <code>public</code>, <code>protected</code>, and <code>private</code>.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;There are four access levels: <code>public</code>, <code>protected</code>, default, and <code>private</code>.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Classes can have only <code>public</code> or default access.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;A class with default access can be seen only by classes within the same package.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;A class with <code>public</code> access can be seen by all classes from all packages.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Class visibility revolves around whether code in one class can</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Create an instance of another class</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Extend (or subclass) another class</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Access methods and variables of another class</p>
<h4 class="h4a">Class Modifiers (Nonaccess) (OCA Objectives 1.2, 7.1, and 7.5)</h4>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Classes can also be modified with <code>final</code>, <code>abstract</code>, or <code>strictfp</code>.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;A class cannot be both <code>final</code> and <code>abstract</code>.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;A <code>final</code> class cannot be subclassed.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;An <code>abstract</code> class cannot be instantiated.</p>
<p class="bulletx"><a id="page_72"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;A single <code>abstract</code> method in a class means the whole class must be <code>abstract</code>.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;An <code>abstract</code> class can have both <code>abstract</code> and nonabstract methods.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;The first concrete class to extend an <code>abstract</code> class must implement all of its <code>abstract</code> methods.</p>
<h4 class="h4a">Interface Implementation (OCA Objective 7.5)</h4>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Usually, interfaces are contracts for what a class can do, but they say nothing about the way in which the class must do it.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Interfaces can be implemented by any class from any inheritance tree.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Usually, an interface is like a 100 percent <code>abstract</code> class and is implicitly abstract whether or not you type the <code>abstract</code> modifier in the declaration.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Usually interfaces have only <code>abstract</code> methods.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Interface methods are by default <code>public</code> and usually <code>abstract</code>—explicit declaration of these modifiers is optional.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Interfaces can have constants, which are always implicitly <code>public</code>, <code>static</code>, and <code>final</code>.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Interface constant declarations of <code>public</code>, <code>static</code>, and <code>final</code> are optional in any combination.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;As of Java 8, interfaces can have concrete methods declared as either <code>default</code> or <code>static</code>.</p>
<p class="noindent">Note: This section uses some concepts that we HAVE NOT yet covered. Don’t panic: once you’ve read through all of the book, this section will make sense as a reference.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;A legal nonabstract implementing class has the following properties:</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;It provides concrete implementations for the interface’s methods.</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;It must follow all legal override rules for the methods it implements.</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;It must not declare any new checked exceptions for an implementation method.</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;It must not declare any checked exceptions that are broader than the exceptions declared in the interface method.</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;It may declare runtime exceptions on any interface method implementation regardless of the interface declaration.</p>
<p class="bulletxs"><a id="page_73"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;It must maintain the exact signature (allowing for covariant returns) and return type of the methods it implements (but does not have to declare the exceptions of the interface).</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;A class implementing an interface can itself be <code>abstract</code>.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;An <code>abstract</code> implementing class does not have to implement the interface methods (but the first concrete subclass must).</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;A class can extend only one class (no multiple inheritance), but it can implement many interfaces.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Interfaces can extend one or more other interfaces.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Interfaces cannot extend a class or implement a class or interface.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;When taking the exam, verify that interface and class declarations are legal before verifying other code logic.</p>
<h4 class="h4a">Member Access Modifiers (OCA Objective 6.4)</h4>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Methods and instance (nonlocal) variables are known as “members.”</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Members can use all four access levels: <code>public</code>, <code>protected</code>, default, and <code>private</code>.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Member access comes in two forms:</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Code in one class can access a member of another class.</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;A subclass can inherit a member of its superclass.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;If a class cannot be accessed, its members cannot be accessed.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Determine class visibility before determining member visibility.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>p</code><code>ublic</code> members can be accessed by all other classes, even in other packages.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;If a superclass member is <code>public</code>, the subclass inherits it—regardless of package.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Members accessed without the dot operator (<code>.</code>) must belong to the same class.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>t</code><code>his.</code> always refers to the currently executing object.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>t</code><code>his.aMethod()</code> is the same as just invoking <code>aMethod()</code>.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>p</code><code>rivate</code> members can be accessed only by code in the same class.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>p</code><code>rivate</code> members are not visible to subclasses, so <code>private</code> members cannot be inherited.</p>
<p class="bulletx"><a id="page_74"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Default and <code>protected</code> members differ only when subclasses are involved:</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Default members can be accessed only by classes in the same package.</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>p</code><code>rotected</code> members can be accessed by other classes in the same package, plus subclasses, regardless of package.</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>p</code><code>rotected</code> = package + kids (kids meaning subclasses).</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;For subclasses outside the package, the <code>protected</code> member can be accessed only through inheritance; a subclass outside the package cannot access a <code>protected</code> member by using a reference to a superclass instance. (In other words, inheritance is the only mechanism for a subclass outside the package to access a <code>protected</code> member of its superclass.)</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;A <code>protected</code> member inherited by a subclass from another package is not accessible to any other class in the subclass package, except for the subclass’s own subclasses.</p>
<h4 class="h4a">Local Variables (OCA Objectives 2.1 and 6.4)</h4>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Local (method, automatic, or stack) variable declarations cannot have access modifiers.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>f</code><code>inal</code> is the only modifier available to local variables.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Local variables don’t get default values, so they must be initialized before use.</p>
<h4 class="h4a">Other Modifiers—Members (OCA Objectives 7.1 and 7.5)</h4>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>f</code><code>inal</code> methods cannot be overridden in a subclass.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>a</code><code>bstract</code> methods are declared with a signature, a return type, and an optional <code>throws</code> clause, but they are not implemented.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>a</code><code>bstract</code> methods end in a semicolon—no curly braces.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Three ways to spot a nonabstract method:</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;The method is not marked <code>abstract</code>.</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;The method has curly braces.</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;The method <strong>MIGHT</strong> have code between the curly braces.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;The first nonabstract (concrete) class to extend an <code>abstract</code> class must implement all of the <code>abstract</code> class’s <code>abstract</code> methods.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;The <code>synchronized</code> modifier applies only to methods and code blocks.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>s</code><code>ynchronized</code> methods can have any access control and can also be marked <code>final</code>.</p>
<p class="bulletx"><a id="page_75"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>a</code><code>bstract</code> methods must be implemented by a subclass, so they must be inheritable. For that reason</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>a</code><code>bstract</code> methods cannot be <code>private</code>.</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>a</code><code>bstract</code> methods cannot be <code>final</code>.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;The <code>native</code> modifier applies only to methods.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;The <code>strictfp</code> modifier applies only to classes and methods.</p>
<h4 class="h4a">Methods with var-args (OCA Objective 1.2)</h4>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Methods can declare a parameter that accepts from zero to many arguments, a so-called var-arg method.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;A var-arg parameter is declared with the syntax <code>type... name</code>; for instance: <code>doStuff(int... x) { }</code>.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;A var-arg method can have only one var-arg parameter.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;In methods with normal parameters and a var-arg, the var-arg must come last.</p>
<h4 class="h4a">Constructors (OCA Objectives 1.2, and 6.3)</h4>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Constructors must have the same name as the class</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Constructors can have arguments, but they cannot have a return type.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Constructors can use any access modifier (even <code>private</code>!).</p>
<h4 class="h4a">Variable Declarations (OCA Objective 2.1)</h4>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Instance variables can</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Have any access control</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Be marked <code>final</code> or <code>transient</code></p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Instance variables can’t be <code>abstract</code>, <code>synchronized</code>, <code>native</code>, or <code>strictfp</code>.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;It is legal to declare a local variable with the same name as an instance variable; this is called “shadowing.”</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>f</code><code>inal</code> variables have the following properties:</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>f</code><code>inal</code> variables cannot be reassigned once assigned a value.</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>f</code><code>inal</code> reference variables cannot refer to a different object once the object has been assigned to the <code>final</code> variable.</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>f</code><code>inal</code> variables must be initialized before the constructor completes.</p>
<p class="bulletx"><a id="page_76"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;There is no such thing as a <code>final</code> object. An object reference marked <code>final</code> does NOT mean the object itself can’t change.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;The <code>transient</code> modifier applies only to instance variables.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;The <code>volatile</code> modifier applies only to instance variables.</p>
<h4 class="h4a">Array Declarations (OCA Objectives 4.1 and 4.2)</h4>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;Arrays can hold primitives or objects, but the array itself is always an object.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;When you declare an array, the brackets can be to the left or to the right of the variable name.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;It is never legal to include the size of an array in the declaration.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;An array of objects can hold any object that passes the IS-A (or <code>instanceof</code>) test for the declared type of the array. For example, if <code>Horse</code> extends <code>Animal</code>, then a <code>Horse</code> object can go into an <code>Animal</code> array.</p>
<h4 class="h4a">Static Variables and Methods (OCA Objective 6.2)</h4>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;They are not tied to any particular instance of a class.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;No class instances are needed in order to use <code>static</code> members of the class or interface.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;There is only one copy of a <code>static</code> variable/class, and all instances share it.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>s</code><code>tatic</code> methods do not have direct access to nonstatic members.</p>
<h4 class="h4a">enums (OCA Objective 1.2)</h4>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;An <code>enum</code> specifies a list of constant values assigned to a type.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;An <code>enum</code> is NOT a <code>String</code> or an <code>int</code>; an <code>enum</code> constant’s type is the <code>enum</code> type. For example, <code>SUMMER</code> and <code>FALL</code> are of the <code>enum</code> type <code>Season</code>.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;An <code>enum</code> can be declared outside or inside a class, but NOT in a method.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;An <code>enum</code> declared outside a class must NOT be marked <code>static</code>, <code>final</code>, <code>abstract</code>, <code>protected</code>, or <code>private</code>.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>e</code><code>num</code>s can contain constructors, methods, variables, and constant-specific class bodies.</p>
<p class="bulletx"><a id="page_77"></a><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>e</code><code>num</code> constants can send arguments to the <code>enum</code> constructor, using the syntax <code>BIG(8)</code>, where the <code>int</code> literal 8 is passed to the <code>enum</code> constructor.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>e</code><code>num</code> constructors can have arguments and can be overloaded.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>e</code><code>num</code> constructors can NEVER be invoked directly in code. They are always called automatically when an <code>enum</code> is initialized.</p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;The semicolon at the end of an <code>enum</code> declaration is optional. These are legal:</p>
<p class="bulletxs"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>e</code><code>num Foo { ONE, TWO, THREE} enum Foo { ONE, TWO, THREE};</code></p>
<p class="bulletx"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11">&nbsp;&nbsp;&nbsp;<code>M</code><code>yEnum.values()</code> returns an array of <code>MyEnum</code>’s values.</p>
<h3 class="h3"><a id="ch01lev1sec10"></a><a id="page_78"></a>SELF TEST</h3>
<p class="noindent">The following questions will help you measure your understanding of the material presented in this chapter. Read all the choices carefully, as there may be more than one correct answer. Choose all correct answers for each question. Stay focused.</p>
<p class="indent">If you have a rough time with these at first, don’t beat yourself up. Be positive. Repeat nice affirmations to yourself like, “I am smart enough to understand <code>enum</code>s” and “OK, so that other guy knows <code>enum</code>s better than I do, but I bet he can’t &lt;insert something you <em>are</em> good at&gt; like me.”</p>
<p class="numst"><a id="ich1q1" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1q1"><strong>1.</strong></a>&nbsp;Which are true? (Choose all that apply.)</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;“X extends Y” is correct if and only if X is a class and Y is an interface</p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;“X extends Y” is correct if and only if X is an interface and Y is a class</p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;“X extends Y” is correct if X and Y are either both classes or both interfaces</p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;“X extends Y” is correct for all combinations of X and Y being classes and/or interfaces</p>
<p class="numst"><a id="ich1q2" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1q2"><strong>2.</strong></a>&nbsp;Given:</p>
<p class="code2a"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0078-01.jpg" alt="images" width="561" height="254"></p>
<p class="numn">Which are true? (Choose all that apply.)</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;As the code stands, the output is <code>bang</code></p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;As the code stands, the output is <code>sh-bang</code></p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;As the code stands, compilation fails</p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;If line A is uncommented, the output is <code>bang bang</code></p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;If line A is uncommented, the output is <code>sh-bang bang</code></p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;If line A is uncommented, compilation fails.</p>
<p class="numst"><a id="page_79"></a><a id="ich1q3" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1q3"><strong>3.</strong></a>&nbsp;Given that the <code>for</code> loop’s syntax is correct, and given:</p>
<p class="code2a"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0079-01.jpg" alt="images" width="504" height="173"></p>
<p class="numn">And the command line:</p>
<p class="code2a"><code>java _ - A .</code></p>
<p class="numn">What is the result?</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;<code>-A</code></p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;<code>A</code>.</p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;<code>-A</code>.</p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;<code>_A</code>.</p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;<code>_-A</code>.</p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numa">G.&nbsp;&nbsp;&nbsp;An exception is thrown at runtime</p>
<p class="numst"><a id="ich1q4" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1q4"><strong>4.</strong></a>&nbsp;Given:</p>
<p class="code2a"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0079-02.jpg" alt="images" width="577" height="215"></p>
<p class="numn">What is the result?</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;<code>woof burble</code></p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;Multiple compilation errors</p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 2</p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 3</p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 4</p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 9</p>
<p class="numst"><a id="page_80"></a><a id="ich1q5" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1q5"><strong>5.</strong></a>&nbsp;Given two files:</p>
<p class="code2a"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0080-01.jpg" alt="images" width="435" height="331"></p>
<p class="numn">What is the result? (Choose all that apply.)</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;<code>5 6 7</code></p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;<code>5</code> followed by an exception</p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;Compilation fails with an error on line 7</p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;Compilation fails with an error on line 8</p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;Compilation fails with an error on line 9</p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;Compilation fails with an error on line 10</p>
<p class="numst"><a id="ich1q6" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1q6"><strong>6.</strong></a>&nbsp;Given:</p>
<p class="code2a"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0080-02.jpg" alt="images" width="495" height="232"></p>
<p class="num">What is the result? (Choose all that apply.)</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;Compilation succeeds</p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;Compilation fails with an error on line 1</p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;Compilation fails with an error on line 3</p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;Compilation fails with an error on line 5</p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;Compilation fails with an error on line 7</p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;Compilation fails with an error on line 9</p>
<p class="numst"><a id="ich1q7" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1q7"><strong>7.</strong></a>&nbsp;Given:</p>
<p class="code2a"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0081-01.jpg" alt="images" width="435" height="155"></p>
<p class="numn">What is the result? (Choose all that apply.)</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;Compilation succeeds</p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;Compilation fails with an error on line 6</p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;Compilation fails with an error on line 7</p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;Compilation fails with an error on line 8</p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;Compilation fails with an error on line 9</p>
<p class="numst"><a id="ich1q8" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1q8"><strong>8.</strong></a>&nbsp;Given:</p>
<p class="code2a"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0081-02.jpg" alt="images" width="435" height="175"></p>
<p class="numn">What is the result? (Choose all that apply.)</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;<code>TUE</code></p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;<code>WED</code></p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;The output is unpredictable</p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 4</p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 6</p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 8</p>
<p class="numa">G.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 9</p>
<p class="numst"><a id="ich1q9" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1q9"><strong>9.</strong></a>&nbsp;Given:</p>
<p class="code2a"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0082-01.jpg" alt="images" width="483" height="175"></p>
<p class="numn">What is the result?</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;<code>13</code></p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;Compilation fails due to multiple errors</p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 6</p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 7</p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 11</p>
<p class="numst1"><a id="ich1q10" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1q10"><strong>10.</strong></a>&nbsp;Given:</p>
<p class="code2a"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0082-02.jpg" alt="images" width="551" height="254"></p>
<p class="numn">Which are true? (Choose all that apply.)</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;The class <code>Tablet</code> will NOT compile</p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;The interface <code>Gadget</code> will NOT compile</p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;The output will be <code>plug in show book</code></p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;The <code>abstract</code> class <code>Electronic</code> will NOT compile</p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;The class <code>Tablet</code> CANNOT both extend and implement</p>
<p class="numst1"><a id="page_81"></a><a id="ich1q11" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1q11"><strong>11.</strong></a>&nbsp;Given that the Integer class is in the java.lang package and given:</p>
<p class="code2a"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0083-01.jpg" alt="images" width="426" height="114"></p>
<p class="numn">Which, inserted independently at line 1, compiles? (Choose all that apply.)</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;<code>import static java.lang;</code></p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;<code>import static java.lang.Integer;</code></p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;<code>import static java.lang.Integer.*;</code></p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;<code>static import java.lang.Integer.*;</code></p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;<code>import static java.lang.Integer.MAX_VALUE;</code></p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;None of the above statements are valid import syntax</p>
<p class="numst1"><a id="ich1q12" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1q12"><strong>12.</strong></a>&nbsp;Given:</p>
<p class="code2a"><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0083-02.jpg" alt="images" width="144" height="37"></p>
<p class="numn">Which lines of code—inserted independently at <code>insert code here</code>—will compile? (Choose all that apply.)</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;<code>public static m1() {;}</code></p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;<code>default void m2() {;}</code></p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;<code>abstract int m3();</code></p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;<code>final short m4() {return 5;}</code></p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;<code>default long m5();</code></p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;<code>static void m6() {;}</code></p>
<p class="numst1"><a id="ich1q13" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ch1q13"><strong>13.</strong></a>&nbsp;Which are true? (Choose all that apply.)</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;Java is a dynamically typed programming language</p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;Java provides fine-grained control of memory through the use of pointers</p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;Java provides programmers the ability to create objects that are well encapsulated</p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;Java provides programmers the ability to send Java objects from one machine to another</p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;Java is an implementation of the ECMA standard</p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;Java’s encapsulation capabilities provide its primary security mechanism</p>
<h3 class="h3"><a id="ch01lev1sec11"></a><a id="page_82"></a>SELF TEST ANSWERS</h3>
<p class="hanga"><a id="ch1q1" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ich1q1"><strong>1.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12">&nbsp;<strong>C</strong> is correct.<br><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12"> <strong>A</strong> is incorrect because classes implement interfaces, they don’t extend them. <strong>B</strong> is incorrect because interfaces only “inherit from” other interfaces. <strong>D</strong> is incorrect based on the preceding rules. (OCA Objective 7.5)</p>
<p class="hanga"><a id="ch1q2" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ich1q2"><strong>2.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12">&nbsp;<strong>B</strong> and <strong>F</strong> are correct. Since <code>Rocket.blastOff()</code> is <code>private</code>, it can’t be overridden, and it is invisible to class <code>Shuttle</code>.<br><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12"> <strong>A, C, D,</strong> and <strong>E</strong> are incorrect based on the above. (OCA Objective 6.4)</p>
<p class="hanga"><a id="ch1q3" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ich1q3"><strong>3.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12">&nbsp;<strong>B</strong> is correct. This question is using valid (but inappropriate and weird) identifiers, static imports, <code>main()</code>, and pre-incrementing logic. (Note: You might get a compiler warning when compiling this code.)<br><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12"> <strong>A, C, D, E, F,</strong> and <strong>G</strong> are incorrect based on the above. (OCA Objective 1.2)</p>
<p class="hanga"><a id="ch1q4" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ich1q4"><strong>4.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12">&nbsp;<strong>A</strong> is correct; <code>enum</code>s can have constructors and variables.<br><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12"> <strong>B, C, D, E,</strong> and <strong>F</strong> are incorrect; these lines all use correct syntax. (OCA Objective 1.2)</p>
<p class="hanga"><a id="ch1q5" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ich1q5"><strong>5.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12">&nbsp;<strong>D</strong> and <strong>E</strong> are correct. Variable <code>a</code> has default access, so it cannot be accessed from outside the package. Variable <code>b</code> has protected access in <code>pkgA</code>.<br><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12"> <strong>A, B, C,</strong> and <strong>F</strong> are incorrect based on the above information. (OCA Objectives 1.4 and 6.5)</p>
<p class="hanga"><a id="ch1q6" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ich1q6"><strong>6.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12">&nbsp;<strong>A</strong> is correct; all of these are legal declarations.<br><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12"> <strong>B, C, D, E,</strong> and <strong>F</strong> are incorrect based on the above information. (OCA Objective 7.5)</p>
<p class="hanga"><a id="ch1q7" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ich1q7"><strong>7.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12">&nbsp;<strong>C</strong> and <strong>D</strong> are correct. Variable names cannot begin with a #, and an array declaration can’t include a size without an instantiation. The rest of the code is valid.<br><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12"> <strong>A, B,</strong> and <strong>E</strong> are incorrect based on the above. (OCA Objective 2.1)</p>
<p class="hanga"><a id="ch1q8" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ich1q8"><strong>8.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12">&nbsp;<strong>B</strong> is correct. Every <code>enum</code> comes with a <code>static values()</code> method that returns an array of the <code>enum</code>’s values in the order in which they are declared in the <code>enum</code>.<br><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12"> <strong>A, C, D, E, F,</strong> and <strong>G</strong> are incorrect based on the above information. (OCP Objective 1.2)</p>
<p class="hanga"><a id="ch1q9" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ich1q9"><strong>9.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12">&nbsp;<strong>D</strong> is correct. The <code>countGold()</code> method cannot be invoked from a static context.<br><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12"> <strong>A, B, C,</strong> and <strong>E</strong> are incorrect based on the above information. (OCA Objective 6.2)</p>
<p class="hanga1"><a id="ch1q10" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ich1q10"><strong>10.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12">&nbsp;<strong>A</strong> is correct. By default, an interface’s methods are <code>public</code> so the <code>Tablet.doStuff</code> method must be public, too. The rest of the code is valid.<br><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12"> <strong>B, C, D,</strong> and <strong>E</strong> are incorrect based on the above. (OCA Objective 7.5)</p>
<p class="hanga1"><a id="ch1q11" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ich1q11"><strong>11.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12">&nbsp;<strong>C</strong> and <strong>E</strong> are correct syntax for static imports. Line 4 isn’t making use of <code>static imports</code>, so the code will also compile with none of the imports.<br><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12"> <strong>A, B, D,</strong> and <strong>F</strong> are incorrect based on the above. (OCA Objective 1.4)</p>
<p class="hanga1"><a id="page_83"></a><a id="ch1q12" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ich1q12"><strong>12.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12">&nbsp;<strong>B, C,</strong> and <strong>F</strong> are correct. As of Java 8, interfaces can have <code>default</code> and <code>static</code> methods.<br><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12"> <strong>A, D,</strong> and <strong>E</strong> are incorrect. <strong>A</strong> has no return type; <strong>D</strong> cannot have a method body; and <strong>E</strong> needs a method body. (OCA Objective 7.5)</p>
<p class="hanga1"><a id="ch1q13" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#ich1q13"><strong>13.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12">&nbsp;<strong>C</strong> and <strong>D</strong> are correct.<br><img src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12"> <strong>A</strong> is incorrect because Java is a statically typed language. <strong>B</strong> is incorrect because it does not provide pointers. <strong>E</strong> is incorrect because JavaScript is an implementation of the ECMA standard, not Java. <strong>F</strong> is incorrect because the use of bytecode and the JVM provide Java’s primary security mechanisms.<a id="page_84"></a></p>
</div>



  <div class="t-sbo-prev sbo-prev sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/intro.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">Introduction</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">2&nbsp;Object Orientation</div>
        </a>
    
  
  </div>


        
    </section>
  </div>
<section class="sbo-saved-archives"></section>



          
          
  




    
    
      <div id="js-subscribe-nag" class="subscribe-nag clearfix trial-panel t-subscribe-nag">
        
        
          
          

          
            <p>You have 1 day left in your trial, Davejay21. Subscribe today. <a href="https://www.safaribooksonline.com/subscribe/" class="ga-active-trial-subscribe-nag">See pricing options.</a></p>
          
        
        

      </div>

    
    



        
      </div>
      




  <footer class="pagefoot t-pagefoot">
    <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html#" class="icon-up"><div class="visuallyhidden">Back to top</div></a>
    <ul class="js-footer-nav">
      
        <li><a class="t-recommendations-footer" href="https://www.safaribooksonline.com/r/">Recommended</a></li>
      
      <li>
      
      <a class="t-queue-footer" href="https://www.safaribooksonline.com/s/">Queue</a>
      
      </li>
      
        <li><a class="t-recent-footer" href="https://www.safaribooksonline.com/history/">History</a></li>
        <li><a class="t-topics-footer" href="https://www.safaribooksonline.com/topics?q=*&amp;limit=21">Topics</a></li>
      
      
        <li><a class="t-tutorials-footer" href="https://www.safaribooksonline.com/tutorials/">Tutorials</a></li>
      
      <li><a class="t-settings-footer js-settings" href="https://www.safaribooksonline.com/u/">Settings</a></li>
      <li class="full-support"><a href="https://www.safaribooksonline.com/public/support">Support</a></li>
      <li><a href="https://www.safaribooksonline.com/apps/">Get the App</a></li>
      <li><a href="https://www.safaribooksonline.com/accounts/logout/">Sign Out</a></li>
    </ul>
    <span class="copyright">© 2017 <a href="https://www.safaribooksonline.com/" target="_blank">Safari</a>.</span>
    <a href="https://www.safaribooksonline.com/terms/">Terms of Service</a> /
    <a href="https://www.safaribooksonline.com/privacy/">Privacy Policy</a>
  </footer>

<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"transactionName":"YgdaZ0NSW0cEB0RdWltNfkZfUEFdCgofXFBHDVYdR1pQQxZeRl1QQj1aWkU=","errorBeacon":"bam.nr-data.net","beacon":"bam.nr-data.net","queueTime":0,"applicationTime":861,"agent":"","applicationID":"3275661","licenseKey":"510f1a6865"}</script>


    

    <script src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource" charset="utf-8"></script><script type="text/javascript" id="">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","https://connect.facebook.net/en_US/fbevents.js");fbq("init","1732687426968531");fbq("track","PageView");</script>
<noscript>&lt;img height="1" width="1" style="display:none" src="https://www.facebook.com/tr?id=1732687426968531&amp;amp;ev=PageView&amp;amp;noscript=1"&gt;</noscript><div style="width:0px; height:0px; display:none; visibility:hidden;" id="batBeacon0.9542054637219675"><img style="width:0px; height:0px; display:none; visibility:hidden;" id="batBeacon0.4946317227166148" width="0" height="0" alt="" src="./1 Declarations and Access Control - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/0"></div></body></html>