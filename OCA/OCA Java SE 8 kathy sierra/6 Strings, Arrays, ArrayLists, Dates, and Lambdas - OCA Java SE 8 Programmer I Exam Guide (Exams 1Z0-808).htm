<!DOCTYPE html>
<!-- saved from url=(0082)https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html -->
<html class=" js flexbox flexboxlegacy no-touch websqldatabase indexeddb history csscolumns csstransforms localstorage sessionstorage applicationcache svg inlinesvg zoom" lang="en" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#" itemscope="" itemtype="http://schema.org/Book http://schema.org/ItemPage" "="" data-login-url="/accounts/login/" data-offline-url="/" data-url="/library/view/oca-java-se/9781260011388/cover.html" data-csrf-cookie="csrfsafari" data-highlight-privacy="" data-user-id="2360587" data-user-uuid="bece7dd7-9327-4cc1-a1c8-17e84b9a1059" data-username="haridave" data-account-type="Trial" data-activated-trial-date="12/18/2017" data-archive="9781260011388" data-publishers="McGraw-Hill" data-htmlfile-name="cover.html" data-epub-title="OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)" data-debug="0" data-testing="0" style=""><!--<![endif]--><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><meta name="author" content="Safari Books Online"><meta name="format-detection" content="telephone=no"><meta http-equiv="cleartype" content="on"><meta name="HandheldFriendly" content="True"><meta name="MobileOptimized" content="320"><meta name="apple-itunes-app" content="app-id=881697395, app-argument=safaridetail://9781260011388"><meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0, maximum-scale=1.0"><meta property="twitter:account_id" content="4503599627559754"><script type="text/javascript" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/510f1a6865"></script><script src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/nr-spa-1071.min.js"></script><script src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/1732687426968531" async=""></script><script async="" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/fbevents.js"></script><script type="text/javascript" async="" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/bat.js"></script><script type="text/javascript" async="" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/conversion_async.js"></script><script type="text/javascript" async="" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/insight.min.js"></script><script type="text/javascript" async="" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/conversion_async.js"></script><script type="text/javascript" async="" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/linkid.js"></script><script async="" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/gtm.js"></script><script async="" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/analytics.js"></script><script type="text/javascript">(window.NREUM||(NREUM={})).loader_config={xpid:"VQQDUVVVGwACU1RUAQA="};window.NREUM||(NREUM={}),__nr_require=function(t,e,n){function r(n){if(!e[n]){var o=e[n]={exports:{}};t[n][0].call(o.exports,function(e){var o=t[n][1][e];return r(o||e)},o,o.exports)}return e[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(t,e,n){function r(t){try{c.console&&console.log(t)}catch(e){}}var o,i=t("ee"),a=t(20),c={};try{o=localStorage.getItem("__nr_flags").split(","),console&&"function"==typeof console.log&&(c.console=!0,o.indexOf("dev")!==-1&&(c.dev=!0),o.indexOf("nr_dev")!==-1&&(c.nrDev=!0))}catch(s){}c.nrDev&&i.on("internal-error",function(t){r(t.stack)}),c.dev&&i.on("fn-err",function(t,e,n){r(n.stack)}),c.dev&&(r("NR AGENT IN DEVELOPMENT MODE"),r("flags: "+a(c,function(t,e){return t}).join(", ")))},{}],2:[function(t,e,n){function r(t,e,n,r,c){try{h?h-=1:o(c||new UncaughtException(t,e,n),!0)}catch(f){try{i("ierr",[f,s.now(),!0])}catch(d){}}return"function"==typeof u&&u.apply(this,a(arguments))}function UncaughtException(t,e,n){this.message=t||"Uncaught error with no additional information",this.sourceURL=e,this.line=n}function o(t,e){var n=e?null:s.now();i("err",[t,n])}var i=t("handle"),a=t(21),c=t("ee"),s=t("loader"),f=t("gos"),u=window.onerror,d=!1,p="nr@seenError",h=0;s.features.err=!0,t(1),window.onerror=r;try{throw new Error}catch(l){"stack"in l&&(t(13),t(12),"addEventListener"in window&&t(6),s.xhrWrappable&&t(14),d=!0)}c.on("fn-start",function(t,e,n){d&&(h+=1)}),c.on("fn-err",function(t,e,n){d&&!n[p]&&(f(n,p,function(){return!0}),this.thrown=!0,o(n))}),c.on("fn-end",function(){d&&!this.thrown&&h>0&&(h-=1)}),c.on("internal-error",function(t){i("ierr",[t,s.now(),!0])})},{}],3:[function(t,e,n){t("loader").features.ins=!0},{}],4:[function(t,e,n){function r(){M++,S=y.hash,this[u]=b.now()}function o(){M--,y.hash!==S&&i(0,!0);var t=b.now();this[l]=~~this[l]+t-this[u],this[d]=t}function i(t,e){E.emit("newURL",[""+y,e])}function a(t,e){t.on(e,function(){this[e]=b.now()})}var c="-start",s="-end",f="-body",u="fn"+c,d="fn"+s,p="cb"+c,h="cb"+s,l="jsTime",m="fetch",v="addEventListener",w=window,y=w.location,b=t("loader");if(w[v]&&b.xhrWrappable){var g=t(10),x=t(11),E=t(8),P=t(6),O=t(13),R=t(7),T=t(14),L=t(9),j=t("ee"),N=j.get("tracer");t(15),b.features.spa=!0;var S,M=0;j.on(u,r),j.on(p,r),j.on(d,o),j.on(h,o),j.buffer([u,d,"xhr-done","xhr-resolved"]),P.buffer([u]),O.buffer(["setTimeout"+s,"clearTimeout"+c,u]),T.buffer([u,"new-xhr","send-xhr"+c]),R.buffer([m+c,m+"-done",m+f+c,m+f+s]),E.buffer(["newURL"]),g.buffer([u]),x.buffer(["propagate",p,h,"executor-err","resolve"+c]),N.buffer([u,"no-"+u]),L.buffer(["new-jsonp","cb-start","jsonp-error","jsonp-end"]),a(T,"send-xhr"+c),a(j,"xhr-resolved"),a(j,"xhr-done"),a(R,m+c),a(R,m+"-done"),a(L,"new-jsonp"),a(L,"jsonp-end"),a(L,"cb-start"),E.on("pushState-end",i),E.on("replaceState-end",i),w[v]("hashchange",i,!0),w[v]("load",i,!0),w[v]("popstate",function(){i(0,M>1)},!0)}},{}],5:[function(t,e,n){function r(t){}if(window.performance&&window.performance.timing&&window.performance.getEntriesByType){var o=t("ee"),i=t("handle"),a=t(13),c=t(12),s="learResourceTimings",f="addEventListener",u="resourcetimingbufferfull",d="bstResource",p="resource",h="-start",l="-end",m="fn"+h,v="fn"+l,w="bstTimer",y="pushState",b=t("loader");b.features.stn=!0,t(8);var g=NREUM.o.EV;o.on(m,function(t,e){var n=t[0];n instanceof g&&(this.bstStart=b.now())}),o.on(v,function(t,e){var n=t[0];n instanceof g&&i("bst",[n,e,this.bstStart,b.now()])}),a.on(m,function(t,e,n){this.bstStart=b.now(),this.bstType=n}),a.on(v,function(t,e){i(w,[e,this.bstStart,b.now(),this.bstType])}),c.on(m,function(){this.bstStart=b.now()}),c.on(v,function(t,e){i(w,[e,this.bstStart,b.now(),"requestAnimationFrame"])}),o.on(y+h,function(t){this.time=b.now(),this.startPath=location.pathname+location.hash}),o.on(y+l,function(t){i("bstHist",[location.pathname+location.hash,this.startPath,this.time])}),f in window.performance&&(window.performance["c"+s]?window.performance[f](u,function(t){i(d,[window.performance.getEntriesByType(p)]),window.performance["c"+s]()},!1):window.performance[f]("webkit"+u,function(t){i(d,[window.performance.getEntriesByType(p)]),window.performance["webkitC"+s]()},!1)),document[f]("scroll",r,{passive:!0}),document[f]("keypress",r,!1),document[f]("click",r,!1)}},{}],6:[function(t,e,n){function r(t){for(var e=t;e&&!e.hasOwnProperty(u);)e=Object.getPrototypeOf(e);e&&o(e)}function o(t){c.inPlace(t,[u,d],"-",i)}function i(t,e){return t[1]}var a=t("ee").get("events"),c=t(23)(a,!0),s=t("gos"),f=XMLHttpRequest,u="addEventListener",d="removeEventListener";e.exports=a,"getPrototypeOf"in Object?(r(document),r(window),r(f.prototype)):f.prototype.hasOwnProperty(u)&&(o(window),o(f.prototype)),a.on(u+"-start",function(t,e){var n=t[1],r=s(n,"nr@wrapped",function(){function t(){if("function"==typeof n.handleEvent)return n.handleEvent.apply(n,arguments)}var e={object:t,"function":n}[typeof n];return e?c(e,"fn-",null,e.name||"anonymous"):n});this.wrapped=t[1]=r}),a.on(d+"-start",function(t){t[1]=this.wrapped||t[1]})},{}],7:[function(t,e,n){function r(t,e,n){var r=t[e];"function"==typeof r&&(t[e]=function(){var t=r.apply(this,arguments);return o.emit(n+"start",arguments,t),t.then(function(e){return o.emit(n+"end",[null,e],t),e},function(e){throw o.emit(n+"end",[e],t),e})})}var o=t("ee").get("fetch"),i=t(20);e.exports=o;var a=window,c="fetch-",s=c+"body-",f=["arrayBuffer","blob","json","text","formData"],u=a.Request,d=a.Response,p=a.fetch,h="prototype";u&&d&&p&&(i(f,function(t,e){r(u[h],e,s),r(d[h],e,s)}),r(a,"fetch",c),o.on(c+"end",function(t,e){var n=this;e?e.clone().arrayBuffer().then(function(t){n.rxSize=t.byteLength,o.emit(c+"done",[null,e],n)}):o.emit(c+"done",[t],n)}))},{}],8:[function(t,e,n){var r=t("ee").get("history"),o=t(23)(r);e.exports=r,o.inPlace(window.history,["pushState","replaceState"],"-")},{}],9:[function(t,e,n){function r(t){function e(){s.emit("jsonp-end",[],p),t.removeEventListener("load",e,!1),t.removeEventListener("error",n,!1)}function n(){s.emit("jsonp-error",[],p),s.emit("jsonp-end",[],p),t.removeEventListener("load",e,!1),t.removeEventListener("error",n,!1)}var r=t&&"string"==typeof t.nodeName&&"script"===t.nodeName.toLowerCase();if(r){var o="function"==typeof t.addEventListener;if(o){var a=i(t.src);if(a){var u=c(a),d="function"==typeof u.parent[u.key];if(d){var p={};f.inPlace(u.parent,[u.key],"cb-",p),t.addEventListener("load",e,!1),t.addEventListener("error",n,!1),s.emit("new-jsonp",[t.src],p)}}}}}function o(){return"addEventListener"in window}function i(t){var e=t.match(u);return e?e[1]:null}function a(t,e){var n=t.match(p),r=n[1],o=n[3];return o?a(o,e[r]):e[r]}function c(t){var e=t.match(d);return e&&e.length>=3?{key:e[2],parent:a(e[1],window)}:{key:t,parent:window}}var s=t("ee").get("jsonp"),f=t(23)(s);if(e.exports=s,o()){var u=/[?&](?:callback|cb)=([^&#]+)/,d=/(.*)\.([^.]+)/,p=/^(\w+)(\.|$)(.*)$/,h=["appendChild","insertBefore","replaceChild"];f.inPlace(HTMLElement.prototype,h,"dom-"),f.inPlace(HTMLHeadElement.prototype,h,"dom-"),f.inPlace(HTMLBodyElement.prototype,h,"dom-"),s.on("dom-start",function(t){r(t[0])})}},{}],10:[function(t,e,n){var r=t("ee").get("mutation"),o=t(23)(r),i=NREUM.o.MO;e.exports=r,i&&(window.MutationObserver=function(t){return this instanceof i?new i(o(t,"fn-")):i.apply(this,arguments)},MutationObserver.prototype=i.prototype)},{}],11:[function(t,e,n){function r(t){var e=a.context(),n=c(t,"executor-",e),r=new f(n);return a.context(r).getCtx=function(){return e},a.emit("new-promise",[r,e],e),r}function o(t,e){return e}var i=t(23),a=t("ee").get("promise"),c=i(a),s=t(20),f=NREUM.o.PR;e.exports=a,f&&(window.Promise=r,["all","race"].forEach(function(t){var e=f[t];f[t]=function(n){function r(t){return function(){a.emit("propagate",[null,!o],i),o=o||!t}}var o=!1;s(n,function(e,n){Promise.resolve(n).then(r("all"===t),r(!1))});var i=e.apply(f,arguments),c=f.resolve(i);return c}}),["resolve","reject"].forEach(function(t){var e=f[t];f[t]=function(t){var n=e.apply(f,arguments);return t!==n&&a.emit("propagate",[t,!0],n),n}}),f.prototype["catch"]=function(t){return this.then(null,t)},f.prototype=Object.create(f.prototype,{constructor:{value:r}}),s(Object.getOwnPropertyNames(f),function(t,e){try{r[e]=f[e]}catch(n){}}),a.on("executor-start",function(t){t[0]=c(t[0],"resolve-",this),t[1]=c(t[1],"resolve-",this)}),a.on("executor-err",function(t,e,n){t[1](n)}),c.inPlace(f.prototype,["then"],"then-",o),a.on("then-start",function(t,e){this.promise=e,t[0]=c(t[0],"cb-",this),t[1]=c(t[1],"cb-",this)}),a.on("then-end",function(t,e,n){this.nextPromise=n;var r=this.promise;a.emit("propagate",[r,!0],n)}),a.on("cb-end",function(t,e,n){a.emit("propagate",[n,!0],this.nextPromise)}),a.on("propagate",function(t,e,n){this.getCtx&&!e||(this.getCtx=function(){if(t instanceof Promise)var e=a.context(t);return e&&e.getCtx?e.getCtx():this})}),r.toString=function(){return""+f})},{}],12:[function(t,e,n){var r=t("ee").get("raf"),o=t(23)(r),i="equestAnimationFrame";e.exports=r,o.inPlace(window,["r"+i,"mozR"+i,"webkitR"+i,"msR"+i],"raf-"),r.on("raf-start",function(t){t[0]=o(t[0],"fn-")})},{}],13:[function(t,e,n){function r(t,e,n){t[0]=a(t[0],"fn-",null,n)}function o(t,e,n){this.method=n,this.timerDuration=isNaN(t[1])?0:+t[1],t[0]=a(t[0],"fn-",this,n)}var i=t("ee").get("timer"),a=t(23)(i),c="setTimeout",s="setInterval",f="clearTimeout",u="-start",d="-";e.exports=i,a.inPlace(window,[c,"setImmediate"],c+d),a.inPlace(window,[s],s+d),a.inPlace(window,[f,"clearImmediate"],f+d),i.on(s+u,r),i.on(c+u,o)},{}],14:[function(t,e,n){function r(t,e){d.inPlace(e,["onreadystatechange"],"fn-",c)}function o(){var t=this,e=u.context(t);t.readyState>3&&!e.resolved&&(e.resolved=!0,u.emit("xhr-resolved",[],t)),d.inPlace(t,y,"fn-",c)}function i(t){b.push(t),l&&(x?x.then(a):v?v(a):(E=-E,P.data=E))}function a(){for(var t=0;t<b.length;t++)r([],b[t]);b.length&&(b=[])}function c(t,e){return e}function s(t,e){for(var n in t)e[n]=t[n];return e}t(6);var f=t("ee"),u=f.get("xhr"),d=t(23)(u),p=NREUM.o,h=p.XHR,l=p.MO,m=p.PR,v=p.SI,w="readystatechange",y=["onload","onerror","onabort","onloadstart","onloadend","onprogress","ontimeout"],b=[];e.exports=u;var g=window.XMLHttpRequest=function(t){var e=new h(t);try{u.emit("new-xhr",[e],e),e.addEventListener(w,o,!1)}catch(n){try{u.emit("internal-error",[n])}catch(r){}}return e};if(s(h,g),g.prototype=h.prototype,d.inPlace(g.prototype,["open","send"],"-xhr-",c),u.on("send-xhr-start",function(t,e){r(t,e),i(e)}),u.on("open-xhr-start",r),l){var x=m&&m.resolve();if(!v&&!m){var E=1,P=document.createTextNode(E);new l(a).observe(P,{characterData:!0})}}else f.on("fn-end",function(t){t[0]&&t[0].type===w||a()})},{}],15:[function(t,e,n){function r(t){var e=this.params,n=this.metrics;if(!this.ended){this.ended=!0;for(var r=0;r<d;r++)t.removeEventListener(u[r],this.listener,!1);if(!e.aborted){if(n.duration=a.now()-this.startTime,4===t.readyState){e.status=t.status;var i=o(t,this.lastSize);if(i&&(n.rxSize=i),this.sameOrigin){var s=t.getResponseHeader("X-NewRelic-App-Data");s&&(e.cat=s.split(", ").pop())}}else e.status=0;n.cbTime=this.cbTime,f.emit("xhr-done",[t],t),c("xhr",[e,n,this.startTime])}}}function o(t,e){var n=t.responseType;if("json"===n&&null!==e)return e;var r="arraybuffer"===n||"blob"===n||"json"===n?t.response:t.responseText;return l(r)}function i(t,e){var n=s(e),r=t.params;r.host=n.hostname+":"+n.port,r.pathname=n.pathname,t.sameOrigin=n.sameOrigin}var a=t("loader");if(a.xhrWrappable){var c=t("handle"),s=t(16),f=t("ee"),u=["load","error","abort","timeout"],d=u.length,p=t("id"),h=t(19),l=t(18),m=window.XMLHttpRequest;a.features.xhr=!0,t(14),f.on("new-xhr",function(t){var e=this;e.totalCbs=0,e.called=0,e.cbTime=0,e.end=r,e.ended=!1,e.xhrGuids={},e.lastSize=null,h&&(h>34||h<10)||window.opera||t.addEventListener("progress",function(t){e.lastSize=t.loaded},!1)}),f.on("open-xhr-start",function(t){this.params={method:t[0]},i(this,t[1]),this.metrics={}}),f.on("open-xhr-end",function(t,e){"loader_config"in NREUM&&"xpid"in NREUM.loader_config&&this.sameOrigin&&e.setRequestHeader("X-NewRelic-ID",NREUM.loader_config.xpid)}),f.on("send-xhr-start",function(t,e){var n=this.metrics,r=t[0],o=this;if(n&&r){var i=l(r);i&&(n.txSize=i)}this.startTime=a.now(),this.listener=function(t){try{"abort"===t.type&&(o.params.aborted=!0),("load"!==t.type||o.called===o.totalCbs&&(o.onloadCalled||"function"!=typeof e.onload))&&o.end(e)}catch(n){try{f.emit("internal-error",[n])}catch(r){}}};for(var c=0;c<d;c++)e.addEventListener(u[c],this.listener,!1)}),f.on("xhr-cb-time",function(t,e,n){this.cbTime+=t,e?this.onloadCalled=!0:this.called+=1,this.called!==this.totalCbs||!this.onloadCalled&&"function"==typeof n.onload||this.end(n)}),f.on("xhr-load-added",function(t,e){var n=""+p(t)+!!e;this.xhrGuids&&!this.xhrGuids[n]&&(this.xhrGuids[n]=!0,this.totalCbs+=1)}),f.on("xhr-load-removed",function(t,e){var n=""+p(t)+!!e;this.xhrGuids&&this.xhrGuids[n]&&(delete this.xhrGuids[n],this.totalCbs-=1)}),f.on("addEventListener-end",function(t,e){e instanceof m&&"load"===t[0]&&f.emit("xhr-load-added",[t[1],t[2]],e)}),f.on("removeEventListener-end",function(t,e){e instanceof m&&"load"===t[0]&&f.emit("xhr-load-removed",[t[1],t[2]],e)}),f.on("fn-start",function(t,e,n){e instanceof m&&("onload"===n&&(this.onload=!0),("load"===(t[0]&&t[0].type)||this.onload)&&(this.xhrCbStart=a.now()))}),f.on("fn-end",function(t,e){this.xhrCbStart&&f.emit("xhr-cb-time",[a.now()-this.xhrCbStart,this.onload,e],e)})}},{}],16:[function(t,e,n){e.exports=function(t){var e=document.createElement("a"),n=window.location,r={};e.href=t,r.port=e.port;var o=e.href.split("://");!r.port&&o[1]&&(r.port=o[1].split("/")[0].split("@").pop().split(":")[1]),r.port&&"0"!==r.port||(r.port="https"===o[0]?"443":"80"),r.hostname=e.hostname||n.hostname,r.pathname=e.pathname,r.protocol=o[0],"/"!==r.pathname.charAt(0)&&(r.pathname="/"+r.pathname);var i=!e.protocol||":"===e.protocol||e.protocol===n.protocol,a=e.hostname===document.domain&&e.port===n.port;return r.sameOrigin=i&&(!e.hostname||a),r}},{}],17:[function(t,e,n){function r(){}function o(t,e,n){return function(){return i(t,[f.now()].concat(c(arguments)),e?null:this,n),e?void 0:this}}var i=t("handle"),a=t(20),c=t(21),s=t("ee").get("tracer"),f=t("loader"),u=NREUM;"undefined"==typeof window.newrelic&&(newrelic=u);var d=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit","addRelease"],p="api-",h=p+"ixn-";a(d,function(t,e){u[e]=o(p+e,!0,"api")}),u.addPageAction=o(p+"addPageAction",!0),u.setCurrentRouteName=o(p+"routeName",!0),e.exports=newrelic,u.interaction=function(){return(new r).get()};var l=r.prototype={createTracer:function(t,e){var n={},r=this,o="function"==typeof e;return i(h+"tracer",[f.now(),t,n],r),function(){if(s.emit((o?"":"no-")+"fn-start",[f.now(),r,o],n),o)try{return e.apply(this,arguments)}catch(t){throw s.emit("fn-err",[arguments,this,t],n),t}finally{s.emit("fn-end",[f.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(t,e){l[e]=o(h+e)}),newrelic.noticeError=function(t){"string"==typeof t&&(t=new Error(t)),i("err",[t,f.now()])}},{}],18:[function(t,e,n){e.exports=function(t){if("string"==typeof t&&t.length)return t.length;if("object"==typeof t){if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer&&t.byteLength)return t.byteLength;if("undefined"!=typeof Blob&&t instanceof Blob&&t.size)return t.size;if(!("undefined"!=typeof FormData&&t instanceof FormData))try{return JSON.stringify(t).length}catch(e){return}}}},{}],19:[function(t,e,n){var r=0,o=navigator.userAgent.match(/Firefox[\/\s](\d+\.\d+)/);o&&(r=+o[1]),e.exports=r},{}],20:[function(t,e,n){function r(t,e){var n=[],r="",i=0;for(r in t)o.call(t,r)&&(n[i]=e(r,t[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;e.exports=r},{}],21:[function(t,e,n){function r(t,e,n){e||(e=0),"undefined"==typeof n&&(n=t?t.length:0);for(var r=-1,o=n-e||0,i=Array(o<0?0:o);++r<o;)i[r]=t[e+r];return i}e.exports=r},{}],22:[function(t,e,n){e.exports={exists:"undefined"!=typeof window.performance&&window.performance.timing&&"undefined"!=typeof window.performance.timing.navigationStart}},{}],23:[function(t,e,n){function r(t){return!(t&&t instanceof Function&&t.apply&&!t[a])}var o=t("ee"),i=t(21),a="nr@original",c=Object.prototype.hasOwnProperty,s=!1;e.exports=function(t,e){function n(t,e,n,o){function nrWrapper(){var r,a,c,s;try{a=this,r=i(arguments),c="function"==typeof n?n(r,a):n||{}}catch(f){p([f,"",[r,a,o],c])}u(e+"start",[r,a,o],c);try{return s=t.apply(a,r)}catch(d){throw u(e+"err",[r,a,d],c),d}finally{u(e+"end",[r,a,s],c)}}return r(t)?t:(e||(e=""),nrWrapper[a]=t,d(t,nrWrapper),nrWrapper)}function f(t,e,o,i){o||(o="");var a,c,s,f="-"===o.charAt(0);for(s=0;s<e.length;s++)c=e[s],a=t[c],r(a)||(t[c]=n(a,f?c+o:o,i,c))}function u(n,r,o){if(!s||e){var i=s;s=!0;try{t.emit(n,r,o,e)}catch(a){p([a,n,r,o])}s=i}}function d(t,e){if(Object.defineProperty&&Object.keys)try{var n=Object.keys(t);return n.forEach(function(n){Object.defineProperty(e,n,{get:function(){return t[n]},set:function(e){return t[n]=e,e}})}),e}catch(r){p([r])}for(var o in t)c.call(t,o)&&(e[o]=t[o]);return e}function p(e){try{t.emit("internal-error",e)}catch(n){}}return t||(t=o),n.inPlace=f,n.flag=a,n}},{}],ee:[function(t,e,n){function r(){}function o(t){function e(t){return t&&t instanceof r?t:t?s(t,c,i):i()}function n(n,r,o,i){if(!p.aborted||i){t&&t(n,r,o);for(var a=e(o),c=l(n),s=c.length,f=0;f<s;f++)c[f].apply(a,r);var d=u[y[n]];return d&&d.push([b,n,r,a]),a}}function h(t,e){w[t]=l(t).concat(e)}function l(t){return w[t]||[]}function m(t){return d[t]=d[t]||o(n)}function v(t,e){f(t,function(t,n){e=e||"feature",y[n]=e,e in u||(u[e]=[])})}var w={},y={},b={on:h,emit:n,get:m,listeners:l,context:e,buffer:v,abort:a,aborted:!1};return b}function i(){return new r}function a(){(u.api||u.feature)&&(p.aborted=!0,u=p.backlog={})}var c="nr@context",s=t("gos"),f=t(20),u={},d={},p=e.exports=o();p.backlog=u},{}],gos:[function(t,e,n){function r(t,e,n){if(o.call(t,e))return t[e];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,e,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return t[e]=r,r}var o=Object.prototype.hasOwnProperty;e.exports=r},{}],handle:[function(t,e,n){function r(t,e,n,r){o.buffer([t],r),o.emit(t,e,n)}var o=t("ee").get("handle");e.exports=r,r.ee=o},{}],id:[function(t,e,n){function r(t){var e=typeof t;return!t||"object"!==e&&"function"!==e?-1:t===window?0:a(t,i,function(){return o++})}var o=1,i="nr@id",a=t("gos");e.exports=r},{}],loader:[function(t,e,n){function r(){if(!x++){var t=g.info=NREUM.info,e=p.getElementsByTagName("script")[0];if(setTimeout(u.abort,3e4),!(t&&t.licenseKey&&t.applicationID&&e))return u.abort();f(y,function(e,n){t[e]||(t[e]=n)}),s("mark",["onload",a()+g.offset],null,"api");var n=p.createElement("script");n.src="https://"+t.agent,e.parentNode.insertBefore(n,e)}}function o(){"complete"===p.readyState&&i()}function i(){s("mark",["domContent",a()+g.offset],null,"api")}function a(){return E.exists&&performance.now?Math.round(performance.now()):(c=Math.max((new Date).getTime(),c))-g.offset}var c=(new Date).getTime(),s=t("handle"),f=t(20),u=t("ee"),d=window,p=d.document,h="addEventListener",l="attachEvent",m=d.XMLHttpRequest,v=m&&m.prototype;NREUM.o={ST:setTimeout,SI:d.setImmediate,CT:clearTimeout,XHR:m,REQ:d.Request,EV:d.Event,PR:d.Promise,MO:d.MutationObserver};var w=""+location,y={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-spa-1071.min.js"},b=m&&v&&v[h]&&!/CriOS/.test(navigator.userAgent),g=e.exports={offset:c,now:a,origin:w,features:{},xhrWrappable:b};t(17),p[h]?(p[h]("DOMContentLoaded",i,!1),d[h]("load",r,!1)):(p[l]("onreadystatechange",o),d[l]("onload",r)),s("mark",["firstbyte",c],null,"api");var x=0,E=t(22)},{}]},{},["loader",2,15,5,3,4]);</script><link rel="apple-touch-icon" href="https://www.safaribooksonline.com/static/images/apple-touch-icon.0c29511d2d72.png"><link rel="shortcut icon" href="https://www.safaribooksonline.com/favicon.ico" type="image/x-icon"><link href="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/css" rel="stylesheet" type="text/css"><title>6&nbsp;Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)</title><link rel="stylesheet" href="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/b8d25f1a9a05.css" type="text/css"><link rel="stylesheet" type="text/css" href="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/annotator.ef38b0457d7b.css"><link rel="stylesheet" href="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/font-awesome.min.css"><style type="text/css" title="ibis-book">@page{margin:1.5em}#sbo-rt-content div{margin:0 .5em 0 .5em}#sbo-rt-content svg{height:98%;width:100%}#sbo-rt-content img{max-height:100%;max-width:100%}#sbo-rt-content a{text-decoration:none}#sbo-rt-content .dedi1{margin-top:8em;margin-bottom:.4em;text-align:center}#sbo-rt-content .dedi{margin-top:1em;margin-bottom:.4em;text-align:center}#sbo-rt-content .copyright{margin-top:1em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .copyrightt{margin-top:1.5em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .h2{font-size:1.8em;margin-top:.5em;margin-bottom:.5em;text-indent:.1em}#sbo-rt-content .h2a{font-size:1.5em;margin-top:.2em;margin-bottom:2.5em;text-indent:.1em}#sbo-rt-content .h2d{font-size:130%;color:#fff;background-color:#000;padding:.2em;margin-right:40%;margin-top:2em;margin-bottom:2em;text-indent:1em}#sbo-rt-content .code{margin-top:1em;margin-bottom:1em;margin-left:5em}#sbo-rt-content .code1{margin-top:1em;margin-bottom:1em;margin-left:1.3em}#sbo-rt-content .codea{margin-top:1em;margin-bottom:1em;margin-left:.1em}#sbo-rt-content .code2{margin-top:1em;margin-bottom:1em;margin-left:2.5em}#sbo-rt-content .code2a{margin-top:1em;margin-bottom:1em;margin-left:3.5em}#sbo-rt-content .toc-chap{margin-top:1em;margin-bottom:.5em;margin-left:1em;text-indent:.01em}#sbo-rt-content .toc{margin-top:.1em;margin-bottom:.1em;margin-left:1.8em;text-indent:.01em}#sbo-rt-content .tocs{margin-top:.6em;margin-bottom:.6em;margin-left:1.2em;text-indent:.01em}#sbo-rt-content .tocs1{margin-top:.6em;margin-bottom:.4em;margin-left:3em;text-indent:.01em}#sbo-rt-content .noindentd{font-size:1.2em;color:#fff;background-color:#000;padding:.2em;margin-right:50%;margin-top:1em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .icon{margin-top:1em;margin-bottom:1em;text-indent:.01em}#sbo-rt-content .noindent{margin-top:.1em;margin-bottom:.1em;text-indent:.01em}#sbo-rt-content .noindentl{margin-top:1em;margin-bottom:.1em;margin-left:2.5em;text-indent:.01em}#sbo-rt-content .indent{margin-top:.1em;margin-bottom:.1em;text-indent:1.2em}#sbo-rt-content .indentt{margin-top:1em;margin-bottom:.1em;text-indent:1.2em}#sbo-rt-content .indenttb{margin-top:1em;margin-bottom:1em;text-indent:1.2em}#sbo-rt-content .h3{font-size:160%;margin-top:1.2em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .h3n{font-size:160%;margin-top:.5em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .h3s{font-size:120%;margin-top:.2em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .h3a{font-size:120%;color:#fff;background-color:#000;padding:.2em;margin-right:40%;margin-top:1.2em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .h3a1{font-size:120%;color:#fff;background-color:#000;padding:.2em;margin-right:65%;margin-top:1.2em;margin-bottom:.001em;text-indent:1em}#sbo-rt-content .line{margin-top:.1em;margin-bottom:.001em;border:0;border-bottom:solid black .1em}#sbo-rt-content .h4s{font-size:120%;margin-top:.5em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .h4{font-size:140%;margin-top:1.2em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .h4a{font-size:120%;margin-top:1.2em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .noindentt{margin-top:1em;margin-bottom:.1em;text-indent:.01em}#sbo-rt-content .indentb{margin-top:.1em;margin-bottom:1.2em;text-indent:1.2em}#sbo-rt-content .imagef{margin-top:1em;margin-bottom:1em;text-align:center}#sbo-rt-content .imagel{margin-top:1em;margin-bottom:1em;text-indent:.1em}#sbo-rt-content .imagel1{margin-top:1em;margin-bottom:1em;margin-left:1em;text-indent:.1em}#sbo-rt-content .images{margin-top:1em;margin-bottom:1em;text-align:center}#sbo-rt-content .inline{text-decoration:middle}#sbo-rt-content .imaget{margin-top:.5em;margin-bottom:.5em;text-indent:.1em}#sbo-rt-content .right{margin-top:.1em;margin-bottom:.1em;text-align:right}#sbo-rt-content .figs{background-color:#000;color:#fff;padding:.2em}#sbo-rt-content .bull{margin-top:.3em;margin-bottom:.1em;margin-left:3.5em;text-indent:-1.5em}#sbo-rt-content .tick{margin-top:.5em;margin-bottom:.1em;text-indent:-2em;margin-left:4em}#sbo-rt-content .drop{font-size:4em;margin:-.2em .01em -.2em .01em;text-indent:.01em;float:left}#sbo-rt-content .tick1{margin-top:.5em;margin-bottom:.1em;text-indent:-2em;margin-left:3em}#sbo-rt-content .noindenttop{margin-top:4em;margin-bottom:.2em;text-indent:.01em}#sbo-rt-content .bulletxlb{margin-top:.4em;margin-bottom:.4em;margin-left:5.7em;text-indent:-1.4em}#sbo-rt-content .bulletxlb1{margin-top:.4em;margin-bottom:.4em;margin-left:7em;text-indent:-1.4em}#sbo-rt-content .bulletxl{margin-top:.4em;margin-bottom:.4em;margin-left:5.7em;text-indent:-5.3em}#sbo-rt-content .bulletxla{margin-top:.4em;margin-bottom:.4em;margin-left:5.7em;text-indent:-3.2em}#sbo-rt-content .bulletxls{margin-top:.4em;margin-bottom:.4em;margin-left:4em;text-indent:-1.4em}#sbo-rt-content .bulletxt{margin-top:1em;margin-bottom:.1em;margin-left:2.6em;text-indent:-1.4em}#sbo-rt-content .bulletxn{margin-top:1em;margin-bottom:.1em;margin-left:2.6em;text-indent:.01em}#sbo-rt-content .bulletx{margin-top:.4em;margin-bottom:.1em;margin-left:2.6em;text-indent:-1.4em}#sbo-rt-content .bulletxs{margin-top:.4em;margin-bottom:.1em;margin-left:4.2em;text-indent:-1.5em}#sbo-rt-content .bulletxsa{margin-top:.4em;margin-bottom:.1em;margin-left:1.6em;text-indent:-1.4em}#sbo-rt-content .bulletxb{margin-top:.3em;margin-bottom:1em;margin-left:2.6em;text-indent:-1.4em}#sbo-rt-content .sidebar{margin-top:1em;margin-bottom:-.1em;border:solid #b2b3b6 .2em;background-color:#666769;padding:.5em;text-indent:.01em}#sbo-rt-content .sidebar1{margin-top:.001em;margin-bottom:1em;border:solid #b2b3b6 .2em;background-color:#e7e7e8;padding:.5em;text-indent:.01em}#sbo-rt-content .sideh{font-size:1.4em;color:#fff;margin-top:.5em;margin-bottom:.5em;text-align:center}#sbo-rt-content .sidehl{font-size:1.2em;margin-top:.5em;margin-bottom:.5em;text-indent:.1em}#sbo-rt-content .side-exam{margin-top:1em;margin-bottom:1em;text-indent:.01em;border:solid .1em;background-color:#eeefef;padding:1em}#sbo-rt-content .Text-icon-exam1{font-weight:bold;margin-top:1em;margin-bottom:.2em;text-indent:.01em}#sbo-rt-content .Text-icon-exam{font-weight:bold;margin-top:.5em;margin-bottom:.2em;text-indent:.01em}#sbo-rt-content .Text-icon-exami{font-weight:bold;margin-top:.5em;margin-bottom:.2em;text-indent:1.2em}#sbo-rt-content .under{text-decoration:underline}#sbo-rt-content .hanga{margin-top:.1em;margin-bottom:.6em;margin-left:2.5em;text-indent:-1.5em}#sbo-rt-content .hangai{margin-top:.1em;margin-bottom:.1em;margin-left:2.5em;text-indent:1.2em}#sbo-rt-content .hangan{margin-top:.1em;margin-bottom:.1em;margin-left:2.5em;text-indent:.1em}#sbo-rt-content .hanga1{margin-top:.1em;margin-bottom:.6em;margin-left:2.5em;text-indent:-2em}#sbo-rt-content .bqt{font-size:.9em;margin-top:1em;margin-bottom:.5em;margin-left:1em;text-indent:.01em}#sbo-rt-content .bq{font-size:.9em;margin-top:.5em;margin-bottom:.5em;margin-left:1.5em;text-indent:.01em}#sbo-rt-content .bqs{font-size:.9em;margin-top:.5em;margin-bottom:.5em;margin-left:2em;text-indent:.01em}#sbo-rt-content .noindentb{margin-top:.1em;margin-bottom:1em;text-indent:.01em}#sbo-rt-content .noindentb1{margin-top:.1em;margin-bottom:2em;text-indent:.01em}#sbo-rt-content .toc-lev1{margin-top:.1em;margin-bottom:.1em;margin-left:3em;text-indent:-1.2em}#sbo-rt-content .toc-lev2{margin-top:.1em;margin-bottom:.1em;margin-left:6.5em;text-indent:-1.2em}#sbo-rt-content .toc-lev3{margin-top:.1em;margin-bottom:.1em;margin-left:1.8em;text-indent:.01em}#sbo-rt-content .toc-lev3a{margin-top:.1em;margin-bottom:.1em;margin-left:5.4em;text-indent:.01em}#sbo-rt-content .toc-index{margin-top:2em;margin-bottom:.1em;margin-left:2em;text-indent:.01em}#sbo-rt-content .numst{margin-top:1em;margin-bottom:.1em;margin-left:2.3em;text-indent:-1.4em}#sbo-rt-content .numst1{margin-top:1em;margin-bottom:.1em;margin-left:1.8em;text-indent:-1.4em}#sbo-rt-content .numsn{margin-top:1em;margin-bottom:.1em;margin-left:2.3em;text-indent:.1em}#sbo-rt-content .numsb{margin-top:.1em;margin-bottom:1em;margin-left:2.3em;text-indent:-1.3em}#sbo-rt-content .nums{margin-top:.3em;margin-bottom:.3em;margin-left:2.3em;text-indent:-1.3em}#sbo-rt-content .figcap{margin-top:.1em;margin-bottom:1.5em;text-indent:.01em}#sbo-rt-content .tabcap{margin-top:1.5em;margin-bottom:.8em;text-indent:.01em}#sbo-rt-content .ash{color:#939598}#sbo-rt-content .ash1{font-size:1.3em;color:#939598}#sbo-rt-content .fonts{font-size:1.2em}#sbo-rt-content .num{margin-top:.1em;margin-bottom:.1em;margin-left:1.6em;text-indent:-1em}#sbo-rt-content .numn{margin-top:.4em;margin-bottom:.1em;margin-left:1.7em;text-indent:.1em}#sbo-rt-content .numin{margin-top:.1em;margin-bottom:.1em;margin-left:1.6em;text-indent:1.2em}#sbo-rt-content .numa{margin-top:.1em;margin-bottom:.4em;margin-left:3.9em;text-indent:-1.7em}#sbo-rt-content .numl{margin-top:.4em;margin-bottom:.1em;margin-left:3.6em;text-indent:-1em}#sbo-rt-content .numln{margin-top:.4em;margin-bottom:.1em;margin-left:3.6em;text-indent:.1em}#sbo-rt-content .bqi{font-size:.9em;margin-top:.5em;margin-bottom:.5em;margin-left:5em;text-indent:1.2em}#sbo-rt-content .noindenttop1{margin-top:4em;margin-bottom:1em;text-indent:.01em}#sbo-rt-content .coden{margin-top:.8em;margin-bottom:.8em;margin-left:1.5em}#sbo-rt-content .numlist{margin-top:.1em;margin-bottom:.1em;margin-left:2.5em;text-indent:-1.5em}#sbo-rt-content .noindent1{margin-top:1em;margin-bottom:1em;text-indent:.01em}#sbo-rt-content .noindentn{margin-top:.1em;margin-bottom:.1em;margin-left:.1em;text-indent:.01em}#sbo-rt-content .image-t{margin-top:.2em;margin-bottom:1.5em;text-indent:.01em}#sbo-rt-content .image-f{margin-top:1em;margin-bottom:.5em;text-align:center}#sbo-rt-content .code-n{margin-top:.5em;margin-bottom:.5em;margin-left:2.3em}#sbo-rt-content .hr{margin-top:.5em;margin-bottom:1.5em;border-bottom:solid #939598 .2em}#sbo-rt-content .bqn{font-size:.9em;margin-top:.8em;margin-bottom:.8em;margin-left:1.3em;text-indent:.01em}#sbo-rt-content .code-n1{margin-top:.7em;margin-bottom:.7em;margin-left:2.8em}#sbo-rt-content .numlistk{margin-top:.1em;margin-bottom:.1em;margin-left:2.2em;text-indent:-1.6em}#sbo-rt-content .numlistk1{margin-top:.5em;margin-bottom:.1em;margin-left:1.9em;text-indent:-1.6em}#sbo-rt-content .code-1{margin-top:.5em;margin-bottom:.5em;margin-left:2.5em}#sbo-rt-content .numlist-n{margin-top:.3em;margin-bottom:.3em;margin-left:2.2em;text-indent:.01em}#sbo-rt-content .num-k{margin-top:.3em;margin-bottom:.3em;margin-left:4em;text-indent:-1.6em}#sbo-rt-content .hang-a{margin-top:.1em;margin-bottom:.5em;margin-left:2.4em;text-indent:.01em}#sbo-rt-content .h5{font-size:120%;margin-top:1.5em;margin-bottom:.3em;text-indent:.01em}#sbo-rt-content .indenta{margin-top:.3em;margin-bottom:.3em;margin-left:1.5em;text-indent:.01em}#sbo-rt-content .indent-a{margin-top:.5em;margin-bottom:.5em;margin-left:1.2em;text-indent:.01em}#sbo-rt-content .indexmain{margin-top:.1em;margin-bottom:.1em;margin-left:1em;text-indent:-1em}#sbo-rt-content .indexhead{margin-top:.7em;margin-bottom:.3em;width:20%;font-size:1.3em;margin-left:1.5em;text-indent:.5em;background-color:#6d6e71;color:#fff;padding:.2em}#sbo-rt-content .indexsub{margin-top:.1em;margin-bottom:.1em;margin-left:2.6em;text-indent:-1em}#sbo-rt-content .h2-n{font-size:1.3em;margin-top:2em;margin-bottom:2em;text-indent:2em;background-color:#231f20;color:#fff;width:30%;padding:.2em}#sbo-rt-content .image-n{margin-top:.1em;margin-bottom:.1em;text-align:center}#sbo-rt-content .imagea{margin-top:2em;margin-bottom:.5em;text-align:left}</style><script> // <![CDATA[
    var g = {
      position_cache: {
        
          "chapter": "/api/v1/book/9781260011388/chapter/cover.html",
          "book_id": "9781260011388",
          "chapter_uri": "cover.html",
          "position": 0,
          "user_uuid": "bece7dd7-9327-4cc1-a1c8-17e84b9a1059",
          "next_chapter_uri": "/library/view/oca-java-se/9781260011388/title.html"
        
      },
      title: "OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0\u002D808)",
      author_list: "Bert Bates, Kathy Sierra",
      format: "book",
      source: "application/epub+zip",
      is_system_book: true,
      is_public: false,
      loaded_from_server: true,
      allow_scripts: false,
      has_mathml: false,
      show_ios_app_teaser: false
    };
    // ]]></script><script src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/modernizr.js"></script><script>
    
      
        

        

        
          
            window.PUBLIC_ANNOTATIONS = true;
          
        

      

      
        window.MOBILE_PUBLIC_ANNOTATIONS = false;
      

    

    
      window.PRIVACY_CONTROL_OVERRIDE = false;
    

    
      window.PRIVACY_CONTROL_SWITCH = true;
    

    
      window.PUBLISHER_PAGES = true;
    

      window.SBO = {
        "constants": {
          "SITB_ENDPOINT": "https://www.safaribooksonline.com/api/v2/sitb/",
          "SEARCH_SELECT_ENDPOINT": "https://www.safaribooksonline.com/api/v2/search/select/",
          "ENABLE_ONLINE_TRAINING": true
        }
      };
  </script><link rel="canonical" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html"><meta name="description" content=" "><meta property="og:title" content="Cover Page"><meta itemprop="isPartOf" content="/library/view/oca-java-se/9781260011388/"><meta itemprop="name" content="Cover Page"><meta property="og:url" itemprop="url" content="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html"><meta property="og:site_name" content="Safari"><meta property="og:image" itemprop="thumbnailUrl" content="https://www.safaribooksonline.com/library/cover/9781260011388/"><meta property="og:description" itemprop="description" content=" "><meta itemprop="inLanguage" content="en"><meta itemprop="publisher" content="McGraw-Hill"><meta property="og:type" content="book"><meta property="og:book:isbn" itemprop="isbn" content="9781260011388"><meta property="og:book:author" itemprop="author" content="Bert Bates"><meta property="og:book:author" itemprop="author" content="Kathy Sierra"><meta property="og:book:tag" itemprop="about" content="Certification"><meta property="og:book:tag" itemprop="about" content="Java"><meta name="twitter:card" content="summary"><meta name="twitter:site" content="@safari"><style type="text/css" id="font-styles" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }"></style><style type="text/css" id="font-family" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }"></style><style type="text/css" id="column-width" data-template="#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }"></style><noscript>&lt;meta http-equiv="refresh" content="0; url=/library/no-js/" /&gt;</noscript><script type="text/javascript">
  (function(i,s,o,g,r,a,m) {
    i['GoogleAnalyticsObject']=r;
    i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();
    a=s.createElement(o),m=s.getElementsByTagName(o)[0];
    a.async=1;
    a.src=g;
    m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  var matches = document.cookie.match(/BrowserCookie\s*=\s*([a-f0-9\-]{36})/),
      user_uuid = null;

  if (matches && matches.length === 2) {
    user_uuid = matches[1];
  }


  ga('create', 'UA-39299553-7', {'userId': 'bece7dd7-9327-4cc1-a1c8-17e84b9a1059' });



  
    ga('set', 'dimension1', 'Trial');
  


ga('set', 'dimension6', user_uuid);


  ga('set', 'dimension2', 'bece7dd7-9327-4cc1-a1c8-17e84b9a1059');
  






//enable enhanced link tracking
ga('require', 'linkid', 'linkid.js');

// reading interface will track pageviews itself
if (document.location.pathname.indexOf("/library/view") !== 0) {
  ga('send', 'pageview');
}
</script><script>
    (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    '//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-5P4V6Z');
  </script><script defer="" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/vendor.4bb90b301ddb.js"></script><script defer="" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/reader.7bc20c923d74.js"></script><script src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource"></script><script src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(1)"></script><script async="" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/MathJax.js"></script><style id="annotator-dynamic-style">.annotator-adder, .annotator-outer, .annotator-notice {
  z-index: 100019;
}
.annotator-filter {
  z-index: 100009;
}</style></head>


<body class="reading sidenav  scalefonts subscribe-panel library nav-collapsed">

    
  
  <noscript> 
    &lt;iframe src="//www.googletagmanager.com/ns.html?id=GTM-5P4V6Z"
            height="0" width="0"
            style="display:none;visibility:hidden"&gt;
    &lt;/iframe&gt;
  </noscript>
  



    
      <div class="hide working" role="status">
        <div class="working-image"></div>
      </div>
      <div class="sbo-site-nav">
        





<a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#container" class="skip">Skip to content</a><header class="topbar t-topbar"><nav role="navigation" class="js-site-nav"><ul class="topnav"><li class="t-logo"><a href="https://www.safaribooksonline.com/home/" class="l0 None safari-home nav-icn js-keyboard-nav-home"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>Safari Home Icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M4 9.9L4 9.9 4 18 16 18 16 9.9 10 4 4 9.9ZM2.6 8.1L2.6 8.1 8.7 1.9 10 0.5 11.3 1.9 17.4 8.1 18 8.7 18 9.5 18 18.1 18 20 16.1 20 3.9 20 2 20 2 18.1 2 9.5 2 8.7 2.6 8.1Z"></path><rect x="10" y="12" width="3" height="7"></rect><rect transform="translate(18.121320, 10.121320) rotate(-315.000000) translate(-18.121320, -10.121320) " x="16.1" y="9.1" width="4" height="2"></rect><rect transform="translate(2.121320, 10.121320) scale(-1, 1) rotate(-315.000000) translate(-2.121320, -10.121320) " x="0.1" y="9.1" width="4" height="2"></rect></g></svg><span>Safari Home</span></a></li><li><a href="https://www.safaribooksonline.com/r/" class="t-recommendations-nav l0 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>recommendations icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M50 25C50 18.2 44.9 12.5 38.3 11.7 37.5 5.1 31.8 0 25 0 18.2 0 12.5 5.1 11.7 11.7 5.1 12.5 0 18.2 0 25 0 31.8 5.1 37.5 11.7 38.3 12.5 44.9 18.2 50 25 50 31.8 50 37.5 44.9 38.3 38.3 44.9 37.5 50 31.8 50 25ZM25 3.1C29.7 3.1 33.6 6.9 34.4 11.8 30.4 12.4 26.9 15.1 25 18.8 23.1 15.1 19.6 12.4 15.6 11.8 16.4 6.9 20.3 3.1 25 3.1ZM34.4 15.6C33.6 19.3 30.7 22.2 27.1 22.9 27.8 19.2 30.7 16.3 34.4 15.6ZM22.9 22.9C19.2 22.2 16.3 19.3 15.6 15.6 19.3 16.3 22.2 19.2 22.9 22.9ZM3.1 25C3.1 20.3 6.9 16.4 11.8 15.6 12.4 19.6 15.1 23.1 18.8 25 15.1 26.9 12.4 30.4 11.8 34.4 6.9 33.6 3.1 29.7 3.1 25ZM22.9 27.1C22.2 30.7 19.3 33.6 15.6 34.4 16.3 30.7 19.2 27.8 22.9 27.1ZM25 46.9C20.3 46.9 16.4 43.1 15.6 38.2 19.6 37.6 23.1 34.9 25 31.3 26.9 34.9 30.4 37.6 34.4 38.2 33.6 43.1 29.7 46.9 25 46.9ZM27.1 27.1C30.7 27.8 33.6 30.7 34.4 34.4 30.7 33.6 27.8 30.7 27.1 27.1ZM38.2 34.4C37.6 30.4 34.9 26.9 31.3 25 34.9 23.1 37.6 19.6 38.2 15.6 43.1 16.4 46.9 20.3 46.9 25 46.9 29.7 43.1 33.6 38.2 34.4Z"></path></g></svg><span>Recommended</span></a></li><li><a href="https://www.safaribooksonline.com/s/" class="t-queue-nav l0 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>queue icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 29.2C25.4 29.2 25.8 29.1 26.1 28.9L48.7 16.8C49.5 16.4 50 15.5 50 14.6 50 13.7 49.5 12.8 48.7 12.4L26.1 0.3C25.4-0.1 24.6-0.1 23.9 0.3L1.3 12.4C0.5 12.8 0 13.7 0 14.6 0 15.5 0.5 16.4 1.3 16.8L23.9 28.9C24.2 29.1 24.6 29.2 25 29.2ZM7.3 14.6L25 5.2 42.7 14.6 25 24 7.3 14.6ZM48.7 22.4L47.7 21.9 25 34.2 2.3 21.9 1.3 22.4C0.5 22.9 0 23.7 0 24.7 0 25.6 0.5 26.5 1.3 26.9L23.9 39.3C24.2 39.5 24.6 39.6 25 39.6 25.4 39.6 25.8 39.5 26.1 39.3L48.7 26.9C49.5 26.5 50 25.6 50 24.7 50 23.7 49.5 22.9 48.7 22.4ZM48.7 32.8L47.7 32.3 25 44.6 2.3 32.3 1.3 32.8C0.5 33.3 0 34.1 0 35.1 0 36 0.5 36.9 1.3 37.3L23.9 49.7C24.2 49.9 24.6 50 25 50 25.4 50 25.8 49.9 26.1 49.7L48.7 37.3C49.5 36.9 50 36 50 35.1 50 34.1 49.5 33.3 48.7 32.8Z"></path></g></svg><span>
                  Queue
              </span></a></li><li class="search"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#" class="t-search-nav trigger nav-icn l0" data-dropdown-selector=".searchbox"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>search icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M31.3 0C20.9 0 12.5 8.4 12.5 18.8 12.5 22.5 13.6 25.9 15.4 28.8L1.2 42.9C-0.4 44.5-0.4 47.2 1.2 48.8 2 49.6 3.1 50 4.2 50 5.2 50 6.3 49.6 7.1 48.8L21.2 34.6C24.1 36.5 27.5 37.5 31.3 37.5 41.6 37.5 50 29.1 50 18.8 50 8.4 41.6 0 31.3 0ZM31.3 31.3C24.4 31.3 18.8 25.6 18.8 18.8 18.8 11.9 24.4 6.3 31.3 6.3 38.1 6.3 43.8 11.9 43.8 18.8 43.8 25.6 38.1 31.3 31.3 31.3Z"></path></g></svg><span>Search</span></a></li><li class="usermenu dropdown"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#" class="trigger l0 nav-icn nav-dropdown"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>navigation arrow</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M0.1 12.5L9.7 3.1C9.8 3 9.9 3 10 3 10.1 3 10.2 3 10.3 3.1L19.9 12.5C20 12.5 20 12.6 20 12.8 20 12.9 20 13 19.9 13L17 15.9C16.9 16 16.8 16 16.7 16 16.5 16 16.4 16 16.4 15.9L10 9.7 3.6 15.9C3.6 16 3.5 16 3.3 16 3.2 16 3.1 16 3 15.9L0.1 13C0 12.9 0 12.8 0 12.7 0 12.7 0 12.6 0.1 12.5Z"></path></g></svg><span>Expand Nav</span></a><div class="drop-content"><ul><li><a href="https://www.safaribooksonline.com/history/" class="t-recent-nav l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>recent items icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 0C11.2 0 0 11.2 0 25 0 38.8 11.2 50 25 50 38.8 50 50 38.8 50 25 50 11.2 38.8 0 25 0ZM6.3 25C6.3 14.6 14.6 6.3 25 6.3 35.4 6.3 43.8 14.6 43.8 25 43.8 35.4 35.4 43.8 25 43.8 14.6 43.8 6.3 35.4 6.3 25ZM31.8 31.5C32.5 30.5 32.4 29.2 31.6 28.3L27.1 23.8 27.1 12.8C27.1 11.5 26.2 10.4 25 10.4 23.9 10.4 22.9 11.5 22.9 12.8L22.9 25.7 28.8 31.7C29.2 32.1 29.7 32.3 30.2 32.3 30.8 32.3 31.3 32 31.8 31.5Z"></path></g></svg><span>History</span></a></li><li><a href="https://www.safaribooksonline.com/topics" class="t-topics-link l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 55" width="20" height="20" version="1.1" fill="#4A3C31"><desc>topics icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 55L50 41.262 50 13.762 25 0 0 13.762 0 41.262 25 55ZM8.333 37.032L8.333 17.968 25 8.462 41.667 17.968 41.667 37.032 25 46.538 8.333 37.032Z"></path></g></svg><span>Topics</span></a></li><li><a href="https://www.safaribooksonline.com/tutorials/" class="l1 nav-icn t-tutorials-nav js-toggle-menu-item None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>tutorials icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M15.8 18.2C15.8 18.2 15.9 18.2 16 18.2 16.1 18.2 16.2 18.2 16.4 18.2 16.5 18.2 16.7 18.1 16.9 18 17 17.9 17.1 17.8 17.2 17.7 17.3 17.6 17.4 17.5 17.4 17.4 17.5 17.2 17.6 16.9 17.6 16.7 17.6 16.6 17.6 16.5 17.6 16.4 17.5 16.2 17.5 16.1 17.4 15.9 17.3 15.8 17.2 15.6 17 15.5 16.8 15.3 16.6 15.3 16.4 15.2 16.2 15.2 16 15.2 15.8 15.2 15.7 15.2 15.5 15.3 15.3 15.4 15.2 15.4 15.1 15.5 15 15.7 14.9 15.8 14.8 15.9 14.7 16 14.7 16.1 14.6 16.3 14.6 16.4 14.6 16.5 14.6 16.6 14.6 16.6 14.6 16.7 14.6 16.9 14.6 17 14.6 17.1 14.7 17.3 14.7 17.4 14.8 17.6 15 17.7 15.1 17.9 15.2 18 15.3 18 15.5 18.1 15.5 18.1 15.6 18.2 15.7 18.2 15.7 18.2 15.7 18.2 15.8 18.2L15.8 18.2ZM9.4 11.5C9.5 11.5 9.5 11.5 9.6 11.5 9.7 11.5 9.9 11.5 10 11.5 10.2 11.5 10.3 11.4 10.5 11.3 10.6 11.2 10.8 11.1 10.9 11 10.9 10.9 11 10.8 11.1 10.7 11.2 10.5 11.2 10.2 11.2 10 11.2 9.9 11.2 9.8 11.2 9.7 11.2 9.5 11.1 9.4 11 9.2 10.9 9.1 10.8 8.9 10.6 8.8 10.5 8.7 10.3 8.6 10 8.5 9.9 8.5 9.7 8.5 9.5 8.5 9.3 8.5 9.1 8.6 9 8.7 8.8 8.7 8.7 8.8 8.6 9 8.5 9.1 8.4 9.2 8.4 9.3 8.2 9.5 8.2 9.8 8.2 10 8.2 10.1 8.2 10.2 8.2 10.3 8.2 10.5 8.3 10.6 8.4 10.7 8.5 10.9 8.6 11.1 8.7 11.2 8.9 11.3 9 11.4 9.1 11.4 9.2 11.4 9.3 11.5 9.3 11.5 9.3 11.5 9.4 11.5 9.4 11.5L9.4 11.5ZM3 4.8C3.1 4.8 3.1 4.8 3.2 4.8 3.4 4.8 3.5 4.8 3.7 4.8 3.8 4.8 4 4.7 4.1 4.6 4.3 4.5 4.4 4.4 4.5 4.3 4.6 4.2 4.6 4.1 4.7 4 4.8 3.8 4.8 3.5 4.8 3.3 4.8 3.1 4.8 3 4.8 2.9 4.7 2.8 4.7 2.6 4.6 2.5 4.5 2.3 4.4 2.2 4.2 2.1 4 1.9 3.8 1.9 3.6 1.8 3.5 1.8 3.3 1.8 3.1 1.8 2.9 1.8 2.7 1.9 2.6 2 2.4 2.1 2.3 2.2 2.2 2.3 2.1 2.4 2 2.5 2 2.6 1.8 2.8 1.8 3 1.8 3.3 1.8 3.4 1.8 3.5 1.8 3.6 1.8 3.8 1.9 3.9 2 4 2.1 4.2 2.2 4.4 2.4 4.5 2.5 4.6 2.6 4.7 2.7 4.7 2.8 4.7 2.9 4.8 2.9 4.8 3 4.8 3 4.8 3 4.8L3 4.8ZM13.1 15.2C13.2 15.1 13.2 15.1 13.2 15.1 13.3 14.9 13.4 14.7 13.6 14.5 13.8 14.2 14.1 14 14.4 13.8 14.7 13.6 15.1 13.5 15.5 13.4 15.9 13.4 16.3 13.4 16.7 13.5 17.2 13.5 17.6 13.7 17.9 13.9 18.2 14.1 18.5 14.4 18.7 14.7 18.9 15 19.1 15.3 19.2 15.6 19.3 15.9 19.4 16.1 19.4 16.4 19.4 17 19.3 17.5 19.1 18.1 19 18.3 18.9 18.5 18.7 18.7 18.5 19 18.3 19.2 18 19.4 17.7 19.6 17.3 19.8 16.9 19.9 16.6 20 16.3 20 16 20 15.8 20 15.6 20 15.4 19.9 15.4 19.9 15.4 19.9 15.4 19.9 15.2 19.9 15 19.8 14.9 19.8 14.8 19.7 14.7 19.7 14.6 19.7 14.4 19.6 14.3 19.5 14.1 19.3 13.7 19.1 13.4 18.7 13.2 18.4 13.1 18.1 12.9 17.8 12.9 17.5 12.8 17.3 12.8 17.1 12.8 16.9L3.5 14.9C3.3 14.9 3.1 14.8 3 14.8 2.7 14.7 2.4 14.5 2.1 14.3 1.7 14 1.4 13.7 1.2 13.3 1 13 0.9 12.6 0.8 12.3 0.7 12 0.7 11.7 0.7 11.4 0.7 11 0.8 10.5 1 10.1 1.1 9.8 1.3 9.5 1.6 9.2 1.8 8.9 2.1 8.7 2.4 8.5 2.8 8.3 3.2 8.1 3.6 8.1 3.9 8 4.2 8 4.5 8 4.6 8 4.8 8 4.9 8.1L6.8 8.5C6.8 8.4 6.8 8.4 6.8 8.4 6.9 8.2 7.1 8 7.2 7.8 7.5 7.5 7.7 7.3 8 7.1 8.4 6.9 8.7 6.8 9.1 6.7 9.5 6.7 10 6.7 10.4 6.8 10.8 6.8 11.2 7 11.5 7.2 11.8 7.5 12.1 7.7 12.4 8 12.6 8.3 12.7 8.6 12.8 8.9 12.9 9.2 13 9.4 13 9.7 13 9.7 13 9.8 13 9.8 13.6 9.9 14.2 10.1 14.9 10.2 15 10.2 15 10.2 15.1 10.2 15.3 10.2 15.4 10.2 15.6 10.2 15.8 10.1 16 10 16.2 9.9 16.4 9.8 16.5 9.6 16.6 9.5 16.8 9.2 16.9 8.8 16.9 8.5 16.9 8.3 16.9 8.2 16.8 8 16.8 7.8 16.7 7.7 16.6 7.5 16.5 7.3 16.3 7.2 16.2 7.1 16 7 15.9 6.9 15.8 6.9 15.7 6.9 15.6 6.8 15.5 6.8L6.2 4.8C6.2 5 6 5.2 5.9 5.3 5.7 5.6 5.5 5.8 5.3 6 4.9 6.2 4.5 6.4 4.1 6.5 3.8 6.6 3.5 6.6 3.2 6.6 3 6.6 2.8 6.6 2.7 6.6 2.6 6.6 2.6 6.5 2.6 6.5 2.5 6.5 2.3 6.5 2.1 6.4 1.8 6.3 1.6 6.1 1.3 6 1 5.7 0.7 5.4 0.5 5 0.3 4.7 0.2 4.4 0.1 4.1 0 3.8 0 3.6 0 3.3 0 2.8 0.1 2.2 0.4 1.7 0.5 1.5 0.7 1.3 0.8 1.1 1.1 0.8 1.3 0.6 1.6 0.5 2 0.3 2.3 0.1 2.7 0.1 3.1 0 3.6 0 4 0.1 4.4 0.2 4.8 0.3 5.1 0.5 5.5 0.8 5.7 1 6 1.3 6.2 1.6 6.3 1.9 6.4 2.3 6.5 2.5 6.6 2.7 6.6 3 6.6 3 6.6 3.1 6.6 3.1 9.7 3.8 12.8 4.4 15.9 5.1 16.1 5.1 16.2 5.2 16.4 5.2 16.7 5.3 16.9 5.5 17.2 5.6 17.5 5.9 17.8 6.2 18.1 6.5 18.3 6.8 18.4 7.2 18.6 7.5 18.6 7.9 18.7 8.2 18.7 8.6 18.7 9 18.6 9.4 18.4 9.8 18.3 10.1 18.2 10.3 18 10.6 17.8 10.9 17.5 11.1 17.3 11.3 16.9 11.6 16.5 11.8 16 11.9 15.7 12 15.3 12 15 12 14.8 12 14.7 12 14.5 11.9 13.9 11.8 13.3 11.7 12.6 11.5 12.5 11.7 12.4 11.9 12.3 12 12.1 12.3 11.9 12.5 11.7 12.7 11.3 12.9 10.9 13.1 10.5 13.2 10.2 13.3 9.9 13.3 9.6 13.3 9.4 13.3 9.2 13.3 9 13.2 9 13.2 9 13.2 9 13.2 8.8 13.2 8.7 13.2 8.5 13.1 8.2 13 8 12.8 7.7 12.6 7.4 12.4 7.1 12 6.8 11.7 6.7 11.4 6.6 11.1 6.5 10.8 6.4 10.6 6.4 10.4 6.4 10.2 5.8 10.1 5.2 9.9 4.5 9.8 4.4 9.8 4.4 9.8 4.3 9.8 4.1 9.8 4 9.8 3.8 9.8 3.6 9.9 3.4 10 3.2 10.1 3 10.2 2.9 10.4 2.8 10.5 2.6 10.8 2.5 11.1 2.5 11.5 2.5 11.6 2.5 11.8 2.6 12 2.6 12.1 2.7 12.3 2.8 12.5 2.9 12.6 3.1 12.8 3.2 12.9 3.3 13 3.5 13.1 3.6 13.1 3.7 13.1 3.8 13.2 3.9 13.2L13.1 15.2 13.1 15.2Z"></path></g></svg><span>Tutorials</span></a></li><li class="nav-offers flyout-parent"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#" class="l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>offers icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M35.9 20.6L27 15.5C26.1 15 24.7 15 23.7 15.5L14.9 20.6C13.9 21.1 13.2 22.4 13.2 23.4L13.2 41.4C13.2 42.4 13.9 43.7 14.9 44.2L23.3 49C24.2 49.5 25.6 49.5 26.6 49L35.9 43.6C36.8 43.1 37.6 41.8 37.6 40.8L37.6 23.4C37.6 22.4 36.8 21.1 35.9 20.6L35.9 20.6ZM40 8.2C39.1 7.6 37.6 7.6 36.7 8.2L30.2 11.9C29.3 12.4 29.3 13.2 30.2 13.8L39.1 18.8C40 19.4 40.7 20.6 40.7 21.7L40.7 39C40.7 40.1 41.4 40.5 42.4 40L48.2 36.6C49.1 36.1 49.8 34.9 49.8 33.8L49.8 15.6C49.8 14.6 49.1 13.3 48.2 12.8L40 8.2 40 8.2ZM27 10.1L33.6 6.4C34.5 5.9 34.5 5 33.6 4.5L26.6 0.5C25.6 0 24.2 0 23.3 0.5L16.7 4.2C15.8 4.7 15.8 5.6 16.7 6.1L23.7 10.1C24.7 10.6 26.1 10.6 27 10.1ZM10.1 21.7C10.1 20.6 10.8 19.4 11.7 18.8L20.6 13.8C21.5 13.2 21.5 12.4 20.6 11.9L13.6 7.9C12.7 7.4 11.2 7.4 10.3 7.9L1.6 12.8C0.7 13.3 0 14.6 0 15.6L0 33.8C0 34.9 0.7 36.1 1.6 36.6L8.4 40.5C9.3 41 10.1 40.6 10.1 39.6L10.1 21.7 10.1 21.7Z"></path></g></svg><span>Offers &amp; Deals</span></a><ul class="flyout"><li><a href="https://www.safaribooksonline.com/oreilly-newsletters/" class="l2 nav-icn"><span>Newsletters</span></a></li></ul></li><li class="nav-highlights"><a href="https://www.safaribooksonline.com/u/0011N00001As6t6QAB/" class="t-highlights-nav l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 35" width="20" height="20" version="1.1" fill="#4A3C31"><desc>highlights icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M13.325 18.071L8.036 18.071C8.036 11.335 12.36 7.146 22.5 5.594L22.5 0C6.37 1.113 0 10.632 0 22.113 0 29.406 3.477 35 10.403 35 15.545 35 19.578 31.485 19.578 26.184 19.578 21.556 17.211 18.891 13.325 18.071L13.325 18.071ZM40.825 18.071L35.565 18.071C35.565 11.335 39.86 7.146 50 5.594L50 0C33.899 1.113 27.5 10.632 27.5 22.113 27.5 29.406 30.977 35 37.932 35 43.045 35 47.078 31.485 47.078 26.184 47.078 21.556 44.74 18.891 40.825 18.071L40.825 18.071Z"></path></g></svg><span>Highlights</span></a></li><li><a href="https://www.safaribooksonline.com/u/" class="t-settings-nav l1 js-settings nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 53" width="20" height="20" version="1.1" fill="#4A3C31"><desc>settings icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M44.6 29.6C44.7 28.6 44.8 27.5 44.8 26.5 44.8 25.5 44.7 24.4 44.6 23.4L49.6 19C50 18.8 50.1 18.3 49.9 17.9 48.9 14.7 47.1 11.7 44.9 9.1 44.6 8.8 44.2 8.7 43.8 8.8L37.4 11.1C35.8 9.8 34 8.7 32.1 8L30.9 1.4C30.8 0.9 30.4 0.6 30 0.5 26.7-0.2 23.3-0.2 20 0.5 19.6 0.6 19.2 0.9 19.1 1.4L17.9 8C16 8.7 14.1 9.8 12.6 11.1L6.2 8.8C5.8 8.7 5.4 8.8 5.1 9.1 2.9 11.7 1.1 14.7 0.1 17.9 -0.1 18.3 0 18.8 0.4 19L5.4 23.4C5.3 24.4 5.2 25.5 5.2 26.5 5.2 27.5 5.3 28.6 5.4 29.6L0.4 34C0 34.2-0.1 34.7 0.1 35.1 1.1 38.3 2.9 41.4 5.1 43.9 5.4 44.2 5.8 44.4 6.2 44.2L12.6 42C14.1 43.2 16 44.3 17.9 45L19.1 51.7C19.2 52.1 19.6 52.5 20 52.5 21.6 52.8 23.3 53 25 53 26.7 53 28.4 52.8 30 52.5 30.4 52.5 30.8 52.1 30.9 51.7L32.1 45C34 44.3 35.8 43.2 37.4 42L43.8 44.2C44.2 44.4 44.6 44.2 44.9 43.9 47.1 41.4 48.9 38.3 49.9 35.1 50.1 34.7 50 34.2 49.6 34L44.6 29.6ZM25 36.4C19.6 36.4 15.2 32 15.2 26.5 15.2 21 19.6 16.6 25 16.6 30.4 16.6 34.8 21 34.8 26.5 34.8 32 30.4 36.4 25 36.4Z"></path></g></svg><span>Settings</span></a></li><li><a href="https://www.safaribooksonline.com/public/support" class="l1 no-icon">Support</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l1 no-icon">Sign Out</a></li></ul><ul class="profile"><li><a href="https://www.safaribooksonline.com/u/" class="l2 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 53" width="20" height="20" version="1.1" fill="#4A3C31"><desc>settings icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M44.6 29.6C44.7 28.6 44.8 27.5 44.8 26.5 44.8 25.5 44.7 24.4 44.6 23.4L49.6 19C50 18.8 50.1 18.3 49.9 17.9 48.9 14.7 47.1 11.7 44.9 9.1 44.6 8.8 44.2 8.7 43.8 8.8L37.4 11.1C35.8 9.8 34 8.7 32.1 8L30.9 1.4C30.8 0.9 30.4 0.6 30 0.5 26.7-0.2 23.3-0.2 20 0.5 19.6 0.6 19.2 0.9 19.1 1.4L17.9 8C16 8.7 14.1 9.8 12.6 11.1L6.2 8.8C5.8 8.7 5.4 8.8 5.1 9.1 2.9 11.7 1.1 14.7 0.1 17.9 -0.1 18.3 0 18.8 0.4 19L5.4 23.4C5.3 24.4 5.2 25.5 5.2 26.5 5.2 27.5 5.3 28.6 5.4 29.6L0.4 34C0 34.2-0.1 34.7 0.1 35.1 1.1 38.3 2.9 41.4 5.1 43.9 5.4 44.2 5.8 44.4 6.2 44.2L12.6 42C14.1 43.2 16 44.3 17.9 45L19.1 51.7C19.2 52.1 19.6 52.5 20 52.5 21.6 52.8 23.3 53 25 53 26.7 53 28.4 52.8 30 52.5 30.4 52.5 30.8 52.1 30.9 51.7L32.1 45C34 44.3 35.8 43.2 37.4 42L43.8 44.2C44.2 44.4 44.6 44.2 44.9 43.9 47.1 41.4 48.9 38.3 49.9 35.1 50.1 34.7 50 34.2 49.6 34L44.6 29.6ZM25 36.4C19.6 36.4 15.2 32 15.2 26.5 15.2 21 19.6 16.6 25 16.6 30.4 16.6 34.8 21 34.8 26.5 34.8 32 30.4 36.4 25 36.4Z"></path></g></svg><span>Settings</span></a><span class="l2 t-nag-notification" id="nav-nag"><strong class="trial-green">7</strong> days left in your trial.
  
  

  
    
      

<a class="" href="https://www.safaribooksonline.com/subscribe/">Subscribe</a>.


    
  

  

</span></li><li><a href="https://www.safaribooksonline.com/public/support" class="l2">Support</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l2">Sign Out</a></li></ul></div></li></ul></nav></header>


      </div>
      <div id="container" class="application" style="height: auto;">
        
          <div class="nav-container clearfix">
            


            
            
          </div>

          

  <div class="js-toc">
    
      <div class="sbo-reading-menu sbo-menu-top"><section class="sbo-toc-container toc-menu"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#" class="sbo-toc-thumb"><span class="sbo-title ss-list"><h1><div class="visuallyhidden">Table of Contents for </div>
      
      OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)
      
    </h1></span></a><div class="toc-contents"></div></section></div>

    

    <div class="interface-controls interface-controls-top">
      <ul class="interface-control-btns js-bitlist js-reader">
        <li class="js-search-in-archive search-in-archive t-search-in-archive"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#" title="Search in archive" class="js-search-controls search-controls"><span class="icon">Search in book...</span></a><form class="search-archive-bar js-search-form"><input type="search" name="query" placeholder="Search inside this book..." autocomplete="off"></form><div class="search-archive-results"><div class="js-sitb-results-region"></div></div></li><li class="queue-control"><button type="button" class="rec-fav ss-queue js-queue js-current-chapter-queue" data-queue-endpoint="/api/v1/book/9781260011388/chapter/ch06.html" data-for-analytics="9781260011388:ch06.html" aria-label="Add to Queue"><span>Add to Queue</span></button></li><li class="js-font-control-panel font-control-activator"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#" data-push-state="false" id="font-controls" title="Change font size" aria-label="Change font size"><span class="icon">Toggle Font Controls</span></a></li><li class="dropdown sharing-controls"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#" class="trigger" data-push-state="false" title="Share" aria-label="Share"><i class="fa fa-share"></i></a><ul class="social-sharing dropdown-menu"><li><a class="twitter share-button t-twitter" target="_blank" aria-label="Share this section on Twitter" title="Share this section on Twitter" href="https://twitter.com/share?url=https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html&amp;text=OCA%20Java%20SE%208%20Programmer%20I%20Exam%20Guide%20%28Exams%201Z0-808%29&amp;via=safari"><span>Twitter</span></a></li><li><a class="facebook share-button t-facebook" target="_blank" aria-label="Share this section on Facebook" title="Share this section on Facebook" href="https://www.facebook.com/sharer/sharer.php?u=https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html"><span>Facebook</span></a></li><li><a class="googleplus share-button t-googleplus" target="_blank" aria-label="Share this secton on Google Plus" title="Share this secton on Google Plus" href="https://plus.google.com/share?url=https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html"><span>Google Plus</span></a></li><li><a class="email share-button t-email" aria-label="Share this section via email" title="Share this section via email" href="mailto:?subject=Safari:%20Cover%20Page&amp;body=https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html%0D%0Afrom%20OCA%20Java%20SE%208%20Programmer%20I%20Exam%20Guide%20%28Exams%201Z0-808%29%0D%0A"><span>Email</span></a></li></ul></li>
      </ul>
    </div>

    <section role="document">
	  <div class="t-sbo-prev sbo-prev sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">5&nbsp;Flow Control and Exceptions</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/appa.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">A&nbsp;About the Download</div>
        </a>
    
  
  </div>



<div id="sbo-rt-content"><div class="annotator-wrapper"><p class="imagea"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/common.jpg" alt="Images" width="500" height="252" data-mfp-src="/library/view/oca-java-se/9781260011388/common.jpg"></p>
<h2 class="h2" id="ch6"><a id="page_339"></a>6</h2>
<h2 class="h2a">Strings, Arrays, ArrayLists, Dates, and Lambdas</h2>
<p class="noindentd">CERTIFICATION OBJECTIVES</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create and Manipulate Strings</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Manipulate Data Using the StringBuilder Class and Its Methods</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create and Use Calendar Data</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Declare, Instantiate, Initialize, and Use a One-Dimensional Array</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Declare, Instantiate, Initialize, and Use a Multidimensional Array</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Declare and Use an ArrayList</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use Wrapper Classes</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use Encapsulation for Reference Variables</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use Simple Lambda Expressions</p>
<p class="tick"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/tic.jpg" alt="Images" width="12" height="13" data-mfp-src="/library/view/oca-java-se/9781260011388/tic.jpg">&nbsp;&nbsp;&nbsp;Two-Minute Drill</p>
<p class="tick1"><strong>Q&amp;A</strong> Self Test</p>
<p class="noindenttop1"><a id="page_340"></a><span class="drop">T</span>his chapter focuses on the exam objectives related to searching, formatting, and parsing strings; creating and using calendar-related objects; creating and using arrays and <code>ArrayList</code>s; and using simple lambda expressions. Many of these topics could fill an entire book. Fortunately, you won’t have to become a total guru to do well on the exam. The exam team intended to include just the basic aspects of these technologies, and in this chapter, we cover <em>more</em> than you’ll need to get through the related objectives on the exam.</p>
<h3 class="h3a">CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch06lev1sec1"></a>Using String and StringBuilder (OCA Objectives 9.2 and 9.1)</h3>
<p class="noindentn"><em>9.2&nbsp;&nbsp;&nbsp;Creating and manipulating Strings.</em></p>
<p class="noindentn"><em>9.1&nbsp;&nbsp;&nbsp;Manipulate data using the <code>StringBuilder</code> class and its methods.</em></p>
<p class="indentt">Everything you needed to know about strings in the older OCJP exams you’ll need to know for the OCA 8 exam. Closely related to the <code>String</code> class are the <code>StringBuilder</code> class and the almost identical <code>StringBuffer</code> class. (For the exam, the only thing you need to know about the <code>StringBuffer</code> class is that it has exactly the same methods as the <code>StringBuilder</code> class, but <code>StringBuilder</code> is faster because its methods aren’t synchronized.) Both classes, <code>StringBuilder</code> and <code>StringBuffer</code>, give you <code>String</code>-like objects and ways to manipulate them, with the important difference being that these objects are mutable.</p>
<h4 class="h4"><a id="ch06lev2sec1"></a>The String Class</h4>
<p class="noindent">This section covers the <code>String</code> class, and the key concept for you to understand is that once a <code>String</code> object is created, it can never be changed. So, then, what is happening when a <code>String</code> object seems to be changing? Let’s find out.</p>
<h5 class="h5">Strings Are Immutable Objects</h5>
<p class="noindent">We’ll start with a little background information about strings. You may not need this&nbsp;for the test, but a little context will help. Handling "strings" of characters is a <a id="page_341"></a>fundamental aspect of most programming languages. In Java, each character in a string is a 16-bit Unicode character. Because Unicode characters are 16 bits (not the skimpy 7 or 8 bits that ASCII provides), a rich, international set of characters is easily represented in Unicode.</p>
<p class="indent">In Java, strings are objects. As with other objects, you can create an instance of a string with the <code>new</code> keyword, as follows:</p>
<p class="coden"><code>String s = new String();</code></p>
<p class="noindent">This line of code creates a new object of class <code>String</code> and assigns it to the reference variable <code>s</code>.</p>
<p class="indent">So far, <code>String</code> objects seem just like other objects. Now, let’s give the string a value:</p>
<p class="coden"><code>s = "abcdef";</code></p>
<p class="noindent">(As you’ll find out shortly, these two lines of code aren’t quite what they seem, so stay tuned.)</p>
<p class="indent">It turns out the <code>String</code> class has about a zillion constructors, so you can use a more efficient shortcut:</p>
<p class="coden"><code>String s = new String("abcdef");</code></p>
<p class="noindent">And this is even more concise:</p>
<p class="coden"><code>String s = "abcdef";</code></p>
<p class="indent">There are some subtle differences between these options that we’ll discuss later, but what they have in common is that they all create a new <code>String</code> object, with a value of <code>"abcdef"</code>, and assign it to a reference variable <code>s</code>. Now let’s say you want a second reference to the <code>String</code> object referred to by <code>s</code>:</p>
<p class="coden"><code>String s2 = s; // refer s2 to the same String as s</code></p>
<p class="indent">So far so good. <code>String</code> objects seem to be behaving just like other objects, so what’s all the fuss about? Immutability! (What the heck is immutability?) Once you have assigned a <code>String</code> a value, that value can never change—it’s immutable, frozen solid, won’t budge, <em>fini</em>, done. (We’ll talk about why later; don’t let us forget.) The good news is that although the <code>String</code> object is immutable, its reference variable is not, so to continue with our previous example, consider this:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0341-01.jpg" alt="images" width="587" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0341-01.jpg"></p>
<p class="noindent"><a id="page_342"></a>Now, wait just a minute, didn’t we just say that <code>String</code> objects were immutable? So what’s all this "appending to the end of the string" talk? Excellent question: let’s look at what really happened.</p>
<p class="indent">The Java Virtual Machine (JVM) took the value of string <code>s</code> (which was <code>"abcdef"</code>) and tacked <code>" more stuff"</code> onto the end, giving us the value <code>"abcdef more stuff"</code>. Since strings are immutable, the JVM couldn’t stuff this new value into the old <code>String</code> referenced by <code>s</code>, so it created a new <code>String</code> object, gave it the value <code>"abcdef more stuff"</code>, and made <code>s</code> refer to it. At this point in our example, we have two <code>String</code> objects: the first one we created, with the value <code>"abcdef"</code>, and the second one with the value <code>"abcdef more stuff"</code>. Technically there are now three <code>String</code> objects, because the literal argument to <code>concat</code>, <code>" more stuff"</code>, is itself a new <code>String</code> object. But we have references only to <code>"abcdef"</code> (referenced by <code>s2</code>) and <code>"abcdef more stuff"</code> (referenced by <code>s</code>).</p>
<p class="indent">What if we didn’t have the foresight or luck to create a second reference variable for the <code>"abcdef"</code> string before we called <code>s = s.concat(" more stuff");</code>? In that case, the original, unchanged string containing <code>"abcdef"</code> would still exist in memory, but it would be considered "lost." No code in our program has any way to reference it—it is lost to us. Note, however, that the original <code>"abcdef"</code> string didn’t change (it can’t, remember; it’s immutable); only the reference variable <code>s</code> was changed so that it would refer to a different string.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6fig1">Figure 6-1</a> shows what happens on the heap when you reassign a reference variable. Note that the dashed line indicates a deleted reference.</p>
<p class="image-f"><a id="ch6fig1"></a><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0343-01.jpg" alt="images" width="554" height="687" data-mfp-src="/library/view/oca-java-se/9781260011388/f0343-01.jpg"></p>
<p class="figcap"><span class="figs"><strong>FIGURE 6-1</strong></span>&nbsp;&nbsp;&nbsp;<code>String</code> objects and their reference variables</p>
<p class="indent">To review our first example:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0342-01.jpg" alt="images" width="587" height="212" data-mfp-src="/library/view/oca-java-se/9781260011388/p0342-01.jpg"></p>
<p class="indent">Let’s look at another example:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0342-02.jpg" alt="images" width="570" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0342-02.jpg"></p>
<p class="noindent"><a id="page_343"></a>The first line is straightforward: Create a new <code>String</code> object, give it the value <code>“Java”,</code> and refer <code>x</code> to it. Next the JVM creates a second <code>String</code> object with the value <code>“Java Rules!”</code> but nothing refers to it. The second <code>String</code> object is instantly lost; you can’t get to it. The reference variable <code>x</code> still refers to the original <a id="page_344"></a><code>String</code> with the value <code>“Java”</code>. <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6fig2">Figure 6-2</a> shows creating a <code>String</code> without assigning a reference to it.</p>
<p class="image-f"><a id="ch6fig2"></a><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0344-01.jpg" alt="images" width="757" height="687" data-mfp-src="/library/view/oca-java-se/9781260011388/f0344-01.jpg"></p>
<p class="figcap"><span class="figs"><strong>FIGURE 6-2</strong></span>&nbsp;&nbsp;&nbsp;A <code>String</code> object is abandoned upon creation.</p>
<p class="indent">Let’s expand this current example. We started with</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0344-01.jpg" alt="images" width="572" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0344-01.jpg"></p>
<p class="indent">Now let’s add</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0344-02.jpg" alt="images" width="540" height="52" data-mfp-src="/library/view/oca-java-se/9781260011388/p0344-02.jpg"></p>
<p class="indent"><a id="page_345"></a>(We actually did just create a new <code>String</code> object with the value <code>"JAVA"</code>, but it was lost, and <code>x</code> still refers to the original unchanged string <code>"Java"</code>.) How about adding this:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0345-01.jpg" alt="images" width="629" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0345-01.jpg"></p>
<p class="indent">Can you determine what happened? The JVM created yet another new <code>String</code> object, with the value <code>"JXvX"</code>, (replacing the <code>a</code>’s with <code>X</code>’s), but once again this new <code>String</code> was lost, leaving <code>x</code> to refer to the original unchanged and unchangeable <code>String</code> object, with the value <code>"Java"</code>. In all these cases, we called various string methods to create a new <code>String</code> by altering an existing <code>String</code>, but we never assigned the newly created <code>String</code> to a reference variable.</p>
<p class="indent">But we can put a small spin on the previous example:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0345-02.jpg" alt="images" width="579" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0345-02.jpg"></p>
<p class="noindent">This time, when the JVM runs the second line, a new <code>String</code> object is created with the value <code>"Java Rules!"</code>, and <code>x</code> is set to reference it. But wait…there’s more—now the original <code>String</code> object, <code>"Java"</code>, has been lost, and no one is referring to it. So in both examples, we created two <code>String</code> objects and only one reference variable, so one of the two <code>String</code> objects was left out in the cold. (See <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6fig3">Figure 6-3</a> for a graphic depiction of this sad story.)</p>
<p class="image-f"><a id="ch6fig3"></a><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0346-01.jpg" alt="images" width="747" height="687" data-mfp-src="/library/view/oca-java-se/9781260011388/f0346-01.jpg"></p>
<p class="figcap"><span class="figs"><strong>FIGURE 6-3</strong></span>&nbsp;&nbsp;&nbsp;An old <code>String</code> object being abandoned. The dashed line indicates a deleted reference.</p>
<p class="indent">Let’s take this example a little further:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0345-03.jpg" alt="images" width="600" height="272" data-mfp-src="/library/view/oca-java-se/9781260011388/p0345-03.jpg"></p>
<p class="indent"><a id="page_346"></a>The preceding discussion contains the keys to understanding Java string immutability. If you really, really get the examples and diagrams, backward and forward, you should get 80 percent of the <code>String</code> questions on the exam correct.</p>
<p class="indent">We will cover more details about strings next, but make no mistake—in terms of bang for your buck, what we’ve already covered is by far the most important part of understanding how <code>String</code> objects work in Java.</p>
<p class="indent">We’ll finish this section by presenting an example of the kind of devilish <code>String</code> question you might expect to see on the exam. Take the time to work it out on <a id="page_347"></a>paper. (Hint: try to keep track of how many objects and reference variables there are, and which ones refer to which.)</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0347-01.jpg" alt="images" width="321" height="113" data-mfp-src="/library/view/oca-java-se/9781260011388/p0347-01.jpg"></p>
<p class="indent">What is the output? For extra credit, how many <code>String</code> objects and how many reference variables were created prior to the <code>println</code> statement?</p>
<p class="indent">Answer: The result of this code fragment is <code>spring winter</code> <code>spring summer</code>. There are two reference variables: <code>s1</code> and <code>s2</code>. A total of eight <code>String</code> objects were created as follows: <code>"spring "</code>, <code>"summer "</code> (lost), <code>"spring summer "</code>, <code>"fall "</code> (lost), <code>"spring fall "</code> (lost), <code>"spring summer spring "</code> (lost), <code>"winter "</code> (lost), <code>"spring winter "</code> (at this point <code>"spring "</code> is lost). Only two of the eight <code>String</code> objects are not lost in this process.</p>
<h4 class="h4"><a id="ch06lev2sec2"></a>Important Facts About Strings and Memory</h4>
<p class="noindent">In this section, we’ll discuss how Java handles <code>String</code> objects in memory and some of the reasons behind these behaviors.</p>
<p class="indent">One of the key goals of any good programming language is to make efficient use of memory. As an application grows, it’s very common for string literals to occupy large amounts of a program’s memory, and there is often a lot of redundancy within the universe of <code>String</code> literals for a program. To make Java more memory efficient, the JVM sets aside a special area of memory called the <em>String constant pool</em>. When the compiler encounters a <code>String</code> literal, it checks the pool to see if an identical <code>String</code> already exists. If a match is found, the reference to the new literal is directed to the existing <code>String</code>, and no new <code>String</code> literal object is created. (The existing <code>String</code> simply has an additional reference.) Now you can start to see why making <code>String</code> objects immutable is such a good idea. If several reference variables refer to the same <code>String</code> without even knowing it, it would be very bad if any of them could change the <code>String</code>’s value.</p>
<p class="indent">You might say, "Well that’s all well and good, but what if someone overrides the <code>String</code> class functionality; couldn’t that cause problems in the pool?" That’s one of the main reasons that the <code>String</code> class is marked <code>final</code>. Nobody can override the behaviors of any of the <code>String</code> methods, so you can rest assured that the <code>String</code> objects you are counting on to be immutable will, in fact, be immutable.</p>
<h4 class="h4a"><a id="page_348"></a>Creating New Strings</h4>
<p class="noindent">Earlier we promised to talk more about the subtle differences between the various methods of creating a <code>String</code>. Let’s look at a couple of examples of how a <code>String</code> might be created, and let’s further assume that no other <code>String</code> objects exist in the pool. In this simple case, <code>"abc"</code> will go in the pool, and <code>s</code> will refer to it:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0348-01.jpg" alt="images" width="552" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0348-01.jpg"></p>
<p class="indent">In the next case, because we used the <code>new</code> keyword, Java will create a new <code>String</code> object in normal (nonpool) memory, and <code>s</code> will refer to it. In addition, the literal <code>"abc"</code> will be placed in the pool:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0348-02.jpg" alt="images" width="571" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0348-02.jpg"></p>
<h4 class="h4"><a id="ch06lev2sec3"></a>Important Methods in the String Class</h4>
<p class="noindent">The following methods are some of the more commonly used methods in the <code>String</code> class, and they are also the ones you’re most likely to encounter on the exam.</p>
<p class="bulletxt"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>charAt()</strong> Returns the character located at the specified index</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>concat()</strong> Appends one string to the end of another (<code>+</code> also works)</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>equalsIgnoreCase()</strong> Determines the equality of two strings, ignoring case</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>length()</strong> Returns the number of characters in a string</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>replace()</strong> Replaces occurrences of a character with a new character</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>substring()</strong> Returns a part of a string</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>toLowerCase()</strong> Returns a string, with uppercase characters converted to lowercase</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>toString()</strong> Returns the value of a string</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>toUpperCase()</strong> Returns a string, with lowercase characters converted to uppercase</p>
<p class="bulletxb"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>trim()</strong> Removes whitespace from both ends of a string</p>
<p class="indent">Let’s look at these methods in more detail.</p>
<h5 class="h5"><a id="page_349"></a>public char charAt(int index)</h5>
<p class="noindent">This method returns the character located at the <code>String</code>’s specified index. Remember, <code>String</code> indexes are zero-based—here’s an example:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0349-01.jpg" alt="images" width="549" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0349-01.jpg"></p>
<h5 class="h5">public String concat(String s)</h5>
<p class="noindent">This method returns a string with the value of the <code>String</code> passed in to the method appended to the end of the <code>String</code> used to invoke the method—here’s an example:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0349-02.jpg" alt="images" width="598" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0349-02.jpg"></p>
<p class="indent">The overloaded <code>+</code> and <code>+=</code> operators perform functions similar to the <code>concat()</code> method—here’s an example:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0349-03.jpg" alt="images" width="598" height="113" data-mfp-src="/library/view/oca-java-se/9781260011388/p0349-03.jpg"></p>
<p class="indent">In the preceding <code>"Atlantic ocean"</code> example, notice that the value of <code>x</code> really did change! Remember the <code>+=</code> operator is an assignment operator, so line 2 is really creating a new string, <code>"Atlantic ocean"</code>, and assigning it to the <code>x</code> variable. After line 2 executes, the original string <code>x</code> was referring to, <code>"Atlantic"</code>, is abandoned.</p>
<h5 class="h5">public boolean equalsIgnoreCase(String s)</h5>
<p class="noindent">This method returns a boolean value (<code>true</code> or <code>false</code>) depending on whether the value of the <code>String</code> in the argument is the same as the value of the <code>String</code> used to invoke the method. This method will return <code>true</code> even when characters in the <code>String</code> objects being compared have differing cases—here’s an example:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0349-04.jpg" alt="images" width="608" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0349-04.jpg"></p>
<h5 class="h5"><a id="page_350"></a>public int length()</h5>
<p class="noindent">This method returns the length of the <code>String</code> used to invoke the method—here’s an example:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0350-01.jpg" alt="images" width="493" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0350-01.jpg"></p>
<div class="side-exam">
<p class="imaget"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>Arrays have an attribute (not a method) called <code>length.</code> You may encounter questions in the exam that attempt to use the <code>length()</code> method on an array or that attempt to use the <code>length</code> attribute on a <code>String</code>. Both cause compiler errors–consider these, for example:</em></strong></p>
<p class="codea"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0350-02.jpg" alt="images" width="505" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0350-02.jpg"></p>
<p class="noindent"><strong><em>and</em></strong></p>
<p class="codea"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0350-03.jpg" alt="images" width="505" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0350-03.jpg"></p>
</div>
<h5 class="h5">public String replace(char old, char new)</h5>
<p class="noindent">This method returns a <code>String</code> whose value is that of the <code>String</code> used to invoke the method, but updated so that any occurrence of the char in the first argument is replaced by the char in the second argument—here’s an example:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0350-04.jpg" alt="images" width="646" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0350-04.jpg"></p>
<h5 class="h5">public String substring(int begin) and public String substring(int begin, int end)</h5>
<p class="noindent">The <code>substring()</code> method is used to return a part (or substring) of the <code>String</code> used to invoke the method. The first argument represents the starting location (zero-based) of the substring. If the call has only one argument, the substring returned will include the characters at the end of the original <code>String</code>. If the call <a id="page_351"></a>has two arguments, the substring returned will end with the character located in the <em>n</em>th position of the original <code>String</code> where <em>n</em> is the second argument. Unfortunately, the ending argument is not zero-based, so if the second argument is 7, the last character in the returned <code>String</code> will be in the original <code>String</code>’s 7 position, which is index 6 (ouch). Let’s look at some examples:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0351-01.jpg" alt="images" width="685" height="114" data-mfp-src="/library/view/oca-java-se/9781260011388/p0351-01.jpg"></p>
<p class="noindent">The first example should be easy: start at index 5 and return the rest of the <code>String</code>. The second example should be read as follows: start at index 5 and return the characters up to and including the 8th position (index 7).</p>
<h5 class="h5">public String toLowerCase()</h5>
<p class="noindent">Converts all characters of a <code>String</code> to lowercase—here’s an example:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0351-02.jpg" alt="images" width="627" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0351-02.jpg"></p>
<h5 class="h5">public String toString()</h5>
<p class="noindent">This method returns the value of the <code>String</code> used to invoke the method. What? Why would you need such a seemingly "do nothing" method? All objects in Java must have a <code>toString()</code> method, which typically returns a <code>String</code> that in some meaningful way describes the object in question. In the case of a <code>String</code> object, what’s a more meaningful way than the <code>String</code>’s value? For the sake of consistency, here’s an example:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0351-03.jpg" alt="images" width="605" height="31" data-mfp-src="/library/view/oca-java-se/9781260011388/p0351-03.jpg"></p>
<h5 class="h5">public String toUpperCase()</h5>
<p class="noindent">Converts all characters of a <code>String</code> to uppercase–here’s an example:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0351-04.jpg" alt="images" width="617" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0351-04.jpg"></p>
<h5 class="h5"><a id="page_352"></a>public String trim()</h5>
<p class="noindent">This method returns a <code>String</code> whose value is the <code>String</code> used to invoke the method, but with any leading or trailing whitespace removed—here’s an example:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0352-01.jpg" alt="images" width="588" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0352-01.jpg"></p>
<h4 class="h4"><a id="ch06lev2sec4"></a>The StringBuilder Class</h4>
<p class="noindent">The <code>java.lang.StringBuilder</code> class should be used when you have to make a lot of modifications to strings of characters. As discussed in the previous section, <code>String</code> objects are immutable, so if you choose to do a lot of manipulations with&nbsp;<code>String</code> objects, you will end up with a lot of abandoned <code>String</code> objects in&nbsp;the <code>String</code> pool. (Even in these days of gigabytes of RAM, it’s not a good idea to waste precious memory on discarded <code>String</code> pool objects.) On the other hand, objects of type <code>StringBuilder</code> can be modified over and over again without leaving behind a great effluence of discarded <code>String</code> objects.</p>
<p class="imagel"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/icon.jpg" alt="Images" width="50" height="35" data-mfp-src="/library/view/oca-java-se/9781260011388/icon.jpg"></p>
<p class="icon"><strong><em>A common use for <code>StringBuilder</code>s is file I/O when large, ever-changing streams of input are being handled by the program. In these cases, large blocks of characters are handled as units, and <code>StringBuilder</code> objects are the ideal way to handle a block of data, pass it on, and then reuse the same memory to handle the next block of data.</em></strong></p>
<h5 class="h5">Prefer StringBuilder to StringBuffer</h5>
<p class="noindent">The <code>StringBuilder</code> class was added in Java 5. It has exactly the same API as the <code>StringBuffer</code> class, except <code>StringBuilder</code> is not thread-safe. In other words, its methods are not synchronized. Oracle recommends that you use <code>StringBuilder</code> instead of <code>StringBuffer</code> whenever possible, because <code>StringBuilder</code> will run faster (and perhaps jump higher). So apart from synchronization, anything we say about <code>StringBuilder</code>’s methods holds true for <code>StringBuffer</code>’s methods, and vice versa. That said, for the OCA 8 exam, <code>StringBuffer</code> is not tested.</p>
<h5 class="h5">Using StringBuilder (and&nbsp;This&nbsp;Is&nbsp;the&nbsp;Last&nbsp;Time We’ll Say This: StringBuffer)</h5>
<p class="noindent">In the previous section, you saw how the exam might test your understanding of <code>String</code> immutability with code fragments like this:</p>
<p class="coden"><a id="page_353"></a><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0353-01.jpg" alt="images" width="560" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0353-01.jpg"></p>
<p class="noindent">Because no new assignment was made, the new <code>String</code> object created with the <code>concat()</code> method was abandoned instantly. You also saw examples like this:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0353-02.jpg" alt="images" width="570" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0353-02.jpg"></p>
<p class="noindent">We got a nice new <code>String</code> out of the deal, but the downside is that the old <code>String "abc"</code> has been lost in the <code>String</code> pool, thus wasting memory. If we were using a <code>StringBuilder</code> instead of a <code>String</code>, the code would look like this:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0353-03.jpg" alt="images" width="608" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0353-03.jpg"></p>
<p class="indent">All of the <code>StringBuilder</code> methods we will discuss operate on the value of the <code>StringBuilder</code> object invoking the method. So a call to <code>sb.append("def");</code> is actually appending <code>"def"</code> to itself (<code>StringBuilder sb</code>). In fact, these method calls can be chained to each other—here’s an example:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0353-04.jpg" alt="images" width="608" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0353-04.jpg"></p>
<p class="indent">Notice that in each of the previous two examples, there was a single call to <code>new</code>, so in each example we weren’t creating any extra objects. Each example needed only a single <code>StringBuilder</code> object to execute.</p>
<div class="side-exam">
<p class="imaget"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>So far we’ve seen <code>StringBuilders</code> being built with an argument specifying an initial value. <code>StringBuilders</code> can also be built empty, and they can also be constructed with a specific size or, more formally, a "capacity." For the exam, there are three ways to create a new <code>StringBuilder:</code></em></strong></p>
<p class="codea"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0353-05.jpg" alt="images" width="548" height="54" data-mfp-src="/library/view/oca-java-se/9781260011388/p0353-05.jpg"></p>
<p class="noindentb"><a id="page_354"></a><strong><em>The two most common ways to work with <code>StringBuilders</code> is via an <code>append()</code> method or an <code>insert()</code> method. In terms of a <code>StringBuilder’s</code> capacity, there are three rules to keep in mind when appending and inserting:</em></strong></p>
<p class="indenta"><strong><em>If an <code>append()</code> grows a <code>StringBuilder</code> past its capacity, the capacity is updated automatically.</em></strong></p>
<p class="indenta"><strong><em>If an <code>insert()</code> starts within a <code>StringBuilder’s</code> capacity but ends after the current capacity, the capacity is updated automatically.</em></strong></p>
<p class="indenta"><strong><em>If an <code>insert()</code> attempts to start at an index after the <code>StringBuilder’s</code> current length, an exception will be thrown.</em></strong></p>
</div>
<h4 class="h4"><a id="ch06lev2sec5"></a>Important Methods in the StringBuilder Class</h4>
<p class="noindent">The <code>StringBuilder</code> class has a zillion methods. Following are the methods you’re most likely to use in the real world and, happily, the ones you’re most likely to find on the exam.</p>
<h5 class="h5">public StringBuilder append(String s)</h5>
<p class="noindent">As you’ve seen earlier, this method will update the value of the object that invoked the method, whether or not the returned value is assigned to a variable. Versions of this heavily overloaded method will take many different arguments, including <code>boolean</code>, <code>char</code>, <code>double</code>, <code>float</code>, <code>int</code>, <code>long</code>, and others, but the one most likely used on the exam will be a <code>String</code> argument—for example,</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0354-01.jpg" alt="images" width="550" height="113" data-mfp-src="/library/view/oca-java-se/9781260011388/p0354-01.jpg"></p>
<h5 class="h5">public StringBuilder delete(int start, int end)</h5>
<p class="noindent">This method modifies the value of the <code>StringBuilder</code> object used to invoke it. The starting index of the substring to be removed is <a id="page_355"></a>defined by the first argument (which is zero-based), and the ending index of the substring to be removed is defined by the second argument (but it is one-based)! Study the following example carefully:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0355-01.jpg" alt="images" width="608" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0355-01.jpg"></p>
<div class="side-exam">
<p class="imaget"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>The exam will probably test your knowledge of the difference between <code>String</code> and <code>StringBuilder</code> objects. Because <code>StringBuilder</code> objects are changeable, the following code fragment will behave differently than a similar code fragment that uses <code>String</code> objects:</em></strong></p>
<p class="codea"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0355-02.jpg" alt="images" width="416" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0355-02.jpg"></p>
<p class="noindent"><strong><em>In this case, the output will be: <code>"abcdef"</code></em></strong></p>
</div>
<h5 class="h5">public StringBuilder insert(int offset, String s)</h5>
<p class="noindent">This method updates the value of the <code>StringBuilder</code> object that invoked the method call. The <code>String</code> passed in to the second argument is inserted into the <code>StringBuilder</code> starting at the offset location represented by the first argument (the offset is zero-based). Again, other types of data can be passed in through the second argument (<strong>boolean</strong>, <strong>char</strong>, <strong>double</strong>, <strong>float</strong>, <strong>int</strong>, <strong>long</strong>, and so on), but the <code>String</code> argument is the one you’re most likely to see:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0355-03.jpg" alt="images" width="608" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0355-03.jpg"></p>
<h5 class="h5">public StringBuilder reverse()</h5>
<p class="noindent">This method updates the value of the <code>StringBuilder</code> object that invoked the method call. When invoked, the characters in the <code>StringBuilder</code> are reversed—the first character becoming the last, the second becoming the second to the last, and so on:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0355-04.jpg" alt="images" width="645" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0355-04.jpg"></p>
<h5 class="h5"><a id="page_356"></a>public String toString()</h5>
<p class="noindent">This method returns the value of the <code>StringBuilder</code> object that invoked the method call as a <code>String</code>:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0356-01.jpg" alt="images" width="608" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0356-01.jpg"></p>
<p class="indent">That’s it for <code>StringBuilder</code>s. If you take only one thing away from this section, it’s that unlike <code>String</code> objects, <code>StringBuilder</code> objects can be changed.</p>
<div class="side-exam">
<p class="imaget"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>Many of the exam questions covering this chapter’s topics use a tricky bit of Java syntax known as “chained methods.” A statement with chained methods has this general form:</em></strong></p>
<p class="codea"><code>result = method1().method2().method3();</code></p>
<p class="noindentb"><strong><em>In theory, any number of methods can be chained in this fashion, although typically you won’t see more than three. Here’s how to decipher these "handy Java shortcuts" when you encounter them:</em></strong></p>
<p class="numlist"><strong><em>1.&nbsp;&nbsp;&nbsp;Determine what the leftmost method call will return (let’s call it x).</em></strong></p>
<p class="numlist"><strong><em>2.&nbsp;&nbsp;&nbsp;Use x as the object invoking the second (from the left) method. If there are only two chained methods, the result of the second method call is the expression’s result.</em></strong></p>
<p class="numlist"><strong><em>3.&nbsp;&nbsp;&nbsp;If there is a third method, the result of the second method call is used to invoke the third method, whose result is the expression’s result–for example,</em></strong></p>
<p class="codea"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0356-02.jpg" alt="images" width="742" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0356-02.jpg"></p>
<p class="noindent"><strong><em>Let’s look at what happened. The literal <code>def</code> was concatenated to <code>abc</code>, creating a temporary, intermediate <code>String</code> (soon to be lost), with the value <code>abcdef</code>. The <code>toUpperCase()</code> method was called on this <code>String,</code> which created a new (soon to be lost) temporary <code>String</code> with the value <code>ABCDEF.</code> The <code>replace()</code> method was then called on this second <code>String</code> object, which created a final <code>String</code> with the value <code>ABxDEF</code> and referred y to it.</em></strong></p>
</div>
<h3 class="h3a"><a id="page_357"></a>CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch06lev1sec2"></a>Working with Calendar Data (OCA Objective 9.3)</h3>
<p class="noindentn"><em>9.3&nbsp;&nbsp;&nbsp;Create and manipulate calendar data using the following classes: java.time.LocalDateTime, java.time.LocalDate, java.time.LocalTime, java.time.format.DateTimeFormatter, java.time.Period</em></p>
<p class="indentt">Java 8 introduced a large collection (argh) of new packages related to working with calendars, dates, and times. The OCA 8 creators chose to include knowledge of a subset of these packages and classes as an exam objective. If you understand the classes included in the exam objective, you’ll have a good introduction to the entire calendar/date/time topic. As we work through this section, we’ll use the phrase "calendar object," which we use to refer to objects of one of the several types of calendar-related classes we’re covering. So "calendar object" is a made-up umbrella term. Here’s a summary of the five calendar-related classes we’ll study, plus an interface that looms large:</p>
<p class="bulletxt"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong><code>java.time.LocalDateTime</code></strong> This class is used to create immutable objects, each of which represents a specific date and time. Additionally, this class provides methods that can manipulate the values of the date/time objects created and assign them to new immutable objects. <code>LocalDateTime</code> objects contain BOTH information about days, months, and years, AND about hours, minutes, seconds, and fractions of seconds.</p>
<p class="bulletx"><a id="page_358"></a><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong><code>java.time.LocalDate</code></strong> This class is used to create immutable objects, each of which represents a specific date. Additionally, this class provides methods that can manipulate the values of the date objects created and assign them to new immutable objects. <code>LocalDate</code> objects are accurate only to days. Hours, minutes, and seconds are <strong>not</strong> part of a <code>LocalDate</code> object.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong><code>java.time.LocalTime</code></strong> This class is used to create immutable objects, each of which represents a specific time. Additionally, this class provides methods that can manipulate the values of the time objects created and assign them to new immutable objects. <code>LocalTime</code> objects refer only to hours, minutes, seconds, and fractions of seconds. Days, months, and years are <strong>not</strong> a part of <code>LocalTime</code> objects.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong><code>java.time.format.DateTimeFormatter</code></strong> This class is used by the classes just described to format date/time objects for output and to parse input strings and convert them to date/time objects. <code>DateTimeFormatter</code> objects are also immutable.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong><code>java.time.Period</code></strong> This class is used to create immutable objects that represent a period of time, for example, "one year, two months, and three days." This class works in years, months, and days. If you want to represent chunks of time in increments finer than a day (e.g., hours and minutes), you can use the <code>java.time.Duration</code> class, but <code>Duration</code> is not on the exam.</p>
<p class="bulletxb"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong><code>java.time.temporal.TemporalAmount</code></strong> This interface is implemented by the <code>Period</code> class. When you use <code>Period</code> objects to manipulate (see the following section), calendar objects, you’ll often use methods that take objects that implement <code>TemporalAmount</code>. In general, as you use the Java API more and more, it’s a good idea to learn which classes implement which interfaces; this is a key way to learn how the classes in complex packages interact with each other.</p>
<h4 class="h4"><a id="ch06lev2sec6"></a>Immutability</h4>
<p class="noindent">There are a couple of recurring themes in the previous definitions. First, notice that most of the calendar-related objects you’ll create are <strong>immutable</strong>. Just like <code>String</code> objects! So when we say we’re going to "manipulate" a calendar object, what we "really" mean is that we’ll invoke a method on a calendar object, and we’ll return a new calendar object that represents the result of <strong>manipulating the value</strong> of the original calendar object. But the original calendar object’s value is not, and cannot, be changed. Just like <code>String</code>s! Let’s see an example:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0358-01.jpg" alt="images" width="648" height="135" data-mfp-src="/library/view/oca-java-se/9781260011388/p0358-01.jpg"></p>
<p class="noindent">which produces:</p>
<p class="coden"><code>2017-01-31<br>2017-01-31<br>2017-02-28</code></p>
<p class="indent"><a id="page_359"></a>Notice that invoking the <code>plus</code> method on <code>date1</code> doesn’t change its value, but assigning the result of the <code>plus</code> method to <code>date2</code> captures a new value. Expect exam questions that test your understanding of the immutability of calendar objects.</p>
<h4 class="h4"><a id="ch06lev2sec7"></a>Factory Classes</h4>
<p class="noindent">The next thing to notice in the previous code listing is that we never used the keyword <code>new</code> in the code. We didn’t directly invoke a constructor. None of the five classes listed in OCA 8 objective 9.3 have public constructors. Instead, for all these classes, you invoke a <code>public static</code> method in the class to create a new object. As you go further into your studies of OO design, you’ll come across the phrases "factory pattern," "factory methods," and "factory classes." Usually, when a class has no public constructors and provides at least one <code>public static</code> method that can create new instances of the class, that class is called a <em>factory class,</em> and any method that is invoked to get a new instance of the class is called a <em>factory method.</em> There are many good reasons to create factory classes, most of which are beyond the scope of this book, but one of them we will discuss now. If we use the <code>LocalDate</code> class as an example, we find the following <code>static</code> methods that create and return a new instance:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0359-01.jpg" alt="images" width="448" height="113" data-mfp-src="/library/view/oca-java-se/9781260011388/p0359-01.jpg"></p>
<p class="indent">So we have what, about ten different ways to create a new <code>LocalDate</code> object? By using methods with different names (instead of using overloaded constructors), the method names themselves make the code more readable. It’s clearer what variation of <code>LocalDate</code> we’re making. As you use more and more classes from the Java API, you’ll discover that the API creators use factory classes a lot.</p>
<div class="side-exam">
<p class="imaget"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>Whenever you see an exam question relating to dates or times, be on the lookout for the <code>new</code> keyword. This is your tipoff that the code won’t compile:</em></strong></p>
<p class="codena"><code>LocalDateTime d1 = new LocalDateTime(); // won’t compile</code></p>
<p class="noindent"><strong><em>Remember the exam’s date and time classes use factory methods to create new objects.</em></strong></p>
</div>
<h4 class="h4"><a id="ch06lev2sec8"></a><a id="page_360"></a>Using and Manipulating Dates and Times</h4>
<p class="noindent">Now that we know how to create new calendar-related objects, let’s turn to using and manipulating them. (And you know what we mean when we say "manipulate.") The following code demonstrates some common uses and powerful features of the new Java 8 calendar-related classes:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0360-01.jpg" alt="images" width="684" height="880" data-mfp-src="/library/view/oca-java-se/9781260011388/p0360-01.jpg"></p>
<p class="indent"><a id="page_361"></a>Invoking the program with a relevant birthday:</p>
<p class="coden"><code>java 01201934</code></p>
<p class="noindent">produces the output (when run on January 13, 2017):</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0361-01.jpg" alt="images" width="361" height="133" data-mfp-src="/library/view/oca-java-se/9781260011388/p0361-01.jpg"></p>
<p class="indent">There’s a lot going on here, so let’s do a walk-through. First, we want users to enter their birthday in the form of <em>mmddyyyy</em>. We use a <code>DateTimeFormatter</code> object to parse the user’s first argument and verify that it’s a valid date of the form we’re hoping for. Usually in the Java API, <code>parse()</code> methods can throw exceptions, so we have to do our parsing in a <code>try/catch</code> block.</p>
<p class="indent">Next, we print out the verified date and show off a bit by printing out what day of the week that date occurred on. This calculation would be quite tricky to do by hand!</p>
<p class="indent">Next, we create a <code>Period</code> object that represents the amount of time between the user’s birthday and today, and we use various <code>getX()</code> methods to list the details of the <code>Period</code> object.</p>
<p class="indent">After making sure we’re not dealing with a time lord, we then use the very powerful <code>until()</code> method and "day" as the unit of time to determine how many days the user has been alive. We cheated a bit here and used the <code>ChronoUnit</code> enum from the <code>java.time.temporal</code> package. (Even though <code>ChronoUnit</code> isn’t on the exam, we think if you do a lot of calendar calculations, you’ll end up using this enum a lot.)</p>
<p class="indent">Next, we add 30,000 days to the user’s birthday so we can calculate on which date our user will have lived for 30,000 days. It’s a short jump to seeing how these sorts of calendar calculations will be very powerful for scheduling applications, project management applications, travel planning, and so on.</p>
<p class="indent">Finally, we use a common factory method, <code>of()</code>, to create another date object (representing today’s date), and we use that in conjunction with the very powerful <code>between()</code> method to see how long it’s been since January 1, 2000, Y2K.</p>
<h4 class="h4"><a id="ch06lev2sec9"></a><a id="page_362"></a>Formatting Dates and Times</h4>
<p class="noindentb">Now let’s turn to formatting dates and times using the <code>DateTimeFormatter</code> class, so your calendar objects will look all shiny when you want to include them in your program’s output. For the exam, you should know the following two-step process for creating <code>String</code>s that represent well-formatted calendar objects:</p>
<p class="numlist">1.&nbsp;&nbsp;&nbsp;Use formatters and patterns from the HUGE lists provided in the <code>DateTimeFormatter</code> class to create a <code>DataTimeFormatter</code> object.</p>
<p class="numlist">2.&nbsp;&nbsp;&nbsp;In the <code>LocalDate</code>, <code>LocalDateTime</code>, and <code>LocalTime</code> classes, use the <code>format()</code> method with the <code>DateTimeFormatter</code> object as the argument to create a well-formed <code>String</code>—or use the <code>DateTimeFormatter.format()</code> method with a calendar argument to create a well-formed <code>String</code>. Let’s look at a few examples:</p>
<p class="code-n"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0362-01.jpg" alt="images" width="589" height="370" data-mfp-src="/library/view/oca-java-se/9781260011388/p0362-01.jpg"></p>
<p class="numlist-n">which, when we ran this code, produced the following (your output will vary):</p>
<p class="code-n"><code>Jan 14, 2017<br> Sat Jan 14, 2017 AD<br> 14:17:9 51429958 PM</code></p>
<p class="indent">Some of the pattern codes we used are self-evident (e.g. MMM dd yyyy), and some are fairly arbitrary like "E" for day of week or "k" for military hours. All of the codes can be found in the <code>DateTimeFormatter</code> API.</p>
<p class="indent">That’s enough about calendars; on to arrays!</p>
<h3 class="h3a"><a id="page_363"></a>CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch06lev1sec3"></a>Using Arrays (OCA Objectives 4.1 and 4.2)</h3>
<p class="noindentn"><em>4.1&nbsp;&nbsp;&nbsp;Declare, instantiate, initialize, and use a one-dimensional array.</em></p>
<p class="noindentn"><em>4.2&nbsp;&nbsp;&nbsp;Declare, instantiate, initialize, and use a multi-dimensional array.</em></p>
<p class="indentt">Arrays are objects in Java that store multiple variables of the same type. Arrays can hold either primitives or object references, but the array itself will always be an object on the heap, even if the array is declared to hold primitive elements. In other words, there is no such thing as a primitive array, but you can make an array of primitives. For this objective, you need to know three things:</p>
<p class="bulletxt"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;How to make an array reference variable (declare)</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;How to make an array object (construct)</p>
<p class="bulletxb"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;How to populate the array with elements (initialize)</p>
<p class="noindent">There are several different ways to do each of these, and you need to know about all of them for the exam.</p>
<p class="imagel"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/icon.jpg" alt="Images" width="50" height="35" data-mfp-src="/library/view/oca-java-se/9781260011388/icon.jpg"></p>
<p class="icon"><strong><em>Arrays are efficient, but most of the time you’ll want to use one of the Collection types from java.util (including <code>HashMap, ArrayList,</code> and <code>TreeSet</code>). Collection classes offer more flexible ways to access an object (for insertion, deletion, and so on), and unlike arrays, they can expand or contract dynamically as you add or remove elements (they’re really managed arrays, since they use arrays behind the scenes). There’s a Collection type for a wide range of needs. Do you need a fast sort? A group of objects with no duplicates? A way to access a name/value pair? A linked list? The OCP 8 exam covers collections in more detail.</em></strong></p>
<h4 class="h4"><a id="ch06lev2sec10"></a>Declaring an Array</h4>
<p class="noindent">Arrays are declared by stating the type of element the array will hold, which can be an object or a primitive, followed by square brackets to the left or right of the identifier.</p>
<p class="noindentt"><strong>Declaring an array of primitives:</strong></p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0363-01.jpg" alt="images" width="638" height="54" data-mfp-src="/library/view/oca-java-se/9781260011388/p0363-01.jpg"></p>
<p class="noindentt"><a id="page_364"></a><strong>Declaring an array of object references:</strong></p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0364-01.jpg" alt="images" width="429" height="34" data-mfp-src="/library/view/oca-java-se/9781260011388/p0364-01.jpg"></p>
<p class="indent">When declaring an array reference, you should always put the array brackets immediately after the declared type rather than after the identifier (variable name). That way, anyone reading the code can easily tell that, for example, <code>key</code> is a reference to an <code>int</code> array object and not an <code>int</code> primitive.</p>
<p class="indent">We can also declare multidimensional arrays, which are, in fact, arrays of arrays. This can be done in the following manner:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0364-02.jpg" alt="images" width="446" height="34" data-mfp-src="/library/view/oca-java-se/9781260011388/p0364-02.jpg"></p>
<p class="noindent">The first example is a three-dimensional array (an array of arrays of arrays) and the second is a two-dimensional array. Notice in the second example we have one square bracket before the variable name and one after. This is perfectly legal to the compiler, proving once again that just because it’s legal doesn’t mean it’s right.</p>
<p class="indent">It is never legal to include the size of the array in your declaration. Yes, we know you can do that in some other languages, which is why you might see a question or two in the exam that include code similar to the following:</p>
<p class="coden"><code>int[5] scores; // will NOT compile</code></p>
<p class="noindent">The preceding code won’t make it past the compiler. Remember, the JVM doesn’t allocate space until you actually instantiate the array object. That’s when size matters.</p>
<h4 class="h4"><a id="ch06lev2sec11"></a>Constructing an Array</h4>
<p class="noindent">Constructing an array means creating the array object on the heap (where all objects live)—that is, doing a <code>new</code> on the array type. To create an array object, Java must know how much space to allocate on the heap, so you must specify the size of the array at creation time. The size of the array is the number of elements the array will hold.</p>
<h5 class="h5">Constructing One-Dimensional Arrays</h5>
<p class="noindent">The most straightforward way to construct an array is to use the keyword <code>new</code> followed by the array type, with a bracket specifying how many elements of that <a id="page_365"></a>type the array will hold. The following is an example of constructing an array of type <code>int</code>:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0365-01.jpg" alt="images" width="590" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0365-01.jpg"></p>
<p class="noindent">The preceding code puts one new object on the heap—an array object holding four elements—with each element containing an <code>int</code> with a default value of 0. Think of this code as saying to the compiler, "Create an array object that will hold four <code>int</code>s, and assign it to the reference variable named <code>testScores</code>. Also, go ahead and set each <code>int</code> element to zero. Thanks." (The compiler appreciates good manners.)</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6fig4">Figure 6-4</a> shows the <code>testScores</code> array on the heap, after construction.</p>
<p class="image-f"><a id="ch6fig4"></a><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0365-01.jpg" alt="images" width="1342" height="687" data-mfp-src="/library/view/oca-java-se/9781260011388/f0365-01.jpg"></p>
<p class="figcap"><span class="figs"><strong>FIGURE 6-4</strong></span>&nbsp;&nbsp;&nbsp;A one-dimensional array on the heap</p>
<p class="indent">You can also declare and construct an array in one statement, as follows:</p>
<p class="coden"><code>int[] testScores = new int[4];</code></p>
<p class="noindent">This single statement produces the same result as the two previous statements.</p>
<p class="indent">Arrays of object types can be constructed in the same way:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0365-02.jpg" alt="images" width="617" height="34" data-mfp-src="/library/view/oca-java-se/9781260011388/p0365-02.jpg"></p>
<p class="noindent">Remember that, despite how the code appears, the <code>Thread</code> constructor is not being invoked. We’re not creating a <code>Thread</code> instance, but rather a single <code>Thread</code> array object. After the preceding statement, there are still no actual <code>Thread</code> objects!</p>
<div class="side-exam">
<p class="imaget"><a id="page_366"></a><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>Think carefully about how many objects are on the heap after a code statement or block executes. The exam will expect you to know, for example, that the preceding code produces just one object (the array assigned to the reference variable named <code>threads</code>). The single object referenced by <code>threads</code> holds five <code>Thread</code> reference variables, but no <code>Thread</code> objects have been created or assigned to those references.</em></strong></p>
</div>
<p class="indent">Remember, arrays must always be given a size at the time they are constructed. The JVM needs the size to allocate the appropriate space on the heap for the new array object. It is never legal, for example, to do the following:</p>
<p class="coden"><code>int[] carList = new int[]; // Will not compile; needs a size</code></p>
<p class="noindent">So don’t do it, and if you see it on the test, run screaming toward the nearest answer marked "Compilation fails."</p>
<div class="side-exam">
<p class="imaget"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>You may see the words "construct," "create," and "instantiate" used interchangeably. They all mean, "An object is built on the heap." This also implies that the object’s constructor runs as a result of the construct/create/instantiate code. You can say with certainty, for example, that any code that uses the keyword <code>new</code> will (if it runs successfully) cause the class constructor and all superclass constructors to run.</em></strong></p>
</div>
<p class="indent">In addition to being constructed with <code>new</code>, arrays can be created using a kind of syntax shorthand that creates the array while simultaneously initializing the array elements to values supplied in code (as opposed to default values). We’ll look at that in the next section. For now, understand that because of these syntax shortcuts, objects can still be created even without you ever using or seeing the keyword <code>new</code>.</p>
<h5 class="h5">Constructing Multidimensional Arrays</h5>
<p class="noindent">Multidimensional arrays, remember, are simply arrays of arrays. So a two-dimensional array of type <code>int</code> is really an object of type <code>int</code> array (<code>int []</code>), with each element in that array holding a reference to another <code>int</code> array. The second dimension holds the actual <code>int</code> primitives.</p>
<p class="indent"><a id="page_367"></a>The following code declares and constructs a two-dimensional array of type <code>int</code>:</p>
<p class="coden"><code>int[][] myArray = new int[3][];</code></p>
<p class="noindent">Notice that only the first brackets are given a size. That’s acceptable in Java because the JVM needs to know only the size of the object assigned to the variable <code>myArray</code>.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6fig5">Figure 6-5</a> shows how a two-dimensional <code>int</code> array works on the heap.</p>
<p class="image-f"><a id="ch6fig5"></a><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0367-01.jpg" alt="images" width="672" height="687" data-mfp-src="/library/view/oca-java-se/9781260011388/f0367-01.jpg"></p>
<p class="figcap"><span class="figs"><strong>FIGURE 6-5</strong></span>&nbsp;&nbsp;&nbsp;A two-dimensional array on the heap</p>
<h4 class="h4"><a id="ch06lev2sec12"></a><a id="page_368"></a>Initializing an Array</h4>
<p class="noindent">Initializing an array means putting things into it. The "things" in the array are the array’s elements, and they’re either primitive values (<code>2</code>, <code>x</code>, <code>false</code>, and so on) or objects referred to by the reference variables in the array. If you have an array of objects (as opposed to primitives), the array doesn’t actually hold the objects—just as any other nonprimitive variable never actually holds the object—but instead holds a <em>reference</em> to the object. But we talk about arrays as, for example, "an array of five strings," even though what we really mean is "an array of five references to <code>String</code> objects." Then the big question becomes whether those references are actually pointing (oops, this is Java, we mean referring) to real <code>String</code> objects or are simply <code>null</code>. <strong>Remember, a reference that has not had an object assigned to it is a <code>null</code> reference. And if you actually try to use that <code>null</code> reference by, say, applying the dot operator to invoke a method on it, you’ll get the infamous <code>NullPointerException</code>.</strong></p>
<p class="indent">The individual elements in the array can be accessed with an index number. The index number always begins with zero (0), so for an array of ten objects, the index numbers will run from 0 through 9. Suppose we create an array of three <code>Animal</code>s as follows:</p>
<p class="coden"><code>Animal [] pets = new Animal[3];</code></p>
<p class="indent">We have one array object on the heap, with three <code>null</code> references of type <code>Animal</code>, but we don’t have any <code>Animal</code> objects. The next step is to create some <code>Animal</code> objects and assign them to index positions in the array referenced by <code>pets</code>:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0368-01.jpg" alt="images" width="217" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0368-01.jpg"></p>
<p class="noindent">This code puts three new <code>Animal</code> objects on the heap and assigns them to the three index positions (elements) in the <code>pets</code> array.</p>
<div class="side-exam">
<p class="imaget"><a id="page_369"></a><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>Look for code that tries to access an out-of-range array index. For example, if an array has three elements, trying to access the element <code>[3]</code> will raise an <code>ArrayIndexOutOfBoundsException,</code> because in an array of three elements, the legal index values are 0, 1, and 2. You also might see an attempt to use a negative number as an array index. The following are examples of legal and illegal array access attempts. Be sure to recognize that these cause runtime exceptions and not compiler errors!</em></strong></p>
<p class="indent"><strong><em>Nearly all the exam questions list both runtime exception and compiler error as possible answers:</em></strong></p>
<p class="codea"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0369-01.jpg" alt="images" width="636" height="133" data-mfp-src="/library/view/oca-java-se/9781260011388/p0369-01.jpg"></p>
<p class="noindent"><strong><em>numberThese can be hard to spot in a complex loop, but that’s where you’re most likely to see array index problems in exam questions.</em></strong></p>
</div>
<p class="indent">A two-dimensional array (an array of arrays) can be initialized as follows:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0369-02.jpg" alt="images" width="608" height="252" data-mfp-src="/library/view/oca-java-se/9781260011388/p0369-02.jpg"></p>
<h5 class="h5"><a id="page_370"></a>Initializing Elements in a Loop</h5>
<p class="noindent">Array objects have a single public variable, <code>length</code>, that gives you the number of elements in the array. The last index value, then, is always one less than the <code>length</code>. For example, if the <code>length</code> of an array is 4, the index values are from 0 through 3. Often, you’ll see array elements initialized in a loop, as follows:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0370-01.jpg" alt="images" width="629" height="75" data-mfp-src="/library/view/oca-java-se/9781260011388/p0370-01.jpg"></p>
<p class="indent">The <code>length</code> variable tells us how many elements the array holds, but it does not tell us whether those elements have been initialized.</p>
<h5 class="h5">Declaring, Constructing, and Initializing on One Line</h5>
<p class="noindent">You can use two different array-specific syntax shortcuts both to initialize (put explicit values into an array’s elements) and construct (instantiate the array object itself) in a single statement. The first is used to declare, create, and initialize in one statement, as follows:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0370-02.jpg" alt="images" width="234" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0370-02.jpg"></p>
<p class="noindent">Line 2 in the preceding code does four things:</p>
<p class="bulletxt"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Declares an <code>int</code> array reference variable named <code>dots</code>.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Creates an <code>int</code> array with a length of three (three elements).</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Populates the array’s elements with the values 6, 9, and 8.</p>
<p class="bulletxb"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Assigns the new array object to the reference variable <code>dots</code>.</p>
<p class="indent">The size (length of the array) is determined by the number of comma-separated items between the curly braces. The code is functionally equivalent to the following longer code:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0370-03.jpg" alt="images" width="168" height="112" data-mfp-src="/library/view/oca-java-se/9781260011388/p0370-03.jpg"></p>
<p class="indent"><a id="page_371"></a>This begs the question, "Why would anyone use the longer way?" One reason comes to mind. You might not know—at the time you create the array—the values that will be assigned to the array’s elements.</p>
<p class="indent">With object references rather than primitives, it works exactly the same way:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0371-01.jpg" alt="images" width="559" height="34" data-mfp-src="/library/view/oca-java-se/9781260011388/p0371-01.jpg"></p>
<p class="noindent">The preceding code creates one <code>Dog</code> array, referenced by the variable <code>myDogs</code>, with a length of three elements. It assigns a previously created <code>Dog</code> object (assigned to the reference variable <code>puppy</code>) to the first element in the array. It also creates two new <code>Dog</code> objects (<code>Clover</code> and <code>Aiko</code>) and adds them to the last two <code>Dog</code> reference variable elements in the <code>myDogs</code> array. This array shortcut alone (combined with the stimulating prose) is worth the price of this book. <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6fig6">Figure 6-6</a> shows the result.</p>
<p class="image-f"><a id="ch6fig6"></a><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0371-01.jpg" alt="images" width="784" height="687" data-mfp-src="/library/view/oca-java-se/9781260011388/f0371-01.jpg"></p>
<p class="figcap"><span class="figs"><strong>FIGURE 6-6</strong></span>&nbsp;&nbsp;&nbsp;Declaring, constructing, and initializing an array of objects</p>
<p class="indent"><a id="page_372"></a>You can also use the shortcut syntax with multidimensional arrays, as follows:</p>
<p class="coden"><code>int[][] scores = {{5,2,4,7}, {9,2}, {3,4}};</code></p>
<p class="noindent">This code creates a total of four objects on the heap. First, an array of <code>int</code> arrays is constructed (the object that will be assigned to the <code>scores</code> reference variable). The <code>scores</code> array has a length of three, derived from the number of comma-separated items between the outer curly braces. Each of the three elements in the <code>scores</code> array is a reference variable to an <code>int</code> array, so the three <code>int</code> arrays are constructed and assigned to the three elements in the <code>scores</code> array.</p>
<p class="indent">The size of each of the three <code>int</code> arrays is derived from the number of items within the corresponding inner curly braces. For example, the first array has a length of four, the second array has a length of two, and the third array has a length of two. So far, we have four objects: one array of <code>int</code> arrays (each element is a reference to an <code>int</code> array), and three <code>int</code> arrays (each element in the three <code>int</code> arrays is an <code>int</code> value). Finally, the three <code>int</code> arrays are initialized with the actual <code>int</code> values within the inner curly braces. Thus, the first <code>int</code> array contains the values <code>5,2,4,7</code>. The following code shows the values of some of the elements in this two-dimensional array:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0372-01.jpg" alt="images" width="332" height="93" data-mfp-src="/library/view/oca-java-se/9781260011388/p0372-01.jpg"></p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6fig7">Figure 6-7</a> shows the result of declaring, constructing, and initializing a two-dimensional array in one statement.</p>
<p class="image-f"><a id="ch6fig7"></a><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0373-01.jpg" alt="images" width="733" height="687" data-mfp-src="/library/view/oca-java-se/9781260011388/f0373-01.jpg"></p>
<p class="figcap"><span class="figs"><strong>FIGURE 6-7</strong></span>&nbsp;&nbsp;&nbsp;Declaring, constructing, and initializing a two-dimensional array</p>
<h5 class="h5">Constructing and Initializing an Anonymous Array</h5>
<p class="noindent">The second shortcut is called "anonymous array creation" and can be used to construct and initialize an array and then assign the array to a previously declared array reference variable:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0372-02.jpg" alt="images" width="292" height="34" data-mfp-src="/library/view/oca-java-se/9781260011388/p0372-02.jpg"></p>
<p class="indent">The preceding code creates a new <code>int</code> array with three elements; initializes the three elements with the values <code>4</code>, <code>7</code>, and <code>2</code>; and then assigns the new array to the previously declared <code>int</code> array reference variable <code>testScores</code>. <a id="page_373"></a>We call this anonymous array creation because with this syntax, you don’t even need to assign the <code>new</code> array to anything. Maybe you’re wondering, "What good is an array if you don’t assign it to a reference variable?" You can use it to create a just-in-time array to use, for example, as an argument to a method that takes an array parameter.</p>
<p class="indent"><a id="page_374"></a>The following code demonstrates a just-in-time array argument:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0374-01.jpg" alt="images" width="582" height="115" data-mfp-src="/library/view/oca-java-se/9781260011388/p0374-01.jpg"></p>
<div class="side-exam">
<p class="imaget"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>Remember that you do not specify a size when using anonymous array creation syntax. The size is derived from the number of items (comma-separated) between the curly braces. Pay very close attention to the array syntax used in exam questions (and there will be a lot of them). You might see syntax such as this:</em></strong></p>
<p class="codea"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0374-02.jpg" alt="images" width="464" height="35" data-mfp-src="/library/view/oca-java-se/9781260011388/p0374-02.jpg"></p>
</div>
<h5 class="h5">Legal Array Element Assignments</h5>
<p class="noindent">What can you put in a particular array? For the exam, you need to know that arrays can have only one declared type (<code>int[]</code>, <code>Dog[]</code>, <code>String[]</code>, and so on), but that doesn’t necessarily mean that only objects or primitives of the declared type can be assigned to the array elements. And what about the array reference itself? What kind of array object can be assigned to a particular array reference? For the exam, you’ll need to know the answers to all of these questions. And, as if by magic, we’re actually covering those very same topics in the following sections. Pay attention.</p>
<p class="noindentt"><strong>Arrays of Primitives</strong>&nbsp;&nbsp;&nbsp;Primitive arrays can accept any value that can be promoted implicitly to the declared type of the array. For example, an <code>int</code> array can hold any value that can fit into a 32-bit <code>int</code> variable. Thus, the following code is legal:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0374-03.jpg" alt="images" width="495" height="133" data-mfp-src="/library/view/oca-java-se/9781260011388/p0374-03.jpg"></p>
<p class="noindentt"><a id="page_375"></a><strong>Arrays of Object References</strong>&nbsp;&nbsp;&nbsp;If the declared array type is a class, you can put objects of any subclass of the declared type into the array. For example, if <code>Subaru</code> is a subclass of <code>Car</code>, you can put both <code>Subaru</code> objects and <code>Car</code> objects into an array of type <code>Car</code> as follows:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0375-01.jpg" alt="images" width="540" height="95" data-mfp-src="/library/view/oca-java-se/9781260011388/p0375-01.jpg"></p>
<p class="indent">It helps to remember that the elements in a <code>Car</code> array are nothing more than <code>Car</code> reference variables. So anything that can be assigned to a <code>Car</code> reference variable can be legally assigned to a <code>Car</code> array element.</p>
<p class="indent">If the array is declared as an interface type, the array elements can refer to any instance of any class that implements the declared interface. The following code demonstrates the use of an interface as an array type:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0375-02.jpg" alt="images" width="610" height="472" data-mfp-src="/library/view/oca-java-se/9781260011388/p0375-02.jpg"></p>
<p class="indent">The bottom line is this: any object that passes the IS-A test for the declared array type can be assigned to an element of that array.</p>
<p class="noindentt"><a id="page_376"></a><strong>Array Reference Assignments for One-Dimensional Arrays</strong>&nbsp;&nbsp;&nbsp;For the exam, you need to recognize legal and illegal assignments for array reference variables. We’re not talking about references in the array (in other words, array elements), but rather references to the array object. For example, if you declare an <code>int</code> array, the reference variable you declared can be reassigned to any <code>int</code> array (of any size), but the variable cannot be reassigned to anything that is not an <code>int</code> array, including an <code>int</code> value. Remember, all arrays are objects, so an <code>int</code> array reference cannot refer to an <code>int</code> primitive. The following code demonstrates legal and illegal assignments for primitive arrays:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0376-01.jpg" alt="images" width="562" height="93" data-mfp-src="/library/view/oca-java-se/9781260011388/p0376-01.jpg"></p>
<p class="indent">It’s tempting to assume that because a variable of type <code>byte</code>, <code>short</code>, or <code>char</code> can be explicitly promoted and assigned to an <code>int</code>, an array of any of those types could be assigned to an <code>int</code> array. You can’t do that in Java, but it would be just like those cruel, heartless (but otherwise attractive) exam developers to put tricky array assignment questions in the exam.</p>
<p class="indent">Arrays that hold object references, as opposed to primitives, aren’t as restrictive. Just as you can put a <code>Honda</code> object in a <code>Car</code> array (because <code>Honda</code> extends <code>Car</code>), you can assign an array of type <code>Honda</code> to a <code>Car</code> array reference variable as follows:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0376-02.jpg" alt="images" width="524" height="93" data-mfp-src="/library/view/oca-java-se/9781260011388/p0376-02.jpg"></p>
<p class="indent">Apply the IS-A test to help sort the legal from the illegal. Honda IS-A Car, so a <code>Honda</code> array can be assigned to a <code>Car</code> array. Beer IS-A Car is not true; <code>Beer</code> does not extend <code>Car</code> (plus it doesn’t make sense, unless you’ve already had too much of it).</p>
<p class="indent">The rules for array assignment apply to interfaces as well as classes. An array declared as an interface type can reference an array of any type that implements the interface. Remember, any object from a class implementing a particular interface will pass the IS-A (<code>instanceof</code>) test for that interface. For example, if <code>Box</code> implements <code>Foldable</code>, the following is legal:</p>
<p class="coden"><a id="page_377"></a><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0377-01.jpg" alt="images" width="495" height="73" data-mfp-src="/library/view/oca-java-se/9781260011388/p0377-01.jpg"></p>
<div class="side-exam">
<p class="imaget"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>You cannot reverse the legal assignments. A <code>Car</code> array cannot be assigned to a <code>Honda</code> array. A <code>Car</code> is not necessarily a <code>Honda,</code> so if you’ve declared a <code>Honda</code> array, it might blow up if you assigned a <code>Car</code> array to the <code>Honda</code> reference variable. Think about it: a <code>Car</code> array could hold a reference to a <code>Ferrari,</code> so someone who thinks they have an array of <code>Hondas</code> could suddenly find themselves with a <code>Ferrari.</code> Remember that the IS-A test can be checked in code using the <code>instanceof</code> operator.</em></strong></p>
</div>
<p class="noindentt"><strong>Array Reference Assignments for Multidimensional Arrays</strong>&nbsp;&nbsp;&nbsp;When you assign an array to a previously declared array reference, the array you’re assigning must be in the same dimension as the reference you’re assigning it to. For example, a two-dimensional array of <code>int</code> arrays cannot be assigned to a regular <code>int</code> array reference, as follows:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0377-02.jpg" alt="images" width="534" height="113" data-mfp-src="/library/view/oca-java-se/9781260011388/p0377-02.jpg"></p>
<p class="indent">Pay particular attention to array assignments using different dimensions. You might, for example, be asked if it’s legal to assign an <code>int</code> array to the first element in an array of <code>int</code> arrays, as follows:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0377-03.jpg" alt="images" width="609" height="93" data-mfp-src="/library/view/oca-java-se/9781260011388/p0377-03.jpg"></p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6fig8">Figure 6-8</a> shows an example of legal and illegal assignments for references to an array.</p>
<p class="image-f"><a id="ch6fig8"></a><a id="page_378"></a><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0378-01.jpg" alt="images" width="696" height="687" data-mfp-src="/library/view/oca-java-se/9781260011388/f0378-01.jpg"></p>
<p class="figcap"><span class="figs"><strong>FIGURE 6-8</strong></span>&nbsp;&nbsp;&nbsp;Legal and illegal array assignments</p>
<h3 class="h3a"><a id="page_379"></a>CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch06lev1sec4"></a>Using ArrayLists and Wrappers (OCA Objectives 9.4 and 2.5)</h3>
<p class="noindentn"><em>9.3&nbsp;&nbsp;&nbsp;Declare and use an ArrayList of a given type.</em></p>
<p class="noindentn"><em>2.5&nbsp;&nbsp;&nbsp;Develop code that uses wrapper classes such as Boolean, Double, and Integer.</em></p>
<p class="indentt"><em>Data structures are a part of almost every application you’ll ever work on. The Java API provides an extensive range of classes that support common data structures such as</em> <code>List</code>s, <code>Set</code>s, <code>Map</code>s, <em>and</em> <code>Queue</code>s. For the purpose of the OCA exam, you should remember that the classes that support these common data structures are a part of what is known as "The Collection API" (one of its many aliases). (The OCP exam covers the most common implementations of all these structures.)</p>
<h4 class="h4"><a id="ch06lev2sec13"></a>When to Use ArrayLists</h4>
<p class="noindent">We’ve already talked about arrays. Arrays seem useful and pretty darned flexible. So why do we need more functionality than arrays provide? Consider these two situations:</p>
<p class="bulletxt"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;You need to be able to increase and decrease the size of your list of things.</p>
<p class="bulletxb"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The order of things in your list is important and might change.</p>
<p class="noindent">Both situations can be handled with arrays, but it’s not easy….</p>
<p class="indent">Suppose you want to plan a vacation to Europe. You have several destinations in mind (Paris, Oslo, Rome), but you’re not yet sure in what order you want to visit these cities, and as your planning progresses, you might want to add or subtract cities from your list. Let’s say your first idea is to travel from north to south, so your list looks like this:</p>
<p class="noindent">Oslo, Paris, Rome.</p>
<p class="indent">If we were using an array, we could start with this:</p>
<p class="coden"><code>String[] cities = {"Oslo", "Paris", "Rome"};</code></p>
<p class="indent"><a id="page_380"></a>But now imagine that you remember that you REALLY want to go to London, too! You’ve got two problems:</p>
<p class="bulletxt"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Your cities array is already full.</p>
<p class="bulletxb"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;If you’re going from north to south, you need to insert London before Paris.</p>
<p class="indent">Of course, you can figure out a way to do this. Maybe you create a second array, and you copy cities from one array to the other, and at the correct moment you add London to the second array. Doable, but difficult.</p>
<p class="indent">Now let’s see how you could do the same thing with an <code>ArrayList</code>:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0380-01.jpg" alt="images" width="617" height="258" data-mfp-src="/library/view/oca-java-se/9781260011388/p0380-01.jpg"></p>
<p class="indent">The output will be something like this:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0380-02.jpg" alt="images" width="249" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0380-02.jpg"></p>
<p class="indent">By reviewing the code, we can learn some important facts about <code>ArrayList</code>s:</p>
<p class="bulletxt"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The <code>ArrayList</code> class is in the <code>java.util</code> package.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Similar to arrays, when you build an <code>ArrayList</code>, you have to declare what kind of objects it can contain. In this case, we’re building an <code>ArrayList</code> of <code>String</code> objects. (We’ll look at the line of code that creates the <code>ArrayList</code> in a lot more detail in a minute.)</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code>ArrayList</code> implements the List interface.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;We work with the <code>ArrayList</code> through methods. In this case we used a couple of versions of <code>add()</code>; we used <code>indexOf()</code>; and, indirectly, we used <code>toString()</code> to display the <code>ArrayList</code>’s contents. (More on <code>toString()</code> in a minute.)</p>
<p class="bulletx"><a id="page_381"></a><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Like arrays, indexes for <code>ArrayList</code>s are zero-based.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;We didn’t declare how big the <code>ArrayList</code> was when we built it.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;We were able to add a new element to the <code>ArrayList</code> on the fly.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;We were able to add the new element in the middle of the list.</p>
<p class="bulletxb"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The <code>ArrayList</code> maintained its order.</p>
<p class="indent">As promised, we need to look at the following line of code more closely:</p>
<p class="coden"><code>List&lt;String&gt; c = new ArrayList&lt;String&gt;();</code></p>
<p class="noindent">First off, we see that this is a polymorphic declaration. As we said earlier, <code>ArrayList</code> implements the <code>List</code> interface (also in <code>java.util</code>). If you plan to take the OCP 8 exam after you’ve aced the OCA 8, you’ll learn a lot more about why we might want to do a polymorphic declaration. For now, imagine that someday you might want to create a <code>List</code> of your <code>ArrayList</code>s.</p>
<p class="indent">Next, we have this weird-looking syntax with the <code>&lt;</code> and <code>&gt;</code> characters. This syntax was added to the language in Java 5, and it has to do with "generics." Generics aren’t really included in the OCA exam, so we don’t want to spend a lot of time on them here, but what’s important to know is that this is how you tell the compiler and the JVM that for this particular <code>ArrayList</code> you want only <code>String</code>s to be allowed. What this means is if the compiler can tell that you’re trying to add a "not-a-<code>String</code>" object to this <code>ArrayList</code>, your code won’t compile. This is a good thing!</p>
<p class="indent">Also as promised, let’s look at THIS line of code:</p>
<p class="coden"><code>System.out.println(c);</code></p>
<p class="noindent">Remember that all classes ultimately inherit from class <code>Object</code>. Class <code>Object</code> contains a method called <code>toString()</code>. Again, <code>toString()</code> isn’t "officially" on the OCA exam (of course, it IS in the OCP exam!), but you need to understand it a bit for now. When you pass an object reference to either <code>System.out.print()</code> or <code>System.out.println()</code>, you’re telling them to invoke that object’s <code>toString()</code> method. (Whenever you make a new class, you can optionally override the <code>toString()</code> method your class inherited from <code>Object</code> to show useful information about your class’s objects.) The API developers were nice enough to override <code>ArrayList</code>’s <code>toString()</code> method for you to show the contents of the <code>ArrayList</code>, as you saw in the program’s output. Hooray!</p>
<h5 class="h5"><a id="page_382"></a>ArrayLists and Duplicates</h5>
<p class="noindent">As you’re planning your trip to Europe, you realize that halfway through your stay in Rome, there’s going to be a fantastic music festival in Naples! Naples is just down the coast from Rome! You’ve got to add that side trip to your itinerary. The question is, can an <code>ArrayList</code> have duplicate entries? Is it legal to say this:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0382-01.jpg" alt="Images" width="149" height="52" data-mfp-src="/library/view/oca-java-se/9781260011388/p0382-01.jpg"></p>
<p class="indent">And the short answer is: <strong>Yes, ArrayLists can have duplicates</strong>. Now if you stop and think about it, the notion of "duplicate Java objects" is actually a bit tricky. Relax, because you won’t have to get into that trickiness until you study for the OCP 8.</p>
<div class="side-exam">
<p class="imaget"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>Technically speaking, <code>ArrayLists</code> hold only object references, not actual objects and not primitives. If you see code like this,</em></strong></p>
<p class="codea"><code>myArrayList.add(7);</code></p>
<p class="noindent"><strong><em>what’s really happening is the <code>int</code> is being autoboxed (converted) into an <code>Integer</code> object and then added to the <code>ArrayList</code>. We’ll talk more about autoboxing in a few pages.</em></strong></p>
</div>
<h4 class="h4"><a id="ch06lev2sec14"></a>ArrayList Methods in Action</h4>
<p class="noindent">Let’s look at another piece of code that shows off most of the <code>ArrayList</code> methods you need to know for the exam:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0382-02.jpg" alt="images" width="415" height="201" data-mfp-src="/library/view/oca-java-se/9781260011388/p0382-02.jpg"></p>
<p class="coden"><a id="page_383"></a><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0383-01.jpg" alt="images" width="613" height="258" data-mfp-src="/library/view/oca-java-se/9781260011388/p0383-01.jpg"></p>
<p class="noindent">which should produce something like this:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0383-02.jpg" alt="images" width="224" height="112" data-mfp-src="/library/view/oca-java-se/9781260011388/p0383-02.jpg"></p>
<p class="indent">A couple of quick notes about this code: First off, notice that <code>contains()</code> returns a boolean. This makes <code>contains()</code> great to use in "if" tests. Second, notice that <code>ArrayList</code> has a <code>size()</code> method. It’s important to remember that arrays have a length attribute and <code>ArrayLists</code> have a <code>size()</code> method.</p>
<h4 class="h4"><a id="ch06lev2sec15"></a>Important Methods in the ArrayList Class</h4>
<p class="noindent">The following methods are some of the more commonly used methods in the <code>ArrayList</code> class and also those that you’re most likely to encounter on the exam:</p>
<p class="bulletxt"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong><code>add(element)</code></strong> Adds this element to the <strong>end</strong> of the <code>ArrayList</code></p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong><code>add(index, element)</code></strong> Adds this element at the index point and shifts the remaining elements back (for example, what was at <code>index</code> is now at <code>index + 1</code>)</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong><code>clear()</code></strong> Removes all the elements from the <code>ArrayList</code></p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong><code>boolean contains(element)</code></strong> Returns whether the <code>element</code> is in the list</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong><code>Object get(index)</code></strong> Returns the <code>Object</code> located at <code>index</code></p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong><code>int indexOf(Object)</code></strong> Returns the (<code>int</code>) location of the element or <code>-1</code> if the <code>Object</code> is not found</p>
<p class="bulletx"><a id="page_384"></a><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong><code>remove(index)</code></strong> Removes the element at that <code>index</code> and shifts later elements toward the beginning one space</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong><code>remove(Object)</code></strong> Removes the <strong>first</strong> occurrence of the <code>Object</code> and shifts later elements toward the beginning one space</p>
<p class="bulletxb"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong><code>int size()</code></strong> Returns the number of elements in the <code>ArrayList</code></p>
<p class="indent">To summarize, the OCA 8 exam tests only for very basic knowledge of <code>ArrayList</code>s. If you go on to take the OCP 8 exam, you’ll learn a lot more about <code>ArrayList</code>s and other common collections-oriented classes.</p>
<h4 class="h4"><a id="ch06lev2sec16"></a>Autoboxing with ArrayLists</h4>
<p class="noindent">In general, collections like <code>ArrayList</code> can hold objects but not primitives. Prior to Java 5, a common use for the so-called wrapper classes (e.g., <code>Integer</code>, <code>Float</code>, <code>Boolean</code>, and so on) was to provide a way to get primitives into and out of collections. Prior to Java 5, you had to "wrap" a primitive manually before you could put it into a collection. As of Java 5, primitives still have to be wrapped before they can be added to ArrayLists, but autoboxing takes care of it for you.</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0384-01.jpg" alt="images" width="667" height="34" data-mfp-src="/library/view/oca-java-se/9781260011388/p0384-01.jpg"></p>
<p class="noindent">In the previous example, we create an instance of class <code>Integer</code> with a value of <code>42</code>. We’ve created an entire object to "wrap around" a primitive value. As of Java 5, we can say:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0384-02.jpg" alt="images" width="550" height="14" data-mfp-src="/library/view/oca-java-se/9781260011388/p0384-02.jpg"></p>
<p class="noindent">In this last example, we are still adding an <code>Integer</code> object to <code>myInts</code> (not an <code>int</code> primitive); it’s just that autoboxing handles the wrapping for us. There are some sneaky implications when we need to use wrapper objects; let’s take a closer look…</p>
<p class="indent">In the old, pre–Java 5 days, if you wanted to make a wrapper, unwrap it, use it, and then rewrap it, you might do something like this:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0384-03.jpg" alt="images" width="428" height="94" data-mfp-src="/library/view/oca-java-se/9781260011388/p0384-03.jpg"></p>
<p class="indent"><a id="page_385"></a>Now you can say:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0385-01.jpg" alt="images" width="569" height="74" data-mfp-src="/library/view/oca-java-se/9781260011388/p0385-01.jpg"></p>
<p class="indent">Both examples produce the following output:</p>
<p class="coden"><code>y = 568</code></p>
<p class="indent">And yes, you read that correctly. The code appears to be using the postincrement operator on an object reference variable! But it’s simply a convenience. Behind the scenes, the compiler does the unboxing and reassignment for you. Earlier, we mentioned that wrapper objects are immutable… this example appears to contradict that statement. It sure looks like <code>y</code>’s value changed from <code>567</code> to <code>568</code>. What actually happened, however, is that a second wrapper object was created and its value was set to <code>568</code>. If only we could access that first wrapper object, we could prove it….</p>
<p class="indent">Let’s try this:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0385-02.jpg" alt="images" width="572" height="213" data-mfp-src="/library/view/oca-java-se/9781260011388/p0385-02.jpg"></p>
<p class="noindent">which produces the output:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0385-03.jpg" alt="images" width="84" height="49" data-mfp-src="/library/view/oca-java-se/9781260011388/p0385-03.jpg"></p>
<p class="indent">So, under the covers, when the compiler got to the line <code>y++;</code> it had to substitute something like this:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0385-04.jpg" alt="images" width="428" height="54" data-mfp-src="/library/view/oca-java-se/9781260011388/p0385-04.jpg"></p>
<p class="noindent">Just as we suspected, there’s gotta be a call to <code>new</code> in there somewhere.</p>
<div class="side-exam">
<p class="imaget"><a id="page_386"></a><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>All the wrapper classes except <code>Character</code> provide two constructors: one takes a primitive of the type being constructed, and the other takes a <code>String</code> representation of the type being constructed. For example,</em></strong></p>
<p class="codea"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0386-01.jpg" alt="images" width="291" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0386-01.jpg"></p>
<p class="noindent"><strong><em>are both valid ways to construct a new <code>Integer</code> object (that "wraps" the value 42).</em></strong></p>
</div>
<h5 class="h5">Boxing, ==, and equals()</h5>
<p class="noindent">We just used <code>==</code> to do a little exploration of wrappers. Let’s take a more thorough look at how wrappers work with <code>==</code>, <code>!=</code>, and <code>equals()</code>. The API developers decided that for all the wrapper classes, two objects are equal if they are of the same type and have the same value. It shouldn’t be surprising that</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0386-02.jpg" alt="images" width="559" height="76" data-mfp-src="/library/view/oca-java-se/9781260011388/p0386-02.jpg"></p>
<p class="noindent">produces the output</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0386-02a.jpg" alt="images" width="173" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0386-02a.jpg"></p>
<p class="indent">It’s just two wrapper objects happen to have the same value. Because they have the same <code>int</code> value, the <code>equals()</code> method considers them to be "meaningfully equivalent" and, therefore, returns <code>true</code>. How about this one?</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0386-03.jpg" alt="images" width="559" height="73" data-mfp-src="/library/view/oca-java-se/9781260011388/p0386-03.jpg"></p>
<p class="noindent">This example produces the output:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0386-03a.jpg" alt="images" width="173" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0386-03a.jpg"></p>
<p class="indent"><a id="page_387"></a>Yikes! The <code>equals()</code> method seems to be working, but what happened with <code>==</code> and <code>!=</code>? Why is <code>!=</code> telling us that <code>i1</code> and <code>i2</code> are different objects, when <code>==</code> is saying that <code>i3</code> and <code>i4</code> are the same object? In order to save memory, two instances of the following wrapper objects (created through boxing) will always be <code>==</code> when their primitive values are the same:</p>
<p class="bulletxt"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code>Boolean</code></p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code>Byte</code></p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code>Character</code> from <code>\u0000</code> to <code>\u007f</code> (<code>7f</code> is <code>127</code> in decimal)</p>
<p class="bulletxb"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code>Short</code> and <code>Integer</code> from <code>–128</code> to <code>127</code></p>
<p class="indent"><strong>When <code>==</code> is used to compare a primitive to a wrapper, the wrapper will be unwrapped and the comparison will be primitive to primitive.</strong></p>
<h5 class="h5">Where Boxing Can Be Used</h5>
<p class="noindent">As we discussed earlier, it’s common to use wrappers in conjunction with collections. Any time you want your collection to hold objects and primitives, you’ll want to use wrappers to make those primitives collection-compatible. The general rule is that boxing and unboxing work wherever you can normally use a primitive or a wrapped object. The following code demonstrates some legal ways to use boxing:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0387-01.jpg" alt="images" width="600" height="274" data-mfp-src="/library/view/oca-java-se/9781260011388/p0387-01.jpg"></p>
<div class="side-exam">
<p class="imaget"><a id="page_388"></a><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>Remember, wrapper reference variables can be null. That means you have to watch out for code that appears to be doing safe primitive operations but that could throw a <code>NullPointerException:</code></em></strong></p>
<p class="codea"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0388-01.jpg" alt="images" width="407" height="175" data-mfp-src="/library/view/oca-java-se/9781260011388/p0388-01.jpg"></p>
<p class="noindent"><strong><em>This code compiles fine, but the JVM throws a <code>NullPointerException</code> when it attempts to invoke <code>doStuff(x)</code> because <code>x</code> doesn’t refer to an <code>Integer</code> object, so there’s no value to unbox.</em></strong></p>
</div>
<h4 class="h4"><a id="ch06lev2sec17"></a>The Java 7 "Diamond" Syntax</h4>
<p class="noindent">Earlier in the book, we discussed several small additions/improvements to the language that were added under the name "Project Coin." The last Project Coin improvement we’ll discuss is the "diamond syntax." We’ve already seen several examples of declaring type-safe <code>ArrayList</code>s like this:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0388-02.jpg" alt="images" width="474" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0388-02.jpg"></p>
<p class="noindent">Notice that the type parameters are duplicated in these declarations. As of Java 7, these declarations could be simplified to:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0388-03.jpg" alt="images" width="417" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0388-03.jpg"></p>
<p class="noindent">Notice that in the simpler Java 7 declarations, the right side of the declaration included the two characters "<code>&lt;&gt;</code>," which together make a diamond shape—doh!</p>
<p class="indent"><a id="page_389"></a>You cannot swap these; for example, the following declaration is NOT legal:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0389-01.jpg" alt="images" width="643" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/p0389-01.jpg"></p>
<p class="noindent">For the purposes of the exam, that’s all you’ll need to know about the diamond operator. For the remainder of the book, we’ll use the pre-diamond syntax and the Java 7 diamond syntax somewhat randomly—just like the real world!</p>
<h3 class="h3a">CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch06lev1sec5"></a>Advanced Encapsulation (OCA Objective 6.5)</h3>
<p class="noindentn"><em>6.5&nbsp;&nbsp;&nbsp;Apply encapsulation principles to a class.</em></p>
<h4 class="h4"><a id="ch06lev2sec18"></a>Encapsulation for Reference Variables</h4>
<p class="noindent">In <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html">Chapter 2</a> we began our discussion of the object-oriented concept of encapsulation. At that point, we limited our discussion to protecting a class’s primitive fields and (immutable) <code>String</code> fields. Now that you’ve learned more about what it means to "pass-by-copy" and we’ve looked at nonprimitive ways of handling data such as arrays, <code>StringBuilder</code>s, and <code>ArrayList</code>s, it’s time to take a closer look at encapsulation.</p>
<p class="indent">Let’s say we have some special data whose value we’re saving in a <code>StringBuilder</code>. We’re happy to share the value with other programmers, but we don’t want them to change the value:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0389-02.jpg" alt="images" width="634" height="259" data-mfp-src="/library/view/oca-java-se/9781260011388/p0389-02.jpg"></p>
<p class="indent">When we run the code, we get this:</p>
<p class="coden"><code>bobfred</code></p>
<p class="noindent"><a id="page_390"></a>Uh oh! It looks like we practiced good encapsulation techniques by making our field private and providing a "getter" method, but based on the output, it’s clear that we didn’t do a very good job of protecting the data in the <code>Special</code> class. Can you figure out why? Take a minute….</p>
<p class="indent">Okay—just to verify your answer—when we invoke <code>getName()</code>, we do, in fact, return a copy, just like Java always does. But we’re not returning a copy of the <code>StringBuilder</code> object; we’re returning a copy of the reference variable that points to (I know) the one and only <code>StringBuilder</code> object we ever built. So at the point that <code>getName()</code> returns, we have one <code>StringBuilder</code> object and two reference variables pointing to it (<code>s</code> and <code>s2</code>).</p>
<p class="indent">For the purpose of the OCA exam, the key point is this: When encapsulating a mutable object like a <code>StringBuilder</code>, or an array, or an <code>ArrayList</code>, if you want to let outside classes have a copy of the object, you must actually copy the object and return a reference variable to the object that is a copy. If all you do is return a copy of the original object’s reference variable, you <strong>DO NOT</strong> have encapsulation.</p>
<h3 class="h3a">CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch06lev1sec6"></a>Using Simple Lambdas (OCA Objective 9.5)</h3>
<p class="noindentn"><em>9.5&nbsp;&nbsp;&nbsp;Write a simple Lambda expression that consumes a Lambda Predicate expression.</em></p>
<p class="indentt">Java 8 is probably best known as the version of Java that finally added lambdas and streams. These two new features (lambdas and streams) give programmers tools to tackle some common and complex problems with easier-to-read, more concise, and, in many cases, faster-running code. The creators of the OCA 8 exam felt that, in general, lambdas and streams are topics more appropriate for the OCP 8 exam, but they wanted OCA 8 candidates to get an introduction, perhaps to whet their appetite…</p>
<p class="indent"><a id="page_391"></a>In this section, we’re going to do a really basic introduction to lambdas. We suspect this discussion will raise some questions in your mind, and we’re sorry for that, but we’re going to restrict ourselves to just the introduction that the exam creators had in mind.</p>
<div class="side-exam">
<p class="imaget"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="noindent"><strong><em>On the real exam, you should expect to see many questions that test for more than one objective. In the following pages, as we discuss lambdas, we’ll be leaning heavily on <code>ArrayLists</code> and wrapper classes. You’ll see that we combine <code>ArrayLists,</code> wrappers, AND lambdas into many of our code listings, and we also use this combination in the mock exam questions we provide. The real exam (and real-life programming) will do the same.</em></strong></p>
</div>
<p class="indent">Suppose you’re creating an application for a veterinary hospital. We want to focus on that part of the application that allows the vets to get summary information about all the dogs that they work with. Here’s our <code>Dog</code> class:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0391-01.jpg" alt="images" width="447" height="333" data-mfp-src="/library/view/oca-java-se/9781260011388/p0391-01.jpg"></p>
<p class="indent"><a id="page_392"></a>Now let’s write some test code to create some sample <code>Dog</code>s, put them into an <code>ArrayList</code> as we go, and then run some "queries" against the <code>ArrayList</code>.</p>
<p class="indent">First here’s the summary pseudo code:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0392-01.jpg" alt="images" width="475" height="54" data-mfp-src="/library/view/oca-java-se/9781260011388/p0392-01.jpg"></p>
<p class="indent">Here’s the actual test code:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0392-02.jpg" alt="images" width="632" height="522" data-mfp-src="/library/view/oca-java-se/9781260011388/p0392-02.jpg"></p>
<p class="noindent">which produces the following (predictable we hope) output:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0392-03.jpg" alt="images" width="520" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0392-03.jpg"></p>
<p class="indent"><a id="page_393"></a>You’re probably way ahead of us here, but notice how similar the <code>minAge()</code> and <code>maxWeight()</code> methods are. And it should be easy to imagine other similar methods with names like <code>maxAge()</code> or <code>namesStartingWithC()</code>. So the line of code we want to focus on is:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0393-01.jpg" alt="images" width="619" height="14" data-mfp-src="/library/view/oca-java-se/9781260011388/p0393-01.jpg"></p>
<p class="indent">What if—just sayin’—we could create a single <code>Dog</code>-querying method (instead of the many we’ve been contemplating) and pass it the query expression we wanted it to use? It would sort of look like this:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0393-02.jpg" alt="images" width="656" height="146" data-mfp-src="/library/view/oca-java-se/9781260011388/p0393-02.jpg"></p>
<p class="indent">Now we’re thinking about passing code as an argument? Lambdas let us do just that! Let’s look at our <code>dogQuerier()</code> method a little more closely. First off, the code we’re going to pass in is going to be used as the expression in an <code>if</code> statement. What do we know about <code>if</code> expressions? Right! They have to resolve to a <code>boolean</code> value. So when we declare our method, the second argument (the one that’s going to hold the passed-in-code) has to be declared as a <code>boolean</code>. The folks who brought us Java 8 and lambdas and streams provided a bunch of new interfaces in the API, and one of the most useful of these is the <code>java.util.function.Predicate</code> interface. The <code>Predicate</code> interface has some of those new-fangled <code>static</code> and <code>default</code> interface methods, we discussed earlier in the book, and, most importantly for us, it has one nonconcrete method called <code>test()</code> that returns—you guessed it—a <code>boolean</code>.</p>
<p class="indent">Here’s the multipurpose <code>dogQuerier()</code> method:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0393-03.jpg" alt="images" width="657" height="146" data-mfp-src="/library/view/oca-java-se/9781260011388/p0393-03.jpg"></p>
<p class="indent"><a id="page_394"></a>So far this looks like good-old Java; it’s when we invoke <code>dogQuerier()</code> that the syntax gets interesting:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0394-01.jpg" alt="images" width="359" height="13" data-mfp-src="/library/view/oca-java-se/9781260011388/p0394-01.jpg"></p>
<p class="noindent">When we say [c]<strong>d -&gt; d.getAge() &lt; 9</strong>[/c]—THAT is the lambda expression. The <code>d</code> represents the argument, and then the code must return a <code>boolean</code>. Let’s put all of this together in a new version of <code>TestDogs</code>:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0394-02.jpg" alt="images" width="690" height="835" data-mfp-src="/library/view/oca-java-se/9781260011388/p0394-02.jpg"></p>
<p class="noindent"><a id="page_395"></a>which produces the following output (the last two lines generated using lambdas!):</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0395-01.jpg" alt="images" width="520" height="91" data-mfp-src="/library/view/oca-java-se/9781260011388/p0395-01.jpg"></p>
<p class="indent">Let’s step back now and cover some syntax rules. The following rules are for the purposes of the OCA 8 exam only! If you decide to earn your OCP 8, you’ll do a much deeper dive into lambdas, and there are lots of "cans of worms" you’ll have to open, which we’re purposely going to avoid. So what follows is an OCA 8 appropriate simplification.</p>
<p class="indentb">The basic syntax for a <code>Predicate</code> lambda has three parts:</p>
<p class="image-t"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/t0395-01.jpg" alt="images" width="503" height="64" data-mfp-src="/library/view/oca-java-se/9781260011388/t0395-01.jpg"></p>
<p class="indent">Other types of lambdas take zero or more parameters, but for the OCA 8, we’re focused exclusively on the <code>Predicate</code>, which must take exactly one parameter. Here are some detailed syntax rules for <code>Predicate</code> lambdas:</p>
<p class="bulletxt"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The parameter can be just a variable name, or it can be the type followed by a variable name all in parentheses.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The body MUST (one way or another) return a <code>boolean</code>.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The body can be a single expression, which cannot have a <code>return</code> statement.</p>
<p class="bulletxb"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The body can be a code block surrounded by curly braces, containing one or more valid statements, each ending with a semicolon, and the block must end with a <code>return</code> statement.</p>
<p class="indent">Following is a code listing that shows examples of legal and then illegal examples of <code>Predicate</code> lambdas:</p>
<p class="coden"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0395-02.jpg" alt="images" width="584" height="87" data-mfp-src="/library/view/oca-java-se/9781260011388/p0395-02.jpg"></p>
<p class="coden"><a id="page_396"></a><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0396-01.jpg" alt="images" width="675" height="477" data-mfp-src="/library/view/oca-java-se/9781260011388/p0396-01.jpg"></p>
<p class="noindent">This code is mostly about valid and invalid syntax, but let’s look a little more closely at the <code>go()</code> method. The test is mainly concerned with the code to be passed to a method, but it’s useful to look (but not TOO closely) at a method that receives lambda code. In both the Dogs code and the code directly above, the receiving method took a <code>Predicate</code>. Inside the receiving methods, we created an object of the type we’re working with, which we pass to the <code>Predicate.test()</code> method. The receiving method expects the <code>test()</code> method to return a <code>boolean</code>.</p>
<p class="indent">We have to admit that lambdas are a bit tricky to learn. Again, we expect we’ve left you with some unanswered questions, but we think Oracle did a reasonable job of slicing out a piece of the lambda puzzle to start with. If you understand the bits we’ve covered, you should be able to handle the lambda-related questions Oracle throws you.</p>
<h3 class="h3"><a id="ch06lev1sec7"></a><span class="under">CERTIFICATION SUMMARY</span></h3>
<p class="noindent">The most important thing to remember about <code>String</code>s is that <code>String</code> objects are immutable, but references to <code>String</code>s are not! You can make a new <code>String</code> by using an existing <code>String</code> as a starting point, but if you don’t assign a reference variable to the new <code>String</code>, it will be lost to your program—you will have no way to access your new <code>String</code>. Review the important methods in the <code>String</code> class.</p>
<p class="indent"><a id="page_397"></a>The <code>StringBuilder</code> class was added in Java 5. It has exactly the same methods as the old <code>StringBuffer</code> class, except <code>StringBuilder</code>’s methods aren’t thread-safe. Because <code>StringBuilder</code>’s methods are not thread-safe, they tend to run faster than <code>StringBuffer</code> methods, so choose <code>StringBuilder</code> whenever threading is not an issue. Both <code>StringBuffer</code> and <code>StringBuilder</code> objects can have their value changed over and over without your having to create new objects. If you’re doing a lot of string manipulation, these objects will be more efficient than immutable <code>String</code> objects, which are, more or less, "use once, remain in memory forever." Remember, these methods ALWAYS change the invoking object’s value, even with no explicit assignment.</p>
<p class="indent">Next we discussed key classes and interfaces in the new Java 8 calendar and time-related packages. Similar to <code>String</code>s, all of the calendar classes we studied create immutable objects. In addition, these classes use factory methods exclusively to create new objects. The keyword <code>new</code> cannot be used with these classes. We looked at some of the powerful features of these classes, like calculating the amount of time between two different dates or times. Then we took a look at how the <code>DateTimeFormatter</code> class is used to parse <code>String</code>s into calendar objects and how it is used to beautify calendar objects.</p>
<p class="indent">The next topic was arrays. We talked about declaring, constructing, and initializing one-dimensional and multidimensional arrays. We talked about anonymous arrays and the fact that arrays of objects are actually arrays of references to objects.</p>
<p class="indent">Next, we discussed the basics of <code>ArrayList</code>s. <code>ArrayList</code>s are like arrays with superpowers that allow them to grow and shrink dynamically and to make it easy for you to insert and delete elements at locations of your choosing within the list. We discussed the idea that <code>ArrayList</code>s cannot hold primitives, and that if you want to make an <code>ArrayList</code> filled with a given type of primitive values, you use "wrapper" classes to turn a primitive value into an object that represents that value. Then we discussed how with autoboxing, turning primitives into wrapper objects, and vice versa, is done automatically.</p>
<p class="indent">Finally, we discussed a specific subset of the topic of lambdas, using the <code>Predicate</code> interface. The basic idea of lambdas is that you can pass a bit of code from one method to another. The <code>Predicate</code> interface is one of many "functional interfaces" provided in the Java 8 API. A functional interface is one that has only one method to be implemented. In the case of the <code>Predicate</code> interface, this method is called <code>test()</code>, and it takes a single argument and returns a <code>boolean</code>. To wrap up our discussion of lambdas, we covered some of the tricky syntax rules you need to know to write valid lambdas.</p>
<h3 class="h3"><a id="ch06lev1sec8"></a><a id="page_398"></a><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/tic1.jpg" alt="images" width="25" height="28" data-mfp-src="/library/view/oca-java-se/9781260011388/tic1.jpg"> TWO-MINUTE DRILL</h3>
<p class="noindent">Here are some of the key points from the certification objectives in this chapter.</p>
<h4 class="h4a">Using String and StringBuilder (OCA Objectives 9.2 and 9.1)</h4>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;<code>String</code> objects are immutable, and <code>String</code> reference variables are not.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;If you create a new <code>String</code> without assigning it, it will be lost to your program.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;If you redirect a <code>String</code> reference to a new <code>String</code>, the old <code>String</code> can be lost.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;<code>String</code> methods use zero-based indexes, except for the second argument of <code>substring()</code>.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The <code>String</code> class is <code>final</code>—it cannot be extended.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;When the JVM finds a <code>String</code> literal, it is added to the <code>String</code> literal pool.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Strings have a <em>method</em> called <code>length()</code>—arrays have an <em>attribute</em> named <code>length</code>.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;<code>StringBuilder</code> objects are mutable—they can change without creating a new object.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;<code>StringBuilder</code> methods act on the invoking object, and objects can change without an explicit assignment in the statement.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Remember that chained methods are evaluated from left to right.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;<code>String</code> methods to remember: <code>charAt()</code>, <code>concat()</code>, <code>equalsIgnoreCase()</code>, <code>length()</code>, <code>replace()</code>, <code>substring()</code>, <code>toLowerCase()</code>, <code>toString()</code>, <code>toUpperCase()</code>, and <code>trim()</code>.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;<code>StringBuilder</code> methods to remember: <code>append()</code>, <code>delete()</code>, <code>insert()</code>, <code>reverse()</code>, and <code>toString()</code>.</p>
<h4 class="h4a">Manipulating Calendar Data (OCA Objective 9.3)</h4>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;On the exam all the objects created using the calendar classes are immutable, but their reference variables are not.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;If you create a new calendar object without assigning it, it will be lost to your program.</p>
<p class="bulletx"><a id="page_399"></a><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;If you redirect a calendar reference to a new calendar object, the old calendar object can be lost.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;All of the objects created using the exam’s calendar classes must be created using factory methods (e.g., <code>from()</code>, <code>now()</code>, <code>of()</code>, <code>parse()</code>); the keyword <code>new</code> is not allowed.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The <code>until()</code> <code>and</code> <code>between()</code> methods perform complex calculations that determine the amount of time between the values of two calendar objects.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The <code>DateTimeFormatter</code> class uses the <code>parse()</code> method to parse input Strings into valid calendar objects.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The <code>DateTimeFormatter</code> class uses the <code>format()</code> method to format calendar objects into beautifully formed Strings.</p>
<h4 class="h4a">Using Arrays (OCA Objectives 4.1 and 4.2)</h4>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Arrays can hold primitives or objects, but the array itself is always an object.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;When you declare an array, the brackets can be to the left or right of the name.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;It is never legal to include the size of an array in the declaration.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;You must include the size of an array when you construct it (using <code>new</code>) unless you are creating an anonymous array.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Elements in an array of objects are not automatically created, although primitive array elements are given default values.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;You’ll get a <code>NullPointerException</code> if you try to use an array element in an object array if that element does not refer to a real object.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Arrays are indexed beginning with zero.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;An <code>ArrayIndexOutOfBoundsException</code> occurs if you use a bad index value.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Arrays have a <code>length</code> attribute whose value is the number of array elements.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The last index you can access is always one less than the length of the array.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Multidimensional arrays are just arrays of arrays.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The dimensions in a multidimensional array can have different lengths.</p>
<p class="bulletx"><a id="page_400"></a><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;An array of primitives can accept any value that can be promoted implicitly to the array’s declared type—for example, a <code>byte</code> variable can go in an <code>int</code> array.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;An array of objects can hold any object that passes the IS-A (or <code>instanceof</code>) test for the declared type of the array. For example, if <code>Horse</code> extends <code>Animal</code>, then a <code>Horse</code> object can go into an <code>Animal</code> array.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;If you assign an array to a previously declared array reference, the array you’re assigning must be the same dimension as the reference you’re assigning it to.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;You can assign an array of one type to a previously declared array reference of one of its supertypes. For example, a <code>Honda</code> array can be assigned to an array declared as type <code>Car</code> (assuming <code>Honda</code> extends <code>Car</code>).</p>
<h4 class="h4a">Using ArrayList (OCA Objective 9.4)</h4>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;<code>ArrayList</code>s allow you to resize your list and make insertions and deletions to your list far more easily than arrays.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;<code>ArrayList</code>s are ordered by default. When you use the <code>add()</code> method with no index argument, the new entry will be appended to the end of the <code>ArrayList</code>.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;For the OCA 8 exam, the only <code>ArrayList</code> declarations you need to know are of this form:</p>
<p class="code-n1"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0400-01.jpg" alt="images" width="609" height="65" data-mfp-src="/library/view/oca-java-se/9781260011388/p0400-01.jpg"></p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;<code>ArrayList</code>s can hold only objects, not primitives, but remember that autoboxing can make it look like you’re adding primitives to an <code>ArrayList</code> when, in fact, you’re adding a wrapper object version of a primitive.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;An <code>ArrayList</code>’s index starts at 0.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;<code>ArrayList</code>s can have duplicate entries. Note: Determining whether two objects are duplicates is trickier than it seems and doesn’t come up until the OCP 8 exam.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;<code>ArrayList</code> methods to remember: <code>add(element)</code>, <code>add(index, element)</code>, <code>clear()</code>, <code>contains(object)</code>, <code>get(index)</code>, <code>indexOf(object)</code>, <code>remove(index)</code>, <code>remove(object)</code>, and <code>size()</code>.</p>
<h4 class="h4a"><a id="page_401"></a>Encapsulating Reference Variables (OCA Objective 6.5)</h4>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;If you want to encapsulate mutable objects like <code>StringBuilder</code>s or arrays or <code>ArrayList</code>s, you cannot return a reference to these objects; you must first make a copy of the object and return a reference to the copy.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Any class that has a method that returns a reference to a mutable object is breaking encapsulation.</p>
<h4 class="h4a">Using Predicate Lambda Expressions (OCA Objective 9.5)</h4>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Lambdas allow you to pass bits of code from one method to another. And the receiving method can run whatever complying code it is sent.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;While there are many types of lambdas that Java 8 supports, for this exam, the only lambda type you need to know is the <code>Predicate</code>.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The <code>Predicate</code> interface has a single method to implement that’s called <code>test()</code>, and it takes one argument and returns a <code>boolean</code>.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;As the <code>Predicate.test()</code> method returns a boolean, it can be placed (mostly?) wherever a boolean expression can go, e.g., in <code>if</code>, <code>while</code>, <code>do</code>, and ternary statements.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;<code>Predicate</code> lambda expressions have three parts: a single argument, an arrow (<code>-&gt;</code>), and an expression or code block.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;A <code>Predicate</code> lambda expression’s argument can be just a variable or a type and variable together in parentheses, e.g., <code>(MyClass m)</code>.</p>
<p class="bulletx"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;A <code>Predicate</code> lambda expression’s body can be an expression that resolves to a boolean, OR it can be a block of statements (surrounded by curly braces) that ends with a boolean-returning <code>return</code> statement.</p>
<h3 class="h3"><a id="ch06lev1sec9"></a><a id="page_402"></a>SELF TEST</h3>
<p class="numlistk"><a id="ich6q1" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6q1"><strong>1.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0402-01.jpg" alt="images" width="439" height="159" data-mfp-src="/library/view/oca-java-se/9781260011388/p0402-01.jpg"></p>
<p class="numlist-n">Which two substrings will be included in the result? (Choose two.)</p>
<p class="code-1"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0402-02.jpg" alt="images" width="99" height="134" data-mfp-src="/library/view/oca-java-se/9781260011388/p0402-02.jpg"></p>
<p class="numlistk"><a id="ich6q2" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6q2"><strong>2.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0402-03.jpg" alt="images" width="512" height="214" data-mfp-src="/library/view/oca-java-se/9781260011388/p0402-03.jpg"></p>
<p class="numlist-n">And, if the code compiles, the command line:</p>
<p class="code-1"><code>java Hilltop eyra vafi draumur kara</code></p>
<p class="numlist-n">What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>EYRA VAFI DRAUMUR KARA</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>EYRA VAFI DRAUMUR KARA null</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;An exception is thrown with no other output</p>
<p class="num-k"><a id="page_403"></a>D.&nbsp;&nbsp;&nbsp;<code>EYRA VAFI DRAUMUR KARA</code>, and then a <code>NullPointerException</code></p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;<code>EYRA VAFI DRAUMUR KARA</code>, and then an <code>ArrayIndexOutOfBoundsException</code></p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numlistk"><a id="ich6q3" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6q3"><strong>3.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0403-01.jpg" alt="images" width="627" height="115" data-mfp-src="/library/view/oca-java-se/9781260011388/p0403-01.jpg"></p>
<p class="numlist-n">What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>true true</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>true false</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>false true</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;<code>false false</code></p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numlistk"><a id="ich6q4" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6q4"><strong>4.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0403-02.jpg" alt="images" width="426" height="174" data-mfp-src="/library/view/oca-java-se/9781260011388/p0403-02.jpg"></p>
<p class="numlist-n">What is the result? (Choose all that apply.)</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>2</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>4</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;An exception is thrown at runtime</p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 4</p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 5</p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 6</p>
<p class="num-k">G.&nbsp;&nbsp;&nbsp;Compilation fails due to an error on line 7</p>
<p class="numlistk"><a id="page_404"></a><a id="ich6q5" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6q5"><strong>5.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0404-01.jpg" alt="images" width="522" height="212" data-mfp-src="/library/view/oca-java-se/9781260011388/p0404-01.jpg"></p>
<p class="numlist-n">What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>[apple, banana, carrot, plum]</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>[apple, plum, carrot, banana]</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>[apple, plum, banana, carrot]</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;<code>[plum, banana, carrot, apple]</code></p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;<code>[plum, apple, carrot, banana]</code></p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;<code>[banana, plum, carrot, apple]</code></p>
<p class="num-k">G.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numlistk"><a id="ich6q6" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6q6"><strong>6.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0404-03.jpg" alt="images" width="435" height="274" data-mfp-src="/library/view/oca-java-se/9781260011388/p0404-03.jpg"></p>
<p class="numlist-n">Which two are true about the objects created within <code>main()</code>, and which are eligible for garbage collection when line 14 is reached?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;Three objects were created</p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;Four objects were created</p>
<p class="num-k"><a id="page_405"></a>C.&nbsp;&nbsp;&nbsp;Five objects were created</p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;Zero objects are eligible for GC</p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;One object is eligible for GC</p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;Two objects are eligible for GC</p>
<p class="num-k">G.&nbsp;&nbsp;&nbsp;Three objects are eligible for GC</p>
<p class="numlistk"><a id="ich6q7" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6q7"><strong>7.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0405-01.jpg" alt="images" width="522" height="115" data-mfp-src="/library/view/oca-java-se/9781260011388/p0405-01.jpg"></p>
<p class="numlist-n">What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>2 4</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>2 7</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>3 2</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;<code>3 7</code></p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;<code>4 2</code></p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;<code>4 7</code></p>
<p class="num-k">G.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numlistk"><a id="ich6q8" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6q8"><strong>8.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0405-02.jpg" alt="images" width="596" height="254" data-mfp-src="/library/view/oca-java-se/9781260011388/p0405-02.jpg"></p>
<p class="numlist-n"><a id="page_406"></a>Which are true? (Choose all that apply.)</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;The first line of output is <code>abc abc true</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;The first line of output is <code>abc abc false</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;The first line of output is <code>abcd abc false</code></p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;The second line of output is <code>abcd abc false</code></p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;The second line of output is <code>abcd abcd true</code></p>
<p class="num-k">G.&nbsp;&nbsp;&nbsp;The second line of output is <code>abcd abcd false</code></p>
<p class="numlistk"><a id="ich6q9" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6q9"><strong>9.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0406-01.jpg" alt="images" width="405" height="215" data-mfp-src="/library/view/oca-java-se/9781260011388/p0406-01.jpg"></p>
<p class="numlist-n">If the garbage collector does NOT run while this code is executing, approximately how many objects will exist in memory when the loop is done?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;Less than 10</p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;About 1000</p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;About 2000</p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;About 3000</p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;About 4000</p>
<p class="numlistk1"><a id="ich6q10" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6q10"><strong>10.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0406-02.jpg" alt="images" width="520" height="334" data-mfp-src="/library/view/oca-java-se/9781260011388/p0406-02.jpg"></p>
<p class="numlist-n"><a id="page_407"></a>What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>4 4</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>5 4</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>6 4</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;<code>4 5</code></p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;<code>5 5</code></p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numlistk1"><a id="ich6q11" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6q11"><strong>11.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0407-01.jpg" alt="images" width="398" height="175" data-mfp-src="/library/view/oca-java-se/9781260011388/p0407-01.jpg"></p>
<p class="numlist-n">What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>JAVA</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>JAVAROCKS</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>rocks</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;<code>rock</code></p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;<code>ROCKS</code></p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;<code>ROCK</code></p>
<p class="num-k">G.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numlistk1"><a id="ich6q12" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6q12"><strong>12.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0407-02.jpg" alt="images" width="501" height="197" data-mfp-src="/library/view/oca-java-se/9781260011388/p0407-02.jpg"></p>
<p class="numlist-n"><a id="page_408"></a>Which lines of code (if any) break encapsulation? (Choose all that apply.)</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;Line 3</p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;Line 4</p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;Line 5</p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;Line 7</p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;Line 8</p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;Line 9</p>
<p class="num-k">G.&nbsp;&nbsp;&nbsp;The class is already well encapsulated</p>
<p class="numlistk1"><a id="ich6q13" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6q13"><strong>13.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0408-01.jpg" alt="images" width="430" height="371" data-mfp-src="/library/view/oca-java-se/9781260011388/p0408-01.jpg"></p>
<p class="numlist-n">What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>true true false</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;Compilation fails due only to an error at line A</p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;Compilation fails due only to an error at line B</p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;Compilation fails due only to an error at line C</p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;Compilation fails due only to errors at lines A and B</p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;Compilation fails due only to errors at lines A and C</p>
<p class="num-k">G.&nbsp;&nbsp;&nbsp;Compilation fails due only to errors at lines A, B, and C</p>
<p class="num-k">H.&nbsp;&nbsp;&nbsp;Compilation fails for reasons not listed</p>
<p class="numlistk1"><a id="page_409"></a><a id="ich6q14" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6q14"><strong>14.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0409-01.jpg" alt="images" width="550" height="232" data-mfp-src="/library/view/oca-java-se/9781260011388/p0409-01.jpg"></p>
<p class="numlist-n">What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>2018-01-15 2018-01-15</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>2018-01-15 2018-01-16</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>Jan 15, 2018 Jan 15, 2018</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;<code>Jan 15, 2018 Jan 16, 2018</code></p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;An exception is thrown at runtime</p>
<p class="numlistk1"><a id="ich6q15" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6q15"><strong>15.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0409-02.jpg" alt="images" width="533" height="212" data-mfp-src="/library/view/oca-java-se/9781260011388/p0409-02.jpg"></p>
<p class="numlist-n">What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>[5, 42, 113, 7]</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;Compilation fails due only to an error on line 5</p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;Compilation fails due only to an error on line 8</p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;Compilation fails due only to errors on lines 5 and 8</p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;Compilation fails due only to errors on lines 7 and 8</p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;Compilation fails due only to errors on lines 5, 7, and 8</p>
<p class="num-k">G.&nbsp;&nbsp;&nbsp;Compilation fails due only to errors on lines 5, 7, 8, and 9</p>
<p class="numlistk1"><a id="page_410"></a><a id="ich6q16" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6q16"><strong>16.</strong></a>&nbsp;&nbsp;&nbsp;Given that <code>adder()</code> returns an <code>int</code>, which are valid <code>Predicate</code> lambdas? (Choose all that apply.)</p>
<p class="code-1"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0410-01.jpg" alt="images" width="414" height="301" data-mfp-src="/library/view/oca-java-se/9781260011388/p0410-01.jpg"></p>
<p class="numlistk1"><a id="ich6q17" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6q17"><strong>17.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0410-02.jpg" alt="images" width="512" height="252" data-mfp-src="/library/view/oca-java-se/9781260011388/p0410-02.jpg"></p>
<p class="numlist-n">What is the result?</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>[knead, oil pan, roll, turn on oven, bake]</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>[knead, oil pan, turn on oven, roll, bake]</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>[knead, oil pan, turn on oven, roll, turn on oven, bake]</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;The output is unpredictable</p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;An exception is thrown at runtime</p>
<p class="numlistk1"><a id="page_411"></a><a id="ich6q18" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6q18"><strong>18.</strong></a>&nbsp;&nbsp;&nbsp;Given:</p>
<p class="code-1"><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0411-01.jpg" alt="images" width="563" height="212" data-mfp-src="/library/view/oca-java-se/9781260011388/p0411-01.jpg"></p>
<p class="numlist-n">Which are true? (Choose all that apply.)</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;The output is: <code>2018-08-16 2018-08-17 2018-08-18</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;The output is: <code>2018-08-16 2018-08-18 2018-08-17</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;The output is: <code>2018-08-16 2018-08-17 2018-08-17</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;At line X, zero <code>LocalDate</code> objects are eligible for garbage collection</p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;At line X, one <code>LocalDate</code> object is eligible for garbage collection</p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;At line X, two <code>LocalDate</code> objects are eligible for garbage collection</p>
<p class="num-k">G.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numlistk1"><a id="ich6q19" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ch6q19"><strong>19.</strong></a>&nbsp;&nbsp;&nbsp;Given that <code>e</code> refers to an object that implements <code>Predicate</code>, which could be valid code snippets or statements? (Choose all that apply.)</p>
<p class="num-k">A.&nbsp;&nbsp;&nbsp;<code>if(e.test(m))</code></p>
<p class="num-k">B.&nbsp;&nbsp;&nbsp;<code>switch (e.test(m))</code></p>
<p class="num-k">C.&nbsp;&nbsp;&nbsp;<code>while(e.test(m))</code></p>
<p class="num-k">D.&nbsp;&nbsp;&nbsp;<code>e.test(m) ? "yes" : "no";</code></p>
<p class="num-k">E.&nbsp;&nbsp;&nbsp;<code>do {} while(e.test(m));</code></p>
<p class="num-k">F.&nbsp;&nbsp;&nbsp;<code>System.out.print(e.test(m));</code></p>
<p class="num-k">G.&nbsp;&nbsp;&nbsp;<code>boolean b = e.test(m));</code></p>
<h3 class="h3"><a id="ch06lev1sec10"></a><a id="page_412"></a>SELF TEST ANSWERS</h3>
<p class="hanga"><a id="ch6q1" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ich6q1"><strong>1.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>A</strong> and <strong>D</strong> are correct. The <code>String</code> operations are working on a new (lost) <code>String</code> not <code>String s</code>. The <code>StringBuilder</code> operations work from left to right.</p>
<p class="hang-a"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>B</strong>, <strong>C</strong>, and <strong>E</strong> are incorrect based on the above. (OCA Objectives 9.2 and 9.1)</p>
<p class="hanga"><a id="ch6q2" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ich6q2"><strong>2.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>D</strong> is correct. The <code>horses</code> array’s first four elements contain <code>Strings</code>, but the fifth is null, so the <code>toUpperCase()</code> invocation for the fifth element throws a <code>NullPointerException</code>.</p>
<p class="hang-a"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, C,</strong> <strong>E,</strong> and <strong>F</strong> are incorrect based on the above. (OCA Objectives 4.1 and 1.3)</p>
<p class="hanga"><a id="ch6q3" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ich6q3"><strong>3.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>E</strong> is correct. The Unicode declaration must be enclosed in single quotes: <code>’\u004e’</code>. If this were done, the answer would be <strong>A</strong>, but that equality isn’t on the OCA exam.</p>
<p class="hang-a"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, C,</strong> and <strong>D</strong> are incorrect based on the above. (OCA Objectives 2.1 and 4.1)</p>
<p class="hanga"><a id="ch6q4" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ich6q4"><strong>4.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>C</strong> is correct. A <code>ClassCastException</code> is thrown at line 7 because <code>o1</code> refers to an <code>int[][]</code>, not an <code>int[]</code>. If line 7 were removed, the output would be 4.</p>
<p class="hang-a"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, D, E, F,</strong> and <strong>G</strong> are incorrect based on the above. (OCA Objective 4.2)</p>
<p class="hanga"><a id="ch6q5" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ich6q5"><strong>5.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>B</strong> is correct. <code>ArrayList</code> elements are automatically inserted in the order of entry; they are not automatically sorted. <code>ArrayList</code>s use zero-based indexes, and the last <code>add()</code> inserts a new element and shifts the remaining elements back.</p>
<p class="hang-a"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, C, D, E, F,</strong> and <strong>G</strong> are incorrect based on the above. (OCA Objective 9.4)</p>
<p class="hanga"><a id="ch6q6" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ich6q6"><strong>6.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>C</strong> and <strong>F</strong> are correct. <code>da</code> refers to an object of type "<code>Dozens</code> array," and each <code>Dozens</code> object that is created comes with its own "<code>int</code> array" object. When line 14 is reached, only the second <code>Dozens</code> object (and its "<code>int</code> array" object) are not reachable.</p>
<p class="hang-a"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, D, E,</strong> and <strong>G</strong> are incorrect based on the above. (OCA Objectives 4.1 and 2.4)</p>
<p class="hanga"><a id="ch6q7" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ich6q7"><strong>7.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>C</strong><strong></strong> is correct. A two-dimensional array is an "array of arrays." The length of <code>ba</code> is 2 because it contains 2 one-dimensional arrays. Array indexes are zero-based, so <code>ba[1]</code> refers to <code>ba</code>’s second array.</p>
<p class="hang-a"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, D, E, F,</strong> and <strong>G</strong> are incorrect based on the above. (OCA Objective 4.2)</p>
<p class="hanga"><a id="ch6q8" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ich6q8"><strong>8.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>D</strong> and <strong>F</strong> are correct. Although <code>String</code> objects are immutable, references to <code>Strin</code>gs are mutable. The code <code>s1 += "d";</code> creates a new <code>String</code> object. <code>StringBuilder</code> objects are mutable, so the <code>append()</code> is changing the single <code>StringBuilder</code> object to which both <code>StringBuilder</code> references refer.</p>
<p class="hang-a"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, C, E,</strong> and <strong>G</strong> are incorrect based on the above. (OCA Objectives 9.2 and 9.1)</p>
<p class="hanga"><a id="ch6q9" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ich6q9"><strong>9.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>B</strong> is correct. <code>StringBuilder</code>s are mutable, so all of the <code>append()</code> invocations are acting on the same <code>StringBuilder</code> object over and over. <code>String</code>s, however, are immutable, so every <code>String</code> concatenation operation results in a new <code>String</code> object. Also, the string <code>" "</code> is created once and reused in every loop iteration.</p>
<p class="hang-a"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, C, D,</strong> and <strong>E</strong> are incorrect based on the above. (OCA Objectives 9.2 and 9.1)</p>
<p class="hanga1"><a id="page_413"></a><a id="ch6q10" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ich6q10"><strong>10.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>A</strong> is correct. Although <code>main()</code>’s <code>b1</code> is a different reference variable than <code>go()</code>’s <code>b1</code>, they refer to the same <code>Box</code> object.</p>
<p class="hang-a"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>B, C, D, E,</strong> and <strong>F</strong> are incorrect based on the above. (OCA Objectives 4.1, 6.1, and 6.6)</p>
<p class="hanga1"><a id="ch6q11" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ich6q11"><strong>11.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>D</strong> is correct. The <code>substring()</code> invocation uses a zero-based index and the second argument is exclusive, so the character at index 8 is NOT included. The <code>toUpperCase()</code> invocation makes a new <code>String</code> object that is instantly lost. The <code>toUpperCase()</code> invocation does NOT affect the <code>String</code> referred to by <code>s</code>.</p>
<p class="hang-a"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, C, E, F,</strong> and <strong>G</strong> are incorrect based on the above. (OCA Objective 9.2)</p>
<p class="hanga1"><a id="ch6q12" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ich6q12"><strong>12.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>F</strong> is correct. When encapsulating a mutable object like an <code>ArrayList</code>, your getter must return a reference to a copy of the object, not just the reference to the original object.</p>
<p class="hang-a"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, C, D, E,</strong> and <strong>G</strong> are incorrect based on the above. (OCA Objective 6.5)</p>
<p class="hanga1"><a id="ch6q13" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ich6q13"><strong>13.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>F</strong> is correct. Predicate lambdas take exactly one parameter; the rest of the code is correct.</p>
<p class="hang-a"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, C, D, E, G,</strong> and <strong>H</strong> are incorrect based on the above. (OCA Objective 9.5)</p>
<p class="hanga1"><a id="ch6q14" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ich6q14"><strong>14.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>D</strong> is correct. Invoking the <code>plusDays()</code> method creates a new object, and both <code>LocalDate</code> and <code>DateTimeFormatter</code> have <code>format()</code> methods.</p>
<p class="hang-a"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, C, E,</strong> and <strong>F</strong> are incorrect based on the above. (OCA Objective 9.3)</p>
<p class="hanga1"><a id="ch6q15" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ich6q15"><strong>15.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>C</strong> is correct. The only error in this code is attempting to add a <code>String</code> to an <code>ArrayList</code> of <code>Integer</code> wrapper objects. Line 7 uses autoboxing, and lines 6 and 9 demonstrate using a wrapper class’s two constructors.</p>
<p class="hang-a"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, D, E, F,</strong> and <strong>G</strong> are incorrect based on the above. (OCA Objectives 2.5 and 9.4)</p>
<p class="hanga1"><a id="ch6q16" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ich6q16"><strong>16.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>B, E</strong> and <strong>F</strong> use correct syntax.</p>
<p class="hang-a"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, C, D</strong>, and <strong>G</strong> are incorrect. <strong>A</strong> passes two parameters. <strong>C</strong>, a <code>return</code>, must be in a code block, and code blocks must be in curly braces. <strong>D</strong>, a block, must have a <code>return</code> statement. <strong>G,</strong> the result, is not a <code>boolean</code>. (OCA Objective 9.5)</p>
<p class="hanga1"><a id="ch6q17" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ich6q17"><strong>17.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>C</strong> is correct. <code>ArrayList</code>s can have duplicate entries.</p>
<p class="hang-a"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, B, D, E,</strong> and <strong>F</strong> are incorrect based on the above. (OCA Objective 9.4)</p>
<p class="hanga1"><a id="ch6q18" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ich6q18"><strong>18.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>B</strong> and <strong>E</strong> are correct. A total of four <code>LocalDate</code> objects are created, but the one created using the <code>of()</code> method is abandoned on the next line of code when its reference variable is assigned to the new <code>LocalDate</code> object created via the first <code>plusDays()</code> invocation. The reference variables are swapped a bit, which accounts for the dates not printing in chronological order.</p>
<p class="hang-a"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>A, C, D, F,</strong> and <strong>G</strong> are incorrect based on the above. (OCA Objectives 2.4 and 9.3)</p>
<p class="hanga1"><a id="ch6q19" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#ich6q19"><strong>19.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;&nbsp;&nbsp;<strong>A, C, D, E, F,</strong> and <strong>G</strong> are correct; they all require a <code>boolean</code>.</p>
<p class="hang-a"><img class="inline" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg">&nbsp;&nbsp;&nbsp;<strong>B</strong> is incorrect. A <code>switch</code> doesn’t take a <code>boolean</code>. (OCA Objective 9.5)<a id="page_414"></a></p>
<div class="annotator-outer annotator-viewer viewer annotator-hide">
  <ul class="annotator-widget annotator-listing"></ul>
</div><div class="annotator-modal-wrapper annotator-editor-modal annotator-editor annotator-hide">
	<div class="annotator-outer editor">
		<h2 class="title">Highlight</h2>
		<form class="annotator-widget">
			<ul class="annotator-listing">
			<li class="annotator-item"><textarea id="annotator-field-16" placeholder="Add a note using markdown (optional)" class="js-editor" maxlength="750"></textarea></li></ul>
			<div class="annotator-controls">
				<a class="link-to-markdown" href="https://daringfireball.net/projects/markdown/basics" target="_blank">?</a>
				<ul>
					<li class="delete annotator-hide"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#delete" class="annotator-delete-note button positive">Delete Note</a></li>
					<li class="save"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#save" class="annotator-save annotator-focus button positive">Save Note</a></li>
					<li class="cancel"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#cancel" class="annotator-cancel button">Cancel</a></li>
				</ul>
			</div>
		</form>
	</div>
</div><div class="annotator-modal-wrapper annotator-delete-confirm-modal" style="display: none;">
  <div class="annotator-outer">
    <h2 class="title">Highlight</h2>
      <a class="js-close-delete-confirm annotator-cancel close" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#close">Close</a>
      <div class="annotator-widget">
         <div class="delete-confirm">
            Are you sure you want to permanently delete this note?
         </div>
         <div class="annotator-controls">
            <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#cancel" class="annotator-cancel button js-cancel-delete-confirm">No, I changed my mind</a>
            <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#delete" class="annotator-delete button positive js-delete-confirm">Yes, delete it</a>
         </div>
       </div>
   </div>
</div><div class="annotator-adder" style="display: none;">
	<ul class="adders ">
		
		<li class="copy"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#">Copy</a></li>
		
		<li class="add-highlight"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#">Add Highlight</a></li>
		<li class="add-note"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#">
			
				Add Note
			
		</a></li>
		
	</ul>
</div></div></div>



  <div class="t-sbo-prev sbo-prev sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">5&nbsp;Flow Control and Exceptions</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/appa.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">A&nbsp;About the Download</div>
        </a>
    
  
  </div>

</section>
  </div>
<section class="sbo-saved-archives"></section>



          
          
  




    
    
      <div id="js-subscribe-nag" class="subscribe-nag clearfix trial-panel t-subscribe-nag collapsed slideUp">
        
        
          
          

          
            <p>You have 7 days left in your trial, Haridave. Subscribe today. <a href="https://www.safaribooksonline.com/subscribe/" class="ga-active-trial-subscribe-nag">See pricing options.</a></p>
          
        
        

      </div>

    
    



        
      </div>
      




  <footer class="pagefoot t-pagefoot" style="padding-bottom: 69px;">
    <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#" class="icon-up" style="display: block;"><div class="visuallyhidden">Back to top</div></a>
    <ul class="js-footer-nav">
      
        <li><a class="t-recommendations-footer" href="https://www.safaribooksonline.com/r/">Recommended</a></li>
      
      <li>
      
      <a class="t-queue-footer" href="https://www.safaribooksonline.com/s/">Queue</a>
      
      </li>
      
        <li><a class="t-recent-footer" href="https://www.safaribooksonline.com/history/">History</a></li>
        <li><a class="t-topics-footer" href="https://www.safaribooksonline.com/topics?q=*&amp;limit=21">Topics</a></li>
      
      
        <li><a class="t-tutorials-footer" href="https://www.safaribooksonline.com/tutorials/">Tutorials</a></li>
      
      <li><a class="t-settings-footer js-settings" href="https://www.safaribooksonline.com/u/">Settings</a></li>
      <li class="full-support"><a href="https://www.safaribooksonline.com/public/support">Support</a></li>
      <li><a href="https://www.safaribooksonline.com/apps/">Get the App</a></li>
      <li><a href="https://www.safaribooksonline.com/accounts/logout/">Sign Out</a></li>
    </ul>
    <span class="copyright">© 2017 <a href="https://www.safaribooksonline.com/" target="_blank">Safari</a>.</span>
    <a href="https://www.safaribooksonline.com/terms/">Terms of Service</a> /
    <a href="https://www.safaribooksonline.com/privacy/">Privacy Policy</a>
  </footer>

<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","queueTime":0,"licenseKey":"510f1a6865","errorBeacon":"bam.nr-data.net","agent":"","applicationTime":579,"applicationID":"3275661","transactionName":"YgdaZ0NSW0cEB0RdWltNfkZfUEFdCgofXFBHDVYdR1pQQxZeRl1QQj1aWkU="}</script>


    

    <script src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(2)" charset="utf-8"></script>
    <script src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(3)" charset="utf-8"></script><script type="text/javascript" id="">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","https://connect.facebook.net/en_US/fbevents.js");fbq("init","1732687426968531");fbq("track","PageView");</script>
<noscript>&lt;img height="1" width="1" style="display:none" src="https://www.facebook.com/tr?id=1732687426968531&amp;amp;ev=PageView&amp;amp;noscript=1"&gt;</noscript><div style="width:0px; height:0px; display:none; visibility:hidden;" id="batBeacon0.79713329937001"><img style="width:0px; height:0px; display:none; visibility:hidden;" id="batBeacon0.9495598444101674" width="0" height="0" alt="" src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/0"></div>
  

<script src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(4)" type="text/javascript"></script><script src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(5)" type="text/javascript"></script><div class="annotator-notice">Sorry we could not read the annotations from the store</div><div class="font-flyout" style="top: 200.003px; left: 1288px;"><div class="font-controls-panel">
	<div class="nightmodes">
		<ul>
			<li class="day"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#" id="day-mode" title="Day Mode">
				<i class="fa fa-sun-o"></i>
				<span>Day Mode</span></a></li>
			<li class="cloudy"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#" id="cloudy-mode" title="Cloudy Mode">
				<i class="fa fa-cloud"></i>
				<span>Cloud Mode</span>
			</a></li>
			<li class="night"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#" id="night-mode" title="Night Mode">
				<i class="fa fa-moon-o"></i>
				<span>Night Mode</span>
			</a></li>
		</ul>
	</div>

	<div class="font-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-font left"></i>
			<span class="filler" style="width: 50%;"></span>
			<div id="js-font-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle" style="position: relative; left: 80px;"></div>
			<i class="fa fa-font right"></i>
		</div>
	</div>

	<div class="column-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-compress left"></i>
			<span class="filler" style="width: 50%;"></span>
			<div id="js-column-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle" style="position: relative; left: 80px;"></div>
			<i class="fa fa-expand right"></i>
		</div>
	</div>

	<a id="reset" class="button" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html#">Reset</a>
</div>
</div><img src="./6 Strings, Arrays, ArrayLists, Dates, and Lambdas - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/seg" width="1" height="1" border="0" alt="" style="display: none;"></body></html>