<!DOCTYPE html>
<!-- saved from url=(0082)https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html -->
<html class=" js flexbox flexboxlegacy no-touch websqldatabase indexeddb history csscolumns csstransforms localstorage sessionstorage applicationcache svg inlinesvg zoom" lang="en" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#" itemscope="" itemtype="http://schema.org/Book http://schema.org/ItemPage" "="" data-login-url="/accounts/login/" data-offline-url="/" data-url="/library/view/oca-java-se/9781260011388/cover.html" data-csrf-cookie="csrfsafari" data-highlight-privacy="" data-user-id="2360587" data-user-uuid="bece7dd7-9327-4cc1-a1c8-17e84b9a1059" data-username="haridave" data-account-type="Trial" data-activated-trial-date="12/18/2017" data-archive="9781260011388" data-publishers="McGraw-Hill" data-htmlfile-name="cover.html" data-epub-title="OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)" data-debug="0" data-testing="0" style=""><!--<![endif]--><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><meta name="author" content="Safari Books Online"><meta name="format-detection" content="telephone=no"><meta http-equiv="cleartype" content="on"><meta name="HandheldFriendly" content="True"><meta name="MobileOptimized" content="320"><meta name="apple-itunes-app" content="app-id=881697395, app-argument=safaridetail://9781260011388"><meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0, maximum-scale=1.0"><meta property="twitter:account_id" content="4503599627559754"><script type="text/javascript" src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/510f1a6865"></script><script src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/nr-spa-1071.min.js"></script><script src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/1732687426968531" async=""></script><script async="" src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/fbevents.js"></script><script type="text/javascript" async="" src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/bat.js"></script><script type="text/javascript" async="" src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/conversion_async.js"></script><script type="text/javascript" async="" src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/insight.min.js"></script><script type="text/javascript" async="" src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/conversion_async.js"></script><script type="text/javascript" async="" src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/linkid.js"></script><script async="" src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/gtm.js"></script><script async="" src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/analytics.js"></script><script type="text/javascript">(window.NREUM||(NREUM={})).loader_config={xpid:"VQQDUVVVGwACU1RUAQA="};window.NREUM||(NREUM={}),__nr_require=function(t,e,n){function r(n){if(!e[n]){var o=e[n]={exports:{}};t[n][0].call(o.exports,function(e){var o=t[n][1][e];return r(o||e)},o,o.exports)}return e[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(t,e,n){function r(t){try{c.console&&console.log(t)}catch(e){}}var o,i=t("ee"),a=t(20),c={};try{o=localStorage.getItem("__nr_flags").split(","),console&&"function"==typeof console.log&&(c.console=!0,o.indexOf("dev")!==-1&&(c.dev=!0),o.indexOf("nr_dev")!==-1&&(c.nrDev=!0))}catch(s){}c.nrDev&&i.on("internal-error",function(t){r(t.stack)}),c.dev&&i.on("fn-err",function(t,e,n){r(n.stack)}),c.dev&&(r("NR AGENT IN DEVELOPMENT MODE"),r("flags: "+a(c,function(t,e){return t}).join(", ")))},{}],2:[function(t,e,n){function r(t,e,n,r,c){try{h?h-=1:o(c||new UncaughtException(t,e,n),!0)}catch(f){try{i("ierr",[f,s.now(),!0])}catch(d){}}return"function"==typeof u&&u.apply(this,a(arguments))}function UncaughtException(t,e,n){this.message=t||"Uncaught error with no additional information",this.sourceURL=e,this.line=n}function o(t,e){var n=e?null:s.now();i("err",[t,n])}var i=t("handle"),a=t(21),c=t("ee"),s=t("loader"),f=t("gos"),u=window.onerror,d=!1,p="nr@seenError",h=0;s.features.err=!0,t(1),window.onerror=r;try{throw new Error}catch(l){"stack"in l&&(t(13),t(12),"addEventListener"in window&&t(6),s.xhrWrappable&&t(14),d=!0)}c.on("fn-start",function(t,e,n){d&&(h+=1)}),c.on("fn-err",function(t,e,n){d&&!n[p]&&(f(n,p,function(){return!0}),this.thrown=!0,o(n))}),c.on("fn-end",function(){d&&!this.thrown&&h>0&&(h-=1)}),c.on("internal-error",function(t){i("ierr",[t,s.now(),!0])})},{}],3:[function(t,e,n){t("loader").features.ins=!0},{}],4:[function(t,e,n){function r(){M++,S=y.hash,this[u]=b.now()}function o(){M--,y.hash!==S&&i(0,!0);var t=b.now();this[l]=~~this[l]+t-this[u],this[d]=t}function i(t,e){E.emit("newURL",[""+y,e])}function a(t,e){t.on(e,function(){this[e]=b.now()})}var c="-start",s="-end",f="-body",u="fn"+c,d="fn"+s,p="cb"+c,h="cb"+s,l="jsTime",m="fetch",v="addEventListener",w=window,y=w.location,b=t("loader");if(w[v]&&b.xhrWrappable){var g=t(10),x=t(11),E=t(8),P=t(6),O=t(13),R=t(7),T=t(14),L=t(9),j=t("ee"),N=j.get("tracer");t(15),b.features.spa=!0;var S,M=0;j.on(u,r),j.on(p,r),j.on(d,o),j.on(h,o),j.buffer([u,d,"xhr-done","xhr-resolved"]),P.buffer([u]),O.buffer(["setTimeout"+s,"clearTimeout"+c,u]),T.buffer([u,"new-xhr","send-xhr"+c]),R.buffer([m+c,m+"-done",m+f+c,m+f+s]),E.buffer(["newURL"]),g.buffer([u]),x.buffer(["propagate",p,h,"executor-err","resolve"+c]),N.buffer([u,"no-"+u]),L.buffer(["new-jsonp","cb-start","jsonp-error","jsonp-end"]),a(T,"send-xhr"+c),a(j,"xhr-resolved"),a(j,"xhr-done"),a(R,m+c),a(R,m+"-done"),a(L,"new-jsonp"),a(L,"jsonp-end"),a(L,"cb-start"),E.on("pushState-end",i),E.on("replaceState-end",i),w[v]("hashchange",i,!0),w[v]("load",i,!0),w[v]("popstate",function(){i(0,M>1)},!0)}},{}],5:[function(t,e,n){function r(t){}if(window.performance&&window.performance.timing&&window.performance.getEntriesByType){var o=t("ee"),i=t("handle"),a=t(13),c=t(12),s="learResourceTimings",f="addEventListener",u="resourcetimingbufferfull",d="bstResource",p="resource",h="-start",l="-end",m="fn"+h,v="fn"+l,w="bstTimer",y="pushState",b=t("loader");b.features.stn=!0,t(8);var g=NREUM.o.EV;o.on(m,function(t,e){var n=t[0];n instanceof g&&(this.bstStart=b.now())}),o.on(v,function(t,e){var n=t[0];n instanceof g&&i("bst",[n,e,this.bstStart,b.now()])}),a.on(m,function(t,e,n){this.bstStart=b.now(),this.bstType=n}),a.on(v,function(t,e){i(w,[e,this.bstStart,b.now(),this.bstType])}),c.on(m,function(){this.bstStart=b.now()}),c.on(v,function(t,e){i(w,[e,this.bstStart,b.now(),"requestAnimationFrame"])}),o.on(y+h,function(t){this.time=b.now(),this.startPath=location.pathname+location.hash}),o.on(y+l,function(t){i("bstHist",[location.pathname+location.hash,this.startPath,this.time])}),f in window.performance&&(window.performance["c"+s]?window.performance[f](u,function(t){i(d,[window.performance.getEntriesByType(p)]),window.performance["c"+s]()},!1):window.performance[f]("webkit"+u,function(t){i(d,[window.performance.getEntriesByType(p)]),window.performance["webkitC"+s]()},!1)),document[f]("scroll",r,{passive:!0}),document[f]("keypress",r,!1),document[f]("click",r,!1)}},{}],6:[function(t,e,n){function r(t){for(var e=t;e&&!e.hasOwnProperty(u);)e=Object.getPrototypeOf(e);e&&o(e)}function o(t){c.inPlace(t,[u,d],"-",i)}function i(t,e){return t[1]}var a=t("ee").get("events"),c=t(23)(a,!0),s=t("gos"),f=XMLHttpRequest,u="addEventListener",d="removeEventListener";e.exports=a,"getPrototypeOf"in Object?(r(document),r(window),r(f.prototype)):f.prototype.hasOwnProperty(u)&&(o(window),o(f.prototype)),a.on(u+"-start",function(t,e){var n=t[1],r=s(n,"nr@wrapped",function(){function t(){if("function"==typeof n.handleEvent)return n.handleEvent.apply(n,arguments)}var e={object:t,"function":n}[typeof n];return e?c(e,"fn-",null,e.name||"anonymous"):n});this.wrapped=t[1]=r}),a.on(d+"-start",function(t){t[1]=this.wrapped||t[1]})},{}],7:[function(t,e,n){function r(t,e,n){var r=t[e];"function"==typeof r&&(t[e]=function(){var t=r.apply(this,arguments);return o.emit(n+"start",arguments,t),t.then(function(e){return o.emit(n+"end",[null,e],t),e},function(e){throw o.emit(n+"end",[e],t),e})})}var o=t("ee").get("fetch"),i=t(20);e.exports=o;var a=window,c="fetch-",s=c+"body-",f=["arrayBuffer","blob","json","text","formData"],u=a.Request,d=a.Response,p=a.fetch,h="prototype";u&&d&&p&&(i(f,function(t,e){r(u[h],e,s),r(d[h],e,s)}),r(a,"fetch",c),o.on(c+"end",function(t,e){var n=this;e?e.clone().arrayBuffer().then(function(t){n.rxSize=t.byteLength,o.emit(c+"done",[null,e],n)}):o.emit(c+"done",[t],n)}))},{}],8:[function(t,e,n){var r=t("ee").get("history"),o=t(23)(r);e.exports=r,o.inPlace(window.history,["pushState","replaceState"],"-")},{}],9:[function(t,e,n){function r(t){function e(){s.emit("jsonp-end",[],p),t.removeEventListener("load",e,!1),t.removeEventListener("error",n,!1)}function n(){s.emit("jsonp-error",[],p),s.emit("jsonp-end",[],p),t.removeEventListener("load",e,!1),t.removeEventListener("error",n,!1)}var r=t&&"string"==typeof t.nodeName&&"script"===t.nodeName.toLowerCase();if(r){var o="function"==typeof t.addEventListener;if(o){var a=i(t.src);if(a){var u=c(a),d="function"==typeof u.parent[u.key];if(d){var p={};f.inPlace(u.parent,[u.key],"cb-",p),t.addEventListener("load",e,!1),t.addEventListener("error",n,!1),s.emit("new-jsonp",[t.src],p)}}}}}function o(){return"addEventListener"in window}function i(t){var e=t.match(u);return e?e[1]:null}function a(t,e){var n=t.match(p),r=n[1],o=n[3];return o?a(o,e[r]):e[r]}function c(t){var e=t.match(d);return e&&e.length>=3?{key:e[2],parent:a(e[1],window)}:{key:t,parent:window}}var s=t("ee").get("jsonp"),f=t(23)(s);if(e.exports=s,o()){var u=/[?&](?:callback|cb)=([^&#]+)/,d=/(.*)\.([^.]+)/,p=/^(\w+)(\.|$)(.*)$/,h=["appendChild","insertBefore","replaceChild"];f.inPlace(HTMLElement.prototype,h,"dom-"),f.inPlace(HTMLHeadElement.prototype,h,"dom-"),f.inPlace(HTMLBodyElement.prototype,h,"dom-"),s.on("dom-start",function(t){r(t[0])})}},{}],10:[function(t,e,n){var r=t("ee").get("mutation"),o=t(23)(r),i=NREUM.o.MO;e.exports=r,i&&(window.MutationObserver=function(t){return this instanceof i?new i(o(t,"fn-")):i.apply(this,arguments)},MutationObserver.prototype=i.prototype)},{}],11:[function(t,e,n){function r(t){var e=a.context(),n=c(t,"executor-",e),r=new f(n);return a.context(r).getCtx=function(){return e},a.emit("new-promise",[r,e],e),r}function o(t,e){return e}var i=t(23),a=t("ee").get("promise"),c=i(a),s=t(20),f=NREUM.o.PR;e.exports=a,f&&(window.Promise=r,["all","race"].forEach(function(t){var e=f[t];f[t]=function(n){function r(t){return function(){a.emit("propagate",[null,!o],i),o=o||!t}}var o=!1;s(n,function(e,n){Promise.resolve(n).then(r("all"===t),r(!1))});var i=e.apply(f,arguments),c=f.resolve(i);return c}}),["resolve","reject"].forEach(function(t){var e=f[t];f[t]=function(t){var n=e.apply(f,arguments);return t!==n&&a.emit("propagate",[t,!0],n),n}}),f.prototype["catch"]=function(t){return this.then(null,t)},f.prototype=Object.create(f.prototype,{constructor:{value:r}}),s(Object.getOwnPropertyNames(f),function(t,e){try{r[e]=f[e]}catch(n){}}),a.on("executor-start",function(t){t[0]=c(t[0],"resolve-",this),t[1]=c(t[1],"resolve-",this)}),a.on("executor-err",function(t,e,n){t[1](n)}),c.inPlace(f.prototype,["then"],"then-",o),a.on("then-start",function(t,e){this.promise=e,t[0]=c(t[0],"cb-",this),t[1]=c(t[1],"cb-",this)}),a.on("then-end",function(t,e,n){this.nextPromise=n;var r=this.promise;a.emit("propagate",[r,!0],n)}),a.on("cb-end",function(t,e,n){a.emit("propagate",[n,!0],this.nextPromise)}),a.on("propagate",function(t,e,n){this.getCtx&&!e||(this.getCtx=function(){if(t instanceof Promise)var e=a.context(t);return e&&e.getCtx?e.getCtx():this})}),r.toString=function(){return""+f})},{}],12:[function(t,e,n){var r=t("ee").get("raf"),o=t(23)(r),i="equestAnimationFrame";e.exports=r,o.inPlace(window,["r"+i,"mozR"+i,"webkitR"+i,"msR"+i],"raf-"),r.on("raf-start",function(t){t[0]=o(t[0],"fn-")})},{}],13:[function(t,e,n){function r(t,e,n){t[0]=a(t[0],"fn-",null,n)}function o(t,e,n){this.method=n,this.timerDuration=isNaN(t[1])?0:+t[1],t[0]=a(t[0],"fn-",this,n)}var i=t("ee").get("timer"),a=t(23)(i),c="setTimeout",s="setInterval",f="clearTimeout",u="-start",d="-";e.exports=i,a.inPlace(window,[c,"setImmediate"],c+d),a.inPlace(window,[s],s+d),a.inPlace(window,[f,"clearImmediate"],f+d),i.on(s+u,r),i.on(c+u,o)},{}],14:[function(t,e,n){function r(t,e){d.inPlace(e,["onreadystatechange"],"fn-",c)}function o(){var t=this,e=u.context(t);t.readyState>3&&!e.resolved&&(e.resolved=!0,u.emit("xhr-resolved",[],t)),d.inPlace(t,y,"fn-",c)}function i(t){b.push(t),l&&(x?x.then(a):v?v(a):(E=-E,P.data=E))}function a(){for(var t=0;t<b.length;t++)r([],b[t]);b.length&&(b=[])}function c(t,e){return e}function s(t,e){for(var n in t)e[n]=t[n];return e}t(6);var f=t("ee"),u=f.get("xhr"),d=t(23)(u),p=NREUM.o,h=p.XHR,l=p.MO,m=p.PR,v=p.SI,w="readystatechange",y=["onload","onerror","onabort","onloadstart","onloadend","onprogress","ontimeout"],b=[];e.exports=u;var g=window.XMLHttpRequest=function(t){var e=new h(t);try{u.emit("new-xhr",[e],e),e.addEventListener(w,o,!1)}catch(n){try{u.emit("internal-error",[n])}catch(r){}}return e};if(s(h,g),g.prototype=h.prototype,d.inPlace(g.prototype,["open","send"],"-xhr-",c),u.on("send-xhr-start",function(t,e){r(t,e),i(e)}),u.on("open-xhr-start",r),l){var x=m&&m.resolve();if(!v&&!m){var E=1,P=document.createTextNode(E);new l(a).observe(P,{characterData:!0})}}else f.on("fn-end",function(t){t[0]&&t[0].type===w||a()})},{}],15:[function(t,e,n){function r(t){var e=this.params,n=this.metrics;if(!this.ended){this.ended=!0;for(var r=0;r<d;r++)t.removeEventListener(u[r],this.listener,!1);if(!e.aborted){if(n.duration=a.now()-this.startTime,4===t.readyState){e.status=t.status;var i=o(t,this.lastSize);if(i&&(n.rxSize=i),this.sameOrigin){var s=t.getResponseHeader("X-NewRelic-App-Data");s&&(e.cat=s.split(", ").pop())}}else e.status=0;n.cbTime=this.cbTime,f.emit("xhr-done",[t],t),c("xhr",[e,n,this.startTime])}}}function o(t,e){var n=t.responseType;if("json"===n&&null!==e)return e;var r="arraybuffer"===n||"blob"===n||"json"===n?t.response:t.responseText;return l(r)}function i(t,e){var n=s(e),r=t.params;r.host=n.hostname+":"+n.port,r.pathname=n.pathname,t.sameOrigin=n.sameOrigin}var a=t("loader");if(a.xhrWrappable){var c=t("handle"),s=t(16),f=t("ee"),u=["load","error","abort","timeout"],d=u.length,p=t("id"),h=t(19),l=t(18),m=window.XMLHttpRequest;a.features.xhr=!0,t(14),f.on("new-xhr",function(t){var e=this;e.totalCbs=0,e.called=0,e.cbTime=0,e.end=r,e.ended=!1,e.xhrGuids={},e.lastSize=null,h&&(h>34||h<10)||window.opera||t.addEventListener("progress",function(t){e.lastSize=t.loaded},!1)}),f.on("open-xhr-start",function(t){this.params={method:t[0]},i(this,t[1]),this.metrics={}}),f.on("open-xhr-end",function(t,e){"loader_config"in NREUM&&"xpid"in NREUM.loader_config&&this.sameOrigin&&e.setRequestHeader("X-NewRelic-ID",NREUM.loader_config.xpid)}),f.on("send-xhr-start",function(t,e){var n=this.metrics,r=t[0],o=this;if(n&&r){var i=l(r);i&&(n.txSize=i)}this.startTime=a.now(),this.listener=function(t){try{"abort"===t.type&&(o.params.aborted=!0),("load"!==t.type||o.called===o.totalCbs&&(o.onloadCalled||"function"!=typeof e.onload))&&o.end(e)}catch(n){try{f.emit("internal-error",[n])}catch(r){}}};for(var c=0;c<d;c++)e.addEventListener(u[c],this.listener,!1)}),f.on("xhr-cb-time",function(t,e,n){this.cbTime+=t,e?this.onloadCalled=!0:this.called+=1,this.called!==this.totalCbs||!this.onloadCalled&&"function"==typeof n.onload||this.end(n)}),f.on("xhr-load-added",function(t,e){var n=""+p(t)+!!e;this.xhrGuids&&!this.xhrGuids[n]&&(this.xhrGuids[n]=!0,this.totalCbs+=1)}),f.on("xhr-load-removed",function(t,e){var n=""+p(t)+!!e;this.xhrGuids&&this.xhrGuids[n]&&(delete this.xhrGuids[n],this.totalCbs-=1)}),f.on("addEventListener-end",function(t,e){e instanceof m&&"load"===t[0]&&f.emit("xhr-load-added",[t[1],t[2]],e)}),f.on("removeEventListener-end",function(t,e){e instanceof m&&"load"===t[0]&&f.emit("xhr-load-removed",[t[1],t[2]],e)}),f.on("fn-start",function(t,e,n){e instanceof m&&("onload"===n&&(this.onload=!0),("load"===(t[0]&&t[0].type)||this.onload)&&(this.xhrCbStart=a.now()))}),f.on("fn-end",function(t,e){this.xhrCbStart&&f.emit("xhr-cb-time",[a.now()-this.xhrCbStart,this.onload,e],e)})}},{}],16:[function(t,e,n){e.exports=function(t){var e=document.createElement("a"),n=window.location,r={};e.href=t,r.port=e.port;var o=e.href.split("://");!r.port&&o[1]&&(r.port=o[1].split("/")[0].split("@").pop().split(":")[1]),r.port&&"0"!==r.port||(r.port="https"===o[0]?"443":"80"),r.hostname=e.hostname||n.hostname,r.pathname=e.pathname,r.protocol=o[0],"/"!==r.pathname.charAt(0)&&(r.pathname="/"+r.pathname);var i=!e.protocol||":"===e.protocol||e.protocol===n.protocol,a=e.hostname===document.domain&&e.port===n.port;return r.sameOrigin=i&&(!e.hostname||a),r}},{}],17:[function(t,e,n){function r(){}function o(t,e,n){return function(){return i(t,[f.now()].concat(c(arguments)),e?null:this,n),e?void 0:this}}var i=t("handle"),a=t(20),c=t(21),s=t("ee").get("tracer"),f=t("loader"),u=NREUM;"undefined"==typeof window.newrelic&&(newrelic=u);var d=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit","addRelease"],p="api-",h=p+"ixn-";a(d,function(t,e){u[e]=o(p+e,!0,"api")}),u.addPageAction=o(p+"addPageAction",!0),u.setCurrentRouteName=o(p+"routeName",!0),e.exports=newrelic,u.interaction=function(){return(new r).get()};var l=r.prototype={createTracer:function(t,e){var n={},r=this,o="function"==typeof e;return i(h+"tracer",[f.now(),t,n],r),function(){if(s.emit((o?"":"no-")+"fn-start",[f.now(),r,o],n),o)try{return e.apply(this,arguments)}catch(t){throw s.emit("fn-err",[arguments,this,t],n),t}finally{s.emit("fn-end",[f.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(t,e){l[e]=o(h+e)}),newrelic.noticeError=function(t){"string"==typeof t&&(t=new Error(t)),i("err",[t,f.now()])}},{}],18:[function(t,e,n){e.exports=function(t){if("string"==typeof t&&t.length)return t.length;if("object"==typeof t){if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer&&t.byteLength)return t.byteLength;if("undefined"!=typeof Blob&&t instanceof Blob&&t.size)return t.size;if(!("undefined"!=typeof FormData&&t instanceof FormData))try{return JSON.stringify(t).length}catch(e){return}}}},{}],19:[function(t,e,n){var r=0,o=navigator.userAgent.match(/Firefox[\/\s](\d+\.\d+)/);o&&(r=+o[1]),e.exports=r},{}],20:[function(t,e,n){function r(t,e){var n=[],r="",i=0;for(r in t)o.call(t,r)&&(n[i]=e(r,t[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;e.exports=r},{}],21:[function(t,e,n){function r(t,e,n){e||(e=0),"undefined"==typeof n&&(n=t?t.length:0);for(var r=-1,o=n-e||0,i=Array(o<0?0:o);++r<o;)i[r]=t[e+r];return i}e.exports=r},{}],22:[function(t,e,n){e.exports={exists:"undefined"!=typeof window.performance&&window.performance.timing&&"undefined"!=typeof window.performance.timing.navigationStart}},{}],23:[function(t,e,n){function r(t){return!(t&&t instanceof Function&&t.apply&&!t[a])}var o=t("ee"),i=t(21),a="nr@original",c=Object.prototype.hasOwnProperty,s=!1;e.exports=function(t,e){function n(t,e,n,o){function nrWrapper(){var r,a,c,s;try{a=this,r=i(arguments),c="function"==typeof n?n(r,a):n||{}}catch(f){p([f,"",[r,a,o],c])}u(e+"start",[r,a,o],c);try{return s=t.apply(a,r)}catch(d){throw u(e+"err",[r,a,d],c),d}finally{u(e+"end",[r,a,s],c)}}return r(t)?t:(e||(e=""),nrWrapper[a]=t,d(t,nrWrapper),nrWrapper)}function f(t,e,o,i){o||(o="");var a,c,s,f="-"===o.charAt(0);for(s=0;s<e.length;s++)c=e[s],a=t[c],r(a)||(t[c]=n(a,f?c+o:o,i,c))}function u(n,r,o){if(!s||e){var i=s;s=!0;try{t.emit(n,r,o,e)}catch(a){p([a,n,r,o])}s=i}}function d(t,e){if(Object.defineProperty&&Object.keys)try{var n=Object.keys(t);return n.forEach(function(n){Object.defineProperty(e,n,{get:function(){return t[n]},set:function(e){return t[n]=e,e}})}),e}catch(r){p([r])}for(var o in t)c.call(t,o)&&(e[o]=t[o]);return e}function p(e){try{t.emit("internal-error",e)}catch(n){}}return t||(t=o),n.inPlace=f,n.flag=a,n}},{}],ee:[function(t,e,n){function r(){}function o(t){function e(t){return t&&t instanceof r?t:t?s(t,c,i):i()}function n(n,r,o,i){if(!p.aborted||i){t&&t(n,r,o);for(var a=e(o),c=l(n),s=c.length,f=0;f<s;f++)c[f].apply(a,r);var d=u[y[n]];return d&&d.push([b,n,r,a]),a}}function h(t,e){w[t]=l(t).concat(e)}function l(t){return w[t]||[]}function m(t){return d[t]=d[t]||o(n)}function v(t,e){f(t,function(t,n){e=e||"feature",y[n]=e,e in u||(u[e]=[])})}var w={},y={},b={on:h,emit:n,get:m,listeners:l,context:e,buffer:v,abort:a,aborted:!1};return b}function i(){return new r}function a(){(u.api||u.feature)&&(p.aborted=!0,u=p.backlog={})}var c="nr@context",s=t("gos"),f=t(20),u={},d={},p=e.exports=o();p.backlog=u},{}],gos:[function(t,e,n){function r(t,e,n){if(o.call(t,e))return t[e];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,e,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return t[e]=r,r}var o=Object.prototype.hasOwnProperty;e.exports=r},{}],handle:[function(t,e,n){function r(t,e,n,r){o.buffer([t],r),o.emit(t,e,n)}var o=t("ee").get("handle");e.exports=r,r.ee=o},{}],id:[function(t,e,n){function r(t){var e=typeof t;return!t||"object"!==e&&"function"!==e?-1:t===window?0:a(t,i,function(){return o++})}var o=1,i="nr@id",a=t("gos");e.exports=r},{}],loader:[function(t,e,n){function r(){if(!x++){var t=g.info=NREUM.info,e=p.getElementsByTagName("script")[0];if(setTimeout(u.abort,3e4),!(t&&t.licenseKey&&t.applicationID&&e))return u.abort();f(y,function(e,n){t[e]||(t[e]=n)}),s("mark",["onload",a()+g.offset],null,"api");var n=p.createElement("script");n.src="https://"+t.agent,e.parentNode.insertBefore(n,e)}}function o(){"complete"===p.readyState&&i()}function i(){s("mark",["domContent",a()+g.offset],null,"api")}function a(){return E.exists&&performance.now?Math.round(performance.now()):(c=Math.max((new Date).getTime(),c))-g.offset}var c=(new Date).getTime(),s=t("handle"),f=t(20),u=t("ee"),d=window,p=d.document,h="addEventListener",l="attachEvent",m=d.XMLHttpRequest,v=m&&m.prototype;NREUM.o={ST:setTimeout,SI:d.setImmediate,CT:clearTimeout,XHR:m,REQ:d.Request,EV:d.Event,PR:d.Promise,MO:d.MutationObserver};var w=""+location,y={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-spa-1071.min.js"},b=m&&v&&v[h]&&!/CriOS/.test(navigator.userAgent),g=e.exports={offset:c,now:a,origin:w,features:{},xhrWrappable:b};t(17),p[h]?(p[h]("DOMContentLoaded",i,!1),d[h]("load",r,!1)):(p[l]("onreadystatechange",o),d[l]("onload",r)),s("mark",["firstbyte",c],null,"api");var x=0,E=t(22)},{}]},{},["loader",2,15,5,3,4]);</script><link rel="apple-touch-icon" href="https://www.safaribooksonline.com/static/images/apple-touch-icon.0c29511d2d72.png"><link rel="shortcut icon" href="https://www.safaribooksonline.com/favicon.ico" type="image/x-icon"><link href="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/css" rel="stylesheet" type="text/css"><title>3&nbsp;Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)</title><link rel="stylesheet" href="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/b8d25f1a9a05.css" type="text/css"><link rel="stylesheet" type="text/css" href="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/annotator.ef38b0457d7b.css"><link rel="stylesheet" href="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/font-awesome.min.css"><style type="text/css" title="ibis-book">@page{margin:1.5em}#sbo-rt-content div{margin:0 .5em 0 .5em}#sbo-rt-content svg{height:98%;width:100%}#sbo-rt-content img{max-height:100%;max-width:100%}#sbo-rt-content a{text-decoration:none}#sbo-rt-content .dedi1{margin-top:8em;margin-bottom:.4em;text-align:center}#sbo-rt-content .dedi{margin-top:1em;margin-bottom:.4em;text-align:center}#sbo-rt-content .copyright{margin-top:1em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .copyrightt{margin-top:1.5em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .h2{font-size:1.8em;margin-top:.5em;margin-bottom:.5em;text-indent:.1em}#sbo-rt-content .h2a{font-size:1.5em;margin-top:.2em;margin-bottom:2.5em;text-indent:.1em}#sbo-rt-content .h2d{font-size:130%;color:#fff;background-color:#000;padding:.2em;margin-right:40%;margin-top:2em;margin-bottom:2em;text-indent:1em}#sbo-rt-content .code{margin-top:1em;margin-bottom:1em;margin-left:5em}#sbo-rt-content .code1{margin-top:1em;margin-bottom:1em;margin-left:1.3em}#sbo-rt-content .codea{margin-top:1em;margin-bottom:1em;margin-left:.1em}#sbo-rt-content .code2{margin-top:1em;margin-bottom:1em;margin-left:2.5em}#sbo-rt-content .code2a{margin-top:1em;margin-bottom:1em;margin-left:3.5em}#sbo-rt-content .toc-chap{margin-top:1em;margin-bottom:.5em;margin-left:1em;text-indent:.01em}#sbo-rt-content .toc{margin-top:.1em;margin-bottom:.1em;margin-left:1.8em;text-indent:.01em}#sbo-rt-content .tocs{margin-top:.6em;margin-bottom:.6em;margin-left:1.2em;text-indent:.01em}#sbo-rt-content .tocs1{margin-top:.6em;margin-bottom:.4em;margin-left:3em;text-indent:.01em}#sbo-rt-content .noindentd{font-size:1.2em;color:#fff;background-color:#000;padding:.2em;margin-right:50%;margin-top:1em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .icon{margin-top:1em;margin-bottom:1em;text-indent:.01em}#sbo-rt-content .noindent{margin-top:.1em;margin-bottom:.1em;text-indent:.01em}#sbo-rt-content .noindentl{margin-top:1em;margin-bottom:.1em;margin-left:2.5em;text-indent:.01em}#sbo-rt-content .indent{margin-top:.1em;margin-bottom:.1em;text-indent:1.2em}#sbo-rt-content .indentt{margin-top:1em;margin-bottom:.1em;text-indent:1.2em}#sbo-rt-content .indenttb{margin-top:1em;margin-bottom:1em;text-indent:1.2em}#sbo-rt-content .h3{font-size:160%;margin-top:1.2em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .h3n{font-size:160%;margin-top:.5em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .h3s{font-size:120%;margin-top:.2em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .h3a{font-size:120%;color:#fff;background-color:#000;padding:.2em;margin-right:40%;margin-top:1.2em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .h3a1{font-size:120%;color:#fff;background-color:#000;padding:.2em;margin-right:65%;margin-top:1.2em;margin-bottom:.001em;text-indent:1em}#sbo-rt-content .line{margin-top:.1em;margin-bottom:.001em;border:0;border-bottom:solid black .1em}#sbo-rt-content .h4s{font-size:120%;margin-top:.5em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .h4{font-size:140%;margin-top:1.2em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .h4a{font-size:120%;margin-top:1.2em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .noindentt{margin-top:1em;margin-bottom:.1em;text-indent:.01em}#sbo-rt-content .indentb{margin-top:.1em;margin-bottom:1.2em;text-indent:1.2em}#sbo-rt-content .imagef{margin-top:1em;margin-bottom:1em;text-align:center}#sbo-rt-content .imagel{margin-top:1em;margin-bottom:1em;text-indent:.1em}#sbo-rt-content .imagel1{margin-top:1em;margin-bottom:1em;margin-left:1em;text-indent:.1em}#sbo-rt-content .images{margin-top:1em;margin-bottom:1em;text-align:center}#sbo-rt-content .inline{text-decoration:middle}#sbo-rt-content .imaget{margin-top:.5em;margin-bottom:.5em;text-indent:.1em}#sbo-rt-content .right{margin-top:.1em;margin-bottom:.1em;text-align:right}#sbo-rt-content .figs{background-color:#000;color:#fff;padding:.2em}#sbo-rt-content .bull{margin-top:.3em;margin-bottom:.1em;margin-left:3.5em;text-indent:-1.5em}#sbo-rt-content .tick{margin-top:.5em;margin-bottom:.1em;text-indent:-2em;margin-left:4em}#sbo-rt-content .drop{font-size:4em;margin:-.2em .01em -.2em .01em;text-indent:.01em;float:left}#sbo-rt-content .tick1{margin-top:.5em;margin-bottom:.1em;text-indent:-2em;margin-left:3em}#sbo-rt-content .noindenttop{margin-top:4em;margin-bottom:.2em;text-indent:.01em}#sbo-rt-content .bulletxlb{margin-top:.4em;margin-bottom:.4em;margin-left:5.7em;text-indent:-1.4em}#sbo-rt-content .bulletxlb1{margin-top:.4em;margin-bottom:.4em;margin-left:7em;text-indent:-1.4em}#sbo-rt-content .bulletxl{margin-top:.4em;margin-bottom:.4em;margin-left:5.7em;text-indent:-5.3em}#sbo-rt-content .bulletxla{margin-top:.4em;margin-bottom:.4em;margin-left:5.7em;text-indent:-3.2em}#sbo-rt-content .bulletxls{margin-top:.4em;margin-bottom:.4em;margin-left:4em;text-indent:-1.4em}#sbo-rt-content .bulletxt{margin-top:1em;margin-bottom:.1em;margin-left:2.6em;text-indent:-1.4em}#sbo-rt-content .bulletxn{margin-top:1em;margin-bottom:.1em;margin-left:2.6em;text-indent:.01em}#sbo-rt-content .bulletx{margin-top:.4em;margin-bottom:.1em;margin-left:2.6em;text-indent:-1.4em}#sbo-rt-content .bulletxs{margin-top:.4em;margin-bottom:.1em;margin-left:4.2em;text-indent:-1.5em}#sbo-rt-content .bulletxsa{margin-top:.4em;margin-bottom:.1em;margin-left:1.6em;text-indent:-1.4em}#sbo-rt-content .bulletxb{margin-top:.3em;margin-bottom:1em;margin-left:2.6em;text-indent:-1.4em}#sbo-rt-content .sidebar{margin-top:1em;margin-bottom:-.1em;border:solid #b2b3b6 .2em;background-color:#666769;padding:.5em;text-indent:.01em}#sbo-rt-content .sidebar1{margin-top:.001em;margin-bottom:1em;border:solid #b2b3b6 .2em;background-color:#e7e7e8;padding:.5em;text-indent:.01em}#sbo-rt-content .sideh{font-size:1.4em;color:#fff;margin-top:.5em;margin-bottom:.5em;text-align:center}#sbo-rt-content .sidehl{font-size:1.2em;margin-top:.5em;margin-bottom:.5em;text-indent:.1em}#sbo-rt-content .side-exam{margin-top:1em;margin-bottom:1em;text-indent:.01em;border:solid .1em;background-color:#eeefef;padding:1em}#sbo-rt-content .Text-icon-exam1{font-weight:bold;margin-top:1em;margin-bottom:.2em;text-indent:.01em}#sbo-rt-content .Text-icon-exam{font-weight:bold;margin-top:.5em;margin-bottom:.2em;text-indent:.01em}#sbo-rt-content .Text-icon-exami{font-weight:bold;margin-top:.5em;margin-bottom:.2em;text-indent:1.2em}#sbo-rt-content .under{text-decoration:underline}#sbo-rt-content .hanga{margin-top:.1em;margin-bottom:.6em;margin-left:2.5em;text-indent:-1.5em}#sbo-rt-content .hangai{margin-top:.1em;margin-bottom:.1em;margin-left:2.5em;text-indent:1.2em}#sbo-rt-content .hangan{margin-top:.1em;margin-bottom:.1em;margin-left:2.5em;text-indent:.1em}#sbo-rt-content .hanga1{margin-top:.1em;margin-bottom:.6em;margin-left:2.5em;text-indent:-2em}#sbo-rt-content .bqt{font-size:.9em;margin-top:1em;margin-bottom:.5em;margin-left:1em;text-indent:.01em}#sbo-rt-content .bq{font-size:.9em;margin-top:.5em;margin-bottom:.5em;margin-left:1.5em;text-indent:.01em}#sbo-rt-content .bqs{font-size:.9em;margin-top:.5em;margin-bottom:.5em;margin-left:2em;text-indent:.01em}#sbo-rt-content .noindentb{margin-top:.1em;margin-bottom:1em;text-indent:.01em}#sbo-rt-content .noindentb1{margin-top:.1em;margin-bottom:2em;text-indent:.01em}#sbo-rt-content .toc-lev1{margin-top:.1em;margin-bottom:.1em;margin-left:3em;text-indent:-1.2em}#sbo-rt-content .toc-lev2{margin-top:.1em;margin-bottom:.1em;margin-left:6.5em;text-indent:-1.2em}#sbo-rt-content .toc-lev3{margin-top:.1em;margin-bottom:.1em;margin-left:1.8em;text-indent:.01em}#sbo-rt-content .toc-lev3a{margin-top:.1em;margin-bottom:.1em;margin-left:5.4em;text-indent:.01em}#sbo-rt-content .toc-index{margin-top:2em;margin-bottom:.1em;margin-left:2em;text-indent:.01em}#sbo-rt-content .numst{margin-top:1em;margin-bottom:.1em;margin-left:2.3em;text-indent:-1.4em}#sbo-rt-content .numst1{margin-top:1em;margin-bottom:.1em;margin-left:1.8em;text-indent:-1.4em}#sbo-rt-content .numsn{margin-top:1em;margin-bottom:.1em;margin-left:2.3em;text-indent:.1em}#sbo-rt-content .numsb{margin-top:.1em;margin-bottom:1em;margin-left:2.3em;text-indent:-1.3em}#sbo-rt-content .nums{margin-top:.3em;margin-bottom:.3em;margin-left:2.3em;text-indent:-1.3em}#sbo-rt-content .figcap{margin-top:.1em;margin-bottom:1.5em;text-indent:.01em}#sbo-rt-content .tabcap{margin-top:1.5em;margin-bottom:.8em;text-indent:.01em}#sbo-rt-content .ash{color:#939598}#sbo-rt-content .ash1{font-size:1.3em;color:#939598}#sbo-rt-content .fonts{font-size:1.2em}#sbo-rt-content .num{margin-top:.1em;margin-bottom:.1em;margin-left:1.6em;text-indent:-1em}#sbo-rt-content .numn{margin-top:.4em;margin-bottom:.1em;margin-left:1.7em;text-indent:.1em}#sbo-rt-content .numin{margin-top:.1em;margin-bottom:.1em;margin-left:1.6em;text-indent:1.2em}#sbo-rt-content .numa{margin-top:.1em;margin-bottom:.4em;margin-left:3.9em;text-indent:-1.7em}#sbo-rt-content .numl{margin-top:.4em;margin-bottom:.1em;margin-left:3.6em;text-indent:-1em}#sbo-rt-content .numln{margin-top:.4em;margin-bottom:.1em;margin-left:3.6em;text-indent:.1em}#sbo-rt-content .bqi{font-size:.9em;margin-top:.5em;margin-bottom:.5em;margin-left:5em;text-indent:1.2em}#sbo-rt-content .noindenttop1{margin-top:4em;margin-bottom:1em;text-indent:.01em}#sbo-rt-content .coden{margin-top:.8em;margin-bottom:.8em;margin-left:1.5em}#sbo-rt-content .numlist{margin-top:.1em;margin-bottom:.1em;margin-left:2.5em;text-indent:-1.5em}#sbo-rt-content .noindent1{margin-top:1em;margin-bottom:1em;text-indent:.01em}#sbo-rt-content .noindentn{margin-top:.1em;margin-bottom:.1em;margin-left:.1em;text-indent:.01em}#sbo-rt-content .image-t{margin-top:.2em;margin-bottom:1.5em;text-indent:.01em}#sbo-rt-content .image-f{margin-top:1em;margin-bottom:.5em;text-align:center}#sbo-rt-content .code-n{margin-top:.5em;margin-bottom:.5em;margin-left:2.3em}#sbo-rt-content .hr{margin-top:.5em;margin-bottom:1.5em;border-bottom:solid #939598 .2em}#sbo-rt-content .bqn{font-size:.9em;margin-top:.8em;margin-bottom:.8em;margin-left:1.3em;text-indent:.01em}#sbo-rt-content .code-n1{margin-top:.7em;margin-bottom:.7em;margin-left:2.8em}#sbo-rt-content .numlistk{margin-top:.1em;margin-bottom:.1em;margin-left:2.2em;text-indent:-1.6em}#sbo-rt-content .numlistk1{margin-top:.5em;margin-bottom:.1em;margin-left:1.9em;text-indent:-1.6em}#sbo-rt-content .code-1{margin-top:.5em;margin-bottom:.5em;margin-left:2.5em}#sbo-rt-content .numlist-n{margin-top:.3em;margin-bottom:.3em;margin-left:2.2em;text-indent:.01em}#sbo-rt-content .num-k{margin-top:.3em;margin-bottom:.3em;margin-left:4em;text-indent:-1.6em}#sbo-rt-content .hang-a{margin-top:.1em;margin-bottom:.5em;margin-left:2.4em;text-indent:.01em}#sbo-rt-content .h5{font-size:120%;margin-top:1.5em;margin-bottom:.3em;text-indent:.01em}#sbo-rt-content .indenta{margin-top:.3em;margin-bottom:.3em;margin-left:1.5em;text-indent:.01em}#sbo-rt-content .indent-a{margin-top:.5em;margin-bottom:.5em;margin-left:1.2em;text-indent:.01em}#sbo-rt-content .indexmain{margin-top:.1em;margin-bottom:.1em;margin-left:1em;text-indent:-1em}#sbo-rt-content .indexhead{margin-top:.7em;margin-bottom:.3em;width:20%;font-size:1.3em;margin-left:1.5em;text-indent:.5em;background-color:#6d6e71;color:#fff;padding:.2em}#sbo-rt-content .indexsub{margin-top:.1em;margin-bottom:.1em;margin-left:2.6em;text-indent:-1em}#sbo-rt-content .h2-n{font-size:1.3em;margin-top:2em;margin-bottom:2em;text-indent:2em;background-color:#231f20;color:#fff;width:30%;padding:.2em}#sbo-rt-content .image-n{margin-top:.1em;margin-bottom:.1em;text-align:center}#sbo-rt-content .imagea{margin-top:2em;margin-bottom:.5em;text-align:left}</style><script> // <![CDATA[
    var g = {
      position_cache: {
        
          "chapter": "/api/v1/book/9781260011388/chapter/cover.html",
          "book_id": "9781260011388",
          "chapter_uri": "cover.html",
          "position": 0,
          "user_uuid": "bece7dd7-9327-4cc1-a1c8-17e84b9a1059",
          "next_chapter_uri": "/library/view/oca-java-se/9781260011388/title.html"
        
      },
      title: "OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0\u002D808)",
      author_list: "Bert Bates, Kathy Sierra",
      format: "book",
      source: "application/epub+zip",
      is_system_book: true,
      is_public: false,
      loaded_from_server: true,
      allow_scripts: false,
      has_mathml: false,
      show_ios_app_teaser: false
    };
    // ]]></script><script src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/modernizr.js"></script><script>
    
      
        

        

        
          
            window.PUBLIC_ANNOTATIONS = true;
          
        

      

      
        window.MOBILE_PUBLIC_ANNOTATIONS = false;
      

    

    
      window.PRIVACY_CONTROL_OVERRIDE = false;
    

    
      window.PRIVACY_CONTROL_SWITCH = true;
    

    
      window.PUBLISHER_PAGES = true;
    

      window.SBO = {
        "constants": {
          "SITB_ENDPOINT": "https://www.safaribooksonline.com/api/v2/sitb/",
          "SEARCH_SELECT_ENDPOINT": "https://www.safaribooksonline.com/api/v2/search/select/",
          "ENABLE_ONLINE_TRAINING": true
        }
      };
  </script><link rel="canonical" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html"><meta name="description" content=" "><meta property="og:title" content="Cover Page"><meta itemprop="isPartOf" content="/library/view/oca-java-se/9781260011388/"><meta itemprop="name" content="Cover Page"><meta property="og:url" itemprop="url" content="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html"><meta property="og:site_name" content="Safari"><meta property="og:image" itemprop="thumbnailUrl" content="https://www.safaribooksonline.com/library/cover/9781260011388/"><meta property="og:description" itemprop="description" content=" "><meta itemprop="inLanguage" content="en"><meta itemprop="publisher" content="McGraw-Hill"><meta property="og:type" content="book"><meta property="og:book:isbn" itemprop="isbn" content="9781260011388"><meta property="og:book:author" itemprop="author" content="Bert Bates"><meta property="og:book:author" itemprop="author" content="Kathy Sierra"><meta property="og:book:tag" itemprop="about" content="Certification"><meta property="og:book:tag" itemprop="about" content="Java"><meta name="twitter:card" content="summary"><meta name="twitter:site" content="@safari"><style type="text/css" id="font-styles" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }"></style><style type="text/css" id="font-family" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }"></style><style type="text/css" id="column-width" data-template="#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }"></style><noscript>&lt;meta http-equiv="refresh" content="0; url=/library/no-js/" /&gt;</noscript><script type="text/javascript">
  (function(i,s,o,g,r,a,m) {
    i['GoogleAnalyticsObject']=r;
    i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();
    a=s.createElement(o),m=s.getElementsByTagName(o)[0];
    a.async=1;
    a.src=g;
    m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  var matches = document.cookie.match(/BrowserCookie\s*=\s*([a-f0-9\-]{36})/),
      user_uuid = null;

  if (matches && matches.length === 2) {
    user_uuid = matches[1];
  }


  ga('create', 'UA-39299553-7', {'userId': 'bece7dd7-9327-4cc1-a1c8-17e84b9a1059' });



  
    ga('set', 'dimension1', 'Trial');
  


ga('set', 'dimension6', user_uuid);


  ga('set', 'dimension2', 'bece7dd7-9327-4cc1-a1c8-17e84b9a1059');
  






//enable enhanced link tracking
ga('require', 'linkid', 'linkid.js');

// reading interface will track pageviews itself
if (document.location.pathname.indexOf("/library/view") !== 0) {
  ga('send', 'pageview');
}
</script><script>
    (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    '//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-5P4V6Z');
  </script><script defer="" src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/vendor.4bb90b301ddb.js"></script><script defer="" src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/reader.7bc20c923d74.js"></script><script src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource"></script><script src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(1)"></script><script async="" src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/MathJax.js"></script><style id="annotator-dynamic-style">.annotator-adder, .annotator-outer, .annotator-notice {
  z-index: 100019;
}
.annotator-filter {
  z-index: 100009;
}</style></head>


<body class="reading sidenav  scalefonts subscribe-panel library nav-collapsed">

    
  
  <noscript> 
    &lt;iframe src="//www.googletagmanager.com/ns.html?id=GTM-5P4V6Z"
            height="0" width="0"
            style="display:none;visibility:hidden"&gt;
    &lt;/iframe&gt;
  </noscript>
  



    
      <div class="hide working" role="status">
        <div class="working-image"></div>
      </div>
      <div class="sbo-site-nav">
        





<a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#container" class="skip">Skip to content</a><header class="topbar t-topbar"><nav role="navigation" class="js-site-nav"><ul class="topnav"><li class="t-logo"><a href="https://www.safaribooksonline.com/home/" class="l0 None safari-home nav-icn js-keyboard-nav-home"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>Safari Home Icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M4 9.9L4 9.9 4 18 16 18 16 9.9 10 4 4 9.9ZM2.6 8.1L2.6 8.1 8.7 1.9 10 0.5 11.3 1.9 17.4 8.1 18 8.7 18 9.5 18 18.1 18 20 16.1 20 3.9 20 2 20 2 18.1 2 9.5 2 8.7 2.6 8.1Z"></path><rect x="10" y="12" width="3" height="7"></rect><rect transform="translate(18.121320, 10.121320) rotate(-315.000000) translate(-18.121320, -10.121320) " x="16.1" y="9.1" width="4" height="2"></rect><rect transform="translate(2.121320, 10.121320) scale(-1, 1) rotate(-315.000000) translate(-2.121320, -10.121320) " x="0.1" y="9.1" width="4" height="2"></rect></g></svg><span>Safari Home</span></a></li><li><a href="https://www.safaribooksonline.com/r/" class="t-recommendations-nav l0 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>recommendations icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M50 25C50 18.2 44.9 12.5 38.3 11.7 37.5 5.1 31.8 0 25 0 18.2 0 12.5 5.1 11.7 11.7 5.1 12.5 0 18.2 0 25 0 31.8 5.1 37.5 11.7 38.3 12.5 44.9 18.2 50 25 50 31.8 50 37.5 44.9 38.3 38.3 44.9 37.5 50 31.8 50 25ZM25 3.1C29.7 3.1 33.6 6.9 34.4 11.8 30.4 12.4 26.9 15.1 25 18.8 23.1 15.1 19.6 12.4 15.6 11.8 16.4 6.9 20.3 3.1 25 3.1ZM34.4 15.6C33.6 19.3 30.7 22.2 27.1 22.9 27.8 19.2 30.7 16.3 34.4 15.6ZM22.9 22.9C19.2 22.2 16.3 19.3 15.6 15.6 19.3 16.3 22.2 19.2 22.9 22.9ZM3.1 25C3.1 20.3 6.9 16.4 11.8 15.6 12.4 19.6 15.1 23.1 18.8 25 15.1 26.9 12.4 30.4 11.8 34.4 6.9 33.6 3.1 29.7 3.1 25ZM22.9 27.1C22.2 30.7 19.3 33.6 15.6 34.4 16.3 30.7 19.2 27.8 22.9 27.1ZM25 46.9C20.3 46.9 16.4 43.1 15.6 38.2 19.6 37.6 23.1 34.9 25 31.3 26.9 34.9 30.4 37.6 34.4 38.2 33.6 43.1 29.7 46.9 25 46.9ZM27.1 27.1C30.7 27.8 33.6 30.7 34.4 34.4 30.7 33.6 27.8 30.7 27.1 27.1ZM38.2 34.4C37.6 30.4 34.9 26.9 31.3 25 34.9 23.1 37.6 19.6 38.2 15.6 43.1 16.4 46.9 20.3 46.9 25 46.9 29.7 43.1 33.6 38.2 34.4Z"></path></g></svg><span>Recommended</span></a></li><li><a href="https://www.safaribooksonline.com/s/" class="t-queue-nav l0 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>queue icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 29.2C25.4 29.2 25.8 29.1 26.1 28.9L48.7 16.8C49.5 16.4 50 15.5 50 14.6 50 13.7 49.5 12.8 48.7 12.4L26.1 0.3C25.4-0.1 24.6-0.1 23.9 0.3L1.3 12.4C0.5 12.8 0 13.7 0 14.6 0 15.5 0.5 16.4 1.3 16.8L23.9 28.9C24.2 29.1 24.6 29.2 25 29.2ZM7.3 14.6L25 5.2 42.7 14.6 25 24 7.3 14.6ZM48.7 22.4L47.7 21.9 25 34.2 2.3 21.9 1.3 22.4C0.5 22.9 0 23.7 0 24.7 0 25.6 0.5 26.5 1.3 26.9L23.9 39.3C24.2 39.5 24.6 39.6 25 39.6 25.4 39.6 25.8 39.5 26.1 39.3L48.7 26.9C49.5 26.5 50 25.6 50 24.7 50 23.7 49.5 22.9 48.7 22.4ZM48.7 32.8L47.7 32.3 25 44.6 2.3 32.3 1.3 32.8C0.5 33.3 0 34.1 0 35.1 0 36 0.5 36.9 1.3 37.3L23.9 49.7C24.2 49.9 24.6 50 25 50 25.4 50 25.8 49.9 26.1 49.7L48.7 37.3C49.5 36.9 50 36 50 35.1 50 34.1 49.5 33.3 48.7 32.8Z"></path></g></svg><span>
                  Queue
              </span></a></li><li class="search"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#" class="t-search-nav trigger nav-icn l0" data-dropdown-selector=".searchbox"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>search icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M31.3 0C20.9 0 12.5 8.4 12.5 18.8 12.5 22.5 13.6 25.9 15.4 28.8L1.2 42.9C-0.4 44.5-0.4 47.2 1.2 48.8 2 49.6 3.1 50 4.2 50 5.2 50 6.3 49.6 7.1 48.8L21.2 34.6C24.1 36.5 27.5 37.5 31.3 37.5 41.6 37.5 50 29.1 50 18.8 50 8.4 41.6 0 31.3 0ZM31.3 31.3C24.4 31.3 18.8 25.6 18.8 18.8 18.8 11.9 24.4 6.3 31.3 6.3 38.1 6.3 43.8 11.9 43.8 18.8 43.8 25.6 38.1 31.3 31.3 31.3Z"></path></g></svg><span>Search</span></a></li><li class="usermenu dropdown"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#" class="trigger l0 nav-icn nav-dropdown"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>navigation arrow</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M0.1 12.5L9.7 3.1C9.8 3 9.9 3 10 3 10.1 3 10.2 3 10.3 3.1L19.9 12.5C20 12.5 20 12.6 20 12.8 20 12.9 20 13 19.9 13L17 15.9C16.9 16 16.8 16 16.7 16 16.5 16 16.4 16 16.4 15.9L10 9.7 3.6 15.9C3.6 16 3.5 16 3.3 16 3.2 16 3.1 16 3 15.9L0.1 13C0 12.9 0 12.8 0 12.7 0 12.7 0 12.6 0.1 12.5Z"></path></g></svg><span>Expand Nav</span></a><div class="drop-content"><ul><li><a href="https://www.safaribooksonline.com/history/" class="t-recent-nav l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>recent items icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 0C11.2 0 0 11.2 0 25 0 38.8 11.2 50 25 50 38.8 50 50 38.8 50 25 50 11.2 38.8 0 25 0ZM6.3 25C6.3 14.6 14.6 6.3 25 6.3 35.4 6.3 43.8 14.6 43.8 25 43.8 35.4 35.4 43.8 25 43.8 14.6 43.8 6.3 35.4 6.3 25ZM31.8 31.5C32.5 30.5 32.4 29.2 31.6 28.3L27.1 23.8 27.1 12.8C27.1 11.5 26.2 10.4 25 10.4 23.9 10.4 22.9 11.5 22.9 12.8L22.9 25.7 28.8 31.7C29.2 32.1 29.7 32.3 30.2 32.3 30.8 32.3 31.3 32 31.8 31.5Z"></path></g></svg><span>History</span></a></li><li><a href="https://www.safaribooksonline.com/topics" class="t-topics-link l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 55" width="20" height="20" version="1.1" fill="#4A3C31"><desc>topics icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 55L50 41.262 50 13.762 25 0 0 13.762 0 41.262 25 55ZM8.333 37.032L8.333 17.968 25 8.462 41.667 17.968 41.667 37.032 25 46.538 8.333 37.032Z"></path></g></svg><span>Topics</span></a></li><li><a href="https://www.safaribooksonline.com/tutorials/" class="l1 nav-icn t-tutorials-nav js-toggle-menu-item None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>tutorials icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M15.8 18.2C15.8 18.2 15.9 18.2 16 18.2 16.1 18.2 16.2 18.2 16.4 18.2 16.5 18.2 16.7 18.1 16.9 18 17 17.9 17.1 17.8 17.2 17.7 17.3 17.6 17.4 17.5 17.4 17.4 17.5 17.2 17.6 16.9 17.6 16.7 17.6 16.6 17.6 16.5 17.6 16.4 17.5 16.2 17.5 16.1 17.4 15.9 17.3 15.8 17.2 15.6 17 15.5 16.8 15.3 16.6 15.3 16.4 15.2 16.2 15.2 16 15.2 15.8 15.2 15.7 15.2 15.5 15.3 15.3 15.4 15.2 15.4 15.1 15.5 15 15.7 14.9 15.8 14.8 15.9 14.7 16 14.7 16.1 14.6 16.3 14.6 16.4 14.6 16.5 14.6 16.6 14.6 16.6 14.6 16.7 14.6 16.9 14.6 17 14.6 17.1 14.7 17.3 14.7 17.4 14.8 17.6 15 17.7 15.1 17.9 15.2 18 15.3 18 15.5 18.1 15.5 18.1 15.6 18.2 15.7 18.2 15.7 18.2 15.7 18.2 15.8 18.2L15.8 18.2ZM9.4 11.5C9.5 11.5 9.5 11.5 9.6 11.5 9.7 11.5 9.9 11.5 10 11.5 10.2 11.5 10.3 11.4 10.5 11.3 10.6 11.2 10.8 11.1 10.9 11 10.9 10.9 11 10.8 11.1 10.7 11.2 10.5 11.2 10.2 11.2 10 11.2 9.9 11.2 9.8 11.2 9.7 11.2 9.5 11.1 9.4 11 9.2 10.9 9.1 10.8 8.9 10.6 8.8 10.5 8.7 10.3 8.6 10 8.5 9.9 8.5 9.7 8.5 9.5 8.5 9.3 8.5 9.1 8.6 9 8.7 8.8 8.7 8.7 8.8 8.6 9 8.5 9.1 8.4 9.2 8.4 9.3 8.2 9.5 8.2 9.8 8.2 10 8.2 10.1 8.2 10.2 8.2 10.3 8.2 10.5 8.3 10.6 8.4 10.7 8.5 10.9 8.6 11.1 8.7 11.2 8.9 11.3 9 11.4 9.1 11.4 9.2 11.4 9.3 11.5 9.3 11.5 9.3 11.5 9.4 11.5 9.4 11.5L9.4 11.5ZM3 4.8C3.1 4.8 3.1 4.8 3.2 4.8 3.4 4.8 3.5 4.8 3.7 4.8 3.8 4.8 4 4.7 4.1 4.6 4.3 4.5 4.4 4.4 4.5 4.3 4.6 4.2 4.6 4.1 4.7 4 4.8 3.8 4.8 3.5 4.8 3.3 4.8 3.1 4.8 3 4.8 2.9 4.7 2.8 4.7 2.6 4.6 2.5 4.5 2.3 4.4 2.2 4.2 2.1 4 1.9 3.8 1.9 3.6 1.8 3.5 1.8 3.3 1.8 3.1 1.8 2.9 1.8 2.7 1.9 2.6 2 2.4 2.1 2.3 2.2 2.2 2.3 2.1 2.4 2 2.5 2 2.6 1.8 2.8 1.8 3 1.8 3.3 1.8 3.4 1.8 3.5 1.8 3.6 1.8 3.8 1.9 3.9 2 4 2.1 4.2 2.2 4.4 2.4 4.5 2.5 4.6 2.6 4.7 2.7 4.7 2.8 4.7 2.9 4.8 2.9 4.8 3 4.8 3 4.8 3 4.8L3 4.8ZM13.1 15.2C13.2 15.1 13.2 15.1 13.2 15.1 13.3 14.9 13.4 14.7 13.6 14.5 13.8 14.2 14.1 14 14.4 13.8 14.7 13.6 15.1 13.5 15.5 13.4 15.9 13.4 16.3 13.4 16.7 13.5 17.2 13.5 17.6 13.7 17.9 13.9 18.2 14.1 18.5 14.4 18.7 14.7 18.9 15 19.1 15.3 19.2 15.6 19.3 15.9 19.4 16.1 19.4 16.4 19.4 17 19.3 17.5 19.1 18.1 19 18.3 18.9 18.5 18.7 18.7 18.5 19 18.3 19.2 18 19.4 17.7 19.6 17.3 19.8 16.9 19.9 16.6 20 16.3 20 16 20 15.8 20 15.6 20 15.4 19.9 15.4 19.9 15.4 19.9 15.4 19.9 15.2 19.9 15 19.8 14.9 19.8 14.8 19.7 14.7 19.7 14.6 19.7 14.4 19.6 14.3 19.5 14.1 19.3 13.7 19.1 13.4 18.7 13.2 18.4 13.1 18.1 12.9 17.8 12.9 17.5 12.8 17.3 12.8 17.1 12.8 16.9L3.5 14.9C3.3 14.9 3.1 14.8 3 14.8 2.7 14.7 2.4 14.5 2.1 14.3 1.7 14 1.4 13.7 1.2 13.3 1 13 0.9 12.6 0.8 12.3 0.7 12 0.7 11.7 0.7 11.4 0.7 11 0.8 10.5 1 10.1 1.1 9.8 1.3 9.5 1.6 9.2 1.8 8.9 2.1 8.7 2.4 8.5 2.8 8.3 3.2 8.1 3.6 8.1 3.9 8 4.2 8 4.5 8 4.6 8 4.8 8 4.9 8.1L6.8 8.5C6.8 8.4 6.8 8.4 6.8 8.4 6.9 8.2 7.1 8 7.2 7.8 7.5 7.5 7.7 7.3 8 7.1 8.4 6.9 8.7 6.8 9.1 6.7 9.5 6.7 10 6.7 10.4 6.8 10.8 6.8 11.2 7 11.5 7.2 11.8 7.5 12.1 7.7 12.4 8 12.6 8.3 12.7 8.6 12.8 8.9 12.9 9.2 13 9.4 13 9.7 13 9.7 13 9.8 13 9.8 13.6 9.9 14.2 10.1 14.9 10.2 15 10.2 15 10.2 15.1 10.2 15.3 10.2 15.4 10.2 15.6 10.2 15.8 10.1 16 10 16.2 9.9 16.4 9.8 16.5 9.6 16.6 9.5 16.8 9.2 16.9 8.8 16.9 8.5 16.9 8.3 16.9 8.2 16.8 8 16.8 7.8 16.7 7.7 16.6 7.5 16.5 7.3 16.3 7.2 16.2 7.1 16 7 15.9 6.9 15.8 6.9 15.7 6.9 15.6 6.8 15.5 6.8L6.2 4.8C6.2 5 6 5.2 5.9 5.3 5.7 5.6 5.5 5.8 5.3 6 4.9 6.2 4.5 6.4 4.1 6.5 3.8 6.6 3.5 6.6 3.2 6.6 3 6.6 2.8 6.6 2.7 6.6 2.6 6.6 2.6 6.5 2.6 6.5 2.5 6.5 2.3 6.5 2.1 6.4 1.8 6.3 1.6 6.1 1.3 6 1 5.7 0.7 5.4 0.5 5 0.3 4.7 0.2 4.4 0.1 4.1 0 3.8 0 3.6 0 3.3 0 2.8 0.1 2.2 0.4 1.7 0.5 1.5 0.7 1.3 0.8 1.1 1.1 0.8 1.3 0.6 1.6 0.5 2 0.3 2.3 0.1 2.7 0.1 3.1 0 3.6 0 4 0.1 4.4 0.2 4.8 0.3 5.1 0.5 5.5 0.8 5.7 1 6 1.3 6.2 1.6 6.3 1.9 6.4 2.3 6.5 2.5 6.6 2.7 6.6 3 6.6 3 6.6 3.1 6.6 3.1 9.7 3.8 12.8 4.4 15.9 5.1 16.1 5.1 16.2 5.2 16.4 5.2 16.7 5.3 16.9 5.5 17.2 5.6 17.5 5.9 17.8 6.2 18.1 6.5 18.3 6.8 18.4 7.2 18.6 7.5 18.6 7.9 18.7 8.2 18.7 8.6 18.7 9 18.6 9.4 18.4 9.8 18.3 10.1 18.2 10.3 18 10.6 17.8 10.9 17.5 11.1 17.3 11.3 16.9 11.6 16.5 11.8 16 11.9 15.7 12 15.3 12 15 12 14.8 12 14.7 12 14.5 11.9 13.9 11.8 13.3 11.7 12.6 11.5 12.5 11.7 12.4 11.9 12.3 12 12.1 12.3 11.9 12.5 11.7 12.7 11.3 12.9 10.9 13.1 10.5 13.2 10.2 13.3 9.9 13.3 9.6 13.3 9.4 13.3 9.2 13.3 9 13.2 9 13.2 9 13.2 9 13.2 8.8 13.2 8.7 13.2 8.5 13.1 8.2 13 8 12.8 7.7 12.6 7.4 12.4 7.1 12 6.8 11.7 6.7 11.4 6.6 11.1 6.5 10.8 6.4 10.6 6.4 10.4 6.4 10.2 5.8 10.1 5.2 9.9 4.5 9.8 4.4 9.8 4.4 9.8 4.3 9.8 4.1 9.8 4 9.8 3.8 9.8 3.6 9.9 3.4 10 3.2 10.1 3 10.2 2.9 10.4 2.8 10.5 2.6 10.8 2.5 11.1 2.5 11.5 2.5 11.6 2.5 11.8 2.6 12 2.6 12.1 2.7 12.3 2.8 12.5 2.9 12.6 3.1 12.8 3.2 12.9 3.3 13 3.5 13.1 3.6 13.1 3.7 13.1 3.8 13.2 3.9 13.2L13.1 15.2 13.1 15.2Z"></path></g></svg><span>Tutorials</span></a></li><li class="nav-offers flyout-parent"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#" class="l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>offers icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M35.9 20.6L27 15.5C26.1 15 24.7 15 23.7 15.5L14.9 20.6C13.9 21.1 13.2 22.4 13.2 23.4L13.2 41.4C13.2 42.4 13.9 43.7 14.9 44.2L23.3 49C24.2 49.5 25.6 49.5 26.6 49L35.9 43.6C36.8 43.1 37.6 41.8 37.6 40.8L37.6 23.4C37.6 22.4 36.8 21.1 35.9 20.6L35.9 20.6ZM40 8.2C39.1 7.6 37.6 7.6 36.7 8.2L30.2 11.9C29.3 12.4 29.3 13.2 30.2 13.8L39.1 18.8C40 19.4 40.7 20.6 40.7 21.7L40.7 39C40.7 40.1 41.4 40.5 42.4 40L48.2 36.6C49.1 36.1 49.8 34.9 49.8 33.8L49.8 15.6C49.8 14.6 49.1 13.3 48.2 12.8L40 8.2 40 8.2ZM27 10.1L33.6 6.4C34.5 5.9 34.5 5 33.6 4.5L26.6 0.5C25.6 0 24.2 0 23.3 0.5L16.7 4.2C15.8 4.7 15.8 5.6 16.7 6.1L23.7 10.1C24.7 10.6 26.1 10.6 27 10.1ZM10.1 21.7C10.1 20.6 10.8 19.4 11.7 18.8L20.6 13.8C21.5 13.2 21.5 12.4 20.6 11.9L13.6 7.9C12.7 7.4 11.2 7.4 10.3 7.9L1.6 12.8C0.7 13.3 0 14.6 0 15.6L0 33.8C0 34.9 0.7 36.1 1.6 36.6L8.4 40.5C9.3 41 10.1 40.6 10.1 39.6L10.1 21.7 10.1 21.7Z"></path></g></svg><span>Offers &amp; Deals</span></a><ul class="flyout"><li><a href="https://www.safaribooksonline.com/oreilly-newsletters/" class="l2 nav-icn"><span>Newsletters</span></a></li></ul></li><li class="nav-highlights"><a href="https://www.safaribooksonline.com/u/0011N00001As6t6QAB/" class="t-highlights-nav l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 35" width="20" height="20" version="1.1" fill="#4A3C31"><desc>highlights icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M13.325 18.071L8.036 18.071C8.036 11.335 12.36 7.146 22.5 5.594L22.5 0C6.37 1.113 0 10.632 0 22.113 0 29.406 3.477 35 10.403 35 15.545 35 19.578 31.485 19.578 26.184 19.578 21.556 17.211 18.891 13.325 18.071L13.325 18.071ZM40.825 18.071L35.565 18.071C35.565 11.335 39.86 7.146 50 5.594L50 0C33.899 1.113 27.5 10.632 27.5 22.113 27.5 29.406 30.977 35 37.932 35 43.045 35 47.078 31.485 47.078 26.184 47.078 21.556 44.74 18.891 40.825 18.071L40.825 18.071Z"></path></g></svg><span>Highlights</span></a></li><li><a href="https://www.safaribooksonline.com/u/" class="t-settings-nav l1 js-settings nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 53" width="20" height="20" version="1.1" fill="#4A3C31"><desc>settings icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M44.6 29.6C44.7 28.6 44.8 27.5 44.8 26.5 44.8 25.5 44.7 24.4 44.6 23.4L49.6 19C50 18.8 50.1 18.3 49.9 17.9 48.9 14.7 47.1 11.7 44.9 9.1 44.6 8.8 44.2 8.7 43.8 8.8L37.4 11.1C35.8 9.8 34 8.7 32.1 8L30.9 1.4C30.8 0.9 30.4 0.6 30 0.5 26.7-0.2 23.3-0.2 20 0.5 19.6 0.6 19.2 0.9 19.1 1.4L17.9 8C16 8.7 14.1 9.8 12.6 11.1L6.2 8.8C5.8 8.7 5.4 8.8 5.1 9.1 2.9 11.7 1.1 14.7 0.1 17.9 -0.1 18.3 0 18.8 0.4 19L5.4 23.4C5.3 24.4 5.2 25.5 5.2 26.5 5.2 27.5 5.3 28.6 5.4 29.6L0.4 34C0 34.2-0.1 34.7 0.1 35.1 1.1 38.3 2.9 41.4 5.1 43.9 5.4 44.2 5.8 44.4 6.2 44.2L12.6 42C14.1 43.2 16 44.3 17.9 45L19.1 51.7C19.2 52.1 19.6 52.5 20 52.5 21.6 52.8 23.3 53 25 53 26.7 53 28.4 52.8 30 52.5 30.4 52.5 30.8 52.1 30.9 51.7L32.1 45C34 44.3 35.8 43.2 37.4 42L43.8 44.2C44.2 44.4 44.6 44.2 44.9 43.9 47.1 41.4 48.9 38.3 49.9 35.1 50.1 34.7 50 34.2 49.6 34L44.6 29.6ZM25 36.4C19.6 36.4 15.2 32 15.2 26.5 15.2 21 19.6 16.6 25 16.6 30.4 16.6 34.8 21 34.8 26.5 34.8 32 30.4 36.4 25 36.4Z"></path></g></svg><span>Settings</span></a></li><li><a href="https://www.safaribooksonline.com/public/support" class="l1 no-icon">Support</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l1 no-icon">Sign Out</a></li></ul><ul class="profile"><li><a href="https://www.safaribooksonline.com/u/" class="l2 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 53" width="20" height="20" version="1.1" fill="#4A3C31"><desc>settings icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M44.6 29.6C44.7 28.6 44.8 27.5 44.8 26.5 44.8 25.5 44.7 24.4 44.6 23.4L49.6 19C50 18.8 50.1 18.3 49.9 17.9 48.9 14.7 47.1 11.7 44.9 9.1 44.6 8.8 44.2 8.7 43.8 8.8L37.4 11.1C35.8 9.8 34 8.7 32.1 8L30.9 1.4C30.8 0.9 30.4 0.6 30 0.5 26.7-0.2 23.3-0.2 20 0.5 19.6 0.6 19.2 0.9 19.1 1.4L17.9 8C16 8.7 14.1 9.8 12.6 11.1L6.2 8.8C5.8 8.7 5.4 8.8 5.1 9.1 2.9 11.7 1.1 14.7 0.1 17.9 -0.1 18.3 0 18.8 0.4 19L5.4 23.4C5.3 24.4 5.2 25.5 5.2 26.5 5.2 27.5 5.3 28.6 5.4 29.6L0.4 34C0 34.2-0.1 34.7 0.1 35.1 1.1 38.3 2.9 41.4 5.1 43.9 5.4 44.2 5.8 44.4 6.2 44.2L12.6 42C14.1 43.2 16 44.3 17.9 45L19.1 51.7C19.2 52.1 19.6 52.5 20 52.5 21.6 52.8 23.3 53 25 53 26.7 53 28.4 52.8 30 52.5 30.4 52.5 30.8 52.1 30.9 51.7L32.1 45C34 44.3 35.8 43.2 37.4 42L43.8 44.2C44.2 44.4 44.6 44.2 44.9 43.9 47.1 41.4 48.9 38.3 49.9 35.1 50.1 34.7 50 34.2 49.6 34L44.6 29.6ZM25 36.4C19.6 36.4 15.2 32 15.2 26.5 15.2 21 19.6 16.6 25 16.6 30.4 16.6 34.8 21 34.8 26.5 34.8 32 30.4 36.4 25 36.4Z"></path></g></svg><span>Settings</span></a><span class="l2 t-nag-notification" id="nav-nag"><strong class="trial-green">7</strong> days left in your trial.
  
  

  
    
      

<a class="" href="https://www.safaribooksonline.com/subscribe/">Subscribe</a>.


    
  

  

</span></li><li><a href="https://www.safaribooksonline.com/public/support" class="l2">Support</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l2">Sign Out</a></li></ul></div></li></ul></nav></header>


      </div>
      <div id="container" class="application" style="height: auto;">
        
          <div class="nav-container clearfix">
            


            
            
          </div>

          

  <div class="js-toc">
    
      <div class="sbo-reading-menu sbo-menu-top"><section class="sbo-toc-container toc-menu"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#" class="sbo-toc-thumb"><span class="sbo-title ss-list"><h1><div class="visuallyhidden">Table of Contents for </div>
      
      OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)
      
    </h1></span></a><div class="toc-contents"></div></section></div>

    

    <div class="interface-controls interface-controls-top">
      <ul class="interface-control-btns js-bitlist js-reader">
        <li class="js-search-in-archive search-in-archive t-search-in-archive"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#" title="Search in archive" class="js-search-controls search-controls"><span class="icon">Search in book...</span></a><form class="search-archive-bar js-search-form"><input type="search" name="query" placeholder="Search inside this book..." autocomplete="off"></form><div class="search-archive-results"><div class="js-sitb-results-region"></div></div></li><li class="queue-control"><button type="button" class="rec-fav ss-queue js-queue js-current-chapter-queue" data-queue-endpoint="/api/v1/book/9781260011388/chapter/ch03.html" data-for-analytics="9781260011388:ch03.html" aria-label="Add to Queue"><span>Add to Queue</span></button></li><li class="js-font-control-panel font-control-activator"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#" data-push-state="false" id="font-controls" title="Change font size" aria-label="Change font size"><span class="icon">Toggle Font Controls</span></a></li><li class="dropdown sharing-controls"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#" class="trigger" data-push-state="false" title="Share" aria-label="Share"><i class="fa fa-share"></i></a><ul class="social-sharing dropdown-menu"><li><a class="twitter share-button t-twitter" target="_blank" aria-label="Share this section on Twitter" title="Share this section on Twitter" href="https://twitter.com/share?url=https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html&amp;text=OCA%20Java%20SE%208%20Programmer%20I%20Exam%20Guide%20%28Exams%201Z0-808%29&amp;via=safari"><span>Twitter</span></a></li><li><a class="facebook share-button t-facebook" target="_blank" aria-label="Share this section on Facebook" title="Share this section on Facebook" href="https://www.facebook.com/sharer/sharer.php?u=https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html"><span>Facebook</span></a></li><li><a class="googleplus share-button t-googleplus" target="_blank" aria-label="Share this secton on Google Plus" title="Share this secton on Google Plus" href="https://plus.google.com/share?url=https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html"><span>Google Plus</span></a></li><li><a class="email share-button t-email" aria-label="Share this section via email" title="Share this section via email" href="mailto:?subject=Safari:%20Cover%20Page&amp;body=https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html%0D%0Afrom%20OCA%20Java%20SE%208%20Programmer%20I%20Exam%20Guide%20%28Exams%201Z0-808%29%0D%0A"><span>Email</span></a></li></ul></li>
      </ul>
    </div>

    <section role="document">
	  <div class="t-sbo-prev sbo-prev sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">2&nbsp;Object Orientation</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">4&nbsp;Operators</div>
        </a>
    
  
  </div>



<div id="sbo-rt-content"><div class="annotator-wrapper"><p class="imagea"><img class="inline" src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/common.jpg" alt="Images" width="500" height="252" data-mfp-src="/library/view/oca-java-se/9781260011388/common.jpg"></p>
<h2 class="h2" id="ch3"><a id="page_173"></a>3</h2>
<h2 class="h2a">Assignments</h2>
<p class="noindentd">CERTIFICATION OBJECTIVES</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use Class Members</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Understand Primitive Casting</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Understand Variable Scope</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Differentiate Between Primitive Variables and Reference Variables</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determine the Effects of Passing Variables into Methods</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Understand Object Lifecycle and Garbage Collection</p>
<p class="tick"><img class="inline" src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/tic.jpg" alt="Images" width="12" height="13" data-mfp-src="/library/view/oca-java-se/9781260011388/tic.jpg">&nbsp;&nbsp;&nbsp;Two-Minute Drill</p>
<p class="tick1"><strong>Q&amp;A</strong>&nbsp;Self Test</p>
<h3 class="h3"><a id="ch03lev1sec1"></a><a id="page_174"></a>Stack and Heap—Quick Review</h3>
<p class="noindent">For most people, understanding the basics of the stack and the heap makes it far easier to understand topics like argument passing, polymorphism, threads, exceptions, and garbage collection. In this section, we’ll stick to an overview, but we’ll expand these topics several more times throughout the book.</p>
<p class="indent">For the most part, the various pieces (methods, variables, and objects) of Java programs live in one of two places in memory: the stack or the heap. For now, we’re concerned about only three types of things—instance variables, local variables, and objects:</p>
<p class="bulletxt"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Instance variables and objects live on the heap.</p>
<p class="bulletxb"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Local variables live on the stack.</p>
<p class="indent">Let’s take a look at a Java program and how its various pieces are created and map into the stack and the heap:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0176-01.jpg" alt="images" width="581" height="413" data-mfp-src="/library/view/oca-java-se/9781260011388/p0176-01.jpg"></p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ch3fig1">Figure 3-1</a> shows the state of the stack and the heap once the program reaches line 19. Following are some key points:</p>
<p class="images"><a id="ch3fig1"></a><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0177-01.jpg" alt="images" width="1464" height="687" data-mfp-src="/library/view/oca-java-se/9781260011388/f0177-01.jpg"></p>
<p class="figcap"><a id="page_175"></a><span class="figs"><strong>FIGURE 3-1</strong></span>&nbsp;&nbsp;&nbsp;Overview of the stack and the heap</p>
<p class="bulletxt"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Line 7—<code>main()</code> is placed on the stack.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Line 9—Reference variable <code>d</code> is created on the stack, but there’s no <code>Dog</code> object yet.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Line 10—A new <code>Dog</code> object is created on the heap and is assigned to the <code>d</code> reference variable.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Line 11—A copy of the reference variable <code>d</code> is passed to the <code>go()</code> method.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Line 13—The <code>go()</code> method is placed on the stack, with the <code>dog</code> parameter as a local variable.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Line 14—A new <code>Collar</code> object is created on the heap and assigned to <code>Dog</code>’s instance variable.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Line 17—<code>setName()</code> is added to the stack, with the <code>dogName</code> parameter as its local variable.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Line 18—The <code>name</code> instance variable now also refers to the <code>String</code> object.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Notice that two <em>different</em> local variables refer to the same <code>Dog</code> object.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Notice that one local variable and one instance variable both refer to the same <code>String Aiko</code>.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;After Line 19 completes, <code>setName()</code> completes and is removed from the stack. At this point the local variable <code>dogName</code> disappears, too, although the <code>String</code> object it referred to is still on the heap.</p>
<h3 class="h3a"><a id="page_176"></a>CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch03lev1sec2"></a>Literals, Assignments, and Variables<br>(OCA Objectives 2.1, 2.2, and 2.3)</h3>
<p class="noindent"><em>2.1 Declare and initialize variables (including casting of primitive data types).</em></p>
<p class="noindent"><em>2.2 Differentiate between object reference variables and primitive variables.</em></p>
<p class="noindent"><em>2.3 Know how to read or write to object fields.</em></p>
<h4 class="h4"><a id="ch03lev2sec1"></a>Literal Values for All Primitive Types</h4>
<p class="noindent">A primitive literal is merely a source code representation of the primitive data types—in other words, an integer, floating-point number, boolean, or character that you type in while writing code. The following are examples of primitive literals:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0178-01.jpg" alt="images" width="294" height="73" data-mfp-src="/library/view/oca-java-se/9781260011388/p0178-01.jpg"></p>
<h4 class="h4a">Integer Literals</h4>
<p class="noindent">There are four ways to represent integer numbers in the Java language: decimal (base 10), octal (base 8), hexadecimal (base 16), and, as of Java 7, binary (base 2). Most exam questions with integer literals use decimal representations, but the few that use octal, hexadecimal, or binary are worth studying for. Even though the odds that you’ll ever actually use octal in the real world are astronomically tiny, they were included in the exam just for fun. Before we look at the four ways to represent integer numbers, let’s first discuss a new feature added to Java 7: literals with underscores.</p>
<p class="noindentt"><span class="fonts"><strong>Numeric Literals with Underscores</strong></span> As of Java 7, numeric literals can be declared using underscore characters (<code>_</code>), ostensibly to improve readability. Let’s compare a pre-Java 7 declaration to an easier-to-read Java 7 declaration:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0178-02.jpg" alt="images" width="600" height="35" data-mfp-src="/library/view/oca-java-se/9781260011388/p0178-02.jpg"></p>
<p class="indent"><a id="page_177"></a>The main rule you have to keep track of is that you CANNOT use the underscore literal at the beginning or end of the literal. The potential gotcha here is that you’re free to use the underscore in “weird” places:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0179-01.jpg" alt="images" width="559" height="35" data-mfp-src="/library/view/oca-java-se/9781260011388/p0179-01.jpg"></p>
<p class="indent">As a final note, remember that you can use the underscore character for any of the numeric types (including doubles and floats), but for doubles and floats, you CANNOT add an underscore character directly next to the decimal point, or next to the X or B in hex or binary numbers (which are coming up soon).</p>
<p class="noindentt"><span class="fonts"><strong>Decimal Literals</strong></span> Decimal integers need no explanation; you’ve been using them since grade one or earlier. Chances are you don’t keep your checkbook in hex. (If you do, there’s a Geeks Anonymous [GA] group ready to help.) In the Java language, they are represented as is, with no prefix of any kind, as follows:</p>
<p class="code1"><code>int length = 343;</code></p>
<p class="noindent"><span class="fonts"><strong>Binary Literals</strong></span> Also new to Java 7 is the addition of binary literals. Binary literals can use only the digits 0 and 1. Binary literals must start with either <code>0B</code> or <code>0b</code>, as shown:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0179-02.jpg" alt="images" width="567" height="34" data-mfp-src="/library/view/oca-java-se/9781260011388/p0179-02.jpg"></p>
<p class="noindent"><span class="fonts"><strong>Octal Literals</strong></span> Octal integers use only the digits 0 to 7. In Java, you represent an integer in octal form by placing a zero in front of the number, as follows:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0179-03.jpg" alt="images" width="445" height="174" data-mfp-src="/library/view/oca-java-se/9781260011388/p0179-03.jpg"></p>
<p class="indent">You can have up to 21 digits in an octal number, not including the leading 0. If we run the preceding program, it displays the following:</p>
<p class="code1"><code>Octal 010 = 8</code></p>
<p class="noindent"><a id="page_178"></a><span class="fonts"><strong>Hexadecimal Literals</strong></span> Hexadecimal (hex for short) numbers are constructed using 16 distinct symbols. Because we never invented single-digit symbols for the numbers 10 through 15, we use alphabetic characters to represent these digits. Counting from 0 through 15 in hex looks like this:</p>
<p class="code1"><code>0 1 2 3 4 5 6 7 8 9 a b c d e f</code></p>
<p class="indent">Java will accept uppercase or lowercase letters for the extra digits (one of the few places Java is not case sensitive!). You are allowed up to 16 digits in a hexadecimal number, not including the prefix <code>0x</code> (or <code>0X</code>) or the optional suffix extension <code>L</code>, which will be explained a bit later in the chapter. All of the following hexadecimal assignments are legal:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0180-01.jpg" alt="images" width="597" height="154" data-mfp-src="/library/view/oca-java-se/9781260011388/p0180-01.jpg"></p>
<p class="indent">Running <code>HexTest</code> produces the following output:</p>
<p class="code1"><code>x = 1 y = 2147483647 z = -559035650</code></p>
<p class="indent">Don’t be misled by changes in case for a hexadecimal digit or the <code>x</code> preceding it. <code>0XCAFE</code> and <code>0xcafe</code> are both legal <em>and have the same value</em>.</p>
<p class="indent">All four integer literals (binary, octal, decimal, and hexadecimal) are defined as <code>int</code> by default, but they may also be specified as <code>long</code> by placing a suffix of <code>L</code> or <code>l</code> after the number:</p>
<p class="code1"><code>long jo = 110599L;<br>long so = 0xFFFFl; // Note the lowercase ‘l’</code></p>
<h4 class="h4a">Floating-point Literals</h4>
<p class="noindent">Floating-point numbers are defined as a number, a decimal symbol, and more numbers representing the fraction. In the following example, the number 11301874.9881024 is the literal value:</p>
<p class="code1"><code>double d = 11301874.9881024;</code></p>
<p class="indent">Floating-point literals are defined as <code>double</code> (64 bits) by default, so if you want to assign a floating-point literal to a variable of type <code>float</code> (32 bits), you <a id="page_179"></a>must attach the suffix <code>F</code> or <code>f</code> to the number. If you don’t do this, the compiler will complain about a possible loss of precision, because you’re trying to fit a number into a (potentially) less precise “container.” The <code>F</code> suffix gives you a way to tell the compiler, “Hey, I know what I’m doing, and I’ll take the risk, thank you very much.”</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0181-01.jpg" alt="images" width="387" height="36" data-mfp-src="/library/view/oca-java-se/9781260011388/p0181-01.jpg"></p>
<p class="indent">You may also optionally attach a <code>D</code> or <code>d</code> to double literals, but it is not necessary because this is the default behavior.</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0181-02.jpg" alt="images" width="403" height="44" data-mfp-src="/library/view/oca-java-se/9781260011388/p0181-02.jpg"></p>
<p class="indent">Look for numeric literals that include a comma; here’s an example:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0181-03.jpg" alt="images" width="305" height="7" data-mfp-src="/library/view/oca-java-se/9781260011388/p0181-03.jpg"></p>
<h4 class="h4a">Boolean Literals</h4>
<p class="noindent">Boolean literals are the source code representation for boolean values. A boolean value can be defined only as <code>true</code> or <code>false</code>. Although in C (and some other languages), it is common to use numbers to represent <code>true</code> or <code>false</code>, this will not work in Java. Again, repeat after me: “Java is not C.”</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0181-04.jpg" alt="images" width="176" height="17" data-mfp-src="/library/view/oca-java-se/9781260011388/p0181-04.jpg"></p>
<p class="indent">Be on the lookout for questions that use numbers where <code>booleans</code> are required. You might see an <code>if</code> test that uses a number, as in the following:</p>
<p class="code1"><code>int x = 1; if (x) { } // Compiler error!</code></p>
<h4 class="h4a">Character Literals</h4>
<p class="noindent">A <code>char</code> literal is represented by a single character in single quotes:</p>
<p class="code1"><code>char a = ‘a’;<br>char b = ‘@’;</code></p>
<p class="indent">You can also type in the Unicode value of the character, using the Unicode notation of prefixing the value with <code>\u</code>, as follows:</p>
<p class="code1"><code>char letterN = ‘\u004E’; // The letter ‘N’</code></p>
<p class="indent"><a id="page_180"></a>Remember, characters are just 16-bit unsigned integers under the hood. That means you can assign a number literal, assuming it will fit into the unsigned 16-bit range (0 to 65535). For example, the following are all legal:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0182-01.jpg" alt="images" width="533" height="94" data-mfp-src="/library/view/oca-java-se/9781260011388/p0182-01.jpg"></p>
<p class="indent">And the following are not legal and produce compiler errors:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0182-02.jpg" alt="images" width="571" height="34" data-mfp-src="/library/view/oca-java-se/9781260011388/p0182-02.jpg"></p>
<p class="indent">You can also use an escape code (the backslash) if you want to represent a character that can’t be typed in as a literal, including the characters for linefeed, newline, horizontal tab, backspace, and quotes:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0182-03.jpg" alt="images" width="333" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0182-03.jpg"></p>
<h4 class="h4a">Literal Values for Strings</h4>
<p class="noindent">A string literal is a source code representation of a value of a <code>String</code> object. The following is an example of two ways to represent a string literal:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0182-04.jpg" alt="images" width="340" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0182-04.jpg"></p>
<p class="indent">Although strings are not primitives, they’re included in this section because they can be represented as literals—in other words, they can be typed directly into code. The only other nonprimitive type that has a literal representation is an array, which we’ll look at later in the chapter.</p>
<p class="code1"><code>Thread t = ??? // what literal value could possibly go here?</code></p>
<h4 class="h4"><a id="ch03lev2sec2"></a>Assignment Operators</h4>
<p class="noindent">Assigning a value to a variable seems straightforward enough; you simply assign the stuff on the right side of the <code>=</code> to the variable on the left. Well, sure, but don’t expect to be tested on something like this:</p>
<p class="code1"><code>x = 6;</code></p>
<p class="indent"><a id="page_181"></a>No, you won’t be tested on the no-brainer (technical term) assignments. You will, however, be tested on the trickier assignments involving complex expressions and casting. We’ll look at both primitive and reference variable assignments. But before we begin, let’s back up and peek inside a variable. What is a variable? How are the variable and its value related?</p>
<p class="indent">Variables are just bit holders with a designated type. You can have an <code>int</code> holder, a <code>double</code> holder, a <code>Button</code> holder, and even a <code>String[]</code> holder. Within that holder is a bunch of bits representing the value. For primitives, the bits represent a numeric value (although we don’t know what that bit pattern looks like for <code>boolean</code>, luckily, we don’t care). A <code>byte</code> with a value of 6, for example, means that the bit pattern in the variable (the <code>byte</code> holder) is 00000110, representing the 8 bits.</p>
<p class="indent">So the value of a primitive variable is clear, but what’s inside an object holder? If you say,</p>
<p class="code1"><code>Button b = new Button();</code></p>
<p class="noindent">what’s inside the <code>Button</code> holder <code>b</code>? Is it the <code>Button</code> object? No! A variable referring to an object is just that—a <em>reference</em> variable. A reference variable bit holder contains bits representing a <em>way to get to the object</em>. We don’t know what the format is. The way in which object references are stored is virtual-machine specific (it’s a pointer to something, we just don’t know what that something really is). All we can say for sure is that the variable’s value is <em>not</em> the object, but rather a value representing a specific object on the heap. Or <code>null</code>. If the reference variable has not been assigned a value or has been explicitly assigned a value of <code>null</code>, the variable holds bits representing—you guessed it—<code>null</code>. You can read</p>
<p class="code1"><code>Button b = null;</code></p>
<p class="noindent">as “The <code>Button</code> variable <code>b</code> is not referring to any object.”</p>
<p class="indent">So now that we know a variable is just a little box o’ bits, we can get on with the work of changing those bits. We’ll look first at assigning values to primitives and then finish with assignments to reference variables.</p>
<h4 class="h4a">Primitive Assignments</h4>
<p class="noindent">The equal (<code>=</code>) sign is used for assigning a value to a variable, and it’s cleverly named the assignment operator. There are actually 12 assignment operators, but only the 5 most commonly used assignment operators are on the exam, and they are covered in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html">Chapter 4</a>.</p>
<p class="indent">You can assign a primitive variable using a literal or the result of an expression.</p>
<p class="indent"><a id="page_182"></a>Take a look at the following:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0184-01.jpg" alt="images" width="447" height="74" data-mfp-src="/library/view/oca-java-se/9781260011388/p0184-01.jpg"></p>
<p class="indent">The most important point to remember is that a literal integer (such as 7) is always implicitly an <code>int</code>. Thinking back to <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch01.html">Chapter 1</a>, you’ll recall that an <code>int</code> is a 32-bit value. No big deal if you’re assigning a value to an <code>int</code> or a <code>long</code> variable, but what if you’re assigning to a <code>byte</code> variable? After all, a <code>byte</code>-sized holder can’t hold as many bits as an <code>int</code>-sized holder. Here’s where it gets weird. The following is legal,</p>
<p class="code1"><code>byte b = 27;</code></p>
<p class="noindent">but only because the compiler automatically narrows the literal value to a <code>byte</code>. In other words, the compiler puts in the <em>cast</em>. The preceding code is identical to the following:</p>
<p class="code1"><code>byte b = (byte) 27; // Explicitly cast the int literal to a byte</code></p>
<p class="indent">It looks as though the compiler gives you a break and lets you take a shortcut with assignments to integer variables smaller than an <code>int</code>. (Everything we’re saying about <code>byte</code> applies equally to <code>char</code> and <code>short</code>, both of which are smaller than an <code>int</code>.) We’re not actually at the weird part yet, by the way.</p>
<p class="indent">We know that a literal integer is always an <code>int</code>, but more importantly, the result of an expression involving anything <code>int</code>-sized or smaller is always an <code>int</code>. In other words, add two <code>byte</code>s together and you’ll get an <code>int</code>—even if those two <code>byte</code>s are tiny. Multiply an <code>int</code> and a <code>short</code> and you’ll get an <code>int</code>. Divide a <code>short</code> by a <code>byte</code> and you’ll get…an <code>int</code>. Okay, now we’re at the weird part. Check this out:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0184-02.jpg" alt="images" width="581" height="74" data-mfp-src="/library/view/oca-java-se/9781260011388/p0184-02.jpg"></p>
<p class="indent">The last line won’t compile! You’ll get an error something like what your grandfather used to get:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0184-03.jpg" alt="images" width="419" height="82" data-mfp-src="/library/view/oca-java-se/9781260011388/p0184-03.jpg"></p>
<p class="indent"><a id="page_183"></a>We tried to assign the sum of two <code>byte</code>s to a <code>byte</code> variable, the result of which (11) was definitely small enough to fit into a <code>byte</code>, but the compiler didn’t care. It knew the rule about <code>int</code>-or-smaller expressions always resulting in an <code>int</code>. It would have compiled if we’d done the <em>explicit</em> cast:</p>
<p class="code1"><code>byte c = (byte) (a + b);</code></p>
<div class="side-exam">
<p class="imaget"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>We were struggling to find a good way to teach this topic, and our friend, co–JavaRanch* moderator and repeat technical reviewer Marc Peabody, came up with the following. We think he did a great job: It’s perfectly legal to declare multiple variables of the same type with a single line by placing a comma between each variable:</em></strong></p>
<p class="codea"><code>int a, b, c;</code></p>
<p class="Text-icon-exam"><strong><em>You also have the option to initialize any number of those variables right in place:</em></strong></p>
<p class="codea"><code>int j, k=1, l, m=3;</code></p>
<p class="Text-icon-exam"><strong><em>And these variables are each evaluated in the order that you read them, left to right. It’s just as if you were to declare each one on a separate line:</em></strong></p>
<p class="codea"><code>int j;</code><br><code>int k=1;</code><br><code>int l;</code><br><code>int m=3;</code></p>
<p class="Text-icon-exam"><strong><em>But the order is important. This is legal:</em></strong></p>
<p class="imagel"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0185-01.jpg" alt="images" width="438" height="18" data-mfp-src="/library/view/oca-java-se/9781260011388/p0185-01.jpg"></p>
<p class="Text-icon-exam"><strong><em>But these are not:</em></strong></p>
<p class="imagel"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0185-02.jpg" alt="images" width="458" height="42" data-mfp-src="/library/view/oca-java-se/9781260011388/p0185-02.jpg"></p>
<p class="Text-icon-exam"><strong><em>*I know, I know, but it’ll always be JavaRanch in our hearts.</em></strong></p>
</div>
<h4 class="h4a">Primitive Casting</h4>
<p class="noindent">Casting lets you convert primitive values from one type to another. We mentioned primitive casting in the previous section, but now we’re going to take a deeper look. (Object casting was covered in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html">Chapter 2</a>.)</p>
<p class="indent"><a id="page_184"></a>Casts can be implicit or explicit. An implicit cast means you don’t have to write code for the cast; the conversion happens automatically. Typically, an implicit cast happens when you’re doing a widening conversion—in other words, putting a smaller thing (say, a <code>byte</code>) into a bigger container (such as an <code>int</code>). Remember those “<code>possible loss of precision</code>” compiler errors we saw in the assignments section? Those happened when we tried to put a larger thing (say, a <code>long</code>) into a smaller container (such as a <code>short</code>). The large-value-into-small-container conversion is referred to as <em>narrowing</em> and requires an explicit cast, where you tell the compiler that you’re aware of the danger and accept full responsibility.</p>
<p class="indent">First we’ll look at an implicit cast:</p>
<p class="code1"><code>int a = 100;<br>long b = a;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Implicit cast, an int value always fits in a long</code></p>
<p class="indent">An explicit cast looks like this:</p>
<p class="code1"><code>float a = 100.001f;<br>int b = (int)a; // explicit cast, the int might lose some of float’s info!</code></p>
<p class="indent">Integer values may be assigned to a <code>double</code> variable without explicit casting, because any integer value can fit in a 64-bit <code>double</code>. The following line demonstrates this:</p>
<p class="code1"><code>double d = 100L; // Implicit cast</code></p>
<p class="indent">In the preceding statement, a <code>double</code> is initialized with a <code>long</code> value (as denoted by the <code>L</code> after the numeric value). No cast is needed in this case because a <code>double</code> can hold every piece of information that a <code>long</code> can store. If, however, we want to assign a <code>double</code> value to an integer type, we’re attempting a narrowing conversion and the compiler knows it:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0186-01.jpg" alt="images" width="407" height="95" data-mfp-src="/library/view/oca-java-se/9781260011388/p0186-01.jpg"></p>
<p class="indent">If we try to compile the preceding code, we get an error something like this:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0186-02.jpg" alt="images" width="609" height="90" data-mfp-src="/library/view/oca-java-se/9781260011388/p0186-02.jpg"></p>
<p class="indent"><a id="page_185"></a>In the preceding code, a floating-point value is being assigned to an integer variable. Because an integer is not capable of storing decimal places, an error occurs. To make this work, we’ll cast the floating-point number to an <code>int</code>:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0187-01.jpg" alt="images" width="407" height="115" data-mfp-src="/library/view/oca-java-se/9781260011388/p0187-01.jpg"></p>
<p class="indent">When you cast a floating-point number to an integer type, the value loses all the digits after the decimal. The preceding code will produce the following output:</p>
<p class="code1"><code>int x = 3957</code></p>
<p class="indent">We can also cast a larger number type, such as a <code>long</code>, into a smaller number type, such as a <code>byte</code>. Look at the following:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0187-02.jpg" alt="images" width="407" height="135" data-mfp-src="/library/view/oca-java-se/9781260011388/p0187-02.jpg"></p>
<p class="indent">The preceding code will compile and run fine. But what happens if the <code>long</code> value is larger than 127 (the largest number a <code>byte</code> can store)? Let’s modify the code:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0187-03.jpg" alt="images" width="407" height="135" data-mfp-src="/library/view/oca-java-se/9781260011388/p0187-03.jpg"></p>
<p class="indent">The code compiles fine, and when we run it we get the following:</p>
<p class="code1"><code>%java Casting<br>The byte is -126</code></p>
<p class="indent">We don’t get a runtime error, even when the value being narrowed is too large for the type. The bits to the left of the lower 8 just…go away. If the leftmost bit (the sign bit) in the <code>byte</code> (or any integer primitive) now happens to be a 1, the primitive will have a negative value.</p>
<h3 class="h3a1"><a id="ch03lev2sec3"></a><a id="page_186"></a>EXERCISE 3-1</h3>
<p class="line"></p>
<h3 class="h3s">Casting Primitives</h3>
<p class="noindent">Create a <code>float</code> number type of any value, and assign it to a <code>short</code> using casting.</p>
<p class="numst">1.&nbsp;Declare a <code>float</code> variable: <code>float f = 234.56F;</code></p>
<p class="nums">2.&nbsp;Assign the <code>float</code> to a <code>short</code>: <code>short s = (short)f;</code></p>
<hr class="hr">
<h4 class="h4a">Assigning Floating-point Numbers</h4>
<p class="noindent">Floating-point numbers have a slightly different assignment behavior than integer types. First, you must know that every floating-point literal is implicitly a <code>double</code> (64 bits), not a <code>float</code>. So the literal <code>32.3</code>, for example, is considered a <code>double</code>. If you try to assign a <code>double</code> to a <code>float</code>, the compiler knows you don’t have enough room in a 32-bit <code>float</code> container to hold the precision of a 64-bit <code>double</code>, and it lets you know. The following code looks good, but it won’t compile:</p>
<p class="code1"><code>float f = 32.3;</code></p>
<p class="indent">You can see that <code>32.3</code> should fit just fine into a float-sized variable, but the compiler won’t allow it. In order to assign a floating-point literal to a <code>float</code> variable, you must either cast the value or append an <code>f</code> to the end of the literal. The following assignments will compile:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0188-01.jpg" alt="images" width="215" height="52" data-mfp-src="/library/view/oca-java-se/9781260011388/p0188-01.jpg"></p>
<h4 class="h4a">Assigning a Literal That Is Too Large for the Variable</h4>
<p class="noindent">We’ll also get a compiler error if we try to assign a literal value that the compiler knows is too big to fit into the variable.</p>
<p class="code1"><code>byte a = 128; // byte can only hold up to 127</code></p>
<p class="indent">The preceding code gives us an error something like this:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0188-02.jpg" alt="images" width="419" height="73" data-mfp-src="/library/view/oca-java-se/9781260011388/p0188-02.jpg"></p>
<p class="indent"><a id="page_187"></a>We can fix it with a cast:</p>
<p class="code1"><code>byte a = (byte) 128;</code></p>
<p class="indent">But then what’s the result? When you narrow a primitive, Java simply truncates the higher-order bits that won’t fit. In other words, it loses all the bits to the left of the bits you’re narrowing to.</p>
<p class="indent">Let’s take a look at what happens in the preceding code. There, 128 is the bit pattern 10000000. It takes a full 8 bits to represent 128. But because the literal 128 is an <code>int</code>, we actually get 32 bits, with the 128 living in the rightmost (lower order) 8 bits. So a literal 128 is actually</p>
<p class="indentt">00000000000000000000000010000000</p>
<p class="noindentt">Take our word for it; there are 32 bits there.</p>
<p class="indent">To narrow the 32 bits representing 128, Java simply lops off the leftmost (higher order) 24 bits. What remains is just the 10000000. But remember that a byte is signed, with the leftmost bit representing the sign (and not part of the value of the variable). So we end up with a negative number (the 1 that used to represent 128 now represents the negative sign bit). Remember, to find out the value of a negative number using 2’s complement notation, you flip all of the bits and then add 1. Flipping the 8 bits gives us 01111111, and adding 1 to that gives us 10000000, or back to 128! And when we apply the sign bit, we end up with –128.</p>
<p class="indent">You must use an explicit cast to assign 128 to a byte, and the assignment leaves you with the value –128. A cast is nothing more than your way of saying to the compiler, “Trust me. I’m a professional. I take full responsibility for anything weird that happens when those top bits are chopped off.”</p>
<p class="indent">That brings us to the compound assignment operators. This will compile:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0189-01.jpg" alt="images" width="414" height="98" data-mfp-src="/library/view/oca-java-se/9781260011388/p0189-01.jpg"></p>
<p class="indent">The compound assignment operator <code>+=</code> lets you add to the value of <code>b</code>, without putting in an explicit cast. In fact, <code>+=</code>, <code>-=</code>, <code>*=</code>, and <code>/=</code> will all put in an implicit cast.</p>
<h4 class="h4a"><a id="page_188"></a>Assigning One Primitive Variable to Another Primitive Variable</h4>
<p class="noindent">When you assign one primitive variable to another, the contents of the right-hand variable are copied. For example:</p>
<p class="code1"><code>int a = 6;<br>int b = a;</code></p>
<p class="noindent">This code can be read as, “Assign the bit pattern for the number 6 to the <code>int</code> variable <code>a</code>. Then copy the bit pattern in <code>a</code>, and place the copy into variable <code>b</code>.”</p>
<p class="indent">So both variables now hold a bit pattern for 6, but the two variables have no other relationship. We used the variable <code>a</code> <em>only</em> to copy its contents. At this point, <code>a</code> and <code>b</code> have identical contents (in other words, identical values), but if we change the contents of <em>either</em> <code>a</code> or <code>b</code>, the other variable won’t be affected.</p>
<p class="indent">Take a look at the following example:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0190-01.jpg" alt="images" width="549" height="174" data-mfp-src="/library/view/oca-java-se/9781260011388/p0190-01.jpg"></p>
<p class="indent">The output from this program is</p>
<p class="code1"><code>%java ValueTest<br>a = 10<br>a = 10 after change to b</code></p>
<p class="indent">Notice the value of <code>a</code> stayed at 10. The key point to remember is that even after you assign <code>a</code> to <code>b</code>, <code>a</code> and <code>b</code> are not referring to the same place in memory. The <code>a</code> and <code>b</code> variables do not share a single value; they have identical copies.</p>
<h4 class="h4a">Reference Variable Assignments</h4>
<p class="noindent">You can assign a newly created object to an object reference variable as follows:</p>
<p class="code1"><code>Button b = new Button();</code></p>
<p class="indent"><a id="page_189"></a>The preceding line does three key things:</p>
<p class="bulletxt"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Makes a reference variable named <code>b</code>, of type <code>Button</code></p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Creates a new <code>Button</code> object on the heap</p>
<p class="bulletxb"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Assigns the newly created <code>Button</code> object to the reference variable <code>b</code></p>
<p class="indent">You can also assign <code>null</code> to an object reference variable, which simply means the variable is not referring to any object:</p>
<p class="code1"><code>Button c = null;</code></p>
<p class="noindent">The preceding line creates space for the <code>Button</code> reference variable (the bit holder for a reference value), but it doesn’t create an actual <code>Button</code> object.</p>
<p class="indent">As we discussed in the last chapter, you can also use a reference variable to refer to any object that is a subclass of the declared reference variable type, as follows:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0191-01.jpg" alt="images" width="562" height="273" data-mfp-src="/library/view/oca-java-se/9781260011388/p0191-01.jpg"></p>
<p class="indent">The rule is that you can assign a subclass of the declared type but not a superclass of the declared type. Remember, a <code>Bar</code> object is guaranteed to be able to do anything a <code>Foo</code> can do, so anyone with a <code>Foo</code> reference can invoke <code>Foo</code> methods even though the object is actually a <code>Bar</code>.</p>
<p class="indent">In the preceding code, we see that <code>Foo</code> has a method <code>doFooStuff()</code> that someone with a <code>Foo</code> reference might try to invoke. If the object referenced by the <code>Foo</code> variable is really a <code>Foo</code>, no problem. But it’s also no problem if the object is a <code>Bar</code> because <code>Bar</code> inherited the <code>doFooStuff()</code> method. You can’t make it work in reverse, however. If somebody has a <code>Bar</code> reference, they’re going to invoke <code>doBarStuff()</code>, but if the object is a <code>Foo</code>, it won’t know how to respond.</p>
<div class="side-exam">
<p class="imaget"><a id="page_190"></a><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>The OCA 8 exam covers wrapper classes. We could have discussed wrapper classes in this chapter, but we felt it made more sense to discuss them in the context of ArrayLists (which we will cover in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html">Chapter 6</a>). So until you get to <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html">Chapter 6</a>, all you’ll need to know about wrappers follows:</em></strong></p>
<p class="Text-icon-exam1"><strong><em>A wrapper object is an object that holds the value of a primitive. Every kind of primitive has an associated wrapper class: <code>Boolean, Byte, Character, Double, Float, Integer, Long,</code> and <code>Short</code>. The following code creates two wrapper objects and then prints their values:</em></strong></p>
<p class="imagel"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0192-01.jpg" alt="images" width="735" height="69" data-mfp-src="/library/view/oca-java-se/9781260011388/f0192-01.jpg"></p>
<p class="Text-icon-exam"><strong><em>produces the following output:</em></strong></p>
<p class="codea"><code>42 57</code></p>
<p class="Text-icon-exam"><strong><em>We’ll be diving much more deeply into wrappers in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html">Chapter 5</a>.</em></strong></p>
</div>
<h3 class="h3a">CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch03lev1sec3"></a>Scope (OCA Objective 1.1)</h3>
<p class="noindent"><em>1.1 Determine the scope of variables.</em></p>
<h4 class="h4"><a id="ch03lev2sec4"></a>Variable Scope</h4>
<p class="noindent">Once you’ve declared and initialized a variable, a natural question is, “How long will this variable be around?” This is a question regarding the scope of variables. And not only is scope an important thing to understand in general, it also plays a big part in the exam. Let’s start by looking at a class file:</p>
<p class="code1"><a id="page_191"></a><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0193-01.jpg" alt="images" width="562" height="254" data-mfp-src="/library/view/oca-java-se/9781260011388/p0193-01.jpg"></p>
<p class="indent">As with variables in all Java programs, the variables in this program (<code>s</code>, <code>x</code>, <code>x2</code>, <code>x3</code>, <code>y</code>, and <code>z</code>) all have a scope:</p>
<p class="bulletxt"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code>s</code> is a static variable.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code>x</code> is an instance variable.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code>y</code> is a local variable (sometimes called a “method local” variable).</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code>z</code> is a block variable.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code>x</code><code>2</code> is an <code>init</code> block variable, a flavor of local variable.</p>
<p class="bulletxb"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code>x</code><code>3</code> is a constructor variable, a flavor of local variable.</p>
<p class="indent">For the purposes of discussing the scope of variables, we can say that there are four basic scopes:</p>
<p class="numst">1.&nbsp;Static variables have the longest scope; they are created when the class is loaded, and they survive as long as the class stays loaded in the Java Virtual Machine (JVM).</p>
<p class="nums">2.&nbsp;Instance variables are the next most long-lived; they are created when a new instance is created, and they live until the instance is removed.</p>
<p class="nums">3.&nbsp;Local variables are next; they live as long as their method remains on the stack. As we’ll soon see, however, local variables can be alive and still be “out of scope.”</p>
<p class="numsb">4.&nbsp;Block variables live only as long as the code block is executing.</p>
<p class="indent">Scoping errors come in many sizes and shapes. One common mistake happens when a variable is <em>shadowed</em> and two scopes overlap. We’ll take a detailed look at shadowing in a few pages. The most common reason for scoping errors is <a id="page_192"></a>an attempt to access a variable that is not in scope. Let’s look at three common examples of this type of error:</p>
<p class="bulletxt"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Attempting to access an instance variable from a static context (typically from <code>main()</code>):</p>
<p class="code2"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0194-01.jpg" alt="images" width="533" height="115" data-mfp-src="/library/view/oca-java-se/9781260011388/p0194-01.jpg"></p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Attempting to access a local variable of the method that invoked you. When a method, say <code>go()</code>, invokes another method, say <code>go2()</code>, <code>go2()</code> won’t have access to <code>go()</code>’s local variables. While <code>go2()</code> is executing, <code>go()</code>’s local variables are still <em>alive</em>, but they are <em>out of scope</em>. When <code>go2()</code> completes, it is removed from the stack, and <code>go()</code> resumes execution. At this point, all of <code>go()</code>’s previously declared variables are back in scope. For example:</p>
<p class="code2"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0194-02.jpg" alt="images" width="562" height="273" data-mfp-src="/library/view/oca-java-se/9781260011388/p0194-02.jpg"></p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Attempting to use a block variable after the code block has completed. It’s very common to declare and use a variable within a code block, but be careful not to try to use the variable once the block has completed:</p>
<p class="code2"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0194-03.jpg" alt="images" width="284" height="114" data-mfp-src="/library/view/oca-java-se/9781260011388/p0194-03.jpg"></p>
<p class="code2"><a id="page_193"></a><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0195-01.jpg" alt="images" width="528" height="95" data-mfp-src="/library/view/oca-java-se/9781260011388/p0195-01.jpg"></p>
<p class="indent">In the last two examples, the compiler will say something like this:</p>
<p class="code2"><code>cannot find symbol</code></p>
<p class="noindent">This is the compiler’s way of saying, “That variable you just tried to use? Well, it might have been valid in the distant past (like one line of code ago), but this is Internet time, baby, I have no memory of such a variable.”</p>
<div class="side-exam">
<p class="imaget"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>Pay extra attention to code-block scoping errors. You might see them in switches, try-catches, <code>for, do,</code> and <code>while</code> loops, which we’ll cover in later chapters.</em></strong></p>
</div>
<h3 class="h3a">CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch03lev1sec4"></a>Variable Initialization<br>(OCA Objectives 2.1, 4.1, and 4.2)</h3>
<p class="noindent"><em>2.1 Declare and initialize variables (including casting of primitive datatypes).</em></p>
<p class="noindent"><em>4.1 Declare, instantiate, initialize and use a one-dimensional array</em></p>
<p class="noindent"><em>4.2 Declare, instantiate, initialize and use multi-dimensional array (sic)</em></p>
<h4 class="h4"><a id="ch03lev2sec5"></a>Using a Variable or Array Element<br>That Is Uninitialized and Unassigned</h4>
<p class="noindent">Java gives us the option of initializing a declared variable or leaving it uninitialized. When we attempt to use the uninitialized variable, we can get different behavior depending on what type of variable or array we are dealing with (primitives or objects). The behavior also depends on the level (scope) at which we are declaring our variable. An instance variable is declared within the class but outside any <a id="page_194"></a>method or constructor, whereas a local variable is declared within a method (or in the argument list of the method).</p>
<p class="indent">Local variables are sometimes called stack, temporary, automatic, or method variables, but the rules for these variables are the same regardless of what you call them. Although you can leave a local variable uninitialized, the compiler complains if you try to use a local variable before initializing it with a value, as we shall see.</p>
<h4 class="h4a">Primitive and Object Type Instance Variables</h4>
<p class="noindent">Instance variables (also called <em>member</em> variables) are variables defined at the class level. That means the variable declaration is not made within a method, constructor, or any other initializer block. Instance variables are initialized to a default value each time a new instance is created, although they may be given an explicit value after the object’s superconstructors have completed. <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ch3tab1">Table 3-1</a> lists the default values for primitive and object types.</p>
<p class="tabcap"><span class="figs"><strong>TABLE 3-1</strong></span>&nbsp;&nbsp;&nbsp;Default Values for Primitives and Reference Types</p>
<p class="image-t"><a id="ch3tab1"></a><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/t0196-01.jpg" alt="images" width="827" height="216" data-mfp-src="/library/view/oca-java-se/9781260011388/t0196-01.jpg"></p>
<h4 class="h4a">Primitive Instance Variables</h4>
<p class="noindent">In the following example, the integer <code>year</code> is defined as a class member because it is within the initial curly braces of the class and not within a method’s curly braces:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0196-01.jpg" alt="images" width="610" height="194" data-mfp-src="/library/view/oca-java-se/9781260011388/p0196-01.jpg"></p>
<p class="indent">When the program is started, it gives the variable <code>year</code> a value of zero, the default value for primitive number instance variables.</p>
<p class="imagel"><a id="page_195"></a><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/icon.jpg" alt="images" width="50" height="35" data-mfp-src="/library/view/oca-java-se/9781260011388/icon.jpg"></p>
<p class="icon"><strong><em>It’s a good idea to initialize all your variables, even if you’re assigning them with the default value. Your code will be easier to read; programmers who have to maintain your code (after you win the lottery and move to Tahiti) will be grateful.</em></strong></p>
<h4 class="h4a">Object Reference Instance Variables</h4>
<p class="noindent">When compared with uninitialized primitive variables, object references that aren’t initialized are a completely different story. Let’s look at the following code:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0197-01.jpg" alt="images" width="601" height="194" data-mfp-src="/library/view/oca-java-se/9781260011388/p0197-01.jpg"></p>
<p class="noindent">This code will compile fine. When we run it, the output is</p>
<p class="code1"><code>The title is null</code></p>
<p class="indent">The <code>title</code> variable has not been explicitly initialized with a <code>String</code> assignment, so the instance variable value is <code>null</code>. Remember that <code>null</code> is not the same as an empty String (<code>“”</code>). A <code>null</code> value means the reference variable is not referring to any object on the heap. The following modification to the <code>Book</code> code runs into trouble:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0197-02.jpg" alt="images" width="601" height="214" data-mfp-src="/library/view/oca-java-se/9781260011388/p0197-02.jpg"></p>
<p class="indent"><a id="page_196"></a>When we try to run the <code>Book</code> class, the JVM will produce something like this:</p>
<p class="code1"><code>Exception in thread “main” java.lang.NullPointerException<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at Book.main(Book.java:9)</code></p>
<p class="noindent">We get this error because the reference variable <code>title</code> does not point (refer) to an object. We can check to see whether an object has been instantiated by using the keyword <code>null</code>, as the following revised code shows:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0198-01.jpg" alt="images" width="601" height="254" data-mfp-src="/library/view/oca-java-se/9781260011388/p0198-01.jpg"></p>
<p class="indent">The preceding code checks to make sure the object referenced by the variable <code>s</code> is not <code>null</code> before trying to use it. Watch out for scenarios on the exam where you might have to trace back through the code to find out whether an object reference will have a value of <code>null</code>. In the preceding code, for example, you look at the instance variable declaration for title, see that there’s no explicit initialization, recognize that the <code>title</code> variable will be given the default value of <code>null</code>, and then realize that the variable <code>s</code> will also have a value of <code>null</code>. Remember, the value of <code>s</code> is a copy of the value of <code>title</code> (as returned by the <code>getTitle()</code> method), so if <code>title</code> is a <code>null</code> reference, <code>s</code> will be, too.</p>
<h4 class="h4a">Array Instance Variables</h4>
<p class="noindent">In <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html">Chapter 5</a> we’ll be taking a very detailed look at declaring, constructing, and initializing arrays and multidimensional arrays. For now, we’re just going to look at the rule for an array element’s default values.</p>
<p class="indent">An array is an object; thus, an array instance variable that’s declared but not explicitly initialized will have a value of <code>null</code>, just as any other object reference instance variable. But…if the array is initialized, what happens to the elements contained <em>in</em> the array? All array elements are given their default values—the same default values that elements of that type get when they’re instance variables. <a id="page_197"></a><em>The bottom line: Array elements are always, always, always given default values, regardless of where the array itself is instantiated.</em></p>
<p class="indent">If we initialize an array, object reference elements will equal null if they are not initialized individually with values. If primitives are contained in an array, they will be given their respective default values. For example, in the following code, the array <code>year</code> will contain 100 integers that all equal to 0 (zero) by default:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0199-01.jpg" alt="images" width="541" height="135" data-mfp-src="/library/view/oca-java-se/9781260011388/p0199-01.jpg"></p>
<p class="noindent">When the preceding code runs, the output indicates that all 100 integers in the array have a value of 0.</p>
<h4 class="h4"><a id="ch03lev2sec6"></a>Local (Stack, Automatic) Primitives and Objects</h4>
<p class="noindent">Local variables are defined within a method, and they include a method’s parameters.</p>
<div class="side-exam">
<p class="imaget"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>Automatic is just another term for local variable. It does not mean the automatic variable is automatically assigned a value! In fact, the opposite is true. An automatic variable must be assigned a value in the code or the compiler will complain.</em></strong></p>
</div>
<h4 class="h4a">Local Primitives</h4>
<p class="noindent">In the following time-travel simulator, the integer <code>year</code> is defined as an automatic variable because it is within the curly braces of a method:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0199-02.jpg" alt="images" width="436" height="115" data-mfp-src="/library/view/oca-java-se/9781260011388/p0199-02.jpg"></p>
<p class="indent"><a id="page_198"></a>Local variables, including primitives, always, always, always must be initialized <em>before</em> you attempt to use them (though not necessarily on the same line of code). Java does not give local variables a default value; you must explicitly initialize them with a value, as in the preceding example. If you try to use an uninitialized primitive in your code, you’ll get a compiler error:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0200-01.jpg" alt="images" width="611" height="115" data-mfp-src="/library/view/oca-java-se/9781260011388/p0200-01.jpg"></p>
<p class="indent">Compiling produces output something like this:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0200-02.jpg" alt="images" width="598" height="70" data-mfp-src="/library/view/oca-java-se/9781260011388/p0200-02.jpg"></p>
<p class="indent">To correct our code, we must give the integer <code>year</code> a value. In this updated example, we declare it on a separate line, which is perfectly valid:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0200-03.jpg" alt="images" width="607" height="175" data-mfp-src="/library/view/oca-java-se/9781260011388/p0200-03.jpg"></p>
<p class="indent">Notice in the preceding example we declared an integer called <code>day</code> that never gets initialized, yet the code compiles and runs fine. Legally, you can declare a local variable without initializing it as long as you don’t use the variable—but, let’s face it, if you declared it, you probably had a reason (although we have heard of programmers declaring random local variables just for sport, to see if they can figure out how and why they’re being used).</p>
<p class="imagel"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/icon.jpg" alt="images" width="50" height="35" data-mfp-src="/library/view/oca-java-se/9781260011388/icon.jpg"></p>
<p class="icon"><a id="page_199"></a><strong><em>The compiler can’t always tell whether a local variable has been initialized before use. For example, if you initialize within a logically conditional block (in other words, a code block that may not run, such as an if block or for loop without a literal value of true or false in the test), the compiler knows that the initialization might not happen and can produce an error. The following code upsets the compiler:</em></strong></p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0201-01.jpg" alt="images" width="562" height="175" data-mfp-src="/library/view/oca-java-se/9781260011388/p0201-01.jpg"></p>
<p class="icon"><strong><em>The compiler will produce an error something like this:</em></strong></p>
<p class="code1"><code>TestLocal.java:9: variable x might not have been initialized</code></p>
<p class="icon"><strong><em>Because of the compiler-can’t-tell-for-certain problem, you will sometimes need to initialize your variable outside the conditional block, just to make the compiler happy. You know why that’s important if you’ve seen the bumper sticker, “When the compiler’s not happy, ain’t nobody happy.”</em></strong></p>
<h4 class="h4a">Local Object References</h4>
<p class="noindent">Objects references, too, behave differently when declared within a method rather than as instance variables. With instance variable object references, you can get away with leaving an object reference uninitialized, as long as the code checks to make sure the reference isn’t <code>null</code> before using it. Remember, to the compiler, <code>null</code> is a value. You can’t use the dot operator on a <code>null</code> reference, because <em>there is no object at the other end of it</em>, but a <code>null</code> reference is not the same as an <em>uninitialized</em> reference. Locally declared references can’t get away with checking for <code>null</code> before use, unless you explicitly initialize the local variable to <code>null</code>. The compiler will complain about the following code:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0201-02.jpg" alt="images" width="408" height="133" data-mfp-src="/library/view/oca-java-se/9781260011388/p0201-02.jpg"></p>
<p class="indent"><a id="page_200"></a>Compiling the code results in an error similar to the following:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0202-01.jpg" alt="images" width="598" height="70" data-mfp-src="/library/view/oca-java-se/9781260011388/p0202-01.jpg"></p>
<p class="indent">Instance variable references are always given a default value of <code>null</code>, until they are explicitly initialized to something else. But local references are not given a default value; in other words, <em>they aren’t</em> <code>null</code>. If you don’t initialize a local reference variable, then, by default, its value is—well that’s the whole point: it doesn’t have any value at all! So we’ll make this simple: Just set the darn thing to <code>null</code> explicitly until you’re ready to initialize it to something else. The following local variable will compile properly:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0202-02.jpg" alt="images" width="524" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0202-02.jpg"></p>
<h4 class="h4a">Local Arrays</h4>
<p class="noindent">Just like any other object reference, array references declared within a method must be assigned a value before use. That just means you must declare and construct the array. You do not, however, need to explicitly initialize the elements of an array. We’ve said it before, but it’s important enough to repeat: Array elements are given their default values (<code>0</code>, <code>false</code>, <code>null</code>, <code>‘\u0000’</code>, and so on) regardless of whether the array is declared as an instance or local variable. The array object itself, however, will not be initialized if it’s declared locally. In other words, you must explicitly initialize an array reference if it’s declared and used within a method, but at the moment you construct an array object, all of its elements are assigned their default values.</p>
<h4 class="h4a">Assigning One Reference Variable to Another</h4>
<p class="noindent">With primitive variables, an assignment of one variable to another means the contents (bit pattern) of one variable are <em>copied</em> into another. Object reference variables work exactly the same way. The contents of a reference variable are a bit pattern, so if you assign reference variable <code>a1</code> to reference variable <code>b1</code>, the bit pattern in <code>a1</code> is <em>copied</em> and the new <em>copy</em> is placed into <code>b1</code>. (Some people have created a game around counting how many times we use the word <em>copy</em> in this chapter…this copy concept is a biggie!) If we assign an existing instance of an object to a new reference variable, then two reference variables will hold the same bit pattern—a <a id="page_201"></a>bit pattern referring to a specific object on the heap. Look at the following code:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0203-01.jpg" alt="images" width="485" height="212" data-mfp-src="/library/view/oca-java-se/9781260011388/p0203-01.jpg"></p>
<p class="indent">In the preceding example, a <code>Dimension</code> object <code>a1</code> is declared and initialized with a width of 5 and a height of 10. Next, <code>Dimension b1</code> is declared and assigned the value of <code>a1</code>. At this point, both variables (<code>a1</code> and <code>b1</code>) hold identical values because the contents of <code>a1</code> were copied into <code>b1</code>. There is still only one <code>Dimension</code> object—the one that both <code>a1</code> and <code>b1</code> refer to. Finally, the <code>height</code> property is changed using the <code>b1</code> reference. Now think for a minute: is this going to change the <code>height</code> property of <code>a1</code> as well? Let’s see what the output will be:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0203-02.jpg" alt="images" width="313" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0203-02.jpg"></p>
<p class="noindent">From this output, we can conclude that both variables refer to the same instance of the <code>Dimension</code> object. When we made a change to <code>b1</code>, the <code>height</code> property was also changed for <code>a1</code>.</p>
<p class="indent">One exception to the way object references are assigned is <code>String</code>. In Java, <code>String</code> objects are given special treatment. For one thing, <code>String</code> objects are immutable; you can’t change the value of a <code>String</code> object (lots more on this concept in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html">Chapter 6</a>). But it sure looks as though you can. Examine the following code:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0203-03.jpg" alt="images" width="533" height="234" data-mfp-src="/library/view/oca-java-se/9781260011388/p0203-03.jpg"></p>
<p class="indent"><a id="page_202"></a>Because <code>String</code>s are objects, you might think <code>String y</code> will contain the characters <code>Java Bean</code> after the variable <code>x</code> is changed. Let’s see what the output is:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0204-01.jpg" alt="images" width="152" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0204-01.jpg"></p>
<p class="indent">As you can see, even though <code>y</code> is a reference variable to the same object that <code>x</code> refers to, when we change <code>x</code>, it doesn’t change <code>y</code>! For any other object type, where two references refer to the same object, if either reference is used to modify the object, both references will see the change because there is still only a single object. <em>But any time we make any changes at all to a</em> <code><em>String</em></code><em>, the VM will update the reference variable to refer to a different object.</em> The different object might be a new object, or it might not be, but it will definitely be a different object. The reason we can’t say for sure whether a new object is created is because of the <code>String</code> constant pool, which we’ll cover in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html">Chapter 6</a>.</p>
<p class="indent">You need to understand what happens when you use a <code>String</code> reference variable to modify a string:</p>
<p class="bulletxt"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;A new string is created (or a matching <code>String</code> is found in the <code>String</code> pool), leaving the original <code>String</code> object untouched.</p>
<p class="bulletxb"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The reference used to modify the <code>String</code> (or rather, make a new <code>String</code> by modifying a copy of the original) is then assigned the brand-new <code>String</code> object.</p>
<p class="indent">So when you say,</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0204-02.jpg" alt="images" width="561" height="93" data-mfp-src="/library/view/oca-java-se/9781260011388/p0204-02.jpg"></p>
<p class="noindent">you haven’t changed the original <code>String</code> object created on line 1. When line 2 completes, both <code>t</code> and <code>s</code> reference the same <code>String</code> object. But when line 3 runs, rather than modifying the object referred to by <code>t</code> and <code>s</code> (which is the one and only <code>String</code> object up to this point), a brand new <code>String</code> object is created. And then it’s abandoned. Because the new <code>String</code> isn’t assigned to a <code>String</code> variable, the newly created <code>String</code> (which holds the string <code>“FRED”</code>) is toast. So although two <code>String</code> objects were created in the preceding code, only one is actually referenced, and both <code>t</code> and <code>s</code> refer to it. The behavior of <code>String</code>s is extremely important in the exam, so we’ll cover it in much more detail in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html">Chapter 6</a>.</p>
<h3 class="h3a"><a id="page_203"></a>CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch03lev1sec5"></a>Passing Variables into Methods (OCA Objective 6.6)</h3>
<p class="noindent"><em>6.8 Determine the effect upon object references and primitive values when they are passed into methods that change the values.</em></p>
<p class="indentt">Methods can be declared to take primitives and/or object references. You need to know how (or if) the caller’s variable can be affected by the called method. The difference between object reference and primitive variables, when passed into methods, is huge and important. To understand this section, you’ll need to be comfortable with the information covered in the “Literals, Assignments, and Variables” section in the early part of this chapter.</p>
<h4 class="h4"><a id="ch03lev2sec7"></a>Passing Object Reference Variables</h4>
<p class="noindent">When you pass an object variable into a method, you must keep in mind that you’re passing the object <em>reference</em>, not the actual object itself. Remember that a reference variable holds bits that represent (to the underlying VM) a way to get to a specific object in memory (on the heap). More importantly, you must remember that you aren’t even passing the actual reference variable, but rather a <em>copy</em> of the reference variable. A copy of a variable means you get a copy of the bits in that variable, so when you pass a reference variable, you’re passing a copy of the bits representing how to get to a specific object. In other words, both the caller and the called method will now have identical copies of the reference; thus, both will refer to the same exact (<em>not</em> a copy) object on the heap.</p>
<p class="indent">For this example, we’ll use the <code>Dimension</code> class from the java.awt package:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0205-01.jpg" alt="images" width="568" height="252" data-mfp-src="/library/view/oca-java-se/9781260011388/p0205-01.jpg"></p>
<p class="indent"><a id="page_204"></a>When we run this class, we can see the <code>modify()</code> method was, indeed, able to modify the original (and only) <code>Dimension</code> object created on line 4.</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0206-01.jpg" alt="images" width="429" height="74" data-mfp-src="/library/view/oca-java-se/9781260011388/p0206-01.jpg"></p>
<p class="indent">Notice when the <code>Dimension</code> object on line 4 is passed to the <code>modify()</code> method, any changes to the object that occur inside the method are being made to the object whose reference was passed. In the preceding example, reference variables <code>d</code> and <code>dim</code> both point to the same object.</p>
<h4 class="h4"><a id="ch03lev2sec8"></a>Does Java Use Pass-By-Value Semantics?</h4>
<p class="noindent">If Java passes objects by passing the reference variable instead, does that mean Java uses pass-by-reference for objects? Not exactly, although you’ll often hear and read that it does. Java is actually pass-by-value for all variables running within a single VM. Pass-by-value means pass-by-variable-value. And that means pass-by-copy-of-the-variable! (There’s that word <em>copy</em> again!)</p>
<p class="indent">It makes no difference if you’re passing primitive or reference variables; you are always passing a copy of the bits in the variable. So for a primitive variable, you’re passing a copy of the bits representing the value. For example, if you pass an <code>int</code> variable with the value of <code>3</code>, you’re passing a copy of the bits representing <code>3</code>. The called method then gets its own copy of the value to do with it what it likes.</p>
<p class="indent">And if you’re passing an object reference variable, you’re passing a copy of the bits representing the reference to an object. The called method then gets its own copy of the reference variable to do with it what it likes. But because two identical reference variables refer to the exact same object, if the called method modifies the object (by invoking setter methods, for example), the caller will see that the object the caller’s original variable refers to has also been changed. In the next section, we’ll look at how the picture changes when we’re talking about primitives.</p>
<p class="indent">The bottom line on pass-by-value: The called method can’t change the caller’s variable, although for object reference variables, the called method can change the object the variable referred to. What’s the difference between changing the variable and changing the object? For object references, it means the called method can’t reassign the caller’s <a id="page_205"></a>original reference variable and make it refer to a different object or <code>null</code>. For example, in the following code fragment,</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0207-01.jpg" alt="images" width="198" height="154" data-mfp-src="/library/view/oca-java-se/9781260011388/p0207-01.jpg"></p>
<p class="noindent">reassigning <code>g</code> does not reassign <code>f</code>! At the end of the <code>bar()</code> method, two <code>Foo</code> objects have been created: one referenced by the local variable <code>f</code> and one referenced by the local (argument) variable <code>g</code>. Because the <code>doStuff()</code> method has a copy of the reference variable, it has a way to get to the original <code>Foo</code> object, for instance to call the <code>setName()</code> method. But the <code>doStuff()</code> method does <em>not</em> have a way to get to the <code>f</code> reference variable. So <code>doStuff()</code> can change values within the object <code>f</code> refers to, but <code>doStuff()</code> can’t change the actual contents (bit pattern) of <code>f</code>. In other words, <code>doStuff()</code> can change the state of the object that <code>f</code> refers to, but it can’t make <code>f</code> refer to a different object!</p>
<h4 class="h4"><a id="ch03lev2sec9"></a>Passing Primitive Variables</h4>
<p class="noindent">Let’s look at what happens when a primitive variable is passed to a method:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0207-02.jpg" alt="images" width="483" height="254" data-mfp-src="/library/view/oca-java-se/9781260011388/p0207-02.jpg"></p>
<p class="indent">In this simple program, the variable <code>a</code> is passed to a method called <code>modify()</code>, which increments the variable by 1. The resulting output looks like this:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0207-03.jpg" alt="images" width="200" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0207-03.jpg"></p>
<p class="indent"><a id="page_206"></a>Notice that <code>a</code> did not change after it was passed to the method. Remember, it was a copy of <code>a</code> that was passed to the method. When a primitive variable is passed to a method, it is passed by value, which means pass-by-copy-of-the-bits-in-the-variable.</p>
<div class="sidebar">
<p class="sideh"><strong>FROM THE CLASSROOM</strong></p>
</div>
<div class="sidebar1">
<p class="sidehl"><strong>The Shadowy World of Variables</strong></p>
<p class="noindent">Just when you think you’ve got it all figured out, you see a piece of code with variables not behaving the way you think they should. You might have stumbled into code with a shadowed variable. You can shadow a variable in several ways. We’ll look at one way that might trip you up: hiding a static variable by shadowing it with a local variable.</p>
<p class="indent"><strong>Shadowing involves reusing a variable name that’s already been declared somewhere else.</strong> The effect of shadowing is to hide the previously declared variable in such a way that it may look as though you’re using the hidden variable, but you’re actually using the shadowing variable. You might find reasons to shadow a variable intentionally, but typically it happens by accident and causes hard-to-find bugs. On the exam, you can expect to see questions where shadowing plays a role.</p>
<p class="indent">You can shadow a variable by declaring a local variable of the same name, either directly or as part of an argument:</p>
<p class="imagel"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0208-01.jpg" alt="images" width="540" height="254" data-mfp-src="/library/view/oca-java-se/9781260011388/p0208-01.jpg"></p>
<p class="indent">The preceding code appears to change the static <code>size</code> variable in the <code>changeIt()</code> method, but because <code>changeIt()</code> has a parameter named <code>size</code>, the local size variable is modified while the static <code>size</code> variable is untouched.</p>
<p class="indent"><a id="page_207"></a>Running class <code>Foo</code> prints this:</p>
<p class="imagel"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0209-01.jpg" alt="images" width="227" height="73" data-mfp-src="/library/view/oca-java-se/9781260011388/p0209-01.jpg"></p>
<p class="indent">Things become more interesting when the shadowed variable is an object reference, rather than a primitive:</p>
<p class="imagel"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0209-02.jpg" alt="images" width="702" height="413" data-mfp-src="/library/view/oca-java-se/9781260011388/p0209-02.jpg"></p>
<p class="indent">The preceding code prints out this:</p>
<p class="imagel"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0209-03.jpg" alt="images" width="333" height="73" data-mfp-src="/library/view/oca-java-se/9781260011388/p0209-03.jpg"></p>
<p class="indent">You can see that the shadowing variable (the local parameter <code>myBar</code> in <code>changeIt())</code> can still affect the <code>myBar</code> instance variable, because the <code>myBar</code> parameter receives a reference to the same <code>Bar</code> object. But when the local <code>myBar</code> is reassigned a new <code>Bar</code> object, which we then modify by changing its <code>barNum</code> value, Foo’s original <code>myBar</code> instance variable is untouched.</p>
</div>
<h3 class="h3a"><a id="page_208"></a>CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch03lev1sec6"></a>Garbage Collection (OCA Objective 2.4)</h3>
<p class="noindent"><em>2.4 Explain an object’s lifecycle (creation, “dereference by reassignment,” and garbage collection)</em></p>
<p class="indentt">The phrase <em>garbage collection</em> seems to come and go from the exam objectives. As of the OCA 8 exam, it’s back, and we’re happy. Garbage collection is a well-known idea and a universal phrase in computer science.</p>
<h4 class="h4"><a id="ch03lev2sec10"></a>Overview of Memory Management and Garbage Collection</h4>
<p class="noindent">This is the section you’ve been waiting for! It’s finally time to dig into the wonderful world of memory management and garbage collection.</p>
<p class="indent">Memory management is a crucial element in many types of applications. Consider a program that reads in large amounts of data, say from somewhere else on a network, and then writes that data into a database on a hard drive. A typical design would be to read the data into some sort of collection in memory, perform some operations on the data, and then write the data into the database. After the data is written into the database, the collection that stored the data temporarily must be emptied of old data or deleted and re-created before processing the next batch. This operation might be performed thousands of times, and in languages like C or C++ that do not offer automatic garbage collection, a small flaw in the logic that manually empties or deletes the collection data structures can allow small amounts of memory to be improperly reclaimed or lost. Forever. These small losses are called memory leaks, and over many thousands of iterations they can make enough memory inaccessible that programs will eventually crash. Creating code that performs manual memory management cleanly and thoroughly is a nontrivial and complex task, and while estimates vary, it is arguable that manual memory management can double the development effort for a complex program.</p>
<p class="indent">Java’s garbage collector provides an automatic solution to memory management. In most cases it frees you from having to add any memory management logic to your application. The downside to automatic garbage collection is that you can’t completely control when it runs and when it doesn’t.</p>
<h4 class="h4"><a id="ch03lev2sec11"></a><a id="page_209"></a>Overview of Java’s Garbage Collector</h4>
<p class="noindent">Let’s look at what we mean when we talk about garbage collection in the land of Java. From the 30,000-foot level, garbage collection is the phrase used to describe automatic memory management in Java. Whenever a software program executes (in Java, C, C++, Lisp, Ruby, and so on), it uses memory in several different ways. We’re not going to get into Computer Science 101 here, but it’s typical for memory to be used to create a stack, a heap, in Java’s case constant pools and method areas. <strong>The heap is that part of memory where Java objects live, and it’s the one and only part of memory that is in any way involved in the garbage collection process.</strong></p>
<p class="indent">A heap is a heap is a heap. For the exam, it’s important that you know that you can call it the heap, you can call it the garbage collectible heap, or you can call it Johnson, but there is one and only one heap.</p>
<p class="indent">So all garbage collection revolves around making sure the heap has as much free space as possible. For the purpose of the exam, what this boils down to is deleting any objects that are no longer reachable by the Java program running. We’ll talk more about what “reachable” means in a minute, but let’s drill this point in. When the garbage collector runs, its purpose is to find and delete objects that cannot be reached. If you think of a Java program as being in a constant cycle of creating the objects it needs (which occupy space on the heap) and then discarding them when they’re no longer needed, creating new objects, discarding them, and so on, the missing piece of the puzzle is the garbage collector. When it runs, it looks for those discarded objects and deletes them from memory, so that the cycle of using memory and releasing it can continue. Ah, the great circle of life.</p>
<h4 class="h4a">When Does the Garbage Collector Run?</h4>
<p class="noindent">The garbage collector is under the control of the JVM; the JVM decides when to run the garbage collector. From within your Java program, you can ask the JVM to run the garbage collector; but there are no guarantees, under any circumstances, that the JVM will comply. Left to its own devices, the JVM will typically run the garbage collector when it senses that memory is running low. Experience indicates that when your Java program makes a request for garbage collection, the JVM will usually grant your request in short order, but there are no guarantees. Just when you think you can count on it, the JVM will decide to ignore your request.</p>
<h4 class="h4a"><a id="page_210"></a>How Does the Garbage Collector Work?</h4>
<p class="noindent">You just can’t be sure. You might hear that the garbage collector uses a mark and sweep algorithm, and for any given Java implementation that might be true, but the Java specification doesn’t guarantee any particular implementation. You might hear that the garbage collector uses reference counting; once again, maybe yes, maybe no. The important concept for you to understand for the exam is: When does an object become eligible for garbage collection?</p>
<p class="indent">In a nutshell, every Java program has from one to many threads. Each thread has its own little execution stack. Normally, you (the programmer) cause at least one thread to run in a Java program, the one with the <code>main()</code> method at the bottom of the stack. However, there are many really cool reasons to launch additional threads from your initial thread (which you’ll get into if you prepare for the OCP 8 exam). In addition to having its own little execution stack, each thread has its own lifecycle. For now, all you need to know is that threads can be alive or dead.</p>
<p class="indent">With this background information, we can now say with stunning clarity and resolve that <em>an object is eligible for garbage collection when no live thread can access it</em>. (Note: Due to the vagaries of the <code>String</code> constant pool, the exam focuses its garbage collection questions on non-<code>String</code> objects, and so our garbage collection discussions apply to only non-<code>String</code> objects too.)</p>
<p class="indent">Based on that definition, the garbage collector performs some magical, unknown operations; and when it discovers an object that can’t be reached by any live thread, it will consider that object as eligible for deletion, and it might even delete it at some point. (You guessed it: it also might never delete it.) When we talk about reaching an object, we’re really talking about having a reachable reference variable that refers to the object in question. If our Java program has a reference variable that refers to an object and that reference variable is available to a live thread, then that object is considered reachable. We’ll talk more about how objects can become unreachable in the following section.</p>
<p class="indent">Can a Java application run out of memory? Yes. The garbage collection system attempts to remove objects from memory when they are not used. However, if you maintain too many live objects (objects referenced from other live objects), the system can run out of memory. Garbage collection cannot ensure that there is enough memory, only that the memory that is available will be managed as efficiently as possible.</p>
<h4 class="h4"><a id="ch03lev2sec12"></a><a id="page_211"></a>Writing Code That Explicitly Makes Objects Eligible for Collection</h4>
<p class="noindent">In the preceding section, you learned the theories behind Java garbage collection. In this section, we show how to make objects eligible for garbage collection using actual code. We also discuss how to attempt to force garbage collection if it is necessary and how you can perform additional cleanup on objects before they are removed from memory.</p>
<h4 class="h4a">Nulling a Reference</h4>
<p class="noindent">As we discussed earlier, an object becomes eligible for garbage collection when there are no more reachable references to it. Obviously, if there are no reachable references, it doesn’t matter what happens to the object. For our purposes it is just floating in space, unused, inaccessible, and no longer needed.</p>
<p class="indent">The first way to remove a reference to an object is to set the reference variable that refers to the object to <code>null</code>. Examine the following code:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0213-01.jpg" alt="images" width="610" height="175" data-mfp-src="/library/view/oca-java-se/9781260011388/p0213-01.jpg"></p>
<p class="indent">The <code>StringBuffer</code> object with the value <code>hello</code> is assigned to the reference variable <code>sb</code> in the third line. To make the object eligible (for garbage collection), we set the reference variable <code>sb</code> to <code>null</code>, which removes the single reference that existed to the <code>StringBuffer</code> object. Once line 6 has run, our happy little <code>hello StringBuffer</code> object is doomed, eligible for garbage collection.</p>
<h4 class="h4a">Reassigning a Reference Variable</h4>
<p class="noindent">We can also decouple a reference variable from an object by setting the reference variable to refer to another object. Examine the following code:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0213-02.jpg" alt="images" width="591" height="174" data-mfp-src="/library/view/oca-java-se/9781260011388/p0213-02.jpg"></p>
<p class="indent"><a id="page_212"></a>Objects that are created in a method also need to be considered. When a method is invoked, any local variables created exist only for the duration of the method. Once the method has returned, the objects created in the method are eligible for garbage collection. There is an obvious exception, however. If an object is returned from the method, its reference might be assigned to a reference variable in the method that called it; hence, it will not be eligible for collection. Examine the following code:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0214-01.jpg" alt="images" width="522" height="292" data-mfp-src="/library/view/oca-java-se/9781260011388/p0214-01.jpg"></p>
<p class="indent">In the preceding example, we created a method called <code>getDate()</code> that returns a <code>Date</code> object. This method creates two objects: a <code>Date</code> and a <code>StringBuffer</code> containing the date information. Since the method returns a reference to the <code>Date</code> object and this reference is assigned to a local variable, it will not be eligible for collection even after the <code>getDate()</code> method has completed. The <code>StringBuffer</code> object, though, will be eligible, even though we didn’t explicitly set the <code>now</code> variable to <code>null</code>.</p>
<h4 class="h4a">Isolating a Reference</h4>
<p class="noindent">There is another way in which objects can become eligible for garbage collection, even if they still have valid references! We call this scenario “islands of isolation.”</p>
<p class="indent">A simple example is a class that has an instance variable that is a reference variable to another instance of the same class. Now imagine that two such instances exist and that they refer to each other. If all other references to these two objects <a id="page_213"></a>are removed, then even though each object still has a valid reference, there will be no way for any live thread to access either object. When the garbage collector runs, it can <em>usually</em> discover any such islands of objects and remove them. As you can imagine, such islands can become quite large, theoretically containing hundreds of objects. Examine the following code:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0215-01.jpg" alt="images" width="429" height="373" data-mfp-src="/library/view/oca-java-se/9781260011388/p0215-01.jpg"></p>
<p class="indent">When the code reaches <code>// do complicated</code>, the three <code>Island</code> objects (previously known as <code>i2</code>, <code>i3</code>, and <code>i4</code>) have instance variables so that they refer to each other, but their links to the outside world (<code>i2</code>, <code>i3</code>, and <code>i4</code>) have been nulled. These three objects are eligible for garbage collection.</p>
<p class="indent">This covers everything you will need to know about making objects eligible for garbage collection. Study <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ch3fig2">Figure 3-2</a> to reinforce the concepts of objects without references and islands of isolation.</p>
<p class="imagel"><a id="ch3fig2"></a><a id="page_214"></a><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/f0216-01.jpg" alt="images" width="1058" height="687" data-mfp-src="/library/view/oca-java-se/9781260011388/f0216-01.jpg"></p>
<p class="figcap"><span class="figs"><strong>FIGURE 3-2</strong></span>&nbsp;&nbsp;&nbsp;Island objects eligible for garbage collection</p>
<h4 class="h4a">Forcing Garbage Collection</h4>
<p class="noindent">The first thing that we should mention here is that, contrary to this section’s title, garbage collection cannot be forced. However, Java provides some methods that allow you to <em>request</em> that the JVM perform garbage collection.</p>
<p class="indent">Note: The Java garbage collector has evolved to such an advanced state that it’s recommended that you never invoke <code>System.gc()</code> in your code—leave it to the JVM.</p>
<p class="indent">In reality, it is possible only to suggest to the JVM that it perform garbage collection. However, there are no guarantees the JVM will actually remove all of the unused objects from memory (even if garbage collection is run). It is essential that you understand this concept for the exam.</p>
<p class="indent">The garbage collection routines that Java provides are members of the <code>Runtime</code> class. The <code>Runtime</code> class is a special class that has a single object (a <code>Singleton</code>) for each main program. The <code>Runtime</code> object provides a mechanism for communicating directly with the virtual machine. To get the <code>Runtime</code> instance, you can use the method <code>Runtime.getRuntime()</code>, which returns the <code>Singleton</code>. Once you have the <code>Singleton</code>, you can invoke the garbage collector using the <code>gc()</code> method. Alternatively, you can call the same method on the <code>System</code> class, which has static methods that can do the work of obtaining the <code>Singleton</code> for you. The simplest way to ask for garbage collection (remember—just a request) is</p>
<p class="code1"><code>System.gc();</code></p>
<p class="indent"><a id="page_215"></a>Theoretically, after calling <code>System.gc()</code>, you will have as much free memory as possible. We say “theoretically” because this routine does not always work that way. First, your JVM may not have implemented this routine; the language specification allows this routine to do nothing at all. Second, another thread might grab lots of memory right after you run the garbage collector.</p>
<p class="indent">This is not to say that <code>System.gc()</code> is a useless method—it’s much better than nothing. You just can’t rely on <code>System.gc()</code> to free up enough memory so that you don’t have to worry about running out of memory. The Certification Exam is interested in guaranteed behavior, not probable behavior.</p>
<p class="indent">Now that you are somewhat familiar with how this works, let’s do a little experiment to see the effects of garbage collection. The following program lets us know how much total memory the JVM has available to it and how much free memory it has. It then creates 10,000 <code>Date</code> objects. After this, it tells us how much memory is left and then calls the garbage collector (which, if it decides to run, should halt the program until all unused objects are removed). The final free memory result should indicate whether it has run. Let’s look at the program:</p>
<p class="code1"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0217-01.jpg" alt="images" width="464" height="526" data-mfp-src="/library/view/oca-java-se/9781260011388/p0217-01.jpg"></p>
<p class="indent"><a id="page_216"></a>As you can see, the JVM actually did decide to garbage collect (that is, delete) the eligible objects. In the preceding example, we suggested that the JVM perform garbage collection with 458,048 bytes of memory remaining, and it honored our request. This program has only one user thread running, so there was nothing else going on when we called <code>rt.gc()</code>. Keep in mind that the behavior when <code>gc()</code> is called may be different for different JVMs; hence, there is no guarantee that the unused objects will be removed from memory. About the only thing you can guarantee is that if you are running very low on memory, the garbage collector will run before it throws an <code>OutOfMemoryException</code>.</p>
<h3 class="h3a1"><a id="ch03lev2sec13"></a>EXERCISE 3-2</h3>
<p class="line"></p>
<h3 class="h3s">Garbage Collection Experiment</h3>
<p class="noindent">Try changing the CheckGC program by putting lines 13 and 14 inside a loop. You might see that not all memory is released on any given run of the GC.</p>
<hr class="hr">
<h4 class="h4a">Cleaning Up Before Garbage Collection—the finalize() Method</h4>
<p class="noindent">Java provides a mechanism that lets you run some code just before your object is deleted by the garbage collector. This code is located in a method named <code>finalize()</code> that all classes inherit from class <code>Object</code>. On the surface, this sounds like a great idea; maybe your object opened up some resources, and you’d like to close them before your object is deleted. The problem is that, as you may have gathered by now, you can never count on the garbage collector to delete an object. So, any code that you put into your class’s overridden <code>finalize()</code> method is not guaranteed to run. Because the <code>finalize()</code> method for any given object might run, but you can’t count on it, don’t put any essential code into your <code>finalize()</code> method. In fact, we recommend that, in general, you don’t override <code>finalize()</code> at all.</p>
<h4 class="h4a">Tricky Little finalize() Gotchas</h4>
<p class="noindent">There are a couple of concepts concerning <code>finalize()</code> that you need to remember:</p>
<p class="bulletxt"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;For any given object, <code>finalize()</code> will be called only once (at most) by the garbage collector.</p>
<p class="bulletxb"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Calling <code>finalize()</code> can actually result in saving an object from deletion.</p>
<p class="indent"><a id="page_217"></a>Let’s examine these statements a little further. First of all, remember that any code you can put into a normal method you can put into <code>finalize()</code>. For example, in the <code>finalize()</code> method you could write code that passes a reference to the object in question back to another object, effectively <em>ineligible-izing</em> the object for garbage collection. If at some later point this same object becomes eligible for garbage collection again, the garbage collector can still process the object and delete it. The garbage collector, however, will remember that, for this object, <code>finalize()</code> already ran, and it will not run <code>finalize()</code> again.</p>
<h3 class="h3"><a id="ch03lev1sec7"></a><span class="under">CERTIFICATION SUMMARY</span></h3>
<p class="noindent">This chapter covered a wide range of topics. Don’t worry if you have to review some of these topics as you get into later chapters. This chapter includes a lot of foundational stuff that will come into play later.</p>
<p class="indent">We started the chapter by reviewing the stack and the heap; remember that local variables live on the stack and instance variables live with their objects on the heap.</p>
<p class="indent">We reviewed legal literals for primitives and <code>Strings</code>, and then we discussed the basics of assigning values to primitives and reference variables and the rules for casting primitives.</p>
<p class="indent">Next we discussed the concept of scope, or “How long will this variable live?” Remember the four basic scopes in order of lessening life span: static, instance, local, and block.</p>
<p class="indent">We covered the implications of using uninitialized variables and the importance of the fact that local variables MUST be assigned a value explicitly. We talked about some of the tricky aspects of assigning one reference variable to another and some of the finer points of passing variables into methods, including a discussion of “shadowing.”</p>
<p class="indent">Finally, we dove into garbage collection, Java’s automatic memory management feature. We learned that the heap is where objects live and where all the cool garbage collection activity takes place. We learned that in the end, the JVM will perform garbage collection whenever it wants to. You (the programmer) can request a garbage collection run, but you can’t force it. We talked about garbage collection only applying to objects that are eligible, and that eligible means “inaccessible from any live thread.” Finally, we discussed the rarely useful <code>finalize()</code> method and what you’ll have to know about it for the exam. All in all, this was one fascinating chapter.</p>
<h3 class="h3"><a id="ch03lev1sec8"></a><a id="page_218"></a><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/tic1.jpg" alt="images" width="25" height="28" data-mfp-src="/library/view/oca-java-se/9781260011388/tic1.jpg"> TWO-MINUTE DRILL</h3>
<p class="noindent">Here are some of the key points from this chapter.</p>
<h4 class="h4a">Stack and Heap</h4>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Local variables (method variables) live on the stack.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Objects and their instance variables live on the heap.</p>
<h4 class="h4a">Literals and Primitive Casting (OCA Objective 2.1)</h4>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Integer literals can be binary, decimal, octal (such as <code>013</code>), or hexadecimal (such as <code>0x3d</code>).</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Literals for <code>long</code>s end in <code>L</code> or <code>l</code>. (For the sake of readability, we recommend “<code>L</code>“.)</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Float literals end in <code>F</code> or <code>f</code>, and <code>double</code> literals end in a digit or <code>D</code> or <code>d</code>.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The <code>boolean</code> literals are <code>true</code> and <code>false</code>.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Literals for <code>char</code>s are a single character inside single quotes: <code>‘d’</code>.</p>
<h4 class="h4a">Scope (OCA Objective 1.1)</h4>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Scope refers to the lifetime of a variable.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;There are four basic scopes:</p>
<p class="bulletxs"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Static variables live basically as long as their class lives.</p>
<p class="bulletxs"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Instance variables live as long as their object lives.</p>
<p class="bulletxs"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Local variables live as long as their method is on the stack; however, if their method invokes another method, they are temporarily unavailable.</p>
<p class="bulletxs"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Block variables (for example, in a <code>for</code> or an <code>if</code>) live until the block completes.</p>
<h4 class="h4a">Basic Assignments (OCA Objectives 2.1, 2.2, and 2.3)</h4>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Literal integers are implicitly <code>int</code>s.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Integer expressions always result in an <code>int</code>-sized result, never smaller.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Floating-point numbers are implicitly doubles (64 bits).</p>
<p class="bulletx"><a id="page_219"></a><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Narrowing a primitive truncates the <em>high order</em> bits.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Compound assignments (such as <code>+=</code>) perform an automatic cast.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;A reference variable holds the bits that are used to refer to an object.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Reference variables can refer to subclasses of the declared type but not to superclasses.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;When you create a new object, such as <code>Button b = new Button();</code>, the JVM does three things:</p>
<p class="bulletxs"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Makes a reference variable named <code>b</code>, of type <code>Button</code>.</p>
<p class="bulletxs"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Creates a new <code>Button</code> object.</p>
<p class="bulletxs"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Assigns the <code>Button</code> object to the reference variable <code>b</code>.</p>
<h4 class="h4a">Using a Variable or Array Element That Is Uninitialized and Unassigned (OCA Objectives 4.1 and 4.2)</h4>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;When an array of objects is instantiated, objects within the array are not instantiated automatically, but all the references get the default value of <code>null</code>.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;When an array of primitives is instantiated, elements get default values.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Instance variables are always initialized with a default value.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Local/automatic/method variables are never given a default value. If you attempt to use one before initializing it, you’ll get a compiler error.</p>
<h4 class="h4a">Passing Variables into Methods (OCA Objective 6.6)</h4>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Methods can take primitives and/or object references as arguments.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Method arguments are always copies.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Method arguments are never actual objects (they can be references to objects).</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;A primitive argument is an unattached copy of the original primitive.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;A reference argument is another copy of a reference to the original object.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Shadowing occurs when two variables with different scopes share the same name. This leads to hard-to-find bugs and hard-to-answer exam questions.</p>
<h4 class="h4a">Garbage Collection (OCA Objective 2.4)</h4>
<p class="bulletx"><a id="page_220"></a><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;In Java, garbage collection (GC) provides automated memory management.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The purpose of GC is to delete objects that can’t be reached.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Only the JVM decides when to run the GC; you can only suggest it.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;You can’t know the GC algorithm for sure.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Objects must be considered eligible before they can be garbage collected.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;An object is eligible when no live thread can reach it.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;To reach an object, you must have a live, reachable reference to that object.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Java applications can run out of memory.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Islands of objects can be garbage collected, even though they refer to each other.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Request garbage collection with <code>System.gc();</code>.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The <code>Object</code> class has a <code>finalize()</code> method.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The <code>finalize()</code> method is guaranteed to run once and only once before the garbage collector deletes an object.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The garbage collector makes no guarantees; <code>finalize()</code> may never run.</p>
<p class="bulletx"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;You can ineligible-ize an object for GC from within <code>finalize()</code>.</p>
<h3 class="h3"><a id="ch03lev1sec9"></a><a id="page_221"></a>SELF TEST</h3>
<p class="numst"><a id="ich3q1" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ch3q1"><strong>1.</strong></a>&nbsp;Given:</p>
<p class="code"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0223-01.jpg" alt="images" width="397" height="254" data-mfp-src="/library/view/oca-java-se/9781260011388/p0223-01.jpg"></p>
<p class="numsn">When <code>// do Stuff</code> is reached, how many objects are eligible for garbage collection?</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;0</p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;1</p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;2</p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;It is not possible to know</p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;An exception is thrown at runtime</p>
<p class="numst"><a id="ich3q2" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ch3q2"><strong>2.</strong></a>&nbsp;Given:</p>
<p class="code"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0223-02.jpg" alt="images" width="344" height="175" data-mfp-src="/library/view/oca-java-se/9781260011388/p0223-02.jpg"></p>
<p class="numn">Which lines WILL NOT compile? (Choose all that apply.)</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;Line A</p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;Line B</p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;Line C</p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;Line D</p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;Line E</p>
<p class="numst"><a id="page_222"></a><a id="ich3q3" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ch3q3"><strong>3.</strong></a>&nbsp;Given:</p>
<p class="code"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0224-01.jpg" alt="images" width="398" height="194" data-mfp-src="/library/view/oca-java-se/9781260011388/p0224-01.jpg"></p>
<p class="numn">Which lines WILL NOT compile? (Choose all that apply.)</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;Line A</p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;Line B</p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;Line C</p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;Line D</p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;Line E</p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;Line F</p>
<p class="numst"><a id="ich3q4" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ch3q4"><strong>4.</strong></a>&nbsp;Given:</p>
<p class="code"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0224-02.jpg" alt="images" width="397" height="234" data-mfp-src="/library/view/oca-java-se/9781260011388/p0224-02.jpg"></p>
<p class="numn"><a id="page_223"></a>What is the result?</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;<code>hi</code></p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;<code>hi hi</code></p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;<code>hi hi hi</code></p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;<code>hi</code>, followed by an exception</p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;<code>hi hi</code>, followed by an exception</p>
<p class="numst"><a id="page_224"></a><a id="ich3q5" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ch3q5"><strong>5.</strong></a>&nbsp;Given:</p>
<p class="code"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0225-01.jpg" alt="images" width="549" height="254" data-mfp-src="/library/view/oca-java-se/9781260011388/p0225-01.jpg"></p>
<p class="numn">What is the result?</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;<code>true true</code></p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;<code>false true</code></p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;<code>true false</code></p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;<code>false false</code></p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;An exception is thrown at runtime</p>
<p class="numst"><a id="ich3q6" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ch3q6"><strong>6.</strong></a>&nbsp;Given:</p>
<p class="code"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0225-02.jpg" alt="images" width="407" height="293" data-mfp-src="/library/view/oca-java-se/9781260011388/p0225-02.jpg"></p>
<p class="numn"><a id="page_225"></a>What is the result?</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;<code>7 10</code></p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;<code>8 10</code></p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;<code>7 12</code></p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;<code>8 12</code></p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;An exception is thrown at runtime</p>
<p class="numst"><a id="ich3q7" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ch3q7"><strong>7.</strong></a>&nbsp;Given:</p>
<p class="code"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0226-01.jpg" alt="images" width="417" height="254" data-mfp-src="/library/view/oca-java-se/9781260011388/p0226-01.jpg"></p>
<p class="numn">When execution reaches the commented line, which are true? (Choose all that apply.)</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;The output contains <code>1</code></p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;The output contains <code>2</code></p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;The output contains <code>3</code></p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;Zero <code>Wind</code> objects are eligible for garbage collection</p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;One <code>Wind</code> object is eligible for garbage collection</p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;Two <code>Wind</code> objects are eligible for garbage collection</p>
<p class="numa">G.&nbsp;&nbsp;&nbsp;Three <code>Wind</code> objects are eligible for garbage collection</p>
<p class="numst"><a id="ich3q8" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ch3q8"><strong>8.</strong></a>&nbsp;Given:</p>
<p class="code"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0226-02.jpg" alt="images" width="434" height="256" data-mfp-src="/library/view/oca-java-se/9781260011388/p0226-02.jpg"></p>
<p class="numn"><a id="page_226"></a>What is the result?</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;<code>5 7</code></p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;<code>5 8</code></p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;<code>8 7</code></p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;<code>8 8</code></p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;An exception is thrown at runtime</p>
<p class="numst"><a id="page_227"></a><a id="ich3q9" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ch3q9"><strong>9.</strong></a>&nbsp;Given:</p>
<p class="code"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0227-01.jpg" alt="images" width="398" height="294" data-mfp-src="/library/view/oca-java-se/9781260011388/p0227-01.jpg"></p>
<p class="numn">What is the result?</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;<code>1</code></p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;<code>2</code></p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;<code>3</code></p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;An exception is thrown at runtime</p>
<p class="numst"><a id="page_228"></a><a id="ich3q10" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ch3q10"><strong>10.</strong></a>&nbsp;Given:</p>
<p class="code"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0228-01.jpg" alt="images" width="398" height="353" data-mfp-src="/library/view/oca-java-se/9781260011388/p0228-01.jpg"></p>
<p class="numn">What is the result?</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;<code>1</code></p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;<code>2</code></p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;<code>3</code></p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;<code>null</code></p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numst"><a id="ich3q11" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ch3q11"><strong>11.</strong></a>&nbsp;Given:</p>
<p class="code"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0228-02.jpg" alt="images" width="539" height="314" data-mfp-src="/library/view/oca-java-se/9781260011388/p0228-02.jpg"></p>
<p class="numn"><a id="page_229"></a>When line 16 is reached, how many objects will be eligible for garbage collection?</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;0</p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;1</p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;2</p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;3</p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;4</p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;5</p>
<p class="numst"><a id="ich3q12" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ch3q12"><strong>12.</strong></a>&nbsp;Given:</p>
<p class="code"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0229-01.jpg" alt="images" width="398" height="353" data-mfp-src="/library/view/oca-java-se/9781260011388/p0229-01.jpg"></p>
<p class="numn">What is the result?</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;<code>2</code></p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;<code>10</code></p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;<code>15</code></p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;<code>30</code></p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;<code>70</code></p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;<code>105</code></p>
<p class="numa">G.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numst"><a id="page_230"></a><a id="ich3q13" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ch3q13"><strong>13.</strong></a>&nbsp;Given:</p>
<p class="code"><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0230-01.jpg" alt="images" width="435" height="274" data-mfp-src="/library/view/oca-java-se/9781260011388/p0230-01.jpg"></p>
<p class="numn">What is the result?</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;2</p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;3</p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;4</p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;5</p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;An exception is thrown at runtime</p>
<h3 class="h3"><a id="ch03lev1sec10"></a><a id="page_231"></a>SELF TEST ANSWERS</h3>
<p class="hanga"><a id="ch3q1" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ich3q1"><strong>1.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>C</strong> is correct. Only one <code>CardBoard object (c1)</code> is eligible, but it has an associated <code>Short</code> wrapper object that is also eligible.<br><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, B, D, E,</strong> and <strong>F</strong> are incorrect based on the above. (OCA Objective 2.4)</p>
<p class="hanga"><a id="ch3q2" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ich3q2"><strong>2.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>E</strong> is correct; compilation of line E fails. When a mathematical operation is performed on any primitives smaller than <code>int</code>s, the result is automatically cast to an integer.<br><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, B, C,</strong> and <strong>D</strong> are all legal primitive casts. (OCA Objective 2.1)</p>
<p class="hanga"><a id="ch3q3" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ich3q3"><strong>3.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>C</strong> is correct; line <strong>C</strong> will NOT compile. As of Java 7, underscores can be included in numeric literals, but not at the beginning or the end.<br><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, B, D, E,</strong> and <strong>F</strong> are incorrect. <strong>A</strong> and <strong>B</strong> are legal numeric literals. <strong>D</strong> and <strong>E</strong> are examples of valid binary literals, which were new to Java 7, and <strong>F</strong> is a valid hexadecimal literal that uses an underscore. (OCA Objective 2.1)</p>
<p class="hanga"><a id="ch3q4" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ich3q4"><strong>4.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>F</strong> is correct. The <code>m2</code> object’s <code>m1</code> instance variable is never initialized, so when <code>m5</code> tries to use it, a <code>NullPointerException</code> is thrown.<br><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, B, C, D,</strong> and <strong>E</strong> are incorrect based on the above. (OCA Objectives 2.1 and 2.3)</p>
<p class="hanga"><a id="ch3q5" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ich3q5"><strong>5.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>A</strong> is correct. The references <code>f1</code>, <code>z</code>, and <code>f3</code> all refer to the same instance of <code>Fizz</code>. The <code>final</code> modifier assures that a reference variable cannot be referred to a different object, but <code>final</code> doesn’t keep the object’s state from changing.<br><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>B, C, D, E,</strong> and <strong>F</strong> are incorrect based on the above. (OCA Objective 2.2)</p>
<p class="hanga"><a id="ch3q6" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ich3q6"><strong>6.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>B</strong> is correct. In the <code>go()</code> method, <code>m</code> refers to the single <code>Mirror</code> instance, but the <code>int i</code> is a new <code>int</code> variable, a detached copy of <code>i2</code>.<br><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, C, D, E,</strong> and <strong>F</strong> are incorrect based on the above. (OCA Objectives 2.2 and 2.3)</p>
<p class="hanga"><a id="ch3q7" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ich3q7"><strong>7.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>A</strong>, <strong>B,</strong> and <strong>G</strong> are correct. The constructor sets the value of <code>id</code> for <code>w1</code> and <code>w2</code>. When the commented line is reached, none of the three <code>Wind</code> objects can be accessed, so they are eligible to be garbage collected.<br><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>C, D, E,</strong> and <strong>F</strong> are incorrect based on the above. (OCA Objectives 1.1, 2.3, and 2.4)</p>
<p class="hanga"><a id="ch3q8" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ich3q8"><strong>8.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>E</strong> is correct. The parameter declared on line 9 is valid (although ugly), but the variable name <code>ouch</code> cannot be declared again on line 11 in the same scope as the declaration on line 9.<br><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, B, C, D,</strong> and <strong>F</strong> are incorrect based on the above. (OCA Objectives 1.1 and 2.1)</p>
<p class="hanga"><a id="ch3q9" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ich3q9"><strong>9.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>D</strong> is correct. Inside the <code>go()</code> method, <code>h1</code> is out of scope.<br><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, B, C,</strong> and <strong>E</strong> are incorrect based on the above. (OCA Objectives 1.1 and 6.1)</p>
<p class="hanga1"><a id="page_232"></a><a id="ch3q10" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ich3q10"><strong>10.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>A</strong> is correct. Three <code>Network</code> objects are created. The <code>n2</code> object has a reference to the <code>n1</code> object, and the <code>n3</code> object has a reference to the <code>n2</code> object. The S.O.P. can be read as, “Use the <code>n3</code> object’s <code>Network</code> reference (the first <code>p</code>), to find that object’s reference (<code>n2</code>), and use that object’s reference (the second <code>p</code>) to find that object’s (<code>n1</code>’s) <code>id</code>, and print that <code>id</code>.”<br><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>B, C, D,</strong> and <strong>E</strong> are incorrect based on the above. (OCA Objectives, 2.2, 2.3, and 6.4)</p>
<p class="hanga1"><a id="ch3q11" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ich3q11"><strong>11.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>B</strong> is correct. It should be clear that there is still a reference to the object referred to by <code>a2</code>, and that there is still a reference to the object referred to by <code>a2.b2</code>. What might be less clear is that you can still access the other <code>Beta</code> object through the static variable <code>a2.b1</code>—because it’s static.<br><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, C, D, E,</strong> and <strong>F</strong> are incorrect based on the above. (OCA Objective 2.4)</p>
<p class="hanga1"><a id="ch3q12" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ich3q12"><strong>12.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>B</strong> is correct. In the <code>Telescope</code> class, there are three different variables named <code>magnify</code>. The <code>go()</code> method’s version and the <code>zoomMore()</code> method’s version are not used in the <code>zoomIn()</code> method. The <code>zoomIn()</code> method multiplies the class variable <code>* 5</code>. The result (<code>10</code>) is sent to <code>zoomMore()</code>, but what happens in <code>zoomMore()</code> stays in <code>zoomMore()</code>. The S.O.P. prints the value of <code>zoomIn()</code>’s <code>magnify</code>.<br><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, C, D, E, F,</strong> and <strong>G</strong> are incorrect based on the above. (OCA Objectives 1.1 and 6.6)</p>
<p class="hanga1"><a id="ch3q13" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#ich3q13"><strong>13.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>E</strong> is correct. In <code>go1()</code> the local variable <code>x</code> is not initialized.<br><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, B, C, D,</strong> and <strong>F</strong> are incorrect based on the above. (OCA Objectives 2.1 and 2.3)</p>
<div class="annotator-outer annotator-viewer viewer annotator-hide">
  <ul class="annotator-widget annotator-listing"></ul>
</div><div class="annotator-modal-wrapper annotator-editor-modal annotator-editor annotator-hide">
	<div class="annotator-outer editor">
		<h2 class="title">Highlight</h2>
		<form class="annotator-widget">
			<ul class="annotator-listing">
			<li class="annotator-item"><textarea id="annotator-field-13" placeholder="Add a note using markdown (optional)" class="js-editor" maxlength="750"></textarea></li></ul>
			<div class="annotator-controls">
				<a class="link-to-markdown" href="https://daringfireball.net/projects/markdown/basics" target="_blank">?</a>
				<ul>
					<li class="delete annotator-hide"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#delete" class="annotator-delete-note button positive">Delete Note</a></li>
					<li class="save"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#save" class="annotator-save annotator-focus button positive">Save Note</a></li>
					<li class="cancel"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#cancel" class="annotator-cancel button">Cancel</a></li>
				</ul>
			</div>
		</form>
	</div>
</div><div class="annotator-modal-wrapper annotator-delete-confirm-modal" style="display: none;">
  <div class="annotator-outer">
    <h2 class="title">Highlight</h2>
      <a class="js-close-delete-confirm annotator-cancel close" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#close">Close</a>
      <div class="annotator-widget">
         <div class="delete-confirm">
            Are you sure you want to permanently delete this note?
         </div>
         <div class="annotator-controls">
            <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#cancel" class="annotator-cancel button js-cancel-delete-confirm">No, I changed my mind</a>
            <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#delete" class="annotator-delete button positive js-delete-confirm">Yes, delete it</a>
         </div>
       </div>
   </div>
</div><div class="annotator-adder" style="display: none;">
	<ul class="adders ">
		
		<li class="copy"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#">Copy</a></li>
		
		<li class="add-highlight"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#">Add Highlight</a></li>
		<li class="add-note"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#">
			
				Add Note
			
		</a></li>
		
	</ul>
</div></div></div>



  <div class="t-sbo-prev sbo-prev sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">2&nbsp;Object Orientation</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">4&nbsp;Operators</div>
        </a>
    
  
  </div>

</section>
  </div>
<section class="sbo-saved-archives"></section>



          
          
  




    
    
      <div id="js-subscribe-nag" class="subscribe-nag clearfix trial-panel t-subscribe-nag collapsed slideUp">
        
        
          
          

          
            <p>You have 7 days left in your trial, Haridave. Subscribe today. <a href="https://www.safaribooksonline.com/subscribe/" class="ga-active-trial-subscribe-nag">See pricing options.</a></p>
          
        
        

      </div>

    
    



        
      </div>
      




  <footer class="pagefoot t-pagefoot" style="padding-bottom: 69px;">
    <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#" class="icon-up" style="display: block;"><div class="visuallyhidden">Back to top</div></a>
    <ul class="js-footer-nav">
      
        <li><a class="t-recommendations-footer" href="https://www.safaribooksonline.com/r/">Recommended</a></li>
      
      <li>
      
      <a class="t-queue-footer" href="https://www.safaribooksonline.com/s/">Queue</a>
      
      </li>
      
        <li><a class="t-recent-footer" href="https://www.safaribooksonline.com/history/">History</a></li>
        <li><a class="t-topics-footer" href="https://www.safaribooksonline.com/topics?q=*&amp;limit=21">Topics</a></li>
      
      
        <li><a class="t-tutorials-footer" href="https://www.safaribooksonline.com/tutorials/">Tutorials</a></li>
      
      <li><a class="t-settings-footer js-settings" href="https://www.safaribooksonline.com/u/">Settings</a></li>
      <li class="full-support"><a href="https://www.safaribooksonline.com/public/support">Support</a></li>
      <li><a href="https://www.safaribooksonline.com/apps/">Get the App</a></li>
      <li><a href="https://www.safaribooksonline.com/accounts/logout/">Sign Out</a></li>
    </ul>
    <span class="copyright">© 2017 <a href="https://www.safaribooksonline.com/" target="_blank">Safari</a>.</span>
    <a href="https://www.safaribooksonline.com/terms/">Terms of Service</a> /
    <a href="https://www.safaribooksonline.com/privacy/">Privacy Policy</a>
  </footer>

<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","queueTime":0,"licenseKey":"510f1a6865","errorBeacon":"bam.nr-data.net","agent":"","applicationTime":579,"applicationID":"3275661","transactionName":"YgdaZ0NSW0cEB0RdWltNfkZfUEFdCgofXFBHDVYdR1pQQxZeRl1QQj1aWkU="}</script>


    

    <script src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(2)" charset="utf-8"></script>
    <script src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(3)" charset="utf-8"></script><script type="text/javascript" id="">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","https://connect.facebook.net/en_US/fbevents.js");fbq("init","1732687426968531");fbq("track","PageView");</script>
<noscript>&lt;img height="1" width="1" style="display:none" src="https://www.facebook.com/tr?id=1732687426968531&amp;amp;ev=PageView&amp;amp;noscript=1"&gt;</noscript><div style="width:0px; height:0px; display:none; visibility:hidden;" id="batBeacon0.79713329937001"><img style="width:0px; height:0px; display:none; visibility:hidden;" id="batBeacon0.9495598444101674" width="0" height="0" alt="" src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/0"></div>
  

<script src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(4)" type="text/javascript"></script><script src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(5)" type="text/javascript"></script><div class="annotator-notice">Sorry we could not read the annotations from the store</div><div class="font-flyout" style="top: 200.003px; left: 1288px;"><div class="font-controls-panel">
	<div class="nightmodes">
		<ul>
			<li class="day"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#" id="day-mode" title="Day Mode">
				<i class="fa fa-sun-o"></i>
				<span>Day Mode</span></a></li>
			<li class="cloudy"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#" id="cloudy-mode" title="Cloudy Mode">
				<i class="fa fa-cloud"></i>
				<span>Cloud Mode</span>
			</a></li>
			<li class="night"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#" id="night-mode" title="Night Mode">
				<i class="fa fa-moon-o"></i>
				<span>Night Mode</span>
			</a></li>
		</ul>
	</div>

	<div class="font-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-font left"></i>
			<span class="filler" style="width: 50%;"></span>
			<div id="js-font-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle" style="position: relative; left: 80px;"></div>
			<i class="fa fa-font right"></i>
		</div>
	</div>

	<div class="column-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-compress left"></i>
			<span class="filler" style="width: 50%;"></span>
			<div id="js-column-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle" style="position: relative; left: 80px;"></div>
			<i class="fa fa-expand right"></i>
		</div>
	</div>

	<a id="reset" class="button" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html#">Reset</a>
</div>
</div><img src="./3 Assignments - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/seg" width="1" height="1" border="0" alt="" style="display: none;"></body></html>