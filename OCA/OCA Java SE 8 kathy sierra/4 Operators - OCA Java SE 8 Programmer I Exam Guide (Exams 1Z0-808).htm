<!DOCTYPE html>
<!-- saved from url=(0082)https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html -->
<html class=" js flexbox flexboxlegacy no-touch websqldatabase indexeddb history csscolumns csstransforms localstorage sessionstorage applicationcache svg inlinesvg zoom" lang="en" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#" itemscope="" itemtype="http://schema.org/Book http://schema.org/ItemPage" "="" data-login-url="/accounts/login/" data-offline-url="/" data-url="/library/view/oca-java-se/9781260011388/cover.html" data-csrf-cookie="csrfsafari" data-highlight-privacy="" data-user-id="2360587" data-user-uuid="bece7dd7-9327-4cc1-a1c8-17e84b9a1059" data-username="haridave" data-account-type="Trial" data-activated-trial-date="12/18/2017" data-archive="9781260011388" data-publishers="McGraw-Hill" data-htmlfile-name="cover.html" data-epub-title="OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)" data-debug="0" data-testing="0" style=""><!--<![endif]--><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><meta name="author" content="Safari Books Online"><meta name="format-detection" content="telephone=no"><meta http-equiv="cleartype" content="on"><meta name="HandheldFriendly" content="True"><meta name="MobileOptimized" content="320"><meta name="apple-itunes-app" content="app-id=881697395, app-argument=safaridetail://9781260011388"><meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0, maximum-scale=1.0"><meta property="twitter:account_id" content="4503599627559754"><script type="text/javascript" src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/510f1a6865"></script><script src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/nr-spa-1071.min.js"></script><script src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/1732687426968531" async=""></script><script async="" src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/fbevents.js"></script><script type="text/javascript" async="" src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/bat.js"></script><script type="text/javascript" async="" src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/conversion_async.js"></script><script type="text/javascript" async="" src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/insight.min.js"></script><script type="text/javascript" async="" src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/conversion_async.js"></script><script type="text/javascript" async="" src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/linkid.js"></script><script async="" src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/gtm.js"></script><script async="" src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/analytics.js"></script><script type="text/javascript">(window.NREUM||(NREUM={})).loader_config={xpid:"VQQDUVVVGwACU1RUAQA="};window.NREUM||(NREUM={}),__nr_require=function(t,e,n){function r(n){if(!e[n]){var o=e[n]={exports:{}};t[n][0].call(o.exports,function(e){var o=t[n][1][e];return r(o||e)},o,o.exports)}return e[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(t,e,n){function r(t){try{c.console&&console.log(t)}catch(e){}}var o,i=t("ee"),a=t(20),c={};try{o=localStorage.getItem("__nr_flags").split(","),console&&"function"==typeof console.log&&(c.console=!0,o.indexOf("dev")!==-1&&(c.dev=!0),o.indexOf("nr_dev")!==-1&&(c.nrDev=!0))}catch(s){}c.nrDev&&i.on("internal-error",function(t){r(t.stack)}),c.dev&&i.on("fn-err",function(t,e,n){r(n.stack)}),c.dev&&(r("NR AGENT IN DEVELOPMENT MODE"),r("flags: "+a(c,function(t,e){return t}).join(", ")))},{}],2:[function(t,e,n){function r(t,e,n,r,c){try{h?h-=1:o(c||new UncaughtException(t,e,n),!0)}catch(f){try{i("ierr",[f,s.now(),!0])}catch(d){}}return"function"==typeof u&&u.apply(this,a(arguments))}function UncaughtException(t,e,n){this.message=t||"Uncaught error with no additional information",this.sourceURL=e,this.line=n}function o(t,e){var n=e?null:s.now();i("err",[t,n])}var i=t("handle"),a=t(21),c=t("ee"),s=t("loader"),f=t("gos"),u=window.onerror,d=!1,p="nr@seenError",h=0;s.features.err=!0,t(1),window.onerror=r;try{throw new Error}catch(l){"stack"in l&&(t(13),t(12),"addEventListener"in window&&t(6),s.xhrWrappable&&t(14),d=!0)}c.on("fn-start",function(t,e,n){d&&(h+=1)}),c.on("fn-err",function(t,e,n){d&&!n[p]&&(f(n,p,function(){return!0}),this.thrown=!0,o(n))}),c.on("fn-end",function(){d&&!this.thrown&&h>0&&(h-=1)}),c.on("internal-error",function(t){i("ierr",[t,s.now(),!0])})},{}],3:[function(t,e,n){t("loader").features.ins=!0},{}],4:[function(t,e,n){function r(){M++,S=y.hash,this[u]=b.now()}function o(){M--,y.hash!==S&&i(0,!0);var t=b.now();this[l]=~~this[l]+t-this[u],this[d]=t}function i(t,e){E.emit("newURL",[""+y,e])}function a(t,e){t.on(e,function(){this[e]=b.now()})}var c="-start",s="-end",f="-body",u="fn"+c,d="fn"+s,p="cb"+c,h="cb"+s,l="jsTime",m="fetch",v="addEventListener",w=window,y=w.location,b=t("loader");if(w[v]&&b.xhrWrappable){var g=t(10),x=t(11),E=t(8),P=t(6),O=t(13),R=t(7),T=t(14),L=t(9),j=t("ee"),N=j.get("tracer");t(15),b.features.spa=!0;var S,M=0;j.on(u,r),j.on(p,r),j.on(d,o),j.on(h,o),j.buffer([u,d,"xhr-done","xhr-resolved"]),P.buffer([u]),O.buffer(["setTimeout"+s,"clearTimeout"+c,u]),T.buffer([u,"new-xhr","send-xhr"+c]),R.buffer([m+c,m+"-done",m+f+c,m+f+s]),E.buffer(["newURL"]),g.buffer([u]),x.buffer(["propagate",p,h,"executor-err","resolve"+c]),N.buffer([u,"no-"+u]),L.buffer(["new-jsonp","cb-start","jsonp-error","jsonp-end"]),a(T,"send-xhr"+c),a(j,"xhr-resolved"),a(j,"xhr-done"),a(R,m+c),a(R,m+"-done"),a(L,"new-jsonp"),a(L,"jsonp-end"),a(L,"cb-start"),E.on("pushState-end",i),E.on("replaceState-end",i),w[v]("hashchange",i,!0),w[v]("load",i,!0),w[v]("popstate",function(){i(0,M>1)},!0)}},{}],5:[function(t,e,n){function r(t){}if(window.performance&&window.performance.timing&&window.performance.getEntriesByType){var o=t("ee"),i=t("handle"),a=t(13),c=t(12),s="learResourceTimings",f="addEventListener",u="resourcetimingbufferfull",d="bstResource",p="resource",h="-start",l="-end",m="fn"+h,v="fn"+l,w="bstTimer",y="pushState",b=t("loader");b.features.stn=!0,t(8);var g=NREUM.o.EV;o.on(m,function(t,e){var n=t[0];n instanceof g&&(this.bstStart=b.now())}),o.on(v,function(t,e){var n=t[0];n instanceof g&&i("bst",[n,e,this.bstStart,b.now()])}),a.on(m,function(t,e,n){this.bstStart=b.now(),this.bstType=n}),a.on(v,function(t,e){i(w,[e,this.bstStart,b.now(),this.bstType])}),c.on(m,function(){this.bstStart=b.now()}),c.on(v,function(t,e){i(w,[e,this.bstStart,b.now(),"requestAnimationFrame"])}),o.on(y+h,function(t){this.time=b.now(),this.startPath=location.pathname+location.hash}),o.on(y+l,function(t){i("bstHist",[location.pathname+location.hash,this.startPath,this.time])}),f in window.performance&&(window.performance["c"+s]?window.performance[f](u,function(t){i(d,[window.performance.getEntriesByType(p)]),window.performance["c"+s]()},!1):window.performance[f]("webkit"+u,function(t){i(d,[window.performance.getEntriesByType(p)]),window.performance["webkitC"+s]()},!1)),document[f]("scroll",r,{passive:!0}),document[f]("keypress",r,!1),document[f]("click",r,!1)}},{}],6:[function(t,e,n){function r(t){for(var e=t;e&&!e.hasOwnProperty(u);)e=Object.getPrototypeOf(e);e&&o(e)}function o(t){c.inPlace(t,[u,d],"-",i)}function i(t,e){return t[1]}var a=t("ee").get("events"),c=t(23)(a,!0),s=t("gos"),f=XMLHttpRequest,u="addEventListener",d="removeEventListener";e.exports=a,"getPrototypeOf"in Object?(r(document),r(window),r(f.prototype)):f.prototype.hasOwnProperty(u)&&(o(window),o(f.prototype)),a.on(u+"-start",function(t,e){var n=t[1],r=s(n,"nr@wrapped",function(){function t(){if("function"==typeof n.handleEvent)return n.handleEvent.apply(n,arguments)}var e={object:t,"function":n}[typeof n];return e?c(e,"fn-",null,e.name||"anonymous"):n});this.wrapped=t[1]=r}),a.on(d+"-start",function(t){t[1]=this.wrapped||t[1]})},{}],7:[function(t,e,n){function r(t,e,n){var r=t[e];"function"==typeof r&&(t[e]=function(){var t=r.apply(this,arguments);return o.emit(n+"start",arguments,t),t.then(function(e){return o.emit(n+"end",[null,e],t),e},function(e){throw o.emit(n+"end",[e],t),e})})}var o=t("ee").get("fetch"),i=t(20);e.exports=o;var a=window,c="fetch-",s=c+"body-",f=["arrayBuffer","blob","json","text","formData"],u=a.Request,d=a.Response,p=a.fetch,h="prototype";u&&d&&p&&(i(f,function(t,e){r(u[h],e,s),r(d[h],e,s)}),r(a,"fetch",c),o.on(c+"end",function(t,e){var n=this;e?e.clone().arrayBuffer().then(function(t){n.rxSize=t.byteLength,o.emit(c+"done",[null,e],n)}):o.emit(c+"done",[t],n)}))},{}],8:[function(t,e,n){var r=t("ee").get("history"),o=t(23)(r);e.exports=r,o.inPlace(window.history,["pushState","replaceState"],"-")},{}],9:[function(t,e,n){function r(t){function e(){s.emit("jsonp-end",[],p),t.removeEventListener("load",e,!1),t.removeEventListener("error",n,!1)}function n(){s.emit("jsonp-error",[],p),s.emit("jsonp-end",[],p),t.removeEventListener("load",e,!1),t.removeEventListener("error",n,!1)}var r=t&&"string"==typeof t.nodeName&&"script"===t.nodeName.toLowerCase();if(r){var o="function"==typeof t.addEventListener;if(o){var a=i(t.src);if(a){var u=c(a),d="function"==typeof u.parent[u.key];if(d){var p={};f.inPlace(u.parent,[u.key],"cb-",p),t.addEventListener("load",e,!1),t.addEventListener("error",n,!1),s.emit("new-jsonp",[t.src],p)}}}}}function o(){return"addEventListener"in window}function i(t){var e=t.match(u);return e?e[1]:null}function a(t,e){var n=t.match(p),r=n[1],o=n[3];return o?a(o,e[r]):e[r]}function c(t){var e=t.match(d);return e&&e.length>=3?{key:e[2],parent:a(e[1],window)}:{key:t,parent:window}}var s=t("ee").get("jsonp"),f=t(23)(s);if(e.exports=s,o()){var u=/[?&](?:callback|cb)=([^&#]+)/,d=/(.*)\.([^.]+)/,p=/^(\w+)(\.|$)(.*)$/,h=["appendChild","insertBefore","replaceChild"];f.inPlace(HTMLElement.prototype,h,"dom-"),f.inPlace(HTMLHeadElement.prototype,h,"dom-"),f.inPlace(HTMLBodyElement.prototype,h,"dom-"),s.on("dom-start",function(t){r(t[0])})}},{}],10:[function(t,e,n){var r=t("ee").get("mutation"),o=t(23)(r),i=NREUM.o.MO;e.exports=r,i&&(window.MutationObserver=function(t){return this instanceof i?new i(o(t,"fn-")):i.apply(this,arguments)},MutationObserver.prototype=i.prototype)},{}],11:[function(t,e,n){function r(t){var e=a.context(),n=c(t,"executor-",e),r=new f(n);return a.context(r).getCtx=function(){return e},a.emit("new-promise",[r,e],e),r}function o(t,e){return e}var i=t(23),a=t("ee").get("promise"),c=i(a),s=t(20),f=NREUM.o.PR;e.exports=a,f&&(window.Promise=r,["all","race"].forEach(function(t){var e=f[t];f[t]=function(n){function r(t){return function(){a.emit("propagate",[null,!o],i),o=o||!t}}var o=!1;s(n,function(e,n){Promise.resolve(n).then(r("all"===t),r(!1))});var i=e.apply(f,arguments),c=f.resolve(i);return c}}),["resolve","reject"].forEach(function(t){var e=f[t];f[t]=function(t){var n=e.apply(f,arguments);return t!==n&&a.emit("propagate",[t,!0],n),n}}),f.prototype["catch"]=function(t){return this.then(null,t)},f.prototype=Object.create(f.prototype,{constructor:{value:r}}),s(Object.getOwnPropertyNames(f),function(t,e){try{r[e]=f[e]}catch(n){}}),a.on("executor-start",function(t){t[0]=c(t[0],"resolve-",this),t[1]=c(t[1],"resolve-",this)}),a.on("executor-err",function(t,e,n){t[1](n)}),c.inPlace(f.prototype,["then"],"then-",o),a.on("then-start",function(t,e){this.promise=e,t[0]=c(t[0],"cb-",this),t[1]=c(t[1],"cb-",this)}),a.on("then-end",function(t,e,n){this.nextPromise=n;var r=this.promise;a.emit("propagate",[r,!0],n)}),a.on("cb-end",function(t,e,n){a.emit("propagate",[n,!0],this.nextPromise)}),a.on("propagate",function(t,e,n){this.getCtx&&!e||(this.getCtx=function(){if(t instanceof Promise)var e=a.context(t);return e&&e.getCtx?e.getCtx():this})}),r.toString=function(){return""+f})},{}],12:[function(t,e,n){var r=t("ee").get("raf"),o=t(23)(r),i="equestAnimationFrame";e.exports=r,o.inPlace(window,["r"+i,"mozR"+i,"webkitR"+i,"msR"+i],"raf-"),r.on("raf-start",function(t){t[0]=o(t[0],"fn-")})},{}],13:[function(t,e,n){function r(t,e,n){t[0]=a(t[0],"fn-",null,n)}function o(t,e,n){this.method=n,this.timerDuration=isNaN(t[1])?0:+t[1],t[0]=a(t[0],"fn-",this,n)}var i=t("ee").get("timer"),a=t(23)(i),c="setTimeout",s="setInterval",f="clearTimeout",u="-start",d="-";e.exports=i,a.inPlace(window,[c,"setImmediate"],c+d),a.inPlace(window,[s],s+d),a.inPlace(window,[f,"clearImmediate"],f+d),i.on(s+u,r),i.on(c+u,o)},{}],14:[function(t,e,n){function r(t,e){d.inPlace(e,["onreadystatechange"],"fn-",c)}function o(){var t=this,e=u.context(t);t.readyState>3&&!e.resolved&&(e.resolved=!0,u.emit("xhr-resolved",[],t)),d.inPlace(t,y,"fn-",c)}function i(t){b.push(t),l&&(x?x.then(a):v?v(a):(E=-E,P.data=E))}function a(){for(var t=0;t<b.length;t++)r([],b[t]);b.length&&(b=[])}function c(t,e){return e}function s(t,e){for(var n in t)e[n]=t[n];return e}t(6);var f=t("ee"),u=f.get("xhr"),d=t(23)(u),p=NREUM.o,h=p.XHR,l=p.MO,m=p.PR,v=p.SI,w="readystatechange",y=["onload","onerror","onabort","onloadstart","onloadend","onprogress","ontimeout"],b=[];e.exports=u;var g=window.XMLHttpRequest=function(t){var e=new h(t);try{u.emit("new-xhr",[e],e),e.addEventListener(w,o,!1)}catch(n){try{u.emit("internal-error",[n])}catch(r){}}return e};if(s(h,g),g.prototype=h.prototype,d.inPlace(g.prototype,["open","send"],"-xhr-",c),u.on("send-xhr-start",function(t,e){r(t,e),i(e)}),u.on("open-xhr-start",r),l){var x=m&&m.resolve();if(!v&&!m){var E=1,P=document.createTextNode(E);new l(a).observe(P,{characterData:!0})}}else f.on("fn-end",function(t){t[0]&&t[0].type===w||a()})},{}],15:[function(t,e,n){function r(t){var e=this.params,n=this.metrics;if(!this.ended){this.ended=!0;for(var r=0;r<d;r++)t.removeEventListener(u[r],this.listener,!1);if(!e.aborted){if(n.duration=a.now()-this.startTime,4===t.readyState){e.status=t.status;var i=o(t,this.lastSize);if(i&&(n.rxSize=i),this.sameOrigin){var s=t.getResponseHeader("X-NewRelic-App-Data");s&&(e.cat=s.split(", ").pop())}}else e.status=0;n.cbTime=this.cbTime,f.emit("xhr-done",[t],t),c("xhr",[e,n,this.startTime])}}}function o(t,e){var n=t.responseType;if("json"===n&&null!==e)return e;var r="arraybuffer"===n||"blob"===n||"json"===n?t.response:t.responseText;return l(r)}function i(t,e){var n=s(e),r=t.params;r.host=n.hostname+":"+n.port,r.pathname=n.pathname,t.sameOrigin=n.sameOrigin}var a=t("loader");if(a.xhrWrappable){var c=t("handle"),s=t(16),f=t("ee"),u=["load","error","abort","timeout"],d=u.length,p=t("id"),h=t(19),l=t(18),m=window.XMLHttpRequest;a.features.xhr=!0,t(14),f.on("new-xhr",function(t){var e=this;e.totalCbs=0,e.called=0,e.cbTime=0,e.end=r,e.ended=!1,e.xhrGuids={},e.lastSize=null,h&&(h>34||h<10)||window.opera||t.addEventListener("progress",function(t){e.lastSize=t.loaded},!1)}),f.on("open-xhr-start",function(t){this.params={method:t[0]},i(this,t[1]),this.metrics={}}),f.on("open-xhr-end",function(t,e){"loader_config"in NREUM&&"xpid"in NREUM.loader_config&&this.sameOrigin&&e.setRequestHeader("X-NewRelic-ID",NREUM.loader_config.xpid)}),f.on("send-xhr-start",function(t,e){var n=this.metrics,r=t[0],o=this;if(n&&r){var i=l(r);i&&(n.txSize=i)}this.startTime=a.now(),this.listener=function(t){try{"abort"===t.type&&(o.params.aborted=!0),("load"!==t.type||o.called===o.totalCbs&&(o.onloadCalled||"function"!=typeof e.onload))&&o.end(e)}catch(n){try{f.emit("internal-error",[n])}catch(r){}}};for(var c=0;c<d;c++)e.addEventListener(u[c],this.listener,!1)}),f.on("xhr-cb-time",function(t,e,n){this.cbTime+=t,e?this.onloadCalled=!0:this.called+=1,this.called!==this.totalCbs||!this.onloadCalled&&"function"==typeof n.onload||this.end(n)}),f.on("xhr-load-added",function(t,e){var n=""+p(t)+!!e;this.xhrGuids&&!this.xhrGuids[n]&&(this.xhrGuids[n]=!0,this.totalCbs+=1)}),f.on("xhr-load-removed",function(t,e){var n=""+p(t)+!!e;this.xhrGuids&&this.xhrGuids[n]&&(delete this.xhrGuids[n],this.totalCbs-=1)}),f.on("addEventListener-end",function(t,e){e instanceof m&&"load"===t[0]&&f.emit("xhr-load-added",[t[1],t[2]],e)}),f.on("removeEventListener-end",function(t,e){e instanceof m&&"load"===t[0]&&f.emit("xhr-load-removed",[t[1],t[2]],e)}),f.on("fn-start",function(t,e,n){e instanceof m&&("onload"===n&&(this.onload=!0),("load"===(t[0]&&t[0].type)||this.onload)&&(this.xhrCbStart=a.now()))}),f.on("fn-end",function(t,e){this.xhrCbStart&&f.emit("xhr-cb-time",[a.now()-this.xhrCbStart,this.onload,e],e)})}},{}],16:[function(t,e,n){e.exports=function(t){var e=document.createElement("a"),n=window.location,r={};e.href=t,r.port=e.port;var o=e.href.split("://");!r.port&&o[1]&&(r.port=o[1].split("/")[0].split("@").pop().split(":")[1]),r.port&&"0"!==r.port||(r.port="https"===o[0]?"443":"80"),r.hostname=e.hostname||n.hostname,r.pathname=e.pathname,r.protocol=o[0],"/"!==r.pathname.charAt(0)&&(r.pathname="/"+r.pathname);var i=!e.protocol||":"===e.protocol||e.protocol===n.protocol,a=e.hostname===document.domain&&e.port===n.port;return r.sameOrigin=i&&(!e.hostname||a),r}},{}],17:[function(t,e,n){function r(){}function o(t,e,n){return function(){return i(t,[f.now()].concat(c(arguments)),e?null:this,n),e?void 0:this}}var i=t("handle"),a=t(20),c=t(21),s=t("ee").get("tracer"),f=t("loader"),u=NREUM;"undefined"==typeof window.newrelic&&(newrelic=u);var d=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit","addRelease"],p="api-",h=p+"ixn-";a(d,function(t,e){u[e]=o(p+e,!0,"api")}),u.addPageAction=o(p+"addPageAction",!0),u.setCurrentRouteName=o(p+"routeName",!0),e.exports=newrelic,u.interaction=function(){return(new r).get()};var l=r.prototype={createTracer:function(t,e){var n={},r=this,o="function"==typeof e;return i(h+"tracer",[f.now(),t,n],r),function(){if(s.emit((o?"":"no-")+"fn-start",[f.now(),r,o],n),o)try{return e.apply(this,arguments)}catch(t){throw s.emit("fn-err",[arguments,this,t],n),t}finally{s.emit("fn-end",[f.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(t,e){l[e]=o(h+e)}),newrelic.noticeError=function(t){"string"==typeof t&&(t=new Error(t)),i("err",[t,f.now()])}},{}],18:[function(t,e,n){e.exports=function(t){if("string"==typeof t&&t.length)return t.length;if("object"==typeof t){if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer&&t.byteLength)return t.byteLength;if("undefined"!=typeof Blob&&t instanceof Blob&&t.size)return t.size;if(!("undefined"!=typeof FormData&&t instanceof FormData))try{return JSON.stringify(t).length}catch(e){return}}}},{}],19:[function(t,e,n){var r=0,o=navigator.userAgent.match(/Firefox[\/\s](\d+\.\d+)/);o&&(r=+o[1]),e.exports=r},{}],20:[function(t,e,n){function r(t,e){var n=[],r="",i=0;for(r in t)o.call(t,r)&&(n[i]=e(r,t[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;e.exports=r},{}],21:[function(t,e,n){function r(t,e,n){e||(e=0),"undefined"==typeof n&&(n=t?t.length:0);for(var r=-1,o=n-e||0,i=Array(o<0?0:o);++r<o;)i[r]=t[e+r];return i}e.exports=r},{}],22:[function(t,e,n){e.exports={exists:"undefined"!=typeof window.performance&&window.performance.timing&&"undefined"!=typeof window.performance.timing.navigationStart}},{}],23:[function(t,e,n){function r(t){return!(t&&t instanceof Function&&t.apply&&!t[a])}var o=t("ee"),i=t(21),a="nr@original",c=Object.prototype.hasOwnProperty,s=!1;e.exports=function(t,e){function n(t,e,n,o){function nrWrapper(){var r,a,c,s;try{a=this,r=i(arguments),c="function"==typeof n?n(r,a):n||{}}catch(f){p([f,"",[r,a,o],c])}u(e+"start",[r,a,o],c);try{return s=t.apply(a,r)}catch(d){throw u(e+"err",[r,a,d],c),d}finally{u(e+"end",[r,a,s],c)}}return r(t)?t:(e||(e=""),nrWrapper[a]=t,d(t,nrWrapper),nrWrapper)}function f(t,e,o,i){o||(o="");var a,c,s,f="-"===o.charAt(0);for(s=0;s<e.length;s++)c=e[s],a=t[c],r(a)||(t[c]=n(a,f?c+o:o,i,c))}function u(n,r,o){if(!s||e){var i=s;s=!0;try{t.emit(n,r,o,e)}catch(a){p([a,n,r,o])}s=i}}function d(t,e){if(Object.defineProperty&&Object.keys)try{var n=Object.keys(t);return n.forEach(function(n){Object.defineProperty(e,n,{get:function(){return t[n]},set:function(e){return t[n]=e,e}})}),e}catch(r){p([r])}for(var o in t)c.call(t,o)&&(e[o]=t[o]);return e}function p(e){try{t.emit("internal-error",e)}catch(n){}}return t||(t=o),n.inPlace=f,n.flag=a,n}},{}],ee:[function(t,e,n){function r(){}function o(t){function e(t){return t&&t instanceof r?t:t?s(t,c,i):i()}function n(n,r,o,i){if(!p.aborted||i){t&&t(n,r,o);for(var a=e(o),c=l(n),s=c.length,f=0;f<s;f++)c[f].apply(a,r);var d=u[y[n]];return d&&d.push([b,n,r,a]),a}}function h(t,e){w[t]=l(t).concat(e)}function l(t){return w[t]||[]}function m(t){return d[t]=d[t]||o(n)}function v(t,e){f(t,function(t,n){e=e||"feature",y[n]=e,e in u||(u[e]=[])})}var w={},y={},b={on:h,emit:n,get:m,listeners:l,context:e,buffer:v,abort:a,aborted:!1};return b}function i(){return new r}function a(){(u.api||u.feature)&&(p.aborted=!0,u=p.backlog={})}var c="nr@context",s=t("gos"),f=t(20),u={},d={},p=e.exports=o();p.backlog=u},{}],gos:[function(t,e,n){function r(t,e,n){if(o.call(t,e))return t[e];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,e,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return t[e]=r,r}var o=Object.prototype.hasOwnProperty;e.exports=r},{}],handle:[function(t,e,n){function r(t,e,n,r){o.buffer([t],r),o.emit(t,e,n)}var o=t("ee").get("handle");e.exports=r,r.ee=o},{}],id:[function(t,e,n){function r(t){var e=typeof t;return!t||"object"!==e&&"function"!==e?-1:t===window?0:a(t,i,function(){return o++})}var o=1,i="nr@id",a=t("gos");e.exports=r},{}],loader:[function(t,e,n){function r(){if(!x++){var t=g.info=NREUM.info,e=p.getElementsByTagName("script")[0];if(setTimeout(u.abort,3e4),!(t&&t.licenseKey&&t.applicationID&&e))return u.abort();f(y,function(e,n){t[e]||(t[e]=n)}),s("mark",["onload",a()+g.offset],null,"api");var n=p.createElement("script");n.src="https://"+t.agent,e.parentNode.insertBefore(n,e)}}function o(){"complete"===p.readyState&&i()}function i(){s("mark",["domContent",a()+g.offset],null,"api")}function a(){return E.exists&&performance.now?Math.round(performance.now()):(c=Math.max((new Date).getTime(),c))-g.offset}var c=(new Date).getTime(),s=t("handle"),f=t(20),u=t("ee"),d=window,p=d.document,h="addEventListener",l="attachEvent",m=d.XMLHttpRequest,v=m&&m.prototype;NREUM.o={ST:setTimeout,SI:d.setImmediate,CT:clearTimeout,XHR:m,REQ:d.Request,EV:d.Event,PR:d.Promise,MO:d.MutationObserver};var w=""+location,y={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-spa-1071.min.js"},b=m&&v&&v[h]&&!/CriOS/.test(navigator.userAgent),g=e.exports={offset:c,now:a,origin:w,features:{},xhrWrappable:b};t(17),p[h]?(p[h]("DOMContentLoaded",i,!1),d[h]("load",r,!1)):(p[l]("onreadystatechange",o),d[l]("onload",r)),s("mark",["firstbyte",c],null,"api");var x=0,E=t(22)},{}]},{},["loader",2,15,5,3,4]);</script><link rel="apple-touch-icon" href="https://www.safaribooksonline.com/static/images/apple-touch-icon.0c29511d2d72.png"><link rel="shortcut icon" href="https://www.safaribooksonline.com/favicon.ico" type="image/x-icon"><link href="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/css" rel="stylesheet" type="text/css"><title>4&nbsp;Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)</title><link rel="stylesheet" href="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/b8d25f1a9a05.css" type="text/css"><link rel="stylesheet" type="text/css" href="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/annotator.ef38b0457d7b.css"><link rel="stylesheet" href="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/font-awesome.min.css"><style type="text/css" title="ibis-book">@page{margin:1.5em}#sbo-rt-content div{margin:0 .5em 0 .5em}#sbo-rt-content svg{height:98%;width:100%}#sbo-rt-content img{max-height:100%;max-width:100%}#sbo-rt-content a{text-decoration:none}#sbo-rt-content .dedi1{margin-top:8em;margin-bottom:.4em;text-align:center}#sbo-rt-content .dedi{margin-top:1em;margin-bottom:.4em;text-align:center}#sbo-rt-content .copyright{margin-top:1em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .copyrightt{margin-top:1.5em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .h2{font-size:1.8em;margin-top:.5em;margin-bottom:.5em;text-indent:.1em}#sbo-rt-content .h2a{font-size:1.5em;margin-top:.2em;margin-bottom:2.5em;text-indent:.1em}#sbo-rt-content .h2d{font-size:130%;color:#fff;background-color:#000;padding:.2em;margin-right:40%;margin-top:2em;margin-bottom:2em;text-indent:1em}#sbo-rt-content .code{margin-top:1em;margin-bottom:1em;margin-left:5em}#sbo-rt-content .code1{margin-top:1em;margin-bottom:1em;margin-left:1.3em}#sbo-rt-content .codea{margin-top:1em;margin-bottom:1em;margin-left:.1em}#sbo-rt-content .code2{margin-top:1em;margin-bottom:1em;margin-left:2.5em}#sbo-rt-content .code2a{margin-top:1em;margin-bottom:1em;margin-left:3.5em}#sbo-rt-content .toc-chap{margin-top:1em;margin-bottom:.5em;margin-left:1em;text-indent:.01em}#sbo-rt-content .toc{margin-top:.1em;margin-bottom:.1em;margin-left:1.8em;text-indent:.01em}#sbo-rt-content .tocs{margin-top:.6em;margin-bottom:.6em;margin-left:1.2em;text-indent:.01em}#sbo-rt-content .tocs1{margin-top:.6em;margin-bottom:.4em;margin-left:3em;text-indent:.01em}#sbo-rt-content .noindentd{font-size:1.2em;color:#fff;background-color:#000;padding:.2em;margin-right:50%;margin-top:1em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .icon{margin-top:1em;margin-bottom:1em;text-indent:.01em}#sbo-rt-content .noindent{margin-top:.1em;margin-bottom:.1em;text-indent:.01em}#sbo-rt-content .noindentl{margin-top:1em;margin-bottom:.1em;margin-left:2.5em;text-indent:.01em}#sbo-rt-content .indent{margin-top:.1em;margin-bottom:.1em;text-indent:1.2em}#sbo-rt-content .indentt{margin-top:1em;margin-bottom:.1em;text-indent:1.2em}#sbo-rt-content .indenttb{margin-top:1em;margin-bottom:1em;text-indent:1.2em}#sbo-rt-content .h3{font-size:160%;margin-top:1.2em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .h3n{font-size:160%;margin-top:.5em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .h3s{font-size:120%;margin-top:.2em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .h3a{font-size:120%;color:#fff;background-color:#000;padding:.2em;margin-right:40%;margin-top:1.2em;margin-bottom:.5em;text-indent:.01em}#sbo-rt-content .h3a1{font-size:120%;color:#fff;background-color:#000;padding:.2em;margin-right:65%;margin-top:1.2em;margin-bottom:.001em;text-indent:1em}#sbo-rt-content .line{margin-top:.1em;margin-bottom:.001em;border:0;border-bottom:solid black .1em}#sbo-rt-content .h4s{font-size:120%;margin-top:.5em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .h4{font-size:140%;margin-top:1.2em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .h4a{font-size:120%;margin-top:1.2em;margin-bottom:.4em;text-indent:.01em}#sbo-rt-content .noindentt{margin-top:1em;margin-bottom:.1em;text-indent:.01em}#sbo-rt-content .indentb{margin-top:.1em;margin-bottom:1.2em;text-indent:1.2em}#sbo-rt-content .imagef{margin-top:1em;margin-bottom:1em;text-align:center}#sbo-rt-content .imagel{margin-top:1em;margin-bottom:1em;text-indent:.1em}#sbo-rt-content .imagel1{margin-top:1em;margin-bottom:1em;margin-left:1em;text-indent:.1em}#sbo-rt-content .images{margin-top:1em;margin-bottom:1em;text-align:center}#sbo-rt-content .inline{text-decoration:middle}#sbo-rt-content .imaget{margin-top:.5em;margin-bottom:.5em;text-indent:.1em}#sbo-rt-content .right{margin-top:.1em;margin-bottom:.1em;text-align:right}#sbo-rt-content .figs{background-color:#000;color:#fff;padding:.2em}#sbo-rt-content .bull{margin-top:.3em;margin-bottom:.1em;margin-left:3.5em;text-indent:-1.5em}#sbo-rt-content .tick{margin-top:.5em;margin-bottom:.1em;text-indent:-2em;margin-left:4em}#sbo-rt-content .drop{font-size:4em;margin:-.2em .01em -.2em .01em;text-indent:.01em;float:left}#sbo-rt-content .tick1{margin-top:.5em;margin-bottom:.1em;text-indent:-2em;margin-left:3em}#sbo-rt-content .noindenttop{margin-top:4em;margin-bottom:.2em;text-indent:.01em}#sbo-rt-content .bulletxlb{margin-top:.4em;margin-bottom:.4em;margin-left:5.7em;text-indent:-1.4em}#sbo-rt-content .bulletxlb1{margin-top:.4em;margin-bottom:.4em;margin-left:7em;text-indent:-1.4em}#sbo-rt-content .bulletxl{margin-top:.4em;margin-bottom:.4em;margin-left:5.7em;text-indent:-5.3em}#sbo-rt-content .bulletxla{margin-top:.4em;margin-bottom:.4em;margin-left:5.7em;text-indent:-3.2em}#sbo-rt-content .bulletxls{margin-top:.4em;margin-bottom:.4em;margin-left:4em;text-indent:-1.4em}#sbo-rt-content .bulletxt{margin-top:1em;margin-bottom:.1em;margin-left:2.6em;text-indent:-1.4em}#sbo-rt-content .bulletxn{margin-top:1em;margin-bottom:.1em;margin-left:2.6em;text-indent:.01em}#sbo-rt-content .bulletx{margin-top:.4em;margin-bottom:.1em;margin-left:2.6em;text-indent:-1.4em}#sbo-rt-content .bulletxs{margin-top:.4em;margin-bottom:.1em;margin-left:4.2em;text-indent:-1.5em}#sbo-rt-content .bulletxsa{margin-top:.4em;margin-bottom:.1em;margin-left:1.6em;text-indent:-1.4em}#sbo-rt-content .bulletxb{margin-top:.3em;margin-bottom:1em;margin-left:2.6em;text-indent:-1.4em}#sbo-rt-content .sidebar{margin-top:1em;margin-bottom:-.1em;border:solid #b2b3b6 .2em;background-color:#666769;padding:.5em;text-indent:.01em}#sbo-rt-content .sidebar1{margin-top:.001em;margin-bottom:1em;border:solid #b2b3b6 .2em;background-color:#e7e7e8;padding:.5em;text-indent:.01em}#sbo-rt-content .sideh{font-size:1.4em;color:#fff;margin-top:.5em;margin-bottom:.5em;text-align:center}#sbo-rt-content .sidehl{font-size:1.2em;margin-top:.5em;margin-bottom:.5em;text-indent:.1em}#sbo-rt-content .side-exam{margin-top:1em;margin-bottom:1em;text-indent:.01em;border:solid .1em;background-color:#eeefef;padding:1em}#sbo-rt-content .Text-icon-exam1{font-weight:bold;margin-top:1em;margin-bottom:.2em;text-indent:.01em}#sbo-rt-content .Text-icon-exam{font-weight:bold;margin-top:.5em;margin-bottom:.2em;text-indent:.01em}#sbo-rt-content .Text-icon-exami{font-weight:bold;margin-top:.5em;margin-bottom:.2em;text-indent:1.2em}#sbo-rt-content .under{text-decoration:underline}#sbo-rt-content .hanga{margin-top:.1em;margin-bottom:.6em;margin-left:2.5em;text-indent:-1.5em}#sbo-rt-content .hangai{margin-top:.1em;margin-bottom:.1em;margin-left:2.5em;text-indent:1.2em}#sbo-rt-content .hangan{margin-top:.1em;margin-bottom:.1em;margin-left:2.5em;text-indent:.1em}#sbo-rt-content .hanga1{margin-top:.1em;margin-bottom:.6em;margin-left:2.5em;text-indent:-2em}#sbo-rt-content .bqt{font-size:.9em;margin-top:1em;margin-bottom:.5em;margin-left:1em;text-indent:.01em}#sbo-rt-content .bq{font-size:.9em;margin-top:.5em;margin-bottom:.5em;margin-left:1.5em;text-indent:.01em}#sbo-rt-content .bqs{font-size:.9em;margin-top:.5em;margin-bottom:.5em;margin-left:2em;text-indent:.01em}#sbo-rt-content .noindentb{margin-top:.1em;margin-bottom:1em;text-indent:.01em}#sbo-rt-content .noindentb1{margin-top:.1em;margin-bottom:2em;text-indent:.01em}#sbo-rt-content .toc-lev1{margin-top:.1em;margin-bottom:.1em;margin-left:3em;text-indent:-1.2em}#sbo-rt-content .toc-lev2{margin-top:.1em;margin-bottom:.1em;margin-left:6.5em;text-indent:-1.2em}#sbo-rt-content .toc-lev3{margin-top:.1em;margin-bottom:.1em;margin-left:1.8em;text-indent:.01em}#sbo-rt-content .toc-lev3a{margin-top:.1em;margin-bottom:.1em;margin-left:5.4em;text-indent:.01em}#sbo-rt-content .toc-index{margin-top:2em;margin-bottom:.1em;margin-left:2em;text-indent:.01em}#sbo-rt-content .numst{margin-top:1em;margin-bottom:.1em;margin-left:2.3em;text-indent:-1.4em}#sbo-rt-content .numst1{margin-top:1em;margin-bottom:.1em;margin-left:1.8em;text-indent:-1.4em}#sbo-rt-content .numsn{margin-top:1em;margin-bottom:.1em;margin-left:2.3em;text-indent:.1em}#sbo-rt-content .numsb{margin-top:.1em;margin-bottom:1em;margin-left:2.3em;text-indent:-1.3em}#sbo-rt-content .nums{margin-top:.3em;margin-bottom:.3em;margin-left:2.3em;text-indent:-1.3em}#sbo-rt-content .figcap{margin-top:.1em;margin-bottom:1.5em;text-indent:.01em}#sbo-rt-content .tabcap{margin-top:1.5em;margin-bottom:.8em;text-indent:.01em}#sbo-rt-content .ash{color:#939598}#sbo-rt-content .ash1{font-size:1.3em;color:#939598}#sbo-rt-content .fonts{font-size:1.2em}#sbo-rt-content .num{margin-top:.1em;margin-bottom:.1em;margin-left:1.6em;text-indent:-1em}#sbo-rt-content .numn{margin-top:.4em;margin-bottom:.1em;margin-left:1.7em;text-indent:.1em}#sbo-rt-content .numin{margin-top:.1em;margin-bottom:.1em;margin-left:1.6em;text-indent:1.2em}#sbo-rt-content .numa{margin-top:.1em;margin-bottom:.4em;margin-left:3.9em;text-indent:-1.7em}#sbo-rt-content .numl{margin-top:.4em;margin-bottom:.1em;margin-left:3.6em;text-indent:-1em}#sbo-rt-content .numln{margin-top:.4em;margin-bottom:.1em;margin-left:3.6em;text-indent:.1em}#sbo-rt-content .bqi{font-size:.9em;margin-top:.5em;margin-bottom:.5em;margin-left:5em;text-indent:1.2em}#sbo-rt-content .noindenttop1{margin-top:4em;margin-bottom:1em;text-indent:.01em}#sbo-rt-content .coden{margin-top:.8em;margin-bottom:.8em;margin-left:1.5em}#sbo-rt-content .numlist{margin-top:.1em;margin-bottom:.1em;margin-left:2.5em;text-indent:-1.5em}#sbo-rt-content .noindent1{margin-top:1em;margin-bottom:1em;text-indent:.01em}#sbo-rt-content .noindentn{margin-top:.1em;margin-bottom:.1em;margin-left:.1em;text-indent:.01em}#sbo-rt-content .image-t{margin-top:.2em;margin-bottom:1.5em;text-indent:.01em}#sbo-rt-content .image-f{margin-top:1em;margin-bottom:.5em;text-align:center}#sbo-rt-content .code-n{margin-top:.5em;margin-bottom:.5em;margin-left:2.3em}#sbo-rt-content .hr{margin-top:.5em;margin-bottom:1.5em;border-bottom:solid #939598 .2em}#sbo-rt-content .bqn{font-size:.9em;margin-top:.8em;margin-bottom:.8em;margin-left:1.3em;text-indent:.01em}#sbo-rt-content .code-n1{margin-top:.7em;margin-bottom:.7em;margin-left:2.8em}#sbo-rt-content .numlistk{margin-top:.1em;margin-bottom:.1em;margin-left:2.2em;text-indent:-1.6em}#sbo-rt-content .numlistk1{margin-top:.5em;margin-bottom:.1em;margin-left:1.9em;text-indent:-1.6em}#sbo-rt-content .code-1{margin-top:.5em;margin-bottom:.5em;margin-left:2.5em}#sbo-rt-content .numlist-n{margin-top:.3em;margin-bottom:.3em;margin-left:2.2em;text-indent:.01em}#sbo-rt-content .num-k{margin-top:.3em;margin-bottom:.3em;margin-left:4em;text-indent:-1.6em}#sbo-rt-content .hang-a{margin-top:.1em;margin-bottom:.5em;margin-left:2.4em;text-indent:.01em}#sbo-rt-content .h5{font-size:120%;margin-top:1.5em;margin-bottom:.3em;text-indent:.01em}#sbo-rt-content .indenta{margin-top:.3em;margin-bottom:.3em;margin-left:1.5em;text-indent:.01em}#sbo-rt-content .indent-a{margin-top:.5em;margin-bottom:.5em;margin-left:1.2em;text-indent:.01em}#sbo-rt-content .indexmain{margin-top:.1em;margin-bottom:.1em;margin-left:1em;text-indent:-1em}#sbo-rt-content .indexhead{margin-top:.7em;margin-bottom:.3em;width:20%;font-size:1.3em;margin-left:1.5em;text-indent:.5em;background-color:#6d6e71;color:#fff;padding:.2em}#sbo-rt-content .indexsub{margin-top:.1em;margin-bottom:.1em;margin-left:2.6em;text-indent:-1em}#sbo-rt-content .h2-n{font-size:1.3em;margin-top:2em;margin-bottom:2em;text-indent:2em;background-color:#231f20;color:#fff;width:30%;padding:.2em}#sbo-rt-content .image-n{margin-top:.1em;margin-bottom:.1em;text-align:center}#sbo-rt-content .imagea{margin-top:2em;margin-bottom:.5em;text-align:left}</style><script> // <![CDATA[
    var g = {
      position_cache: {
        
          "chapter": "/api/v1/book/9781260011388/chapter/cover.html",
          "book_id": "9781260011388",
          "chapter_uri": "cover.html",
          "position": 0,
          "user_uuid": "bece7dd7-9327-4cc1-a1c8-17e84b9a1059",
          "next_chapter_uri": "/library/view/oca-java-se/9781260011388/title.html"
        
      },
      title: "OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0\u002D808)",
      author_list: "Bert Bates, Kathy Sierra",
      format: "book",
      source: "application/epub+zip",
      is_system_book: true,
      is_public: false,
      loaded_from_server: true,
      allow_scripts: false,
      has_mathml: false,
      show_ios_app_teaser: false
    };
    // ]]></script><script src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/modernizr.js"></script><script>
    
      
        

        

        
          
            window.PUBLIC_ANNOTATIONS = true;
          
        

      

      
        window.MOBILE_PUBLIC_ANNOTATIONS = false;
      

    

    
      window.PRIVACY_CONTROL_OVERRIDE = false;
    

    
      window.PRIVACY_CONTROL_SWITCH = true;
    

    
      window.PUBLISHER_PAGES = true;
    

      window.SBO = {
        "constants": {
          "SITB_ENDPOINT": "https://www.safaribooksonline.com/api/v2/sitb/",
          "SEARCH_SELECT_ENDPOINT": "https://www.safaribooksonline.com/api/v2/search/select/",
          "ENABLE_ONLINE_TRAINING": true
        }
      };
  </script><link rel="canonical" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html"><meta name="description" content=" "><meta property="og:title" content="Cover Page"><meta itemprop="isPartOf" content="/library/view/oca-java-se/9781260011388/"><meta itemprop="name" content="Cover Page"><meta property="og:url" itemprop="url" content="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html"><meta property="og:site_name" content="Safari"><meta property="og:image" itemprop="thumbnailUrl" content="https://www.safaribooksonline.com/library/cover/9781260011388/"><meta property="og:description" itemprop="description" content=" "><meta itemprop="inLanguage" content="en"><meta itemprop="publisher" content="McGraw-Hill"><meta property="og:type" content="book"><meta property="og:book:isbn" itemprop="isbn" content="9781260011388"><meta property="og:book:author" itemprop="author" content="Bert Bates"><meta property="og:book:author" itemprop="author" content="Kathy Sierra"><meta property="og:book:tag" itemprop="about" content="Certification"><meta property="og:book:tag" itemprop="about" content="Java"><meta name="twitter:card" content="summary"><meta name="twitter:site" content="@safari"><style type="text/css" id="font-styles" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }"></style><style type="text/css" id="font-family" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }"></style><style type="text/css" id="column-width" data-template="#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }"></style><noscript>&lt;meta http-equiv="refresh" content="0; url=/library/no-js/" /&gt;</noscript><script type="text/javascript">
  (function(i,s,o,g,r,a,m) {
    i['GoogleAnalyticsObject']=r;
    i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();
    a=s.createElement(o),m=s.getElementsByTagName(o)[0];
    a.async=1;
    a.src=g;
    m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  var matches = document.cookie.match(/BrowserCookie\s*=\s*([a-f0-9\-]{36})/),
      user_uuid = null;

  if (matches && matches.length === 2) {
    user_uuid = matches[1];
  }


  ga('create', 'UA-39299553-7', {'userId': 'bece7dd7-9327-4cc1-a1c8-17e84b9a1059' });



  
    ga('set', 'dimension1', 'Trial');
  


ga('set', 'dimension6', user_uuid);


  ga('set', 'dimension2', 'bece7dd7-9327-4cc1-a1c8-17e84b9a1059');
  






//enable enhanced link tracking
ga('require', 'linkid', 'linkid.js');

// reading interface will track pageviews itself
if (document.location.pathname.indexOf("/library/view") !== 0) {
  ga('send', 'pageview');
}
</script><script>
    (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    '//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-5P4V6Z');
  </script><script defer="" src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/vendor.4bb90b301ddb.js"></script><script defer="" src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/reader.7bc20c923d74.js"></script><script src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource"></script><script src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(1)"></script><script async="" src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/MathJax.js"></script><style id="annotator-dynamic-style">.annotator-adder, .annotator-outer, .annotator-notice {
  z-index: 100019;
}
.annotator-filter {
  z-index: 100009;
}</style></head>


<body class="reading sidenav  scalefonts subscribe-panel library nav-collapsed">

    
  
  <noscript> 
    &lt;iframe src="//www.googletagmanager.com/ns.html?id=GTM-5P4V6Z"
            height="0" width="0"
            style="display:none;visibility:hidden"&gt;
    &lt;/iframe&gt;
  </noscript>
  



    
      <div class="hide working" role="status">
        <div class="working-image"></div>
      </div>
      <div class="sbo-site-nav">
        





<a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#container" class="skip">Skip to content</a><header class="topbar t-topbar"><nav role="navigation" class="js-site-nav"><ul class="topnav"><li class="t-logo"><a href="https://www.safaribooksonline.com/home/" class="l0 None safari-home nav-icn js-keyboard-nav-home"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>Safari Home Icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M4 9.9L4 9.9 4 18 16 18 16 9.9 10 4 4 9.9ZM2.6 8.1L2.6 8.1 8.7 1.9 10 0.5 11.3 1.9 17.4 8.1 18 8.7 18 9.5 18 18.1 18 20 16.1 20 3.9 20 2 20 2 18.1 2 9.5 2 8.7 2.6 8.1Z"></path><rect x="10" y="12" width="3" height="7"></rect><rect transform="translate(18.121320, 10.121320) rotate(-315.000000) translate(-18.121320, -10.121320) " x="16.1" y="9.1" width="4" height="2"></rect><rect transform="translate(2.121320, 10.121320) scale(-1, 1) rotate(-315.000000) translate(-2.121320, -10.121320) " x="0.1" y="9.1" width="4" height="2"></rect></g></svg><span>Safari Home</span></a></li><li><a href="https://www.safaribooksonline.com/r/" class="t-recommendations-nav l0 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>recommendations icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M50 25C50 18.2 44.9 12.5 38.3 11.7 37.5 5.1 31.8 0 25 0 18.2 0 12.5 5.1 11.7 11.7 5.1 12.5 0 18.2 0 25 0 31.8 5.1 37.5 11.7 38.3 12.5 44.9 18.2 50 25 50 31.8 50 37.5 44.9 38.3 38.3 44.9 37.5 50 31.8 50 25ZM25 3.1C29.7 3.1 33.6 6.9 34.4 11.8 30.4 12.4 26.9 15.1 25 18.8 23.1 15.1 19.6 12.4 15.6 11.8 16.4 6.9 20.3 3.1 25 3.1ZM34.4 15.6C33.6 19.3 30.7 22.2 27.1 22.9 27.8 19.2 30.7 16.3 34.4 15.6ZM22.9 22.9C19.2 22.2 16.3 19.3 15.6 15.6 19.3 16.3 22.2 19.2 22.9 22.9ZM3.1 25C3.1 20.3 6.9 16.4 11.8 15.6 12.4 19.6 15.1 23.1 18.8 25 15.1 26.9 12.4 30.4 11.8 34.4 6.9 33.6 3.1 29.7 3.1 25ZM22.9 27.1C22.2 30.7 19.3 33.6 15.6 34.4 16.3 30.7 19.2 27.8 22.9 27.1ZM25 46.9C20.3 46.9 16.4 43.1 15.6 38.2 19.6 37.6 23.1 34.9 25 31.3 26.9 34.9 30.4 37.6 34.4 38.2 33.6 43.1 29.7 46.9 25 46.9ZM27.1 27.1C30.7 27.8 33.6 30.7 34.4 34.4 30.7 33.6 27.8 30.7 27.1 27.1ZM38.2 34.4C37.6 30.4 34.9 26.9 31.3 25 34.9 23.1 37.6 19.6 38.2 15.6 43.1 16.4 46.9 20.3 46.9 25 46.9 29.7 43.1 33.6 38.2 34.4Z"></path></g></svg><span>Recommended</span></a></li><li><a href="https://www.safaribooksonline.com/s/" class="t-queue-nav l0 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>queue icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 29.2C25.4 29.2 25.8 29.1 26.1 28.9L48.7 16.8C49.5 16.4 50 15.5 50 14.6 50 13.7 49.5 12.8 48.7 12.4L26.1 0.3C25.4-0.1 24.6-0.1 23.9 0.3L1.3 12.4C0.5 12.8 0 13.7 0 14.6 0 15.5 0.5 16.4 1.3 16.8L23.9 28.9C24.2 29.1 24.6 29.2 25 29.2ZM7.3 14.6L25 5.2 42.7 14.6 25 24 7.3 14.6ZM48.7 22.4L47.7 21.9 25 34.2 2.3 21.9 1.3 22.4C0.5 22.9 0 23.7 0 24.7 0 25.6 0.5 26.5 1.3 26.9L23.9 39.3C24.2 39.5 24.6 39.6 25 39.6 25.4 39.6 25.8 39.5 26.1 39.3L48.7 26.9C49.5 26.5 50 25.6 50 24.7 50 23.7 49.5 22.9 48.7 22.4ZM48.7 32.8L47.7 32.3 25 44.6 2.3 32.3 1.3 32.8C0.5 33.3 0 34.1 0 35.1 0 36 0.5 36.9 1.3 37.3L23.9 49.7C24.2 49.9 24.6 50 25 50 25.4 50 25.8 49.9 26.1 49.7L48.7 37.3C49.5 36.9 50 36 50 35.1 50 34.1 49.5 33.3 48.7 32.8Z"></path></g></svg><span>
                  Queue
              </span></a></li><li class="search"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#" class="t-search-nav trigger nav-icn l0" data-dropdown-selector=".searchbox"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>search icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M31.3 0C20.9 0 12.5 8.4 12.5 18.8 12.5 22.5 13.6 25.9 15.4 28.8L1.2 42.9C-0.4 44.5-0.4 47.2 1.2 48.8 2 49.6 3.1 50 4.2 50 5.2 50 6.3 49.6 7.1 48.8L21.2 34.6C24.1 36.5 27.5 37.5 31.3 37.5 41.6 37.5 50 29.1 50 18.8 50 8.4 41.6 0 31.3 0ZM31.3 31.3C24.4 31.3 18.8 25.6 18.8 18.8 18.8 11.9 24.4 6.3 31.3 6.3 38.1 6.3 43.8 11.9 43.8 18.8 43.8 25.6 38.1 31.3 31.3 31.3Z"></path></g></svg><span>Search</span></a></li><li class="usermenu dropdown"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#" class="trigger l0 nav-icn nav-dropdown"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>navigation arrow</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M0.1 12.5L9.7 3.1C9.8 3 9.9 3 10 3 10.1 3 10.2 3 10.3 3.1L19.9 12.5C20 12.5 20 12.6 20 12.8 20 12.9 20 13 19.9 13L17 15.9C16.9 16 16.8 16 16.7 16 16.5 16 16.4 16 16.4 15.9L10 9.7 3.6 15.9C3.6 16 3.5 16 3.3 16 3.2 16 3.1 16 3 15.9L0.1 13C0 12.9 0 12.8 0 12.7 0 12.7 0 12.6 0.1 12.5Z"></path></g></svg><span>Expand Nav</span></a><div class="drop-content"><ul><li><a href="https://www.safaribooksonline.com/history/" class="t-recent-nav l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>recent items icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 0C11.2 0 0 11.2 0 25 0 38.8 11.2 50 25 50 38.8 50 50 38.8 50 25 50 11.2 38.8 0 25 0ZM6.3 25C6.3 14.6 14.6 6.3 25 6.3 35.4 6.3 43.8 14.6 43.8 25 43.8 35.4 35.4 43.8 25 43.8 14.6 43.8 6.3 35.4 6.3 25ZM31.8 31.5C32.5 30.5 32.4 29.2 31.6 28.3L27.1 23.8 27.1 12.8C27.1 11.5 26.2 10.4 25 10.4 23.9 10.4 22.9 11.5 22.9 12.8L22.9 25.7 28.8 31.7C29.2 32.1 29.7 32.3 30.2 32.3 30.8 32.3 31.3 32 31.8 31.5Z"></path></g></svg><span>History</span></a></li><li><a href="https://www.safaribooksonline.com/topics" class="t-topics-link l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 55" width="20" height="20" version="1.1" fill="#4A3C31"><desc>topics icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 55L50 41.262 50 13.762 25 0 0 13.762 0 41.262 25 55ZM8.333 37.032L8.333 17.968 25 8.462 41.667 17.968 41.667 37.032 25 46.538 8.333 37.032Z"></path></g></svg><span>Topics</span></a></li><li><a href="https://www.safaribooksonline.com/tutorials/" class="l1 nav-icn t-tutorials-nav js-toggle-menu-item None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>tutorials icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M15.8 18.2C15.8 18.2 15.9 18.2 16 18.2 16.1 18.2 16.2 18.2 16.4 18.2 16.5 18.2 16.7 18.1 16.9 18 17 17.9 17.1 17.8 17.2 17.7 17.3 17.6 17.4 17.5 17.4 17.4 17.5 17.2 17.6 16.9 17.6 16.7 17.6 16.6 17.6 16.5 17.6 16.4 17.5 16.2 17.5 16.1 17.4 15.9 17.3 15.8 17.2 15.6 17 15.5 16.8 15.3 16.6 15.3 16.4 15.2 16.2 15.2 16 15.2 15.8 15.2 15.7 15.2 15.5 15.3 15.3 15.4 15.2 15.4 15.1 15.5 15 15.7 14.9 15.8 14.8 15.9 14.7 16 14.7 16.1 14.6 16.3 14.6 16.4 14.6 16.5 14.6 16.6 14.6 16.6 14.6 16.7 14.6 16.9 14.6 17 14.6 17.1 14.7 17.3 14.7 17.4 14.8 17.6 15 17.7 15.1 17.9 15.2 18 15.3 18 15.5 18.1 15.5 18.1 15.6 18.2 15.7 18.2 15.7 18.2 15.7 18.2 15.8 18.2L15.8 18.2ZM9.4 11.5C9.5 11.5 9.5 11.5 9.6 11.5 9.7 11.5 9.9 11.5 10 11.5 10.2 11.5 10.3 11.4 10.5 11.3 10.6 11.2 10.8 11.1 10.9 11 10.9 10.9 11 10.8 11.1 10.7 11.2 10.5 11.2 10.2 11.2 10 11.2 9.9 11.2 9.8 11.2 9.7 11.2 9.5 11.1 9.4 11 9.2 10.9 9.1 10.8 8.9 10.6 8.8 10.5 8.7 10.3 8.6 10 8.5 9.9 8.5 9.7 8.5 9.5 8.5 9.3 8.5 9.1 8.6 9 8.7 8.8 8.7 8.7 8.8 8.6 9 8.5 9.1 8.4 9.2 8.4 9.3 8.2 9.5 8.2 9.8 8.2 10 8.2 10.1 8.2 10.2 8.2 10.3 8.2 10.5 8.3 10.6 8.4 10.7 8.5 10.9 8.6 11.1 8.7 11.2 8.9 11.3 9 11.4 9.1 11.4 9.2 11.4 9.3 11.5 9.3 11.5 9.3 11.5 9.4 11.5 9.4 11.5L9.4 11.5ZM3 4.8C3.1 4.8 3.1 4.8 3.2 4.8 3.4 4.8 3.5 4.8 3.7 4.8 3.8 4.8 4 4.7 4.1 4.6 4.3 4.5 4.4 4.4 4.5 4.3 4.6 4.2 4.6 4.1 4.7 4 4.8 3.8 4.8 3.5 4.8 3.3 4.8 3.1 4.8 3 4.8 2.9 4.7 2.8 4.7 2.6 4.6 2.5 4.5 2.3 4.4 2.2 4.2 2.1 4 1.9 3.8 1.9 3.6 1.8 3.5 1.8 3.3 1.8 3.1 1.8 2.9 1.8 2.7 1.9 2.6 2 2.4 2.1 2.3 2.2 2.2 2.3 2.1 2.4 2 2.5 2 2.6 1.8 2.8 1.8 3 1.8 3.3 1.8 3.4 1.8 3.5 1.8 3.6 1.8 3.8 1.9 3.9 2 4 2.1 4.2 2.2 4.4 2.4 4.5 2.5 4.6 2.6 4.7 2.7 4.7 2.8 4.7 2.9 4.8 2.9 4.8 3 4.8 3 4.8 3 4.8L3 4.8ZM13.1 15.2C13.2 15.1 13.2 15.1 13.2 15.1 13.3 14.9 13.4 14.7 13.6 14.5 13.8 14.2 14.1 14 14.4 13.8 14.7 13.6 15.1 13.5 15.5 13.4 15.9 13.4 16.3 13.4 16.7 13.5 17.2 13.5 17.6 13.7 17.9 13.9 18.2 14.1 18.5 14.4 18.7 14.7 18.9 15 19.1 15.3 19.2 15.6 19.3 15.9 19.4 16.1 19.4 16.4 19.4 17 19.3 17.5 19.1 18.1 19 18.3 18.9 18.5 18.7 18.7 18.5 19 18.3 19.2 18 19.4 17.7 19.6 17.3 19.8 16.9 19.9 16.6 20 16.3 20 16 20 15.8 20 15.6 20 15.4 19.9 15.4 19.9 15.4 19.9 15.4 19.9 15.2 19.9 15 19.8 14.9 19.8 14.8 19.7 14.7 19.7 14.6 19.7 14.4 19.6 14.3 19.5 14.1 19.3 13.7 19.1 13.4 18.7 13.2 18.4 13.1 18.1 12.9 17.8 12.9 17.5 12.8 17.3 12.8 17.1 12.8 16.9L3.5 14.9C3.3 14.9 3.1 14.8 3 14.8 2.7 14.7 2.4 14.5 2.1 14.3 1.7 14 1.4 13.7 1.2 13.3 1 13 0.9 12.6 0.8 12.3 0.7 12 0.7 11.7 0.7 11.4 0.7 11 0.8 10.5 1 10.1 1.1 9.8 1.3 9.5 1.6 9.2 1.8 8.9 2.1 8.7 2.4 8.5 2.8 8.3 3.2 8.1 3.6 8.1 3.9 8 4.2 8 4.5 8 4.6 8 4.8 8 4.9 8.1L6.8 8.5C6.8 8.4 6.8 8.4 6.8 8.4 6.9 8.2 7.1 8 7.2 7.8 7.5 7.5 7.7 7.3 8 7.1 8.4 6.9 8.7 6.8 9.1 6.7 9.5 6.7 10 6.7 10.4 6.8 10.8 6.8 11.2 7 11.5 7.2 11.8 7.5 12.1 7.7 12.4 8 12.6 8.3 12.7 8.6 12.8 8.9 12.9 9.2 13 9.4 13 9.7 13 9.7 13 9.8 13 9.8 13.6 9.9 14.2 10.1 14.9 10.2 15 10.2 15 10.2 15.1 10.2 15.3 10.2 15.4 10.2 15.6 10.2 15.8 10.1 16 10 16.2 9.9 16.4 9.8 16.5 9.6 16.6 9.5 16.8 9.2 16.9 8.8 16.9 8.5 16.9 8.3 16.9 8.2 16.8 8 16.8 7.8 16.7 7.7 16.6 7.5 16.5 7.3 16.3 7.2 16.2 7.1 16 7 15.9 6.9 15.8 6.9 15.7 6.9 15.6 6.8 15.5 6.8L6.2 4.8C6.2 5 6 5.2 5.9 5.3 5.7 5.6 5.5 5.8 5.3 6 4.9 6.2 4.5 6.4 4.1 6.5 3.8 6.6 3.5 6.6 3.2 6.6 3 6.6 2.8 6.6 2.7 6.6 2.6 6.6 2.6 6.5 2.6 6.5 2.5 6.5 2.3 6.5 2.1 6.4 1.8 6.3 1.6 6.1 1.3 6 1 5.7 0.7 5.4 0.5 5 0.3 4.7 0.2 4.4 0.1 4.1 0 3.8 0 3.6 0 3.3 0 2.8 0.1 2.2 0.4 1.7 0.5 1.5 0.7 1.3 0.8 1.1 1.1 0.8 1.3 0.6 1.6 0.5 2 0.3 2.3 0.1 2.7 0.1 3.1 0 3.6 0 4 0.1 4.4 0.2 4.8 0.3 5.1 0.5 5.5 0.8 5.7 1 6 1.3 6.2 1.6 6.3 1.9 6.4 2.3 6.5 2.5 6.6 2.7 6.6 3 6.6 3 6.6 3.1 6.6 3.1 9.7 3.8 12.8 4.4 15.9 5.1 16.1 5.1 16.2 5.2 16.4 5.2 16.7 5.3 16.9 5.5 17.2 5.6 17.5 5.9 17.8 6.2 18.1 6.5 18.3 6.8 18.4 7.2 18.6 7.5 18.6 7.9 18.7 8.2 18.7 8.6 18.7 9 18.6 9.4 18.4 9.8 18.3 10.1 18.2 10.3 18 10.6 17.8 10.9 17.5 11.1 17.3 11.3 16.9 11.6 16.5 11.8 16 11.9 15.7 12 15.3 12 15 12 14.8 12 14.7 12 14.5 11.9 13.9 11.8 13.3 11.7 12.6 11.5 12.5 11.7 12.4 11.9 12.3 12 12.1 12.3 11.9 12.5 11.7 12.7 11.3 12.9 10.9 13.1 10.5 13.2 10.2 13.3 9.9 13.3 9.6 13.3 9.4 13.3 9.2 13.3 9 13.2 9 13.2 9 13.2 9 13.2 8.8 13.2 8.7 13.2 8.5 13.1 8.2 13 8 12.8 7.7 12.6 7.4 12.4 7.1 12 6.8 11.7 6.7 11.4 6.6 11.1 6.5 10.8 6.4 10.6 6.4 10.4 6.4 10.2 5.8 10.1 5.2 9.9 4.5 9.8 4.4 9.8 4.4 9.8 4.3 9.8 4.1 9.8 4 9.8 3.8 9.8 3.6 9.9 3.4 10 3.2 10.1 3 10.2 2.9 10.4 2.8 10.5 2.6 10.8 2.5 11.1 2.5 11.5 2.5 11.6 2.5 11.8 2.6 12 2.6 12.1 2.7 12.3 2.8 12.5 2.9 12.6 3.1 12.8 3.2 12.9 3.3 13 3.5 13.1 3.6 13.1 3.7 13.1 3.8 13.2 3.9 13.2L13.1 15.2 13.1 15.2Z"></path></g></svg><span>Tutorials</span></a></li><li class="nav-offers flyout-parent"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#" class="l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>offers icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M35.9 20.6L27 15.5C26.1 15 24.7 15 23.7 15.5L14.9 20.6C13.9 21.1 13.2 22.4 13.2 23.4L13.2 41.4C13.2 42.4 13.9 43.7 14.9 44.2L23.3 49C24.2 49.5 25.6 49.5 26.6 49L35.9 43.6C36.8 43.1 37.6 41.8 37.6 40.8L37.6 23.4C37.6 22.4 36.8 21.1 35.9 20.6L35.9 20.6ZM40 8.2C39.1 7.6 37.6 7.6 36.7 8.2L30.2 11.9C29.3 12.4 29.3 13.2 30.2 13.8L39.1 18.8C40 19.4 40.7 20.6 40.7 21.7L40.7 39C40.7 40.1 41.4 40.5 42.4 40L48.2 36.6C49.1 36.1 49.8 34.9 49.8 33.8L49.8 15.6C49.8 14.6 49.1 13.3 48.2 12.8L40 8.2 40 8.2ZM27 10.1L33.6 6.4C34.5 5.9 34.5 5 33.6 4.5L26.6 0.5C25.6 0 24.2 0 23.3 0.5L16.7 4.2C15.8 4.7 15.8 5.6 16.7 6.1L23.7 10.1C24.7 10.6 26.1 10.6 27 10.1ZM10.1 21.7C10.1 20.6 10.8 19.4 11.7 18.8L20.6 13.8C21.5 13.2 21.5 12.4 20.6 11.9L13.6 7.9C12.7 7.4 11.2 7.4 10.3 7.9L1.6 12.8C0.7 13.3 0 14.6 0 15.6L0 33.8C0 34.9 0.7 36.1 1.6 36.6L8.4 40.5C9.3 41 10.1 40.6 10.1 39.6L10.1 21.7 10.1 21.7Z"></path></g></svg><span>Offers &amp; Deals</span></a><ul class="flyout"><li><a href="https://www.safaribooksonline.com/oreilly-newsletters/" class="l2 nav-icn"><span>Newsletters</span></a></li></ul></li><li class="nav-highlights"><a href="https://www.safaribooksonline.com/u/0011N00001As6t6QAB/" class="t-highlights-nav l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 35" width="20" height="20" version="1.1" fill="#4A3C31"><desc>highlights icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M13.325 18.071L8.036 18.071C8.036 11.335 12.36 7.146 22.5 5.594L22.5 0C6.37 1.113 0 10.632 0 22.113 0 29.406 3.477 35 10.403 35 15.545 35 19.578 31.485 19.578 26.184 19.578 21.556 17.211 18.891 13.325 18.071L13.325 18.071ZM40.825 18.071L35.565 18.071C35.565 11.335 39.86 7.146 50 5.594L50 0C33.899 1.113 27.5 10.632 27.5 22.113 27.5 29.406 30.977 35 37.932 35 43.045 35 47.078 31.485 47.078 26.184 47.078 21.556 44.74 18.891 40.825 18.071L40.825 18.071Z"></path></g></svg><span>Highlights</span></a></li><li><a href="https://www.safaribooksonline.com/u/" class="t-settings-nav l1 js-settings nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 53" width="20" height="20" version="1.1" fill="#4A3C31"><desc>settings icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M44.6 29.6C44.7 28.6 44.8 27.5 44.8 26.5 44.8 25.5 44.7 24.4 44.6 23.4L49.6 19C50 18.8 50.1 18.3 49.9 17.9 48.9 14.7 47.1 11.7 44.9 9.1 44.6 8.8 44.2 8.7 43.8 8.8L37.4 11.1C35.8 9.8 34 8.7 32.1 8L30.9 1.4C30.8 0.9 30.4 0.6 30 0.5 26.7-0.2 23.3-0.2 20 0.5 19.6 0.6 19.2 0.9 19.1 1.4L17.9 8C16 8.7 14.1 9.8 12.6 11.1L6.2 8.8C5.8 8.7 5.4 8.8 5.1 9.1 2.9 11.7 1.1 14.7 0.1 17.9 -0.1 18.3 0 18.8 0.4 19L5.4 23.4C5.3 24.4 5.2 25.5 5.2 26.5 5.2 27.5 5.3 28.6 5.4 29.6L0.4 34C0 34.2-0.1 34.7 0.1 35.1 1.1 38.3 2.9 41.4 5.1 43.9 5.4 44.2 5.8 44.4 6.2 44.2L12.6 42C14.1 43.2 16 44.3 17.9 45L19.1 51.7C19.2 52.1 19.6 52.5 20 52.5 21.6 52.8 23.3 53 25 53 26.7 53 28.4 52.8 30 52.5 30.4 52.5 30.8 52.1 30.9 51.7L32.1 45C34 44.3 35.8 43.2 37.4 42L43.8 44.2C44.2 44.4 44.6 44.2 44.9 43.9 47.1 41.4 48.9 38.3 49.9 35.1 50.1 34.7 50 34.2 49.6 34L44.6 29.6ZM25 36.4C19.6 36.4 15.2 32 15.2 26.5 15.2 21 19.6 16.6 25 16.6 30.4 16.6 34.8 21 34.8 26.5 34.8 32 30.4 36.4 25 36.4Z"></path></g></svg><span>Settings</span></a></li><li><a href="https://www.safaribooksonline.com/public/support" class="l1 no-icon">Support</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l1 no-icon">Sign Out</a></li></ul><ul class="profile"><li><a href="https://www.safaribooksonline.com/u/" class="l2 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 53" width="20" height="20" version="1.1" fill="#4A3C31"><desc>settings icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M44.6 29.6C44.7 28.6 44.8 27.5 44.8 26.5 44.8 25.5 44.7 24.4 44.6 23.4L49.6 19C50 18.8 50.1 18.3 49.9 17.9 48.9 14.7 47.1 11.7 44.9 9.1 44.6 8.8 44.2 8.7 43.8 8.8L37.4 11.1C35.8 9.8 34 8.7 32.1 8L30.9 1.4C30.8 0.9 30.4 0.6 30 0.5 26.7-0.2 23.3-0.2 20 0.5 19.6 0.6 19.2 0.9 19.1 1.4L17.9 8C16 8.7 14.1 9.8 12.6 11.1L6.2 8.8C5.8 8.7 5.4 8.8 5.1 9.1 2.9 11.7 1.1 14.7 0.1 17.9 -0.1 18.3 0 18.8 0.4 19L5.4 23.4C5.3 24.4 5.2 25.5 5.2 26.5 5.2 27.5 5.3 28.6 5.4 29.6L0.4 34C0 34.2-0.1 34.7 0.1 35.1 1.1 38.3 2.9 41.4 5.1 43.9 5.4 44.2 5.8 44.4 6.2 44.2L12.6 42C14.1 43.2 16 44.3 17.9 45L19.1 51.7C19.2 52.1 19.6 52.5 20 52.5 21.6 52.8 23.3 53 25 53 26.7 53 28.4 52.8 30 52.5 30.4 52.5 30.8 52.1 30.9 51.7L32.1 45C34 44.3 35.8 43.2 37.4 42L43.8 44.2C44.2 44.4 44.6 44.2 44.9 43.9 47.1 41.4 48.9 38.3 49.9 35.1 50.1 34.7 50 34.2 49.6 34L44.6 29.6ZM25 36.4C19.6 36.4 15.2 32 15.2 26.5 15.2 21 19.6 16.6 25 16.6 30.4 16.6 34.8 21 34.8 26.5 34.8 32 30.4 36.4 25 36.4Z"></path></g></svg><span>Settings</span></a><span class="l2 t-nag-notification" id="nav-nag"><strong class="trial-green">7</strong> days left in your trial.
  
  

  
    
      

<a class="" href="https://www.safaribooksonline.com/subscribe/">Subscribe</a>.


    
  

  

</span></li><li><a href="https://www.safaribooksonline.com/public/support" class="l2">Support</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l2">Sign Out</a></li></ul></div></li></ul></nav></header>


      </div>
      <div id="container" class="application" style="height: auto;">
        
          <div class="nav-container clearfix">
            


            
            
          </div>

          

  <div class="js-toc">
    
      <div class="sbo-reading-menu sbo-menu-top"><section class="sbo-toc-container toc-menu"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#" class="sbo-toc-thumb"><span class="sbo-title ss-list"><h1><div class="visuallyhidden">Table of Contents for </div>
      
      OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)
      
    </h1></span></a><div class="toc-contents"></div></section></div>

    

    <div class="interface-controls interface-controls-top">
      <ul class="interface-control-btns js-bitlist js-reader">
        <li class="js-search-in-archive search-in-archive t-search-in-archive"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#" title="Search in archive" class="js-search-controls search-controls"><span class="icon">Search in book...</span></a><form class="search-archive-bar js-search-form"><input type="search" name="query" placeholder="Search inside this book..." autocomplete="off"></form><div class="search-archive-results"><div class="js-sitb-results-region"></div></div></li><li class="queue-control"><button type="button" class="rec-fav ss-queue js-queue js-current-chapter-queue" data-queue-endpoint="/api/v1/book/9781260011388/chapter/ch04.html" data-for-analytics="9781260011388:ch04.html" aria-label="Add to Queue"><span>Add to Queue</span></button></li><li class="js-font-control-panel font-control-activator"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#" data-push-state="false" id="font-controls" title="Change font size" aria-label="Change font size"><span class="icon">Toggle Font Controls</span></a></li><li class="dropdown sharing-controls"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#" class="trigger" data-push-state="false" title="Share" aria-label="Share"><i class="fa fa-share"></i></a><ul class="social-sharing dropdown-menu"><li><a class="twitter share-button t-twitter" target="_blank" aria-label="Share this section on Twitter" title="Share this section on Twitter" href="https://twitter.com/share?url=https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html&amp;text=OCA%20Java%20SE%208%20Programmer%20I%20Exam%20Guide%20%28Exams%201Z0-808%29&amp;via=safari"><span>Twitter</span></a></li><li><a class="facebook share-button t-facebook" target="_blank" aria-label="Share this section on Facebook" title="Share this section on Facebook" href="https://www.facebook.com/sharer/sharer.php?u=https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html"><span>Facebook</span></a></li><li><a class="googleplus share-button t-googleplus" target="_blank" aria-label="Share this secton on Google Plus" title="Share this secton on Google Plus" href="https://plus.google.com/share?url=https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html"><span>Google Plus</span></a></li><li><a class="email share-button t-email" aria-label="Share this section via email" title="Share this section via email" href="mailto:?subject=Safari:%20Cover%20Page&amp;body=https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/cover.html%0D%0Afrom%20OCA%20Java%20SE%208%20Programmer%20I%20Exam%20Guide%20%28Exams%201Z0-808%29%0D%0A"><span>Email</span></a></li></ul></li>
      </ul>
    </div>

    <section role="document">
	  <div class="t-sbo-prev sbo-prev sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">3&nbsp;Assignments</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">5&nbsp;Flow Control and Exceptions</div>
        </a>
    
  
  </div>



<div id="sbo-rt-content"><div class="annotator-wrapper"><p class="imagea"><img class="inline" src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/common.jpg" alt="Images" width="500" height="252" data-mfp-src="/library/view/oca-java-se/9781260011388/common.jpg"></p>
<h2 class="h2" id="ch4"><a id="page_233"></a>4</h2>
<h2 class="h2a">Operators</h2>
<p class="noindentd">CERTIFICATION OBJECTIVES</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Using Java Operators</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use Parentheses to Override Operator Precedence</p>
<p class="bull">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Test Equality Between Strings and Other Objects Using == and equals( )</p>
<p class="tick"><img class="inline" src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/tic.jpg" alt="Images" width="12" height="13" data-mfp-src="/library/view/oca-java-se/9781260011388/tic.jpg">&nbsp;&nbsp;&nbsp;Two-Minute Drill</p>
<p class="tick1"><strong>Q&amp;A</strong>&nbsp;Self Test</p>
<p class="noindenttop"><a id="page_234"></a><span class="drop">I</span>f you’ve got variables, you’re going to modify them. (Unless you’re one of those new-fangled “FP” programmers.) You’ll increment them, add them together, and compare one to another (in about a dozen different ways). In this chapter, you’ll learn how to do all that in Java. As an added bonus, you’ll learn how to do things that you’ll probably never use in the real world, but that will almost certainly be on the exam.</p>
<h3 class="h3a">CERTIFICATION OBJECTIVE</h3>
<h3 class="h3n"><a id="ch04lev1sec1"></a>Java Operators (OCA Objectives 3.1, 3.2, and 3.3)</h3>
<p class="noindent"><em>3.1 Use Java operators; including parentheses to override operator precedence.</em></p>
<p class="noindent"><em>3.2 Test equality between Strings and other objects using == and equals().</em></p>
<p class="noindent"><em>3.3 Create if and if/else and ternary constructs</em></p>
<p class="indentt">Java operators produce new values from one or more operands. (Just so we’re all clear, remember that operands are the things on the right or left side of the operator.) The result of most operations is either a <code>boolean</code> or numeric value. Because you know by now that Java is not C++, you won’t be surprised that Java operators aren’t typically overloaded. There are, however, a few exceptional operators that come overloaded:</p>
<p class="bulletxt"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The <code>+</code> operator can be used to add two numeric primitives together or to perform a concatenation operation if either operand is a <code>String</code>.</p>
<p class="bulletxb"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;The <code>&amp;</code>, <code>|</code>, and <code>^</code> operators can all be used in two different ways, although on this version of the exam, their bit-twiddling capabilities won’t be tested.</p>
<p class="indent">Stay awake. Operators are often the section of the exam where candidates see their lowest scores. Additionally, operators and assignments are a part of many questions dealing with other topics—it would be a shame to nail a really tricky lambdas question only to blow it on a pre-increment statement.</p>
<h4 class="h4"><a id="ch04lev2sec1"></a><a id="page_235"></a>Assignment Operators</h4>
<p class="noindent">We covered most of the functionality of the equal (<code>=</code>) assignment operator in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html">Chapter 3</a>. To summarize:</p>
<p class="bulletxt"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;When assigning a value to a primitive, <em>size</em> matters. Be sure you know when implicit casting will occur, when explicit casting is necessary, and when truncation might occur.</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Remember that a reference variable isn’t an object; it’s a way to <em>get</em> to an object. (We know all you C++ programmers are just dying for us to say, “it’s a pointer,” but we’re not going to.)</p>
<p class="bulletxb"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;When assigning a value to a reference variable, <em>type</em> matters. Remember the rules for supertypes, subtypes, and arrays.</p>
<p class="indent">Next we’ll cover a few more details about the assignment operators that are on the exam, and when we get to the next chapter, we’ll take a look at how the assignment operator <code>=</code> works with <code>String</code>s (which are immutable).</p>
<div class="side-exam">
<p class="imaget"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>Don’t spend time preparing for topics that are no longer on the exam! The following topics have NOT been on the exam since Java 1.4:</em></strong></p>
<p class="bulletxsa"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong><em>Bit-shifting operators</em></strong></p>
<p class="bulletxsa"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong><em>Bitwise operators</em></strong></p>
<p class="bulletxsa"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong><em>Two’s complement</em></strong></p>
<p class="bulletxsa"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong><em>Divide-by-zero stuff</em></strong></p>
<p class="Text-icon-exam1"><strong><em>It’s not that these aren’t important topics; it’s just that they’re not on the exam anymore, and we’re really focused on the exam. (Note: The reason we bring this up at all is because you might encounter mock exam questions on these topics—you can ignore those questions!)</em></strong></p>
</div>
<h4 class="h4a"><a id="page_236"></a>Compound Assignment Operators</h4>
<p class="noindent">There are actually 11 or so compound assignment operators, but only the 4 most commonly used (<code>+=</code>, <code>-=</code>, <code>*=</code>, and <code>/=</code>) are on the exam. The compound assignment operators let lazy typists shave a few keystrokes off their workload.</p>
<p class="indent">Here are several example assignments, first without using a compound operator:</p>
<p class="code1"><code>y = y - 6;<br>x = x + 2 * 5;</code></p>
<p class="noindent">Now, with compound operators:</p>
<p class="code1"><code>y -= 6;<br>x += 2 * 5;</code></p>
<p class="noindent">The last two assignments give the same result as the first two.</p>
<h4 class="h4"><a id="ch04lev2sec2"></a>Relational Operators</h4>
<p class="noindent">The exam covers six relational operators (<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>==</code>, and <code>!=</code>). Relational operators always result in a <code>boolean</code> (<code>true</code> or <code>false</code>) value. This <code>boolean</code> value is most often used in an <code>if</code> test, as follows:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0236-01.jpg" alt="images" width="161" height="74" data-mfp-src="/library/view/oca-java-se/9781260011388/p0236-01.jpg"></p>
<p class="noindent">But the resulting value can also be assigned directly to a <code>boolean</code> primitive:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0236-02.jpg" alt="images" width="464" height="115" data-mfp-src="/library/view/oca-java-se/9781260011388/p0236-02.jpg"></p>
<p class="indent">Java has four relational operators that can be used to compare any combination of integers, floating-point numbers, or characters:</p>
<p class="bulletxt"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code><strong>&gt;</strong></code> Greater than</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code><strong>&gt;</strong><strong>=</strong></code> Greater than or equal to</p>
<p class="bulletx"><a id="page_237"></a><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code><strong>&lt;</strong></code> Less than</p>
<p class="bulletxb"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code><strong>&lt;</strong><strong>=</strong></code> Less than or equal to</p>
<p class="indent">Let’s look at some legal comparisons:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0237-01.jpg" alt="images" width="598" height="234" data-mfp-src="/library/view/oca-java-se/9781260011388/p0237-01.jpg"></p>
<p class="indent">In the preceding code, we are using a comparison between characters. It’s also legal to compare a character primitive with any number (although it isn’t great programming style). Running the preceding class will output the following:</p>
<p class="code1"><code>The animal is a gray elephant</code></p>
<p class="indent">We mentioned that characters can be used in comparison operators. When comparing a character with a character or a character with a number, Java will use the Unicode value of the character as the numerical value for comparison.</p>
<h4 class="h4a">“Equality” Operators</h4>
<p class="noindentt">Java also has two relational operators (sometimes called “equality operators”) that compare two similar “things” and return a <code>boolean</code> (<code>true</code> or <code>false</code>) that represents what’s true about the two “things” being equal. These operators are</p>
<p class="bulletxt"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code><strong>=</strong><strong>=</strong></code> Equal (also known as equal to)</p>
<p class="bulletxb"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code><strong>!</strong><strong>=</strong></code> Not equal (also known as not equal to)</p>
<p class="indent">Each individual comparison can involve two numbers (including <code>char</code>), two <code>boolean</code> values, or two object reference variables. You can’t compare incompatible types, however. What would it mean to ask if a <code>boolean</code> is equal to a <code>char</code>? Or if a <a id="page_238"></a><code>Button</code> is equal to a <code>String</code> array? (This is nonsense, which is why you can’t do it.) There are four different types of things that can be tested:</p>
<p class="bulletxt"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Numbers</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Characters</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Boolean primitives</p>
<p class="bulletxb"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;Object reference variables</p>
<p class="indent">So what does <code>==</code> look at? The value in the variable—in other words, the bit pattern.</p>
<h4 class="h4a">Equality for Primitives</h4>
<p class="noindentt">Most programmers are familiar with comparing primitive values. The following code shows some equality tests on primitive variables:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0238-01.jpg" alt="images" width="569" height="175" data-mfp-src="/library/view/oca-java-se/9781260011388/p0238-01.jpg"></p>
<p class="indent">This program produces the following output:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0238-02.jpg" alt="images" width="209" height="90" data-mfp-src="/library/view/oca-java-se/9781260011388/p0238-02.jpg"></p>
<p class="indent">As you can see, if a floating-point number is compared with an integer and the values are the same, the <code>==</code> operator usually returns <code>true</code> as expected.</p>
<h4 class="h4a">Equality for Reference Variables</h4>
<p class="noindent">As you saw earlier, two reference variables can refer to the same object, as the following code snippet demonstrates:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0238-03.jpg" alt="images" width="302" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0238-03.jpg"></p>
<div class="side-exam">
<p class="imaget"><a id="page_239"></a><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>Don’t mistake = for == in a <code>boolean</code> expression. The following is legal:</em></strong></p>
<p class="imagel"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0239-01.jpg" alt="images" width="491" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0239-01.jpg"></p>
<p class="Text-icon-exam"><strong><em>Look carefully! You might be tempted to think the output is <code>b is false</code>, but look at the <code>boolean</code> test in line 12. The <code>boolean</code> variable <code>b</code> is not being compared to <code>true</code>; it’s being <code>set</code> to <code>true</code>. Once <code>b</code> is set to <code>true</code>, the <code>println</code> executes and we get <code>b is true</code>. The result of any assignment expression is the value of the variable following the assignment. This substitution of = for == works only with <code>boolean</code> variables because the <code>if</code> test can be done only on <code>boolean</code> expressions. Thus, this does not compile:</em></strong></p>
<p class="imagel"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0239-02.jpg" alt="images" width="159" height="34" data-mfp-src="/library/view/oca-java-se/9781260011388/p0239-02.jpg"></p>
<p class="Text-icon-exam"><strong><em>Because <code>x</code> is an integer (and not a <code>boolean</code>), the result of (x = 0) is 0 (the result of the assignment). Primitive <code>ints</code> cannot be used where a <code>boolean</code> value is expected, so the code in line 8 won’t work unless it’s changed from an assignment (=) to an equality test (==) as follows:</em></strong></p>
<p class="imagel"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0239-03.jpg" alt="images" width="168" height="16" data-mfp-src="/library/view/oca-java-se/9781260011388/p0239-03.jpg"></p>
</div>
<p class="indent">After running this code, both variable <code>a</code> and variable <code>b</code> will refer to the same object (a <code>JButton</code> with the label <code>Exit</code>). Reference variables can be tested to see if they refer to the same object by using the <code>==</code> operator. Remember, the <code>==</code> operator is looking at the bits in the variable, so for reference variables, this means that if the bits in both reference variables are identical, then both refer to the same object. Look at the following code:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0239-04.jpg" alt="images" width="559" height="192" data-mfp-src="/library/view/oca-java-se/9781260011388/p0239-04.jpg"></p>
<p class="indent"><a id="page_240"></a>This code creates three reference variables. The first two, <code>a</code> and <code>b</code>, are separate <code>JButton</code> objects that happen to have the same label. The third reference variable, <code>c</code>, is initialized to refer to the same object that <code>a</code> refers to. When this program runs, the following output is produced:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0240-01.jpg" alt="images" width="246" height="30" data-mfp-src="/library/view/oca-java-se/9781260011388/p0240-01.jpg"></p>
<p class="indent">This shows us that <code>a</code> and <code>c</code> reference the same instance of a <code>JButton</code>. The <code>==</code> operator will not test whether two objects are “meaningfully equivalent,” a concept we’ll cover in much more detail in <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch06.html">Chapter 6</a>, when we look at the <code>equals()</code> <em>method</em> (as opposed to the equals <em>operator</em> we’re looking at here).</p>
<h4 class="h4a">Equality for Strings and java.lang.Object.equals()</h4>
<p class="noindentt">We just used <code>==</code> to determine whether two reference variables refer to the same object. Because objects are so central to Java, every class in Java inherits a method from class <code>Object</code> that tests to see if two objects of the class are “equal.” Not surprisingly, this method is called <code>equals()</code>. In this case of the <code>equals()</code> method, the phrase “meaningfully equivalent” should be used instead of the word “equal.” So the <code>equals()</code> method is used to determine if two objects of the same class are “meaningfully equivalent.” For classes that you create, you have the option of overriding the <code>equals()</code> method that your class inherited from class <code>Object</code> and creating your own definition of “meaningfully equivalent” for instances of your class.</p>
<p class="indent">In terms of understanding the <code>equals()</code> method for the OCA exam, you need to understand two aspects of the <code>equals()</code> method:</p>
<p class="bulletxt"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;What <code>equals()</code> means in class <code>Object</code></p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;What <code>equals()</code> means in class <code>String</code></p>
<p class="noindentt"><span class="fonts"><strong>The equals() Method in Class Object</strong></span> The <code>equals()</code> method in class <code>Object</code> works the same way that the <code>==</code> operator works. If two references point to the same object, the <code>equals()</code> method will return true. If two references point to different objects, even if they have the same values, the method will return false.</p>
<p class="noindentt"><span class="fonts"><strong>The equals() Method in Class String</strong></span> The <code>equals()</code> method in class <code>String</code> has been overridden. When the <code>equals()</code> method is used to compare two strings, it will return true if the strings have the same value, and it will return false if the strings have different values. For <code>String</code>’s <code>equals()</code> method, values ARE case sensitive.</p>
<p class="indent"><a id="page_241"></a>Let’s take a look at how the <code>equals()</code> method works in action (notice that the <code>Budgie</code> class did NOT override <code>Object.equals()</code>):</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0241-01.jpg" alt="images" width="633" height="297" data-mfp-src="/library/view/oca-java-se/9781260011388/p0241-01.jpg"></p>
<p class="noindent">which produces the output:</p>
<p class="code1"><code>false<br>true<br>true<br>false</code></p>
<h4 class="h4a">Equality for enums</h4>
<p class="noindentt">Once you’ve declared an <code>enum</code>, it’s not expandable. At runtime, there’s no way to make additional <code>enum</code> constants. Of course, you can have as many variables as you’d like refer to a given <code>enum</code> constant, so it’s important to be able to compare two <code>enum</code> reference variables to see if they’re “equal”—that is, do they refer to the same <code>enum</code> constant? You can use either the <code>==</code> operator or the <code>equals()</code> method to determine whether two variables are referring to the same <code>enum</code> constant:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0241-02.jpg" alt="images" width="561" height="135" data-mfp-src="/library/view/oca-java-se/9781260011388/p0241-02.jpg"></p>
<p class="noindent">(We know <code>} }</code> is ugly; we’re prepping you.) This produces the output:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0241-03.jpg" alt="images" width="94" height="28" data-mfp-src="/library/view/oca-java-se/9781260011388/p0241-03.jpg"></p>
<h4 class="h4"><a id="ch04lev2sec3"></a><a id="page_242"></a>instanceof Comparison</h4>
<p class="noindent">The <code>instanceof</code> operator is used for object reference variables only, and you can use it to check whether an object is of a particular type. By “type,” we mean class or interface type—in other words, whether the object referred to by the variable on the left side of the operator passes the IS-A test for the class or interface type on the right side. (<a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch02.html">Chapter 2</a> covered IS-A relationships in detail.) The following simple example,</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0242-01.jpg" alt="images" width="379" height="115" data-mfp-src="/library/view/oca-java-se/9781260011388/p0242-01.jpg"></p>
<p class="noindentt">prints this:</p>
<p class="code1"><code>s is a String</code></p>
<p class="indent">Even if the object being tested is not an actual instantiation of the class type on the right side of the operator, <code>instanceof</code> will still return <code>true</code> if the object being compared is <em>assignment compatible</em> with the type on the right.</p>
<p class="indent">The following example demonstrates a common use for <code>instanceof</code>: testing an object to see if it’s an instance of one of its subtypes before attempting a downcast:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0242-03.jpg" alt="images" width="552" height="293" data-mfp-src="/library/view/oca-java-se/9781260011388/p0242-03.jpg"></p>
<p class="noindent">The code compiles and produces this output:</p>
<p class="code1"><code>‘a’ refers to a B</code></p>
<p class="indent">In examples like this, the use of the <code>instanceof</code> operator protects the program from attempting an illegal downcast.</p>
<p class="indent"><a id="page_243"></a>You can test an object reference against its own class type or any of its superclasses. This means that <em>any</em> object reference will evaluate to <code>true</code> if you use the <code>instanceof</code> operator against type <code>Object</code>, as follows:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0243-01a.jpg" alt="images" width="315" height="55" data-mfp-src="/library/view/oca-java-se/9781260011388/p0243-01a.jpg"></p>
<p class="noindent">This prints</p>
<p class="code1"><code>b is definitely an Object</code></p>
<div class="side-exam">
<p class="imaget"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>Look for <code>instanceof</code> questions that test whether an object is an instance of an interface when the object’s class implements the interface indirectly. An indirect implementation occurs when one of an object’s superclasses implements an interface, but the actual class of the instance does not. In this example,</em></strong></p>
<p class="imagel"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0243-01.jpg" alt="images" width="246" height="114" data-mfp-src="/library/view/oca-java-se/9781260011388/p0243-01.jpg"></p>
<p class="Text-icon-exam"><strong><em>the following are true:</em></strong></p>
<p class="imagel"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0243-02.jpg" alt="images" width="410" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0243-02.jpg"></p>
<p class="Text-icon-exam"><strong><em>An object is said to be of a particular interface type (meaning it will pass the <code>instanceof</code> test) if any of the object’s superclasses implement the interface.</em></strong></p>
</div>
<p class="indent">In addition, it is legal to test whether the <code>null</code> reference is an instance of a class. This will always result in <code>false</code>, of course. This example,</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0243-03.jpg" alt="images" width="416" height="135" data-mfp-src="/library/view/oca-java-se/9781260011388/p0243-03.jpg"></p>
<p class="noindent">prints this:</p>
<p class="code1"><code>false false</code></p>
<h4 class="h4a"><a id="page_244"></a>instanceof Compiler Error</h4>
<p class="noindentt">You can’t use the <code>instanceof</code> operator to test across two different class hierarchies. For instance, the following will NOT compile:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0244-01.jpg" alt="images" width="407" height="135" data-mfp-src="/library/view/oca-java-se/9781260011388/p0244-01.jpg"></p>
<p class="noindent">Compilation fails—there’s no way <code>d</code> could ever refer to a <code>Cat</code> or a subtype of <code>Cat</code>.</p>
<div class="side-exam">
<p class="imaget"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>Remember that arrays are objects, even if the array is an array of primitives. Watch for questions that look something like this:</em></strong></p>
<p class="imagel"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0244-02.jpg" alt="images" width="466" height="34" data-mfp-src="/library/view/oca-java-se/9781260011388/p0244-02.jpg"></p>
<p class="Text-icon-exam"><strong><em>An array is always an instance of <code>Object</code>. Any array.</em></strong></p>
</div>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ch4tab1">Table 4-1</a> summarizes the use of the <code>instanceof</code> operator given the following:</p>
<p class="tabcap"><span class="figs"><strong>TABLE 4-1</strong></span>&nbsp;&nbsp;&nbsp;Operands and Results Using <code>instanceof</code> Operator</p>
<p class="image-t"><a id="ch4tab1"></a><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/t0245-01.jpg" alt="images" width="828" height="343" data-mfp-src="/library/view/oca-java-se/9781260011388/t0245-01.jpg"></p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0244-03.jpg" alt="images" width="264" height="55" data-mfp-src="/library/view/oca-java-se/9781260011388/p0244-03.jpg"></p>
<h4 class="h4"><a id="ch04lev2sec4"></a>Arithmetic Operators</h4>
<p class="noindentt">We’re sure you’re familiar with the basic arithmetic operators:</p>
<p class="bulletxt"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>+</strong> addition</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>–</strong> subtraction</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>*</strong> multiplication</p>
<p class="bulletxb"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>/</strong> division</p>
<p class="indent"><a id="page_245"></a>These can be used in the standard way:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0245-01.jpg" alt="images" width="485" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0245-01.jpg"></p>
<h4 class="h4a">The Remainder (%) Operator (a.k.a. the Modulus Operator)</h4>
<p class="noindentt">One operator you might not be as familiar with is the remainder operator: <code>%</code>. The remainder operator divides the left operand by the right operand, and the result is the remainder, as the following code demonstrates:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0245-02.jpg" alt="images" width="597" height="155" data-mfp-src="/library/view/oca-java-se/9781260011388/p0245-02.jpg"></p>
<p class="indent">Running class <code>MathTest</code> prints the following:</p>
<p class="code1"><code>The result of 15 % 4 is the remainder of 15 divided by 4. The remainder is 3</code></p>
<p class="indent">(Remember: Expressions are evaluated from left to right by default. You can change this sequence, or <em>precedence,</em> by adding parentheses. Also remember that the <code>*</code>, <code>/</code>, and <code>%</code> operators have a higher precedence than the <code>+</code> and <code>-</code> operators.)</p>
<div class="side-exam">
<p class="imaget"><a id="page_246"></a><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>When working with <code>ints</code>, the remainder operator (a.k.a. the modulus operator) and the division operator relate to each other in an interesting way:</em></strong></p>
<p class="bulletxsa"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong><em>The modulus operator throws out <code>everything but</code> the remainder.</em></strong></p>
<p class="bulletxsa"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong><em>The division operator throws out the remainder.</em></strong></p>
</div>
<h4 class="h4a">String Concatenation Operator</h4>
<p class="noindentt">The plus sign can also be used to concatenate two strings together, as we saw earlier (and as we’ll definitely see again):</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0246-01.jpg" alt="images" width="349" height="13" data-mfp-src="/library/view/oca-java-se/9781260011388/p0246-01.jpg"></p>
<p class="indent">String concatenation gets interesting when you combine numbers with <code>String</code>s. Check out the following:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0246-02.jpg" alt="images" width="283" height="73" data-mfp-src="/library/view/oca-java-se/9781260011388/p0246-02.jpg"></p>
<p class="indent">Will the <code>+</code> operator act as a plus sign when adding the <code>int</code> variables <code>b</code> and <code>c</code>? Or will the <code>+</code> operator treat <code>3</code> and <code>7</code> as characters and concatenate them individually? Will the result be <code>String10</code> or <code>String37</code>? Okay, you’ve had long enough to think about it.</p>
<p class="indent">The <code>int</code> values were simply treated as characters and glued on to the right side of the <code>String</code>, giving the result:</p>
<p class="code1"><code>String37</code></p>
<p class="indent">So we could read the previous code as</p>
<p class="indent-a">“Start with the value <code>String</code>, and concatenate the character <code>3</code> (the value of <code>b</code>) to it, to produce a new string <code>String3</code>, and then concatenate the character <code>7</code> (the value of <code>c</code>) to that, to produce a new string <code>String37</code>. Then print it out.”</p>
<p class="indent"><a id="page_247"></a>However, if you put parentheses around the two <code>int</code> variables, as follows,</p>
<p class="code1"><code>System.out.println(a + (b + c));</code></p>
<p class="noindent">you’ll get this:</p>
<p class="code1"><code>String10</code></p>
<p class="indent">Using parentheses causes the <code>(b + c)</code> to evaluate first, so the rightmost <code>+</code> operator functions as the addition operator, given that both operands are <code>int</code> values. The key point here is that within the parentheses, the left-hand operand is not a <code>String</code>. If it were, then the <code>+</code> operator would perform <code>String</code> concatenation. The previous code can be read as</p>
<p class="bq">“Add the values of <code>b and c</code> together, and then take the sum and convert it to a <code>String</code> and concatenate it with the <code>String</code> from variable <code>a</code>.”</p>
<p class="bq">The rule to remember is this:</p>
<p class="bq"><em>If either operand is a</em> <code><em>String</em></code><em>, the + operator becomes a</em> <code><em>String</em></code> <em>concatenation operator. If both operands are numbers, the + operator is the addition operator.</em></p>
<p class="indent">You’ll find that sometimes you might have trouble deciding whether, say, the left-hand operator is a <code>String</code> or not. On the exam, don’t expect it always to be obvious. (Actually, now that we think about it, don’t expect it <em>ever</em> to be obvious.) Look at the following code:</p>
<p class="code1"><code>System.out.println(x.foo() + 7);</code></p>
<p class="noindent">You can’t know how the <code>+</code> operator is being used until you find out what the <code>foo()</code> method returns! If <code>foo()</code> returns a <code>String</code>, then <code>7</code> is concatenated to the returned <code>String</code>. But if <code>foo()</code> returns a number, then the <code>+</code> operator is used to add <code>7</code> to the return value of <code>foo()</code>.</p>
<p class="indent">Finally, you need to know that it’s legal to mush together the compound additive operator (<code>+=</code>) and <code>String</code>s, like so:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0247-01.jpg" alt="images" width="206" height="73" data-mfp-src="/library/view/oca-java-se/9781260011388/p0247-01.jpg"></p>
<p class="indent">Since both times the <code>+=</code> operator was used and the left operand was a <code>String</code>, both operations were concatenations, resulting in</p>
<p class="code1"><code>1234567</code></p>
<div class="side-exam">
<p class="imaget"><a id="page_248"></a><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>If you don’t understand how String concatenation works, especially within a print statement, you could actually fail the exam even if you know the rest of the answers to the questions! Because so many questions ask "What is the result?", you need to know not only the result of the code running but also how that result is printed. Although at least a few questions will directly test your String knowledge, String concatenation shows up in other questions on virtually every objective. Experiment! For example, you might see a line such as this:</em></strong></p>
<p class="imagel"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0248-01.jpg" alt="images" width="292" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0248-01.jpg"></p>
<p class="Text-icon-exam"><strong><em>It prints this:</em></strong></p>
<p class="codea"><code>23</code></p>
<p class="Text-icon-exam"><strong><em>But if the print statement changes to this:</em></strong></p>
<p class="codea"><code>System.out.println(b + 3);</code></p>
<p class="Text-icon-exam"><strong><em>The printed result becomes</em></strong></p>
<p class="codea"><code>5</code></p>
</div>
<h4 class="h4a">Increment and Decrement Operators</h4>
<p class="noindentt">Java has two operators that will increment or decrement a variable by exactly one. These operators are either two plus signs (<code>++</code>) or two minus signs (<code>--</code>):</p>
<p class="bulletxt"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>+</strong><strong>+</strong> Increment (prefix and postfix)</p>
<p class="bulletxb"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<strong>-</strong><strong>-</strong> Decrement (prefix and postfix)</p>
<p class="indent">The operator is placed either before (prefix) or after (postfix) a variable to change its value. Whether the operator comes before or after the operand can change the outcome of an expression. Examine the following:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0248-02.jpg" alt="images" width="569" height="196" data-mfp-src="/library/view/oca-java-se/9781260011388/p0248-02.jpg"></p>
<p class="noindent"><a id="page_249"></a>Notice that in the fourth line of the program the increment operator is <em>after</em> the variable <code>players</code>. That means we’re using the postfix increment operator, which causes <code>players</code> to be incremented by one but only <em>after</em> the value of <code>players</code> is used in the expression. When we run this program, it outputs the following:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0249-01.jpg" alt="images" width="276" height="73" data-mfp-src="/library/view/oca-java-se/9781260011388/p0249-01.jpg"></p>
<p class="noindent">Notice that when the variable is written to the screen, at first it says the value is <code>0</code>. Because we used the postfix increment operator, the increment doesn’t happen until after the <code>players</code> variable is used in the <code>print</code> statement. Get it? The “post” in postfix means <em>after</em>. Line 5 doesn’t increment <code>players</code>; it just outputs its value to the screen, so the newly incremented value displayed is 1. Line 6 applies the prefix increment operator to <code>players</code>, which means the increment happens <em>before</em> the value of the variable is used, so the output is <code>2</code>.</p>
<p class="indent">Expect to see questions mixing the increment and decrement operators with other operators, as in the following example:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0249-02.jpg" alt="images" width="444" height="74" data-mfp-src="/library/view/oca-java-se/9781260011388/p0249-02.jpg"></p>
<p class="noindent">The preceding code prints this:</p>
<p class="code1"><code>x = 3 y = 4</code></p>
<p class="noindent">You can read the code as follows: “If 3 is equal to 2 OR 3 &lt; 4”</p>
<p class="indent">The first expression compares <code>x</code> and <code>y</code>, and the result is <code>false</code>, because the increment on <code>x</code> doesn’t happen until <em>after</em> the <code>==</code> test is made. Next, we increment <code>x</code>, so now <code>x</code> is <code>3</code>. Then we check to see if <code>x</code> is less than <code>y</code>, but we increment <code>y</code> <em>before</em> comparing it with <code>x</code>! So the second logical test is <code>(3 &lt; 4)</code>. The result is <code>true</code>, so the <code>print</code> statement runs.</p>
<p class="indent">As with <code>String</code> concatenation, the increment and decrement operators are used throughout the exam, even on questions that aren’t trying to test your knowledge of how those operators work. You might see them in questions on <code>for</code> loops, exceptions, or even threads. Be ready.</p>
<div class="side-exam">
<p class="imaget"><a id="page_250"></a><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>Look out for questions that use the increment or decrement operators on a <code>final</code> variable. Because final variables can’t be changed, the increment and decrement operators can’t be used with them, and any attempt to do so will result in a compiler error. The following code won’t compile:</em></strong></p>
<p class="imagel"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0250-01.jpg" alt="images" width="149" height="33" data-mfp-src="/library/view/oca-java-se/9781260011388/p0250-01.jpg"></p>
<p class="Text-icon-exam"><strong><em>It produces this error:</em></strong></p>
<p class="imagel"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0250-02.jpg" alt="images" width="515" height="42" data-mfp-src="/library/view/oca-java-se/9781260011388/p0250-02.jpg"></p>
<p class="Text-icon-exam"><strong><em>You can expect a violation like this to be buried deep in a complex piece of code. If you spot it, you know the code won’t compile, and you can move on without working through the rest of the code.</em></strong></p>
<p class="Text-icon-exami"><strong><em>This question might seem to be testing you on some complex arithmetic operator trivia, when, in fact, it’s testing you on your knowledge of the <code>final</code> modifier.</em></strong></p>
</div>
<h4 class="h4"><a id="ch04lev2sec5"></a>Conditional Operator</h4>
<p class="noindentt">The conditional operator is a <em>ternary</em> operator (it has <em>three</em> operands) and is used to evaluate <code>boolean</code> expressions—much like an <code>if</code> statement, except instead of executing a block of code if the test is <code>true</code>, a conditional operator will assign a value to a variable. In other words, the goal of the conditional operator is to decide which of two values to assign to a variable. This operator is constructed using a <code>?</code> (question mark) and a <code>:</code> (colon). The parentheses are optional. Here is its structure:</p>
<p class="code1"><code>x = (boolean expression) ? value to assign if true : value to assign if false</code></p>
<p class="indent">Let’s take a look at a conditional operator in code:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0250-03.jpg" alt="images" width="569" height="155" data-mfp-src="/library/view/oca-java-se/9781260011388/p0250-03.jpg"></p>
<p class="noindent">You can read the preceding code as “Set <code>numOfPets</code> equal to <code>3</code>“.</p>
<p class="indent"><a id="page_251"></a>Next we’re going to assign a <code>String</code> to the status variable. If <code>numOfPets</code> is less than <code>4</code>, assign <code>“Pet limit not exceeded”</code> to the <code>status</code> variable; otherwise, assign <code>“too many pets”</code> to the <code>status</code> variable.</p>
<p class="indent">A conditional operator starts with a <code>boolean</code> operation, followed by two possible values for the variable to the left of the assignment (<code>=</code>) operator. The first value (the one to the left of the colon) is assigned if the conditional (<code>boolean</code>) test is <code>true</code>, and the second value is assigned if the conditional test is <code>false</code>. You can even nest conditional operators into one statement:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0251-01.jpg" alt="images" width="473" height="195" data-mfp-src="/library/view/oca-java-se/9781260011388/p0251-01.jpg"></p>
<p class="indent">Don’t expect many questions using conditional operators, but you might get one.</p>
<h4 class="h4"><a id="ch04lev2sec6"></a>Logical Operators</h4>
<p class="noindentt">The exam objectives specify six “logical” operators (<code>&amp;</code>, <code>|</code>, <code>^</code>, <code>!</code>, <code>&amp;&amp;</code>, and <code>||</code>). Some Oracle documentation uses other terminology for these operators, but for our purposes and in the exam objectives, these six are the logical operators.</p>
<h4 class="h4a">Bitwise Operators (Not an Exam Topic!)</h4>
<p class="noindentt">Okay, this is going to be confusing. Of the six logical operators just listed, three of them (<code>&amp;</code>, <code>|</code>, and <code>^</code>) can also be used as “bitwise” operators. Bitwise operators were included in previous versions of the exam, but they’re NOT on the Java 6, Java 7, or Java 8 exam. We bring them up here just so you have a more complete picture of the logical operators.</p>
<p class="indent">Here are several legal statements that use bitwise operators:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0251-02.jpg" alt="images" width="426" height="72" data-mfp-src="/library/view/oca-java-se/9781260011388/p0251-02.jpg"></p>
<p class="indent"><a id="page_252"></a>Bitwise operators compare two variables bit by bit and return a variable whose bits have been set based on whether the two variables being compared had respective bits that were either both “on” (<code>&amp;</code>), one or the other “on” (<code>|</code>), or exactly one “on” (<code>^</code>). By the way, when we run the preceding code, we get</p>
<p class="code1"><code>0 15 1</code></p>
<div class="side-exam">
<p class="imaget"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>Having said all this about bitwise operators, the key thing to remember</em></strong></p>
<p class="Text-icon-exam"><strong><em>BITWISE OPERATORS ARE NOT ON THE Java 6, Java 7, or Java 8 EXAM!</em></strong></p>
</div>
<h4 class="h4a">Short-Circuit Logical Operators</h4>
<p class="noindentt">Five logical operators on the exam are used to evaluate statements that contain more than one <code>boolean</code> expression. The most commonly used of the five are the two <em>short-circuit</em> logical operators:</p>
<p class="bulletxt"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code>&amp;</code><code>&amp;</code> Short-circuit AND</p>
<p class="bulletxb"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code>|</code><code>|</code> Short-circuit OR</p>
<p class="indent">They are used to link little <code>boolean</code> expressions together to form bigger <code>boolean</code> expressions. The <code>&amp;&amp;</code> and <code>||</code> operators evaluate only <code>boolean</code> values. For an AND (<code>&amp;&amp;</code>) expression to be <code>true</code>, both operands must be <code>true</code>. For example:</p>
<p class="code1"><code>if ((2 &lt; 3) &amp;&amp; (3 &lt; 4)) { }</code></p>
<p class="noindent">The preceding expression evaluates to <code>true</code> because <em>both</em> operand one <code>(2 &lt; 3)</code> and operand two <code>(3 &lt; 4)</code> evaluate to <code>true</code>.</p>
<p class="indent"><em>The short-circuit feature of the</em> <code>&amp;&amp;</code> <em>operator is so named because it doesn’t waste its time on pointless evaluations</em>. A short-circuit <code>&amp;&amp;</code> evaluates the left side of the operation first (operand one), and if it resolves to <code>false</code>, the <code>&amp;&amp;</code> operator doesn’t bother looking at the right side of the expression (operand two) since the <code>&amp;&amp;</code> operator already <em>knows</em> that the complete expression can’t possibly be <code>true</code>.</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0252-01.jpg" alt="images" width="607" height="127" data-mfp-src="/library/view/oca-java-se/9781260011388/p0252-01.jpg"></p>
<p class="indent"><a id="page_253"></a>When we run the preceding code, the <strong>assignment</strong> <code>(b2 = true)</code> never runs because of the short-circuit operator, so the output is</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0253-01.jpg" alt="images" width="122" height="30" data-mfp-src="/library/view/oca-java-se/9781260011388/p0253-01.jpg"></p>
<p class="indent">The <code>||</code> operator is similar to the <code>&amp;&amp;</code> operator, except that it evaluates to <code>true</code> if EITHER of the operands is true. If the first operand in an OR operation is <code>true</code>, the result will be <code>true</code>, so the short-circuit <code>||</code> doesn’t waste time looking at the right side of the equation. If the first operand is <code>false</code>, however, the short-circuit <code>||</code> has to evaluate the second operand to see if the result of the OR operation will be <code>true</code> or <code>false</code>. Pay close attention to the following example; you’ll see quite a few questions like this on the exam:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0253-02.jpg" alt="images" width="445" height="393" data-mfp-src="/library/view/oca-java-se/9781260011388/p0253-02.jpg"></p>
<p class="indent">What is the result?</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0253-03.jpg" alt="images" width="133" height="90" data-mfp-src="/library/view/oca-java-se/9781260011388/p0253-03.jpg"></p>
<p class="indent"><a id="page_254"></a>Here’s what happened when the <code>main()</code> method ran:</p>
<p class="numst">1.&nbsp;When we hit line 3, the first operand in the <code>||</code> expression (in other words, the <em>left</em> side of the <code>||</code> operation) is evaluated.</p>
<p class="nums">2.&nbsp;The <code>isItSmall(3)</code> method is invoked, prints <code>“i &lt; 5”</code>, and returns <code>true</code>.</p>
<p class="nums">3.&nbsp;Because the <em>first</em> operand in the <code>||</code> expression on line 3 is <code>true</code>, the <code>||</code> operator doesn’t bother evaluating the second operand. So we never see the <code>“i &gt;= 5”</code> that would have printed had the <em>second</em> operand been evaluated (which would have invoked <code>isItSmall(7)</code>).</p>
<p class="nums">4.&nbsp;Line 6 is evaluated, beginning with the <em>first</em> operand in the <code>||</code> expression.</p>
<p class="nums">5.&nbsp;The <code>isItSmall(6)</code> method is called, prints <code>“i &gt;= 5”</code>, and returns <code>false</code>.</p>
<p class="nums">6.&nbsp;Because the <em>first</em> operand in the <code>||</code> expression on line 6 is <code>false</code>, the <code>||</code> operator can’t skip the <em>second</em> operand; there’s still a chance the expression can be <code>true</code>, if the <em>second</em> operand evaluates to <code>true</code>.</p>
<p class="nums">7.&nbsp;The <code>isItSmall(9)</code> method is invoked and prints <code>“i &gt;= 5”</code>.</p>
<p class="numsb">8.&nbsp;The <code>isItSmall(9)</code> method returns <code>false</code>, so the expression on line 6 is <code>false</code>, and thus line 7 never executes.</p>
<div class="side-exam">
<p class="imaget"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/examwatch.jpg" alt="Images" width="100" height="51" data-mfp-src="/library/view/oca-java-se/9781260011388/examwatch.jpg"></p>
<p class="Text-icon-exam"><strong><em>The</em> || <em>and &amp;&amp; operators work only with boolean operands. The exam may try to fool you by using integers with these operators:</em></strong></p>
<p class="codea"><code>if (5 &amp;&amp; 6) { }</code></p>
<p class="Text-icon-exam"><strong><em>It looks as though we’re trying to do a bitwise AND on the bits representing the integers 5 and 6, but the code won’t even compile.</em></strong></p>
</div>
<h4 class="h4a">Logical Operators (not Short-Circuit)</h4>
<p class="noindentt">There are two <em>non-short-circuit</em> logical operators:</p>
<p class="bulletxt"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code>&amp;</code> Non-short-circuit AND</p>
<p class="bulletxb"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code>|</code> Non-short-circuit OR</p>
<p class="indent"><a id="page_255"></a>These operators are used in logical expressions just like the <code>&amp;&amp;</code> and <code>||</code> operators are used, but because they aren’t the short-circuit operators, they evaluate both sides of the expression—always! They’re inefficient. For example, even if the <em>first</em> operand (left side) in an <code>&amp;</code> expression is <code>false</code>, the <em>second</em> operand will still be evaluated—even though it’s now impossible for the result to be <code>true</code>! And the <code>|</code> is just as inefficient: if the <em>first</em> operand is <code>true</code>, the Java Virtual Machine (JVM) still plows ahead and evaluates the <em>second</em> operand even when it knows the expression will be <code>true</code> regardless.</p>
<p class="indent">You’ll find a lot of questions on the exam that use both the short-circuit and non-short-circuit logical operators. You’ll have to know exactly which operands are evaluated and which are not, because the result will vary depending on whether the second operand in the expression is evaluated. Consider this,</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0255-01.jpg" alt="images" width="514" height="34" data-mfp-src="/library/view/oca-java-se/9781260011388/p0255-01.jpg"></p>
<p class="noindent">versus this:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0255-02.jpg" alt="images" width="504" height="34" data-mfp-src="/library/view/oca-java-se/9781260011388/p0255-02.jpg"></p>
<h4 class="h4a">Logical Operators ^ and !</h4>
<p class="noindent">The last two logical operators on the exam are</p>
<p class="bulletxt"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code><strong>^</strong></code> Exclusive-OR (XOR)</p>
<p class="bulletxb"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;<code><strong>!</strong></code> Boolean invert</p>
<p class="indent">The <code>^</code> (exclusive-OR) operator evaluates only <code>boolean</code> values. The <code>^</code> operator is related to the non-short-circuit operators we just reviewed, in that it always evaluates <em>both</em> the left and right operands in an expression. For an exclusive-OR (<code>^</code>) expression to be <code>true</code>, EXACTLY one operand must be <code>true</code>. This example,</p>
<p class="code1"><code>System.out.println(“xor ” + ((2 &lt; 3) ^ (4 &gt; 3)));</code></p>
<p class="noindent">produces this output:</p>
<p class="code1"><code>xor false</code></p>
<p class="indent">The preceding expression evaluates to <code>false</code> because BOTH operand one <code>(2 &lt; 3)</code> and operand two <code>(4 &gt; 3)</code> evaluate to <code>true</code>.</p>
<p class="indent"><a id="page_256"></a>The <code>!</code> (boolean invert) operator returns the opposite of a boolean’s current value. The following statement,</p>
<p class="code1"><code>if(!(7 == 5)) { System.out.println(“not equal”); }</code></p>
<p class="noindent">can be read “If it’s not true that 7 <code>==</code> 5,” and the statement produces this output:</p>
<p class="code1"><code>not equal</code></p>
<p class="indent">Here’s another example using booleans:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0256-01.jpg" alt="images" width="436" height="53" data-mfp-src="/library/view/oca-java-se/9781260011388/p0256-01.jpg"></p>
<p class="noindent">It produces this output:</p>
<p class="code1"><code>! true false</code></p>
<p class="indent">In the preceding example, notice that the <code>&amp;</code> test succeeded (printing <code>true</code>) and that the value of the <code>boolean</code> variable <code>f</code> did not change, so it printed <code>false</code>.</p>
<h4 class="h4"><a id="ch04lev2sec7"></a>Operator Precedence</h4>
<p class="noindentt">The OCA 8 exam has reintroduced the topic of operator precedence. As you probably already know but will definitely see demonstrated in this section, when several operators are used in combination, the order in which they are evaluated can alter the result of the expression.</p>
<h4 class="h4a">Operator Precedence Rant</h4>
<p class="noindent">Allow us to rant for a minute here. Memorizing operator precedence was on the old SCJP 1.2 exam about 15 years ago. Starting with the SCJP 1.4 exam, and for all the exams until the OCA 8, operator precedence has not been on the exam. For a glorious 15 years, candidates didn’t have to do this bit of memorization. Sadly, this topic snuck its way back into the exam for OCA 8. Why do we care so much about this? Take a look at this code:</p>
<p class="code1"><code>System.out.println(true &amp; false == false | true);</code></p>
<p class="noindent"><a id="page_257"></a>What result would you expect? Imagine a more realistic version, evaluating some booleans:</p>
<p class="code1"><code>System.out.println(b1 &amp; b2 == b3 | b4);</code></p>
<p class="indent">What would you guess the programmer’s intention was here? There are two likely scenarios:</p>
<p class="noindentt"><span class="fonts"><strong>Scenario 1: (b1 &amp; b2) == (b3 | b4)</strong></span> If this was the programmer’s intention, then he just created a bug.</p>
<p class="noindentt"><span class="fonts"><strong>Scenario 2: b1 &amp; (b2 == b3) | b4</strong></span> If this was the programmer’s intention, then the code will work as intended, but his boss and fellow workers will want to strangle him.</p>
<p class="indent">This is a long-winded way to say that when you’re writing code, you shouldn’t rely on everyone’s memory of operator precedence. You should just use parentheses like civilized people do.</p>
<h4 class="h4a">The Actual Beginning of the Operator Precedence Section</h4>
<p class="noindentt"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ch4tab2">Table 4-2</a> lists the most commonly used operators and their relative precedence, starting at the top with the highest precedence operators and ending at the bottom with the lowest. (Note, not all of Java’s operators are in this table!)</p>
<p class="tabcap"><span class="figs"><strong>TABLE 4-2</strong></span>&nbsp;&nbsp;&nbsp;Precedence Hierarchy of Common Operators (from Highest to Lowest)</p>
<p class="image-t"><a id="ch4tab2"></a><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/t0257-01.jpg" alt="images" width="826" height="329" data-mfp-src="/library/view/oca-java-se/9781260011388/t0257-01.jpg"></p>
<p class="indent"><a id="page_258"></a>JavaRanch (we know, we know, “Coderanch”) moderator Fritz Walraven shared this tip with us. We like it, and we’re passing it along to you: for the table above, you might make up a word like “UMARELSA,” or a sentence using those first letters, to help you remember the precedence rules!</p>
<p class="indent">There are three important general rules for determining how Java will evaluate expressions with operators:</p>
<p class="bulletxt"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;When two operators of the same precedence are in the same expression, Java evaluates the expression from left to right.</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;When parts of an expression are placed in parentheses, those parts are evaluated first.</p>
<p class="bulletxb"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs.jpg" alt="images" width="11" height="10" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs.jpg">&nbsp;&nbsp;&nbsp;When parentheses are nested, the innermost parentheses are evaluated first.</p>
<p class="indent">A good way to burn these precedence rules into your brain is to—as always—write some test code and play around with it. We’ve added an example of some test code that demonstrates several of the precedence hierarchy rules listed here. As you can see, we often compared parentheses-free expressions with their parentheses-rich counterparts to prove the rules:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0258-01.jpg" alt="images" width="684" height="202" data-mfp-src="/library/view/oca-java-se/9781260011388/p0258-01.jpg"></p>
<p class="indent">And to repeat, the output is:</p>
<p class="code1"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0258-02.jpg" alt="images" width="94" height="68" data-mfp-src="/library/view/oca-java-se/9781260011388/p0258-02.jpg"></p>
<p class="noindent">We’re so sorry that you need to memorize this stuff, but if you master what’s in this short section, you should be able to handle whatever weird precedence-related questions the exam throws at you.</p>
<h3 class="h3"><a id="ch04lev1sec2"></a><a id="page_259"></a><span class="under">CERTIFICATION SUMMARY</span></h3>
<p class="noindentt">If you’ve studied this chapter diligently, you should have a firm grasp on Java operators, and you should understand what equality means when tested with the <code>==</code> operator. Let’s review the highlights of what you’ve learned in this chapter.</p>
<p class="indent">The logical operators (<code>&amp;&amp;</code>, <code>||</code>, <code>&amp;</code>, <code>|</code>, and <code>^</code>) can be used only to evaluate two <code>boolean</code> expressions. The difference between <code>&amp;&amp;</code> and <code>&amp;</code> is that the <code>&amp;&amp;</code> operator won’t bother testing the right operand if the left evaluates to <code>false</code>, because the result of the <code>&amp;&amp;</code> expression can never be <code>true</code>. The difference between <code>||</code> and <code>|</code> is that the <code>||</code> operator won’t bother testing the right operand if the left evaluates to <code>true</code> because the result is already known to be <code>true</code> at that point.</p>
<p class="indent">The <code>==</code> operator can be used to compare values of primitives, but it can also be used to determine whether two reference variables refer to the same object.</p>
<p class="indent">The <code>instanceof</code> operator is used to determine whether the object referred to by a reference variable passes the IS-A test for a specified type.</p>
<p class="indent">The <code>+</code> operator is overloaded to perform <code>String</code> concatenation tasks and can also concatenate <code>String</code>s and primitives, but be careful—concatenation can be tricky.</p>
<p class="indent">The conditional operator (a.k.a. the “ternary operator”) has an unusual, three-operand syntax—don’t mistake it for a complex assert statement.</p>
<p class="indent">The <code>++</code> and <code>--</code> operators will be used throughout the exam, and you must pay attention to whether they are prefixed or postfixed to the variable being updated.</p>
<p class="indent">Even though you should use parentheses in real life, for the exam you should memorize <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ch4tab2">Table 4-2</a> so you can determine how code that doesn’t use parentheses for complex expressions will be evaluated, based on Java’s operator-precedence hierarchy.</p>
<p class="indent">Be prepared for a lot of exam questions involving the topics from this chapter. Even within questions testing your knowledge of another objective, the code will frequently use operators, assignments, object and primitive passing, and so on.</p>
<h3 class="h3"><a id="ch04lev1sec3"></a><a id="page_260"></a><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/tic1.jpg" alt="images" width="25" height="28" data-mfp-src="/library/view/oca-java-se/9781260011388/tic1.jpg"> TWO-MINUTE DRILL</h3>
<p class="noindentt">Here are some of the key points from each section in this chapter.</p>
<h4 class="h4a">Relational Operators (OCA Objectives 3.1 and 3.2)</h4>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Relational operators always result in a <code>boolean</code> value (<code>true</code> or <code>false</code>).</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;There are six relational operators: <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>==</code>, and <code>!=</code>. The last two (<code>==</code> and <code>!=</code>) are sometimes referred to as <em>equality operators</em>.</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;When comparing characters, Java uses the Unicode value of the character as the numerical value.</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Equality operators</p>
<p class="bulletxs"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;There are two equality operators: <code>==</code> and <code>!=</code>.</p>
<p class="bulletxs"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Four types of things can be tested: numbers, characters, booleans, and reference variables.</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;When comparing reference variables, <code>==</code> returns <code>true</code> only if both references refer to the same object.</p>
<h4 class="h4a">instanceof Operator (OCA Objective 3.1)</h4>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;<code>i</code><code>nstanceof</code> is for reference variables only; it checks whether the object is of a particular type.</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The <code>instanceof</code> operator can be used only to test objects (or <code>null</code>) against class types that are in the same class hierarchy.</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;For interfaces, an object passes the <code>instanceof</code> test if any of its superclasses implement the interface on the right side of the <code>instanceof</code> operator.</p>
<h4 class="h4a">Arithmetic Operators (OCA Objective 3.1)</h4>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The four primary math operators are add (<code>+</code>), subtract (<code>–</code>), multiply (<code>*</code>), and divide (<code>/</code>).</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The remainder (a.k.a. modulus) operator (<code>%</code>) returns the remainder of a division.</p>
<p class="bulletx"><a id="page_261"></a><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Expressions are evaluated from left to right, unless you add parentheses, or unless some operators in the expression have higher precedence than others.</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The <code>*</code>, <code>/</code>, and <code>%</code> operators have higher precedence than <code>+</code> and <code>–</code>.</p>
<h4 class="h4a">String Concatenation Operator (OCA Objective 3.1)</h4>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;If either operand is a <code>String</code>, the <code>+</code> operator concatenates the operands.</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;If both operands are numeric, the <code>+</code> operator adds the operands.</p>
<h4 class="h4a">Increment/Decrement Operators (OCA Objective 3.1)</h4>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Prefix operators (e.g. <code>--x</code>) run before the value is used in the expression.</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Postfix operators (e.g., <code>x++</code>) run after the value is used in the expression.</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;In any expression, both operands are fully evaluated <em>before</em> the operator is applied.</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Variables marked <code>final</code> cannot be incremented or decremented.</p>
<h4 class="h4a">Ternary (Conditional) Operator (OCA Objective 3.3)</h4>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Returns one of two values based on the state of its <code>boolean</code> expression.</p>
<p class="bulletxs"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Returns the value after the <code>?</code> if the expression is <code>true</code>.</p>
<p class="bulletxs"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Returns the value after the <code>:</code> if the expression is <code>false</code>.</p>
<h4 class="h4a">Logical Operators (OCA Objective 3.1)</h4>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The exam covers six “logical” operators: <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>!</code>, <code>&amp;&amp;</code>, and <code>||</code>.</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;Work with two expressions (except for <code>!</code>) that must resolve to boolean values.</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The <code>&amp;&amp;</code> and <code>&amp;</code> operators return <code>true</code> only if both operands are <code>true</code>.</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The <code>||</code> and | operators return <code>true</code> if either or both operands are <code>true</code>.</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The <code>&amp;&amp;</code> and <code>||</code> operators are known as short-circuit operators.</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The <code>&amp;&amp;</code> operator does not evaluate the right operand if the left operand is <code>false</code>.</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The <code>||</code> does not evaluate the right operand if the left operand is <code>true</code>.</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The <code>&amp;</code> and <code>|</code> operators always evaluate both operands.</p>
<p class="bulletx"><a id="page_262"></a><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The <code>^</code> operator (called the “logical XOR”) returns <code>true</code> if exactly one operand is <code>true</code>.</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;The <code>!</code> operator (called the “inversion” operator) returns the opposite value of the boolean operand it precedes.</p>
<h4 class="h4a">Parentheses and Operator Precedence (OCA Objective 3.1)</h4>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;In real life, use parentheses to clarify your code, and force Java to evaluate expressions as intended.</p>
<p class="bulletx"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxs1.jpg" alt="images" width="12" height="11" data-mfp-src="/library/view/oca-java-se/9781260011388/boxs1.jpg">&nbsp;&nbsp;&nbsp;For the exam, memorize <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ch4tab2">Table 4-2</a> to determine how parentheses-free code will be evaluated.</p>
<h3 class="h3"><a id="ch04lev1sec4"></a><a id="page_263"></a>SELF TEST</h3>
<p class="numst"><a id="ich4q1" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ch4q1"><strong>1.</strong></a>&nbsp;Given:</p>
<p class="code"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0263-01.jpg" alt="images" width="395" height="95" data-mfp-src="/library/view/oca-java-se/9781260011388/p0263-01.jpg"></p>
<p class="numn">What is the result?</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;<code>null</code></p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;<code>life</code></p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;<code>universe</code></p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;<code>everything</code></p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;An exception is thrown at runtime</p>
<p class="numst"><a id="ich4q2" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ch4q2"><strong>2.</strong></a>&nbsp;Given:</p>
<p class="code"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0263-02.jpg" alt="images" width="398" height="254" data-mfp-src="/library/view/oca-java-se/9781260011388/p0263-02.jpg"></p>
<p class="numn">What is the result?</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;<code>true true true</code></p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;<code>true true false</code></p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;<code>false true false</code></p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;<code>false true true</code></p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;<code>false false false</code></p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;An exception will be thrown at runtime</p>
<p class="numst"><a id="page_264"></a><a id="ich4q3" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ch4q3"><strong>3.</strong></a>&nbsp;Given:</p>
<p class="code"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0264-01.jpg" alt="images" width="483" height="175" data-mfp-src="/library/view/oca-java-se/9781260011388/p0264-01.jpg"></p>
<p class="numn">And the command-line invocation:</p>
<p class="code"><code>java Fork live2</code></p>
<p class="numn">What is the result?</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;<code>test case</code></p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;<code>production live2</code></p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;<code>test case live2</code></p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;An exception is thrown at runtime</p>
<p class="numst"><a id="ich4q4" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ch4q4"><strong>4.</strong></a>&nbsp;Given:</p>
<p class="code"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0264-02.jpg" alt="images" width="397" height="194" data-mfp-src="/library/view/oca-java-se/9781260011388/p0264-02.jpg"></p>
<p class="numn">What is the result?</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;<code>9 foo47 86foo</code></p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;<code>9 foo47 4244foo</code></p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;<code>9 foo425 86foo</code></p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;<code>9 foo425 4244foo</code></p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;<code>72 foo47 86foo</code></p>
<p class="numa"><a id="page_265"></a>F.&nbsp;<code>72 foo47 4244foo</code></p>
<p class="numa">G.&nbsp;&nbsp;&nbsp;<code>72 foo425 86foo</code></p>
<p class="numa">H.&nbsp;&nbsp;&nbsp;<code>72 foo425 4244foo</code></p>
<p class="numa">I.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numst"><a id="ich4q5" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ch4q5"><strong>5.</strong></a>&nbsp;<strong>Note</strong>: Here’s another old-style drag-and-drop question…just in case.</p>
<p class="numn">Place the fragments into the code to produce the output <code>33</code>. Note that you must use each fragment exactly once.</p>
<p class="code"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0265-01.jpg" alt="images" width="397" height="271" data-mfp-src="/library/view/oca-java-se/9781260011388/p0265-01.jpg"></p>
<p class="numn">FRAGMENTS:</p>
<p class="code"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0265-02.jpg" alt="images" width="161" height="93" data-mfp-src="/library/view/oca-java-se/9781260011388/p0265-02.jpg"></p>
<p class="numst"><a id="page_266"></a><a id="ich4q6" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ch4q6"><strong>6.</strong></a>&nbsp;Given:</p>
<p class="code"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0266-01.jpg" alt="images" width="398" height="155" data-mfp-src="/library/view/oca-java-se/9781260011388/p0266-01.jpg"></p>
<p class="numn">What is the result? (Choose all that apply.)</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;<code>2 1</code></p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;<code>2 2</code></p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;<code>3 1</code></p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;<code>3 2</code></p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;An exception is thrown at runtime</p>
<p class="numst"><a id="ich4q7" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ch4q7"><strong>7.</strong></a>&nbsp;Given:</p>
<p class="code"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0266-02.jpg" alt="images" width="606" height="234" data-mfp-src="/library/view/oca-java-se/9781260011388/p0266-02.jpg"></p>
<p class="numn">What is the result?</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;<code>same old</code></p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;<code>newly new</code></p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;Compilation fails due to multiple errors</p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;Compilation fails due only to an error on line 7</p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;Compilation fails due only to an error on line 8</p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;Compilation fails due only to an error on line 11</p>
<p class="numa">G.&nbsp;&nbsp;&nbsp;Compilation fails due only to an error on line 13</p>
<p class="numst"><a id="page_267"></a><a id="ich4q8" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ch4q8"><strong>8.</strong></a>&nbsp;Given:</p>
<p class="code"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0267-01.jpg" alt="images" width="444" height="214" data-mfp-src="/library/view/oca-java-se/9781260011388/p0267-01.jpg"></p>
<p class="numn">Which are true? (Choose all that apply.)</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;<code>x</code> will be included in the output</p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;<code>y</code> will be included in the output</p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;<code>z</code> will be included in the output</p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;An exception is thrown at runtime</p>
<p class="numst"><a id="ich4q9" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ch4q9"><strong>9.</strong></a>&nbsp;Given:</p>
<p class="code"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0267-02.jpg" alt="images" width="701" height="195" data-mfp-src="/library/view/oca-java-se/9781260011388/p0267-02.jpg"></p>
<p class="numn">Which two are true about the value of mask and the value of count at line 10? (Choose two.)</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;<code>mask</code> is 0</p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;<code>mask</code> is 1</p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;<code>mask</code> is 2</p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;<code>mask</code> is 10</p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;<code>mask</code> is greater than 10</p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;<code>count</code> is 0</p>
<p class="numa">G.&nbsp;&nbsp;&nbsp;<code>count</code> is greater than 0</p>
<p class="numst"><a id="page_268"></a><a id="ich4q10" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ch4q10"><strong>10.</strong></a>&nbsp;Given:</p>
<p class="code"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0268-01.jpg" alt="images" width="634" height="294" data-mfp-src="/library/view/oca-java-se/9781260011388/p0268-01.jpg"></p>
<p class="numn">What is the result?</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;<code>0</code></p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;<code>01</code></p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;<code>02</code></p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;<code>012</code></p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;An exception is thrown at runtime</p>
<p class="numst"><a id="ich4q11" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ch4q11"><strong>11.</strong></a>&nbsp;Given:</p>
<p class="code"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0268-02.jpg" alt="images" width="682" height="113" data-mfp-src="/library/view/oca-java-se/9781260011388/p0268-02.jpg"></p>
<p class="numn">What is the result? (This is a tricky one. If you want a hint, go take another look at the operator precedence rant in the chapter.)</p>
<p class="numa">A.&nbsp;&nbsp;&nbsp;<code>true true</code></p>
<p class="numa">B.&nbsp;&nbsp;&nbsp;<code>false true</code></p>
<p class="numa">C.&nbsp;&nbsp;&nbsp;<code>true false</code></p>
<p class="numa">D.&nbsp;&nbsp;&nbsp;<code>false false</code></p>
<p class="numa">E.&nbsp;&nbsp;&nbsp;Compilation fails</p>
<p class="numa">F.&nbsp;&nbsp;&nbsp;An exception is thrown at runtime</p>
<h3 class="h3"><a id="ch04lev1sec5"></a><a id="page_269"></a>SELF TEST ANSWERS</h3>
<p class="hanga"><a id="ch4q1" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ich4q1"><strong>1.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>D</strong> is correct. This is a ternary nested in a ternary. Both ternary expressions are false.<br><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, B, C, E,</strong> and <strong>F</strong> are incorrect based on the above. (OCA Objective 3.1 and 3.3)</p>
<p class="hanga"><a id="ch4q2" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ich4q2"><strong>2.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>C</strong> is correct. The <code>==</code> operator tests for reference variable equality, not object equality.<br><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, B, D, E,</strong> and <strong>F</strong> are incorrect based on the above. (OCA Objectives 3.1 and 3.2)</p>
<p class="hanga"><a id="ch4q3" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ich4q3"><strong>3.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>E</strong> is correct. Because the short-circuit (<code>||</code>) is not used, both operands are evaluated. Since <code>args[1]</code> is past the <code>args</code> array bounds, an <code>ArrayIndexOutOfBoundsException</code> is thrown.<br><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, B, C,</strong> and <strong>D</strong> are incorrect based on the above. (OCA Objectives 3.1 and 3.2)</p>
<p class="hanga"><a id="ch4q4" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ich4q4"><strong>4.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>G</strong> is correct. Concatenation runs from left to right, and if either operand is a <code>String</code>, the operands are concatenated. If both operands are numbers, they are added together.<br><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, B, C, D, E, F, H,</strong> and <strong>I</strong> are incorrect based on the above. (OCA Objective 3.1)</p>
<p class="hanga"><a id="ch4q5" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ich4q5"><strong>5.</strong></a>&nbsp;&nbsp;&nbsp;Answer:</p>
<p class="code"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/p0269-01.jpg" alt="images" width="397" height="254" data-mfp-src="/library/view/oca-java-se/9781260011388/p0269-01.jpg"></p>
<p class="hangan">Yeah, we know it’s kind of puzzle-y, but you might encounter something like it on the real exam if Oracle reinstates this type of question. (OCA Objective 3.1)</p>
<p class="hanga"><a id="ch4q6" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ich4q6"><strong>6.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>A</strong> is correct. When dividing <code>int</code>s, remainders are always rounded down.<br><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>B, C, D,</strong> and <strong>E</strong> are incorrect based on the above. (OCA Objective 3.1)</p>
<p class="hanga"><a id="ch4q7" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ich4q7"><strong>7.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>A</strong> is correct. All this syntax is correct. The for-each iterates through the <code>enum</code> using the <code>values()</code> method to return an array. An <code>enum</code> can be compared using either <code>equals()</code> or <code>==</code>. An <code>enum</code> can be used in a ternary operator’s boolean test.<br><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>B</strong>, <strong>C</strong>, <strong>D</strong>, <strong>E</strong>, <strong>F</strong>, and <strong>G</strong> are incorrect based on the above. (OCA Objectives 3.1, 3.2, and 3.3)</p>
<p class="hanga"><a id="page_270"></a><a id="ch4q8" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ich4q8"><strong>8.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>C</strong> is correct. Line 9 uses the modulus operator, which returns the remainder of the division, which in this case is <code>1</code>. Also, line 9 sets <code>b2</code> to <code>false</code>, and it doesn’t test <code>b2</code>’s value. Line 10 would set <code>b2</code> to <code>true</code>; however, the short-circuit operator keeps the expression <code>b2 = true</code> from being executed.<br><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, B, D,</strong> and <strong>E</strong> are incorrect based on the above. (OCA Objectives 3.1, and 3.2)</p>
<p class="hanga"><a id="ch4q9" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ich4q9"><strong>9.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>C</strong> and <strong>F</strong> are correct. At line 7 the <code>||</code> keeps <code>count</code> from being incremented, but the <code>|</code> allows <code>mask</code> to be incremented. At line 8 the <code>^</code> returns true only if exactly one operand is true. At line 9 <code>mask</code> is <code>2</code> and the <code>&amp;&amp;</code> keeps <code>count</code> from being incremented.<br><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, B, D, E,</strong> and <strong>G</strong> are incorrect based on the above. (OCA Objective 3.1)</p>
<p class="hanga1"><a id="ch4q10" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ich4q10"><strong>10.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>D</strong> is correct. First, remember that <code>instanceof</code> can look up through multiple levels of an inheritance tree. Also remember that <code>instanceof</code> is commonly used before attempting a downcast; so in this case, after line 15, it would be possible to say <code>Speedboat s3 = (Speedboat)b2;</code>.<br><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/boxx.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/boxx.jpg"> <strong>A, B, C, E,</strong> and <strong>F</strong> are incorrect based on the above. (OCA Objective 3.1)</p>
<p class="hanga1"><a id="ch4q11" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#ich4q11"><strong>11.</strong></a>&nbsp;&nbsp;&nbsp;<img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>A</strong> is correct. We’re pretty sure you won’t encounter anything as horrible as this on the real exam. But if you got this one correct, pat yourself on the back! The way to tackle a problem like this is to evaluate the expression in stages. In this case you might solve it like so:</p>
<p class="hangan">Stage 1: resolve any use of unary operators</p>
<p class="hangan">Stage 2: resolve any use of multiplication-related operators</p>
<p class="hangan">Stage 3: handle addition and subtraction</p>
<p class="hangan">Stage 4: handle any relationship operators</p>
<p class="hangan">Stage 5: deal with the equality operators</p>
<p class="hangan">Stage 6: deal with the logical operators</p>
<p class="hangan">Stage 7: do the short-circuit operators</p>
<p class="hangan">Stage 8: finally, do the assignment operators</p>
<p class="hangan"><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/ticb.jpg" alt="images" width="12" height="12" data-mfp-src="/library/view/oca-java-se/9781260011388/ticb.jpg">&nbsp;<strong>B</strong>, <strong>C, D, E,</strong> and <strong>F</strong> are incorrect based on the above. (OCA Objective 3.1)</p>
<div class="annotator-outer annotator-viewer viewer annotator-hide">
  <ul class="annotator-widget annotator-listing"></ul>
</div><div class="annotator-modal-wrapper annotator-editor-modal annotator-editor annotator-hide">
	<div class="annotator-outer editor">
		<h2 class="title">Highlight</h2>
		<form class="annotator-widget">
			<ul class="annotator-listing">
			<li class="annotator-item"><textarea id="annotator-field-14" placeholder="Add a note using markdown (optional)" class="js-editor" maxlength="750"></textarea></li></ul>
			<div class="annotator-controls">
				<a class="link-to-markdown" href="https://daringfireball.net/projects/markdown/basics" target="_blank">?</a>
				<ul>
					<li class="delete annotator-hide"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#delete" class="annotator-delete-note button positive">Delete Note</a></li>
					<li class="save"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#save" class="annotator-save annotator-focus button positive">Save Note</a></li>
					<li class="cancel"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#cancel" class="annotator-cancel button">Cancel</a></li>
				</ul>
			</div>
		</form>
	</div>
</div><div class="annotator-modal-wrapper annotator-delete-confirm-modal" style="display: none;">
  <div class="annotator-outer">
    <h2 class="title">Highlight</h2>
      <a class="js-close-delete-confirm annotator-cancel close" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#close">Close</a>
      <div class="annotator-widget">
         <div class="delete-confirm">
            Are you sure you want to permanently delete this note?
         </div>
         <div class="annotator-controls">
            <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#cancel" class="annotator-cancel button js-cancel-delete-confirm">No, I changed my mind</a>
            <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#delete" class="annotator-delete button positive js-delete-confirm">Yes, delete it</a>
         </div>
       </div>
   </div>
</div><div class="annotator-adder" style="display: none;">
	<ul class="adders ">
		
		<li class="copy"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#">Copy</a></li>
		
		<li class="add-highlight"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#">Add Highlight</a></li>
		<li class="add-note"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#">
			
				Add Note
			
		</a></li>
		
	</ul>
</div></div></div>



  <div class="t-sbo-prev sbo-prev sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch03.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">3&nbsp;Assignments</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch05.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">5&nbsp;Flow Control and Exceptions</div>
        </a>
    
  
  </div>

</section>
  </div>
<section class="sbo-saved-archives"></section>



          
          
  




    
    
      <div id="js-subscribe-nag" class="subscribe-nag clearfix trial-panel t-subscribe-nag collapsed slideUp">
        
        
          
          

          
            <p>You have 7 days left in your trial, Haridave. Subscribe today. <a href="https://www.safaribooksonline.com/subscribe/" class="ga-active-trial-subscribe-nag">See pricing options.</a></p>
          
        
        

      </div>

    
    



        
      </div>
      




  <footer class="pagefoot t-pagefoot" style="padding-bottom: 69px;">
    <a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#" class="icon-up" style="display: block;"><div class="visuallyhidden">Back to top</div></a>
    <ul class="js-footer-nav">
      
        <li><a class="t-recommendations-footer" href="https://www.safaribooksonline.com/r/">Recommended</a></li>
      
      <li>
      
      <a class="t-queue-footer" href="https://www.safaribooksonline.com/s/">Queue</a>
      
      </li>
      
        <li><a class="t-recent-footer" href="https://www.safaribooksonline.com/history/">History</a></li>
        <li><a class="t-topics-footer" href="https://www.safaribooksonline.com/topics?q=*&amp;limit=21">Topics</a></li>
      
      
        <li><a class="t-tutorials-footer" href="https://www.safaribooksonline.com/tutorials/">Tutorials</a></li>
      
      <li><a class="t-settings-footer js-settings" href="https://www.safaribooksonline.com/u/">Settings</a></li>
      <li class="full-support"><a href="https://www.safaribooksonline.com/public/support">Support</a></li>
      <li><a href="https://www.safaribooksonline.com/apps/">Get the App</a></li>
      <li><a href="https://www.safaribooksonline.com/accounts/logout/">Sign Out</a></li>
    </ul>
    <span class="copyright">© 2017 <a href="https://www.safaribooksonline.com/" target="_blank">Safari</a>.</span>
    <a href="https://www.safaribooksonline.com/terms/">Terms of Service</a> /
    <a href="https://www.safaribooksonline.com/privacy/">Privacy Policy</a>
  </footer>

<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","queueTime":0,"licenseKey":"510f1a6865","errorBeacon":"bam.nr-data.net","agent":"","applicationTime":579,"applicationID":"3275661","transactionName":"YgdaZ0NSW0cEB0RdWltNfkZfUEFdCgofXFBHDVYdR1pQQxZeRl1QQj1aWkU="}</script>


    

    <script src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(2)" charset="utf-8"></script>
    <script src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(3)" charset="utf-8"></script><script type="text/javascript" id="">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","https://connect.facebook.net/en_US/fbevents.js");fbq("init","1732687426968531");fbq("track","PageView");</script>
<noscript>&lt;img height="1" width="1" style="display:none" src="https://www.facebook.com/tr?id=1732687426968531&amp;amp;ev=PageView&amp;amp;noscript=1"&gt;</noscript><div style="width:0px; height:0px; display:none; visibility:hidden;" id="batBeacon0.79713329937001"><img style="width:0px; height:0px; display:none; visibility:hidden;" id="batBeacon0.9495598444101674" width="0" height="0" alt="" src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/0"></div>
  

<script src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(4)" type="text/javascript"></script><script src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/saved_resource(5)" type="text/javascript"></script><div class="annotator-notice">Sorry we could not read the annotations from the store</div><div class="font-flyout" style="top: 200.003px; left: 1288px;"><div class="font-controls-panel">
	<div class="nightmodes">
		<ul>
			<li class="day"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#" id="day-mode" title="Day Mode">
				<i class="fa fa-sun-o"></i>
				<span>Day Mode</span></a></li>
			<li class="cloudy"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#" id="cloudy-mode" title="Cloudy Mode">
				<i class="fa fa-cloud"></i>
				<span>Cloud Mode</span>
			</a></li>
			<li class="night"><a href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#" id="night-mode" title="Night Mode">
				<i class="fa fa-moon-o"></i>
				<span>Night Mode</span>
			</a></li>
		</ul>
	</div>

	<div class="font-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-font left"></i>
			<span class="filler" style="width: 50%;"></span>
			<div id="js-font-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle" style="position: relative; left: 80px;"></div>
			<i class="fa fa-font right"></i>
		</div>
	</div>

	<div class="column-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-compress left"></i>
			<span class="filler" style="width: 50%;"></span>
			<div id="js-column-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle" style="position: relative; left: 80px;"></div>
			<i class="fa fa-expand right"></i>
		</div>
	</div>

	<a id="reset" class="button" href="https://www.safaribooksonline.com/library/view/oca-java-se/9781260011388/ch04.html#">Reset</a>
</div>
</div><img src="./4 Operators - OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808)_files/seg" width="1" height="1" border="0" alt="" style="display: none;"></body></html>